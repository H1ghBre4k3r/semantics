/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kexpressions.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.BooleanAnnotation;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.FloatAnnotation;
import de.cau.cs.kieler.annotations.IntAnnotation;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.annotations.serializer.AnnotationsSemanticSequencer;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractKExpressionsSemanticSequencer extends AnnotationsSemanticSequencer {

	@Inject
	private KExpressionsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.BOOLEAN_ANNOTATION:
				sequence_KeyBooleanValueAnnotation(context, (BooleanAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.FLOAT_ANNOTATION:
				sequence_KeyFloatValueAnnotation(context, (FloatAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.INT_ANNOTATION:
				sequence_KeyIntValueAnnotation(context, (IntAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Root returns OperatorExpression
	 *     Expression returns OperatorExpression
	 *     BoolExpression returns OperatorExpression
	 *     LogicalOrExpression returns OperatorExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalAndExpression returns OperatorExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseOrExpression returns OperatorExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseAndExpression returns OperatorExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     CompareOperation returns OperatorExpression
	 *     CompareOperation.OperatorExpression_1_0 returns OperatorExpression
	 *     NotOrValuedExpression returns OperatorExpression
	 *     NotExpression returns OperatorExpression
	 *     ValuedExpression returns OperatorExpression
	 *     AddExpression returns OperatorExpression
	 *     AddExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SubExpression returns OperatorExpression
	 *     SubExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultExpression returns OperatorExpression
	 *     MultExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     DivExpression returns OperatorExpression
	 *     DivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ModExpression returns OperatorExpression
	 *     ModExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     NegExpression returns OperatorExpression
	 *     AtomicExpression returns OperatorExpression
	 *     AtomicValuedExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=LogicalOrExpression_OperatorExpression_1_0 (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)+) | 
	 *         (subExpressions+=LogicalAndExpression_OperatorExpression_1_0 (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)+) | 
	 *         (subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 (operator=BitwiseOrOperator subExpressions+=BitwiseAndExpression)+) | 
	 *         (subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 (operator=BitwiseAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=AddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=SubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=MultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 (operator=DivOperator subExpressions+=ModExpression)+) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 (operator=ModOperator subExpressions+=AtomicValuedExpression)+) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression)
	 *     )
	 */
	protected void sequence_AddExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns BoolValue
	 *     Expression returns BoolValue
	 *     BoolExpression returns BoolValue
	 *     LogicalOrExpression returns BoolValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns BoolValue
	 *     LogicalAndExpression returns BoolValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns BoolValue
	 *     BitwiseOrExpression returns BoolValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns BoolValue
	 *     BitwiseAndExpression returns BoolValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns BoolValue
	 *     CompareOperation returns BoolValue
	 *     CompareOperation.OperatorExpression_1_0 returns BoolValue
	 *     NotOrValuedExpression returns BoolValue
	 *     NotExpression returns BoolValue
	 *     ValuedExpression returns BoolValue
	 *     AddExpression returns BoolValue
	 *     AddExpression.OperatorExpression_1_0 returns BoolValue
	 *     SubExpression returns BoolValue
	 *     SubExpression.OperatorExpression_1_0 returns BoolValue
	 *     MultExpression returns BoolValue
	 *     MultExpression.OperatorExpression_1_0 returns BoolValue
	 *     DivExpression returns BoolValue
	 *     DivExpression.OperatorExpression_1_0 returns BoolValue
	 *     ModExpression returns BoolValue
	 *     ModExpression.OperatorExpression_1_0 returns BoolValue
	 *     NegExpression returns BoolValue
	 *     AtomicExpression returns BoolValue
	 *     AtomicValuedExpression returns BoolValue
	 *     BoolValue returns BoolValue
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_BoolValue(ISerializationContext context, BoolValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.BOOL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.BOOL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolValueAccess().getValueBOOLEANTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Root returns FloatValue
	 *     Expression returns FloatValue
	 *     BoolExpression returns FloatValue
	 *     LogicalOrExpression returns FloatValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns FloatValue
	 *     LogicalAndExpression returns FloatValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns FloatValue
	 *     BitwiseOrExpression returns FloatValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns FloatValue
	 *     BitwiseAndExpression returns FloatValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns FloatValue
	 *     CompareOperation returns FloatValue
	 *     CompareOperation.OperatorExpression_1_0 returns FloatValue
	 *     NotOrValuedExpression returns FloatValue
	 *     NotExpression returns FloatValue
	 *     ValuedExpression returns FloatValue
	 *     AddExpression returns FloatValue
	 *     AddExpression.OperatorExpression_1_0 returns FloatValue
	 *     SubExpression returns FloatValue
	 *     SubExpression.OperatorExpression_1_0 returns FloatValue
	 *     MultExpression returns FloatValue
	 *     MultExpression.OperatorExpression_1_0 returns FloatValue
	 *     DivExpression returns FloatValue
	 *     DivExpression.OperatorExpression_1_0 returns FloatValue
	 *     ModExpression returns FloatValue
	 *     ModExpression.OperatorExpression_1_0 returns FloatValue
	 *     NegExpression returns FloatValue
	 *     AtomicExpression returns FloatValue
	 *     AtomicValuedExpression returns FloatValue
	 *     FloatValue returns FloatValue
	 *
	 * Constraint:
	 *     value=FLOAT
	 */
	protected void sequence_FloatValue(ISerializationContext context, FloatValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.FLOAT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.FLOAT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Root returns FunctionCall
	 *     Expression returns FunctionCall
	 *     BoolExpression returns FunctionCall
	 *     LogicalOrExpression returns FunctionCall
	 *     LogicalOrExpression.OperatorExpression_1_0 returns FunctionCall
	 *     LogicalAndExpression returns FunctionCall
	 *     LogicalAndExpression.OperatorExpression_1_0 returns FunctionCall
	 *     BitwiseOrExpression returns FunctionCall
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns FunctionCall
	 *     BitwiseAndExpression returns FunctionCall
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns FunctionCall
	 *     CompareOperation returns FunctionCall
	 *     CompareOperation.OperatorExpression_1_0 returns FunctionCall
	 *     NotOrValuedExpression returns FunctionCall
	 *     NotExpression returns FunctionCall
	 *     ValuedExpression returns FunctionCall
	 *     AddExpression returns FunctionCall
	 *     AddExpression.OperatorExpression_1_0 returns FunctionCall
	 *     SubExpression returns FunctionCall
	 *     SubExpression.OperatorExpression_1_0 returns FunctionCall
	 *     MultExpression returns FunctionCall
	 *     MultExpression.OperatorExpression_1_0 returns FunctionCall
	 *     DivExpression returns FunctionCall
	 *     DivExpression.OperatorExpression_1_0 returns FunctionCall
	 *     ModExpression returns FunctionCall
	 *     ModExpression.OperatorExpression_1_0 returns FunctionCall
	 *     NegExpression returns FunctionCall
	 *     AtomicExpression returns FunctionCall
	 *     AtomicValuedExpression returns FunctionCall
	 *     FunctionCall returns FunctionCall
	 *
	 * Constraint:
	 *     (functionName=ExtendedID (parameters+=Parameter parameters+=Parameter*)?)
	 */
	protected void sequence_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns IntValue
	 *     Expression returns IntValue
	 *     BoolExpression returns IntValue
	 *     LogicalOrExpression returns IntValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns IntValue
	 *     LogicalAndExpression returns IntValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns IntValue
	 *     BitwiseOrExpression returns IntValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns IntValue
	 *     BitwiseAndExpression returns IntValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns IntValue
	 *     CompareOperation returns IntValue
	 *     CompareOperation.OperatorExpression_1_0 returns IntValue
	 *     NotOrValuedExpression returns IntValue
	 *     NotExpression returns IntValue
	 *     ValuedExpression returns IntValue
	 *     AddExpression returns IntValue
	 *     AddExpression.OperatorExpression_1_0 returns IntValue
	 *     SubExpression returns IntValue
	 *     SubExpression.OperatorExpression_1_0 returns IntValue
	 *     MultExpression returns IntValue
	 *     MultExpression.OperatorExpression_1_0 returns IntValue
	 *     DivExpression returns IntValue
	 *     DivExpression.OperatorExpression_1_0 returns IntValue
	 *     ModExpression returns IntValue
	 *     ModExpression.OperatorExpression_1_0 returns IntValue
	 *     NegExpression returns IntValue
	 *     AtomicExpression returns IntValue
	 *     AtomicValuedExpression returns IntValue
	 *     IntValue returns IntValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntValue(ISerializationContext context, IntValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.INT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.INT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     ((pureOutput?='!'? callByReference?='&')? expression=Expression)
	 */
	protected void sequence_Parameter(ISerializationContext context, de.cau.cs.kieler.kexpressions.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns StringValue
	 *     Expression returns StringValue
	 *     BoolExpression returns StringValue
	 *     LogicalOrExpression returns StringValue
	 *     LogicalOrExpression.OperatorExpression_1_0 returns StringValue
	 *     LogicalAndExpression returns StringValue
	 *     LogicalAndExpression.OperatorExpression_1_0 returns StringValue
	 *     BitwiseOrExpression returns StringValue
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns StringValue
	 *     BitwiseAndExpression returns StringValue
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns StringValue
	 *     CompareOperation returns StringValue
	 *     CompareOperation.OperatorExpression_1_0 returns StringValue
	 *     NotOrValuedExpression returns StringValue
	 *     NotExpression returns StringValue
	 *     ValuedExpression returns StringValue
	 *     AddExpression returns StringValue
	 *     AddExpression.OperatorExpression_1_0 returns StringValue
	 *     SubExpression returns StringValue
	 *     SubExpression.OperatorExpression_1_0 returns StringValue
	 *     MultExpression returns StringValue
	 *     MultExpression.OperatorExpression_1_0 returns StringValue
	 *     DivExpression returns StringValue
	 *     DivExpression.OperatorExpression_1_0 returns StringValue
	 *     ModExpression returns StringValue
	 *     ModExpression.OperatorExpression_1_0 returns StringValue
	 *     NegExpression returns StringValue
	 *     AtomicExpression returns StringValue
	 *     AtomicValuedExpression returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Root returns TextExpression
	 *     Expression returns TextExpression
	 *     BoolExpression returns TextExpression
	 *     LogicalOrExpression returns TextExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns TextExpression
	 *     LogicalAndExpression returns TextExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns TextExpression
	 *     BitwiseOrExpression returns TextExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns TextExpression
	 *     BitwiseAndExpression returns TextExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns TextExpression
	 *     CompareOperation returns TextExpression
	 *     CompareOperation.OperatorExpression_1_0 returns TextExpression
	 *     NotOrValuedExpression returns TextExpression
	 *     NotExpression returns TextExpression
	 *     ValuedExpression returns TextExpression
	 *     AddExpression returns TextExpression
	 *     AddExpression.OperatorExpression_1_0 returns TextExpression
	 *     SubExpression returns TextExpression
	 *     SubExpression.OperatorExpression_1_0 returns TextExpression
	 *     MultExpression returns TextExpression
	 *     MultExpression.OperatorExpression_1_0 returns TextExpression
	 *     DivExpression returns TextExpression
	 *     DivExpression.OperatorExpression_1_0 returns TextExpression
	 *     ModExpression returns TextExpression
	 *     ModExpression.OperatorExpression_1_0 returns TextExpression
	 *     NegExpression returns TextExpression
	 *     AtomicExpression returns TextExpression
	 *     AtomicValuedExpression returns TextExpression
	 *     TextExpression returns TextExpression
	 *
	 * Constraint:
	 *     text=HOSTCODE
	 */
	protected void sequence_TextExpression(ISerializationContext context, TextExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.TEXT_EXPRESSION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.TEXT_EXPRESSION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextExpressionAccess().getTextHOSTCODETerminalRuleCall_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Root returns ValuedObjectReference
	 *     Expression returns ValuedObjectReference
	 *     BoolExpression returns ValuedObjectReference
	 *     LogicalOrExpression returns ValuedObjectReference
	 *     LogicalOrExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     LogicalAndExpression returns ValuedObjectReference
	 *     LogicalAndExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     BitwiseOrExpression returns ValuedObjectReference
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     BitwiseAndExpression returns ValuedObjectReference
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     CompareOperation returns ValuedObjectReference
	 *     CompareOperation.OperatorExpression_1_0 returns ValuedObjectReference
	 *     NotOrValuedExpression returns ValuedObjectReference
	 *     NotExpression returns ValuedObjectReference
	 *     ValuedExpression returns ValuedObjectReference
	 *     AddExpression returns ValuedObjectReference
	 *     AddExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     SubExpression returns ValuedObjectReference
	 *     SubExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     MultExpression returns ValuedObjectReference
	 *     MultExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     DivExpression returns ValuedObjectReference
	 *     DivExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     ModExpression returns ValuedObjectReference
	 *     ModExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     NegExpression returns ValuedObjectReference
	 *     AtomicExpression returns ValuedObjectReference
	 *     AtomicValuedExpression returns ValuedObjectReference
	 *     ValuedObjectTestExpression returns ValuedObjectReference
	 *     ValuedObjectReference returns ValuedObjectReference
	 *
	 * Constraint:
	 *     (valuedObject=[ValuedObject|ID] indices+=Expression*)
	 */
	protected void sequence_ValuedObjectReference(ISerializationContext context, ValuedObjectReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValuedObjectTestExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression)
	 */
	protected void sequence_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
