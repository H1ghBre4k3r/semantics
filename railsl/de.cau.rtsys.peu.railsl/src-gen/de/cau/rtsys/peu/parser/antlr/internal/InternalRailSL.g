/*
 * generated by Xtext 2.10.0
 */
grammar InternalRailSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cau.rtsys.peu.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.rtsys.peu.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.rtsys.peu.services.RailSLGrammarAccess;

}

@parser::members {

 	private RailSLGrammarAccess grammarAccess;

    public InternalRailSLParser(TokenStream input, RailSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected RailSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getBlocksBlockParserRuleCall_0());
			}
			lv_blocks_0_0=ruleBlock
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"blocks",
					lv_blocks_0_0,
					"de.cau.rtsys.peu.RailSL.Block");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Start:'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getStartKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"de.cau.rtsys.peu.RailSL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getEndBLOCK_ENDParserRuleCall_2_0());
				}
				lv_end_2_0=ruleBLOCK_END
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"end",
						lv_end_2_0,
						"de.cau.rtsys.peu.RailSL.BLOCK_END");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBLOCK_END
entryRuleBLOCK_END returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBLOCK_ENDRule()); }
	iv_ruleBLOCK_END=ruleBLOCK_END
	{ $current=$iv_ruleBLOCK_END.current.getText(); }
	EOF;

// Rule BLOCK_END
ruleBLOCK_END returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='End.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBLOCK_ENDAccess().getEndKeyword_0());
		}
		    |
		kw='Loop.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBLOCK_ENDAccess().getLoopKeyword_1());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSetStatementParserRuleCall_0());
		}
		this_SetStatement_0=ruleSetStatement
		{
			$current = $this_SetStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWaitStatementParserRuleCall_1());
		}
		this_WaitStatement_1=ruleWaitStatement
		{
			$current = $this_WaitStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getOpStatementParserRuleCall_2());
		}
		this_OpStatement_2=ruleOpStatement
		{
			$current = $this_OpStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getConditionalStatementParserRuleCall_3());
		}
		this_ConditionalStatement_3=ruleConditionalStatement
		{
			$current = $this_ConditionalStatement_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetStatement
entryRuleSetStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetStatementRule()); }
	iv_ruleSetStatement=ruleSetStatement
	{ $current=$iv_ruleSetStatement.current; }
	EOF;

// Rule SetStatement
ruleSetStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSetStatementAccess().getSetTrackStatementParserRuleCall_0());
		}
		this_SetTrackStatement_0=ruleSetTrackStatement
		{
			$current = $this_SetTrackStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSetStatementAccess().getSetPointStatementParserRuleCall_1());
		}
		this_SetPointStatement_1=ruleSetPointStatement
		{
			$current = $this_SetPointStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetTrackStatement
entryRuleSetTrackStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetTrackStatementRule()); }
	iv_ruleSetTrackStatement=ruleSetTrackStatement
	{ $current=$iv_ruleSetTrackStatement.current; }
	EOF;

// Rule SetTrackStatement
ruleSetTrackStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Set track'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetTrackStatementAccess().getSetTrackKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetTrackStatementAccess().getSegmentsSEG_NAMEParserRuleCall_1_0());
				}
				lv_segments_1_0=ruleSEG_NAME
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetTrackStatementRule());
					}
					add(
						$current,
						"segments",
						lv_segments_1_0,
						"de.cau.rtsys.peu.RailSL.SEG_NAME");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSetTrackStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetTrackStatementAccess().getSegmentsSEG_NAMEParserRuleCall_2_1_0());
					}
					lv_segments_3_0=ruleSEG_NAME
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetTrackStatementRule());
						}
						add(
							$current,
							"segments",
							lv_segments_3_0,
							"de.cau.rtsys.peu.RailSL.SEG_NAME");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getSetTrackStatementAccess().getToKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetTrackStatementAccess().getModeTrackSettingParserRuleCall_4_0());
				}
				lv_mode_5_0=ruleTrackSetting
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetTrackStatementRule());
					}
					set(
						$current,
						"mode",
						lv_mode_5_0,
						"de.cau.rtsys.peu.RailSL.TrackSetting");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getSetTrackStatementAccess().getFullStopKeyword_5());
		}
	)
;

// Entry rule entryRuleTrackSetting
entryRuleTrackSetting returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTrackSettingRule()); }
	iv_ruleTrackSetting=ruleTrackSetting
	{ $current=$iv_ruleTrackSetting.current.getText(); }
	EOF;

// Rule TrackSetting
ruleTrackSetting returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				kw='full'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTrackSettingAccess().getFullKeyword_0_0_0());
				}
				    |
				kw='slow'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTrackSettingAccess().getSlowKeyword_0_0_1());
				}
			)
			(
				kw='reverse'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTrackSettingAccess().getReverseKeyword_0_1());
				}
			)?
		)
		    |
		kw='stop'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTrackSettingAccess().getStopKeyword_1());
		}
	)
;

// Entry rule entryRuleSetPointStatement
entryRuleSetPointStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetPointStatementRule()); }
	iv_ruleSetPointStatement=ruleSetPointStatement
	{ $current=$iv_ruleSetPointStatement.current; }
	EOF;

// Rule SetPointStatement
ruleSetPointStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Set point'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetPointStatementAccess().getSetPointKeyword_0());
		}
		(
			(
				lv_points_1_0=RULE_INT
				{
					newLeafNode(lv_points_1_0, grammarAccess.getSetPointStatementAccess().getPointsINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetPointStatementRule());
					}
					addWithLastConsumed(
						$current,
						"points",
						lv_points_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSetPointStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_points_3_0=RULE_INT
					{
						newLeafNode(lv_points_3_0, grammarAccess.getSetPointStatementAccess().getPointsINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetPointStatementRule());
						}
						addWithLastConsumed(
							$current,
							"points",
							lv_points_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getSetPointStatementAccess().getToKeyword_3());
		}
		(
			(
				(
					lv_orientation_5_1='straight'
					{
						newLeafNode(lv_orientation_5_1, grammarAccess.getSetPointStatementAccess().getOrientationStraightKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetPointStatementRule());
						}
						setWithLastConsumed($current, "orientation", lv_orientation_5_1, null);
					}
					    |
					lv_orientation_5_2='branch'
					{
						newLeafNode(lv_orientation_5_2, grammarAccess.getSetPointStatementAccess().getOrientationBranchKeyword_4_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetPointStatementRule());
						}
						setWithLastConsumed($current, "orientation", lv_orientation_5_2, null);
					}
				)
			)
		)
		otherlv_6='.'
		{
			newLeafNode(otherlv_6, grammarAccess.getSetPointStatementAccess().getFullStopKeyword_5());
		}
	)
;

// Entry rule entryRuleWaitStatement
entryRuleWaitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitStatementRule()); }
	iv_ruleWaitStatement=ruleWaitStatement
	{ $current=$iv_ruleWaitStatement.current; }
	EOF;

// Rule WaitStatement
ruleWaitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWaitStatementAccess().getTimeWaitStatementParserRuleCall_0());
		}
		this_TimeWaitStatement_0=ruleTimeWaitStatement
		{
			$current = $this_TimeWaitStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWaitStatementAccess().getContactWaitStatementParserRuleCall_1());
		}
		this_ContactWaitStatement_1=ruleContactWaitStatement
		{
			$current = $this_ContactWaitStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTimeWaitStatement
entryRuleTimeWaitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeWaitStatementRule()); }
	iv_ruleTimeWaitStatement=ruleTimeWaitStatement
	{ $current=$iv_ruleTimeWaitStatement.current; }
	EOF;

// Rule TimeWaitStatement
ruleTimeWaitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Wait for'
			{
				newLeafNode(otherlv_0, grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0());
			}
		)+
		(
			(
				lv_time_1_0=RULE_INT
				{
					newLeafNode(lv_time_1_0, grammarAccess.getTimeWaitStatementAccess().getTimeINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeWaitStatementRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)+
		otherlv_2='seconds.'
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeWaitStatementAccess().getSecondsKeyword_2());
		}
	)
;

// Entry rule entryRuleContactWaitStatement
entryRuleContactWaitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContactWaitStatementRule()); }
	iv_ruleContactWaitStatement=ruleContactWaitStatement
	{ $current=$iv_ruleContactWaitStatement.current; }
	EOF;

// Rule ContactWaitStatement
ruleContactWaitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_event_0_1='Reach'
					{
						newLeafNode(lv_event_0_1, grammarAccess.getContactWaitStatementAccess().getEventReachKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContactWaitStatementRule());
						}
						setWithLastConsumed($current, "event", lv_event_0_1, null);
					}
					    |
					lv_event_0_2='Pass'
					{
						newLeafNode(lv_event_0_2, grammarAccess.getContactWaitStatementAccess().getEventPassKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getContactWaitStatementRule());
						}
						setWithLastConsumed($current, "event", lv_event_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getContactWaitStatementAccess().getContactIndexContactIndexParserRuleCall_1_0());
				}
				lv_contactIndex_1_0=ruleContactIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContactWaitStatementRule());
					}
					set(
						$current,
						"contactIndex",
						lv_contactIndex_1_0,
						"de.cau.rtsys.peu.RailSL.ContactIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='contact of'
		{
			newLeafNode(otherlv_2, grammarAccess.getContactWaitStatementAccess().getContactOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContactWaitStatementAccess().getSegNameSEG_NAMEParserRuleCall_3_0());
				}
				lv_segName_3_0=ruleSEG_NAME
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContactWaitStatementRule());
					}
					set(
						$current,
						"segName",
						lv_segName_3_0,
						"de.cau.rtsys.peu.RailSL.SEG_NAME");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='.'
		{
			newLeafNode(otherlv_4, grammarAccess.getContactWaitStatementAccess().getFullStopKeyword_4());
		}
	)
;

// Entry rule entryRuleOpStatement
entryRuleOpStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpStatementRule()); }
	iv_ruleOpStatement=ruleOpStatement
	{ $current=$iv_ruleOpStatement.current; }
	EOF;

// Rule OpStatement
ruleOpStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOpStatementAccess().getCrossingStatementParserRuleCall_0());
		}
		this_CrossingStatement_0=ruleCrossingStatement
		{
			$current = $this_CrossingStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOpStatementAccess().getLightStatementParserRuleCall_1());
		}
		this_LightStatement_1=ruleLightStatement
		{
			$current = $this_LightStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCrossingStatement
entryRuleCrossingStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCrossingStatementRule()); }
	iv_ruleCrossingStatement=ruleCrossingStatement
	{ $current=$iv_ruleCrossingStatement.current; }
	EOF;

// Rule CrossingStatement
ruleCrossingStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_mode_0_1='Open'
					{
						newLeafNode(lv_mode_0_1, grammarAccess.getCrossingStatementAccess().getModeOpenKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCrossingStatementRule());
						}
						setWithLastConsumed($current, "mode", lv_mode_0_1, null);
					}
					    |
					lv_mode_0_2='Close'
					{
						newLeafNode(lv_mode_0_2, grammarAccess.getCrossingStatementAccess().getModeCloseKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCrossingStatementRule());
						}
						setWithLastConsumed($current, "mode", lv_mode_0_2, null);
					}
				)
			)
		)
		otherlv_1='crossing.'
		{
			newLeafNode(otherlv_1, grammarAccess.getCrossingStatementAccess().getCrossingKeyword_1());
		}
	)
;

// Entry rule entryRuleLightStatement
entryRuleLightStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLightStatementRule()); }
	iv_ruleLightStatement=ruleLightStatement
	{ $current=$iv_ruleLightStatement.current; }
	EOF;

// Rule LightStatement
ruleLightStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Turn light'
		{
			newLeafNode(otherlv_0, grammarAccess.getLightStatementAccess().getTurnLightKeyword_0());
		}
		(
			(
				lv_lights_1_0=RULE_INT
				{
					newLeafNode(lv_lights_1_0, grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLightStatementRule());
					}
					addWithLastConsumed(
						$current,
						"lights",
						lv_lights_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getLightStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_lights_3_0=RULE_INT
					{
						newLeafNode(lv_lights_3_0, grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLightStatementRule());
						}
						addWithLastConsumed(
							$current,
							"lights",
							lv_lights_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
		(
			(
				(
					lv_state_4_1='on'
					{
						newLeafNode(lv_state_4_1, grammarAccess.getLightStatementAccess().getStateOnKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLightStatementRule());
						}
						setWithLastConsumed($current, "state", lv_state_4_1, null);
					}
					    |
					lv_state_4_2='off'
					{
						newLeafNode(lv_state_4_2, grammarAccess.getLightStatementAccess().getStateOffKeyword_3_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLightStatementRule());
						}
						setWithLastConsumed($current, "state", lv_state_4_2, null);
					}
				)
			)
		)
		otherlv_5='.'
		{
			newLeafNode(otherlv_5, grammarAccess.getLightStatementAccess().getFullStopKeyword_4());
		}
	)
;

// Entry rule entryRuleConditionalStatement
entryRuleConditionalStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalStatementRule()); }
	iv_ruleConditionalStatement=ruleConditionalStatement
	{ $current=$iv_ruleConditionalStatement.current; }
	EOF;

// Rule ConditionalStatement
ruleConditionalStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Branch:'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalStatementAccess().getBranchKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_1_0());
				}
				lv_lines_1_0=ruleConditionalLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
					}
					add(
						$current,
						"lines",
						lv_lines_1_0,
						"de.cau.rtsys.peu.RailSL.ConditionalLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_2_0());
				}
				lv_lines_2_0=ruleConditionalLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalStatementRule());
					}
					add(
						$current,
						"lines",
						lv_lines_2_0,
						"de.cau.rtsys.peu.RailSL.ConditionalLine");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleConditionalLine
entryRuleConditionalLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalLineRule()); }
	iv_ruleConditionalLine=ruleConditionalLine
	{ $current=$iv_ruleConditionalLine.current; }
	EOF;

// Rule ConditionalLine
ruleConditionalLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='If'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalLineAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalLineAccess().getContactContactIndexParserRuleCall_1_0());
				}
				lv_contact_1_0=ruleContactIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalLineRule());
					}
					set(
						$current,
						"contact",
						lv_contact_1_0,
						"de.cau.rtsys.peu.RailSL.ContactIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='contact of'
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionalLineAccess().getContactOfKeyword_2());
			}
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalLineAccess().getSegNameSEG_NAMEParserRuleCall_3_0());
				}
				lv_segName_3_0=ruleSEG_NAME
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalLineRule());
					}
					set(
						$current,
						"segName",
						lv_segName_3_0,
						"de.cau.rtsys.peu.RailSL.SEG_NAME");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='is reached first, do'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionalLineAccess().getIsReachedFirstDoKeyword_4());
			}
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalLineAccess().getBlockBlockParserRuleCall_5_0());
				}
				lv_block_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalLineRule());
					}
					set(
						$current,
						"block",
						lv_block_5_0,
						"de.cau.rtsys.peu.RailSL.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleContactIndex
entryRuleContactIndex returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContactIndexRule()); }
	iv_ruleContactIndex=ruleContactIndex
	{ $current=$iv_ruleContactIndex.current.getText(); }
	EOF;

// Rule ContactIndex
ruleContactIndex returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='first'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContactIndexAccess().getFirstKeyword_0());
		}
		    |
		kw='second'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContactIndexAccess().getSecondKeyword_1());
		}
	)
;

// Entry rule entryRuleSEG_NAME
entryRuleSEG_NAME returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSEG_NAMERule()); }
	iv_ruleSEG_NAME=ruleSEG_NAME
	{ $current=$iv_ruleSEG_NAME.current.getText(); }
	EOF;

// Rule SEG_NAME
ruleSEG_NAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='KH_ST_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_ST_0Keyword_0());
		}
		    |
		kw='KH_ST_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_ST_1Keyword_1());
		}
		    |
		kw='KH_ST_2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_ST_2Keyword_2());
		}
		    |
		kw='KH_ST_3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_ST_3Keyword_3());
		}
		    |
		kw='KH_ST_4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_ST_4Keyword_4());
		}
		    |
		kw='KH_ST_5'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_ST_5Keyword_5());
		}
		    |
		kw='KH_ST_6'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_ST_6Keyword_6());
		}
		    |
		kw='KH_LN_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_0Keyword_7());
		}
		    |
		kw='KH_LN_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_1Keyword_8());
		}
		    |
		kw='KH_LN_2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_2Keyword_9());
		}
		    |
		kw='KH_LN_3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_3Keyword_10());
		}
		    |
		kw='KH_LN_4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_4Keyword_11());
		}
		    |
		kw='KH_LN_5'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_5Keyword_12());
		}
		    |
		kw='KH_LN_6'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_6Keyword_13());
		}
		    |
		kw='KH_LN_7'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_7Keyword_14());
		}
		    |
		kw='KH_LN_8'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKH_LN_8Keyword_15());
		}
		    |
		kw='KIO_LN_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKIO_LN_0Keyword_16());
		}
		    |
		kw='KIO_LN_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getKIO_LN_1Keyword_17());
		}
		    |
		kw='OC_ST_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_ST_0Keyword_18());
		}
		    |
		kw='OC_ST_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_ST_1Keyword_19());
		}
		    |
		kw='OC_ST_2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_ST_2Keyword_20());
		}
		    |
		kw='OC_ST_3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_ST_3Keyword_21());
		}
		    |
		kw='OC_ST_4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_ST_4Keyword_22());
		}
		    |
		kw='OC_LN_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_LN_0Keyword_23());
		}
		    |
		kw='OC_LN_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_LN_1Keyword_24());
		}
		    |
		kw='OC_LN_2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_LN_2Keyword_25());
		}
		    |
		kw='OC_LN_3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_LN_3Keyword_26());
		}
		    |
		kw='OC_LN_4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_LN_4Keyword_27());
		}
		    |
		kw='OC_LN_5'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_LN_5Keyword_28());
		}
		    |
		kw='IC_ST_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_ST_0Keyword_29());
		}
		    |
		kw='IC_ST_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_ST_1Keyword_30());
		}
		    |
		kw='IC_ST_2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_ST_2Keyword_31());
		}
		    |
		kw='IC_ST_3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_ST_3Keyword_32());
		}
		    |
		kw='IC_ST_4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_ST_4Keyword_33());
		}
		    |
		kw='IC_LN_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_LN_0Keyword_34());
		}
		    |
		kw='IC_LN_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_LN_1Keyword_35());
		}
		    |
		kw='IC_LN_2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_LN_2Keyword_36());
		}
		    |
		kw='IC_LN_3'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_LN_3Keyword_37());
		}
		    |
		kw='IC_LN_4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_LN_4Keyword_38());
		}
		    |
		kw='IC_LN_5'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_LN_5Keyword_39());
		}
		    |
		kw='OC_JCT_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOC_JCT_0Keyword_40());
		}
		    |
		kw='IC_JCT_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIC_JCT_0Keyword_41());
		}
		    |
		kw='OI_LN_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOI_LN_0Keyword_42());
		}
		    |
		kw='OI_LN_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOI_LN_1Keyword_43());
		}
		    |
		kw='OI_LN_2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getOI_LN_2Keyword_44());
		}
		    |
		kw='IO_LN_0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIO_LN_0Keyword_45());
		}
		    |
		kw='IO_LN_1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIO_LN_1Keyword_46());
		}
		    |
		kw='IO_LN_2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSEG_NAMEAccess().getIO_LN_2Keyword_47());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
