/*
 * generated by Xtext 2.10.0
 */
package de.cau.rtsys.peu.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.cau.rtsys.peu.ide.contentassist.antlr.internal.InternalRailSLParser;
import de.cau.rtsys.peu.services.RailSLGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class RailSLParser extends AbstractContentAssistParser {

	@Inject
	private RailSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalRailSLParser createParser() {
		InternalRailSLParser result = new InternalRailSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBLOCK_ENDAccess().getAlternatives(), "rule__BLOCK_END__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getSetStatementAccess().getAlternatives(), "rule__SetStatement__Alternatives");
					put(grammarAccess.getTrackSettingAccess().getAlternatives(), "rule__TrackSetting__Alternatives");
					put(grammarAccess.getTrackSettingAccess().getAlternatives_0_1(), "rule__TrackSetting__Alternatives_0_1");
					put(grammarAccess.getSetPointStatementAccess().getOrientationAlternatives_4_0(), "rule__SetPointStatement__OrientationAlternatives_4_0");
					put(grammarAccess.getWaitStatementAccess().getAlternatives(), "rule__WaitStatement__Alternatives");
					put(grammarAccess.getContactWaitStatementAccess().getEventAlternatives_0_0(), "rule__ContactWaitStatement__EventAlternatives_0_0");
					put(grammarAccess.getContactWaitStatementAccess().getContactIndexAlternatives_1_0(), "rule__ContactWaitStatement__ContactIndexAlternatives_1_0");
					put(grammarAccess.getOpStatementAccess().getAlternatives(), "rule__OpStatement__Alternatives");
					put(grammarAccess.getCrossingStatementAccess().getModeAlternatives_0_0(), "rule__CrossingStatement__ModeAlternatives_0_0");
					put(grammarAccess.getLightStatementAccess().getStateAlternatives_3_0(), "rule__LightStatement__StateAlternatives_3_0");
					put(grammarAccess.getSEG_NAMEAccess().getAlternatives(), "rule__SEG_NAME__Alternatives");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getSetTrackStatementAccess().getGroup(), "rule__SetTrackStatement__Group__0");
					put(grammarAccess.getSetTrackStatementAccess().getGroup_2(), "rule__SetTrackStatement__Group_2__0");
					put(grammarAccess.getTrackSettingAccess().getGroup_0(), "rule__TrackSetting__Group_0__0");
					put(grammarAccess.getSetPointStatementAccess().getGroup(), "rule__SetPointStatement__Group__0");
					put(grammarAccess.getSetPointStatementAccess().getGroup_2(), "rule__SetPointStatement__Group_2__0");
					put(grammarAccess.getTimeWaitStatementAccess().getGroup(), "rule__TimeWaitStatement__Group__0");
					put(grammarAccess.getContactWaitStatementAccess().getGroup(), "rule__ContactWaitStatement__Group__0");
					put(grammarAccess.getCrossingStatementAccess().getGroup(), "rule__CrossingStatement__Group__0");
					put(grammarAccess.getLightStatementAccess().getGroup(), "rule__LightStatement__Group__0");
					put(grammarAccess.getLightStatementAccess().getGroup_2(), "rule__LightStatement__Group_2__0");
					put(grammarAccess.getProgramAccess().getBlocksAssignment(), "rule__Program__BlocksAssignment");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_1(), "rule__Block__StatementsAssignment_1");
					put(grammarAccess.getBlockAccess().getEndAssignment_2(), "rule__Block__EndAssignment_2");
					put(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_1(), "rule__SetTrackStatement__SegmentsAssignment_1");
					put(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_2_1(), "rule__SetTrackStatement__SegmentsAssignment_2_1");
					put(grammarAccess.getSetTrackStatementAccess().getModeAssignment_4(), "rule__SetTrackStatement__ModeAssignment_4");
					put(grammarAccess.getSetPointStatementAccess().getPointsAssignment_1(), "rule__SetPointStatement__PointsAssignment_1");
					put(grammarAccess.getSetPointStatementAccess().getPointsAssignment_2_1(), "rule__SetPointStatement__PointsAssignment_2_1");
					put(grammarAccess.getSetPointStatementAccess().getOrientationAssignment_4(), "rule__SetPointStatement__OrientationAssignment_4");
					put(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1(), "rule__TimeWaitStatement__TimeAssignment_1");
					put(grammarAccess.getContactWaitStatementAccess().getEventAssignment_0(), "rule__ContactWaitStatement__EventAssignment_0");
					put(grammarAccess.getContactWaitStatementAccess().getContactIndexAssignment_1(), "rule__ContactWaitStatement__ContactIndexAssignment_1");
					put(grammarAccess.getContactWaitStatementAccess().getSegNameAssignment_3(), "rule__ContactWaitStatement__SegNameAssignment_3");
					put(grammarAccess.getCrossingStatementAccess().getModeAssignment_0(), "rule__CrossingStatement__ModeAssignment_0");
					put(grammarAccess.getLightStatementAccess().getLightsAssignment_1(), "rule__LightStatement__LightsAssignment_1");
					put(grammarAccess.getLightStatementAccess().getLightsAssignment_2_1(), "rule__LightStatement__LightsAssignment_2_1");
					put(grammarAccess.getLightStatementAccess().getStateAssignment_3(), "rule__LightStatement__StateAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalRailSLParser typedParser = (InternalRailSLParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RailSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RailSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
