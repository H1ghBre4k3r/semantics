/*
 * generated by Xtext 2.10.0
 */
grammar InternalRailSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.cau.rtsys.peu.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.rtsys.peu.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.cau.rtsys.peu.services.RailSLGrammarAccess;

}
@parser::members {
	private RailSLGrammarAccess grammarAccess;

	public void setGrammarAccess(RailSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getBlocksAssignment()); }
			(rule__Program__BlocksAssignment)
			{ after(grammarAccess.getProgramAccess().getBlocksAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getBlocksAssignment()); }
			(rule__Program__BlocksAssignment)*
			{ after(grammarAccess.getProgramAccess().getBlocksAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetStatement
entryRuleSetStatement
:
{ before(grammarAccess.getSetStatementRule()); }
	 ruleSetStatement
{ after(grammarAccess.getSetStatementRule()); } 
	 EOF 
;

// Rule SetStatement
ruleSetStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetStatementAccess().getAlternatives()); }
		(rule__SetStatement__Alternatives)
		{ after(grammarAccess.getSetStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetTrackStatement
entryRuleSetTrackStatement
:
{ before(grammarAccess.getSetTrackStatementRule()); }
	 ruleSetTrackStatement
{ after(grammarAccess.getSetTrackStatementRule()); } 
	 EOF 
;

// Rule SetTrackStatement
ruleSetTrackStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getGroup()); }
		(rule__SetTrackStatement__Group__0)
		{ after(grammarAccess.getSetTrackStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrackSetting
entryRuleTrackSetting
:
{ before(grammarAccess.getTrackSettingRule()); }
	 ruleTrackSetting
{ after(grammarAccess.getTrackSettingRule()); } 
	 EOF 
;

// Rule TrackSetting
ruleTrackSetting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrackSettingAccess().getAlternatives()); }
		(rule__TrackSetting__Alternatives)
		{ after(grammarAccess.getTrackSettingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetPointStatement
entryRuleSetPointStatement
:
{ before(grammarAccess.getSetPointStatementRule()); }
	 ruleSetPointStatement
{ after(grammarAccess.getSetPointStatementRule()); } 
	 EOF 
;

// Rule SetPointStatement
ruleSetPointStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getGroup()); }
		(rule__SetPointStatement__Group__0)
		{ after(grammarAccess.getSetPointStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWaitStatement
entryRuleWaitStatement
:
{ before(grammarAccess.getWaitStatementRule()); }
	 ruleWaitStatement
{ after(grammarAccess.getWaitStatementRule()); } 
	 EOF 
;

// Rule WaitStatement
ruleWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaitStatementAccess().getAlternatives()); }
		(rule__WaitStatement__Alternatives)
		{ after(grammarAccess.getWaitStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeWaitStatement
entryRuleTimeWaitStatement
:
{ before(grammarAccess.getTimeWaitStatementRule()); }
	 ruleTimeWaitStatement
{ after(grammarAccess.getTimeWaitStatementRule()); } 
	 EOF 
;

// Rule TimeWaitStatement
ruleTimeWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getGroup()); }
		(rule__TimeWaitStatement__Group__0)
		{ after(grammarAccess.getTimeWaitStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContactWaitStatement
entryRuleContactWaitStatement
:
{ before(grammarAccess.getContactWaitStatementRule()); }
	 ruleContactWaitStatement
{ after(grammarAccess.getContactWaitStatementRule()); } 
	 EOF 
;

// Rule ContactWaitStatement
ruleContactWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getGroup()); }
		(rule__ContactWaitStatement__Group__0)
		{ after(grammarAccess.getContactWaitStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpStatement
entryRuleOpStatement
:
{ before(grammarAccess.getOpStatementRule()); }
	 ruleOpStatement
{ after(grammarAccess.getOpStatementRule()); } 
	 EOF 
;

// Rule OpStatement
ruleOpStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpStatementAccess().getAlternatives()); }
		(rule__OpStatement__Alternatives)
		{ after(grammarAccess.getOpStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossingStatement
entryRuleCrossingStatement
:
{ before(grammarAccess.getCrossingStatementRule()); }
	 ruleCrossingStatement
{ after(grammarAccess.getCrossingStatementRule()); } 
	 EOF 
;

// Rule CrossingStatement
ruleCrossingStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossingStatementAccess().getGroup()); }
		(rule__CrossingStatement__Group__0)
		{ after(grammarAccess.getCrossingStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLightStatement
entryRuleLightStatement
:
{ before(grammarAccess.getLightStatementRule()); }
	 ruleLightStatement
{ after(grammarAccess.getLightStatementRule()); } 
	 EOF 
;

// Rule LightStatement
ruleLightStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLightStatementAccess().getGroup()); }
		(rule__LightStatement__Group__0)
		{ after(grammarAccess.getLightStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSetStatementParserRuleCall_0()); }
		ruleSetStatement
		{ after(grammarAccess.getStatementAccess().getSetStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWaitStatementParserRuleCall_1()); }
		ruleWaitStatement
		{ after(grammarAccess.getStatementAccess().getWaitStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getOpStatementParserRuleCall_2()); }
		ruleOpStatement
		{ after(grammarAccess.getStatementAccess().getOpStatementParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetStatementAccess().getSetTrackStatementParserRuleCall_0()); }
		ruleSetTrackStatement
		{ after(grammarAccess.getSetStatementAccess().getSetTrackStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetStatementAccess().getSetPointStatementParserRuleCall_1()); }
		ruleSetPointStatement
		{ after(grammarAccess.getSetStatementAccess().getSetPointStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackSettingAccess().getGroup_0()); }
		(rule__TrackSetting__Group_0__0)
		{ after(grammarAccess.getTrackSettingAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrackSettingAccess().getStopKeyword_1()); }
		'stop'
		{ after(grammarAccess.getTrackSettingAccess().getStopKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackSettingAccess().getGoKeyword_0_1_0()); }
		'go'
		{ after(grammarAccess.getTrackSettingAccess().getGoKeyword_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrackSettingAccess().getSlowKeyword_0_1_1()); }
		'slow'
		{ after(grammarAccess.getTrackSettingAccess().getSlowKeyword_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__OrientationAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getOrientationStraightKeyword_3_0_0()); }
		'straight'
		{ after(grammarAccess.getSetPointStatementAccess().getOrientationStraightKeyword_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetPointStatementAccess().getOrientationBranchKeyword_3_0_1()); }
		'branch'
		{ after(grammarAccess.getSetPointStatementAccess().getOrientationBranchKeyword_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaitStatementAccess().getTimeWaitStatementParserRuleCall_0()); }
		ruleTimeWaitStatement
		{ after(grammarAccess.getWaitStatementAccess().getTimeWaitStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWaitStatementAccess().getContactWaitStatementParserRuleCall_1()); }
		ruleContactWaitStatement
		{ after(grammarAccess.getWaitStatementAccess().getContactWaitStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__EventAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getEventReachKeyword_0_0_0()); }
		'Reach'
		{ after(grammarAccess.getContactWaitStatementAccess().getEventReachKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getEventPassKeyword_0_0_1()); }
		'Pass'
		{ after(grammarAccess.getContactWaitStatementAccess().getEventPassKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__ContactIndexAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getContactIndexFirstKeyword_1_0_0()); }
		'first'
		{ after(grammarAccess.getContactWaitStatementAccess().getContactIndexFirstKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getContactIndexSecondKeyword_1_0_1()); }
		'second'
		{ after(grammarAccess.getContactWaitStatementAccess().getContactIndexSecondKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpStatementAccess().getCrossingStatementParserRuleCall_0()); }
		ruleCrossingStatement
		{ after(grammarAccess.getOpStatementAccess().getCrossingStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpStatementAccess().getLightStatementParserRuleCall_1()); }
		ruleLightStatement
		{ after(grammarAccess.getOpStatementAccess().getLightStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossingStatementAccess().getOpenKeyword_0_0()); }
		'Open'
		{ after(grammarAccess.getCrossingStatementAccess().getOpenKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCrossingStatementAccess().getCloseKeyword_0_1()); }
		'Close'
		{ after(grammarAccess.getCrossingStatementAccess().getCloseKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__StateAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getStateOnKeyword_2_0_0()); }
		'on'
		{ after(grammarAccess.getLightStatementAccess().getStateOnKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLightStatementAccess().getStateOffKeyword_2_0_1()); }
		'off'
		{ after(grammarAccess.getLightStatementAccess().getStateOffKeyword_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStartKeyword_0()); }
	'Start:'
	{ after(grammarAccess.getBlockAccess().getStartKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
		(rule__Block__StatementsAssignment_1)
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
		(rule__Block__StatementsAssignment_1)*
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getEndAssignment_2()); }
	(rule__Block__EndAssignment_2)
	{ after(grammarAccess.getBlockAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetTrackStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__0__Impl
	rule__SetTrackStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getSetTrackKeyword_0()); }
	'Set track'
	{ after(grammarAccess.getSetTrackStatementAccess().getSetTrackKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__1__Impl
	rule__SetTrackStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_1()); }
		(rule__SetTrackStatement__SegmentsAssignment_1)
		{ after(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_1()); }
		(rule__SetTrackStatement__SegmentsAssignment_1)*
		{ after(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__2__Impl
	rule__SetTrackStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getToKeyword_2()); }
	'to'
	{ after(grammarAccess.getSetTrackStatementAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__3__Impl
	rule__SetTrackStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getModeAssignment_3()); }
	(rule__SetTrackStatement__ModeAssignment_3)
	{ after(grammarAccess.getSetTrackStatementAccess().getModeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getSetTrackStatementAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrackSetting__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackSetting__Group_0__0__Impl
	rule__TrackSetting__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackSettingAccess().getReverseKeyword_0_0()); }
	('reverse')?
	{ after(grammarAccess.getTrackSettingAccess().getReverseKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackSetting__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackSettingAccess().getAlternatives_0_1()); }
	(rule__TrackSetting__Alternatives_0_1)
	{ after(grammarAccess.getTrackSettingAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetPointStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__0__Impl
	rule__SetPointStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getSetPointKeyword_0()); }
	'Set point'
	{ after(grammarAccess.getSetPointStatementAccess().getSetPointKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__1__Impl
	rule__SetPointStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSetPointStatementAccess().getPointsAssignment_1()); }
		(rule__SetPointStatement__PointsAssignment_1)
		{ after(grammarAccess.getSetPointStatementAccess().getPointsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getSetPointStatementAccess().getPointsAssignment_1()); }
		(rule__SetPointStatement__PointsAssignment_1)*
		{ after(grammarAccess.getSetPointStatementAccess().getPointsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__2__Impl
	rule__SetPointStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getToKeyword_2()); }
	'to'
	{ after(grammarAccess.getSetPointStatementAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__3__Impl
	rule__SetPointStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getOrientationAssignment_3()); }
	(rule__SetPointStatement__OrientationAssignment_3)
	{ after(grammarAccess.getSetPointStatementAccess().getOrientationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getSetPointStatementAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeWaitStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__0__Impl
	rule__TimeWaitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0()); }
		('Wait for')
		{ after(grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0()); }
	)
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0()); }
		('Wait for')*
		{ after(grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__1__Impl
	rule__TimeWaitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1()); }
		(rule__TimeWaitStatement__TimeAssignment_1)
		{ after(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1()); }
	)
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1()); }
		(rule__TimeWaitStatement__TimeAssignment_1)*
		{ after(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeWaitStatementAccess().getSecondsKeyword_2()); }
	'seconds.'
	{ after(grammarAccess.getTimeWaitStatementAccess().getSecondsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContactWaitStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__0__Impl
	rule__ContactWaitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getEventAssignment_0()); }
	(rule__ContactWaitStatement__EventAssignment_0)
	{ after(grammarAccess.getContactWaitStatementAccess().getEventAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__1__Impl
	rule__ContactWaitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getContactIndexAssignment_1()); }
	(rule__ContactWaitStatement__ContactIndexAssignment_1)
	{ after(grammarAccess.getContactWaitStatementAccess().getContactIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__2__Impl
	rule__ContactWaitStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getContactOfKeyword_2()); }
	'contact of'
	{ after(grammarAccess.getContactWaitStatementAccess().getContactOfKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__3__Impl
	rule__ContactWaitStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getSegNameAssignment_3()); }
	(rule__ContactWaitStatement__SegNameAssignment_3)
	{ after(grammarAccess.getContactWaitStatementAccess().getSegNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getContactWaitStatementAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CrossingStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossingStatement__Group__0__Impl
	rule__CrossingStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossingStatementAccess().getAlternatives_0()); }
	(rule__CrossingStatement__Alternatives_0)
	{ after(grammarAccess.getCrossingStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossingStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossingStatementAccess().getCrossingKeyword_1()); }
	'crossing.'
	{ after(grammarAccess.getCrossingStatementAccess().getCrossingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LightStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__0__Impl
	rule__LightStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getTurnLightKeyword_0()); }
	'Turn light'
	{ after(grammarAccess.getLightStatementAccess().getTurnLightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__1__Impl
	rule__LightStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLightStatementAccess().getLightsAssignment_1()); }
		(rule__LightStatement__LightsAssignment_1)
		{ after(grammarAccess.getLightStatementAccess().getLightsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getLightStatementAccess().getLightsAssignment_1()); }
		(rule__LightStatement__LightsAssignment_1)*
		{ after(grammarAccess.getLightStatementAccess().getLightsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__2__Impl
	rule__LightStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getStateAssignment_2()); }
	(rule__LightStatement__StateAssignment_2)
	{ after(grammarAccess.getLightStatementAccess().getStateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getLightStatementAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__BlocksAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getBlocksBlockParserRuleCall_0()); }
		ruleBlock
		{ after(grammarAccess.getProgramAccess().getBlocksBlockParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getEndBLOCK_ENDTerminalRuleCall_2_0()); }
		RULE_BLOCK_END
		{ after(grammarAccess.getBlockAccess().getEndBLOCK_ENDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__SegmentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getSegmentsSEG_NAMETerminalRuleCall_1_0()); }
		RULE_SEG_NAME
		{ after(grammarAccess.getSetTrackStatementAccess().getSegmentsSEG_NAMETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__ModeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getModeTrackSettingParserRuleCall_3_0()); }
		ruleTrackSetting
		{ after(grammarAccess.getSetTrackStatementAccess().getModeTrackSettingParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__PointsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getPointsINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSetPointStatementAccess().getPointsINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__OrientationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getOrientationAlternatives_3_0()); }
		(rule__SetPointStatement__OrientationAlternatives_3_0)
		{ after(grammarAccess.getSetPointStatementAccess().getOrientationAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__TimeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getTimeINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTimeWaitStatementAccess().getTimeINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__EventAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getEventAlternatives_0_0()); }
		(rule__ContactWaitStatement__EventAlternatives_0_0)
		{ after(grammarAccess.getContactWaitStatementAccess().getEventAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__ContactIndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getContactIndexAlternatives_1_0()); }
		(rule__ContactWaitStatement__ContactIndexAlternatives_1_0)
		{ after(grammarAccess.getContactWaitStatementAccess().getContactIndexAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__SegNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getSegNameSEG_NAMETerminalRuleCall_3_0()); }
		RULE_SEG_NAME
		{ after(grammarAccess.getContactWaitStatementAccess().getSegNameSEG_NAMETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__LightsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__StateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getStateAlternatives_2_0()); }
		(rule__LightStatement__StateAlternatives_2_0)
		{ after(grammarAccess.getLightStatementAccess().getStateAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BLOCK_END : ('End.'|'Loop.');

RULE_SEG_NAME : ('KH_ST_0'|'KH_ST_1'|'KH_ST_2'|'KH_ST_3'|'KH_ST_4'|'KH_ST_5'|'KH_ST_6'|'KH_LN_0'|'KH_LN_1'|'KH_LN_2'|'KH_LN_3'|'KH_LN_4'|'KH_LN_5'|'KH_LN_6'|'KH_LN_7'|'KH_LN_8'|'KIO_LN_0'|'KIO_LN_1'|'OC_ST_0'|'OC_ST_1'|'OC_ST_2'|'OC_ST_3'|'OC_ST_4'|'OC_LN_0'|'OC_LN_1'|'OC_LN_2'|'OC_LN_3'|'OC_LN_4'|'OC_LN_5'|'IC_ST_0'|'IC_ST_1'|'IC_ST_2'|'IC_ST_3'|'IC_ST_4'|'IC_LN_0'|'IC_LN_1'|'IC_LN_2'|'IC_LN_3'|'IC_LN_4'|'IC_LN_5'|'OC_JCT_0'|'IC_JCT_0'|'OI_LN_0'|'OI_LN_1'|'OI_LN_2'|'IO_LN_0'|'IO_LN_1'|'IO_LN_2');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
