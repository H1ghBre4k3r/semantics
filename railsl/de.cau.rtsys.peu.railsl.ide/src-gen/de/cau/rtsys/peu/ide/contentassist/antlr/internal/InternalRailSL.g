/*
 * generated by Xtext 2.10.0
 */
grammar InternalRailSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.cau.rtsys.peu.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.rtsys.peu.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.cau.rtsys.peu.services.RailSLGrammarAccess;

}
@parser::members {
	private RailSLGrammarAccess grammarAccess;

	public void setGrammarAccess(RailSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getBlocksAssignment()); }
		(rule__Program__BlocksAssignment)*
		{ after(grammarAccess.getProgramAccess().getBlocksAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBLOCK_END
entryRuleBLOCK_END
:
{ before(grammarAccess.getBLOCK_ENDRule()); }
	 ruleBLOCK_END
{ after(grammarAccess.getBLOCK_ENDRule()); } 
	 EOF 
;

// Rule BLOCK_END
ruleBLOCK_END 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBLOCK_ENDAccess().getAlternatives()); }
		(rule__BLOCK_END__Alternatives)
		{ after(grammarAccess.getBLOCK_ENDAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetStatement
entryRuleSetStatement
:
{ before(grammarAccess.getSetStatementRule()); }
	 ruleSetStatement
{ after(grammarAccess.getSetStatementRule()); } 
	 EOF 
;

// Rule SetStatement
ruleSetStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetStatementAccess().getAlternatives()); }
		(rule__SetStatement__Alternatives)
		{ after(grammarAccess.getSetStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetTrackStatement
entryRuleSetTrackStatement
:
{ before(grammarAccess.getSetTrackStatementRule()); }
	 ruleSetTrackStatement
{ after(grammarAccess.getSetTrackStatementRule()); } 
	 EOF 
;

// Rule SetTrackStatement
ruleSetTrackStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getGroup()); }
		(rule__SetTrackStatement__Group__0)
		{ after(grammarAccess.getSetTrackStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrackSetting
entryRuleTrackSetting
:
{ before(grammarAccess.getTrackSettingRule()); }
	 ruleTrackSetting
{ after(grammarAccess.getTrackSettingRule()); } 
	 EOF 
;

// Rule TrackSetting
ruleTrackSetting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrackSettingAccess().getAlternatives()); }
		(rule__TrackSetting__Alternatives)
		{ after(grammarAccess.getTrackSettingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetPointStatement
entryRuleSetPointStatement
:
{ before(grammarAccess.getSetPointStatementRule()); }
	 ruleSetPointStatement
{ after(grammarAccess.getSetPointStatementRule()); } 
	 EOF 
;

// Rule SetPointStatement
ruleSetPointStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getGroup()); }
		(rule__SetPointStatement__Group__0)
		{ after(grammarAccess.getSetPointStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWaitStatement
entryRuleWaitStatement
:
{ before(grammarAccess.getWaitStatementRule()); }
	 ruleWaitStatement
{ after(grammarAccess.getWaitStatementRule()); } 
	 EOF 
;

// Rule WaitStatement
ruleWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaitStatementAccess().getAlternatives()); }
		(rule__WaitStatement__Alternatives)
		{ after(grammarAccess.getWaitStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeWaitStatement
entryRuleTimeWaitStatement
:
{ before(grammarAccess.getTimeWaitStatementRule()); }
	 ruleTimeWaitStatement
{ after(grammarAccess.getTimeWaitStatementRule()); } 
	 EOF 
;

// Rule TimeWaitStatement
ruleTimeWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getGroup()); }
		(rule__TimeWaitStatement__Group__0)
		{ after(grammarAccess.getTimeWaitStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContactWaitStatement
entryRuleContactWaitStatement
:
{ before(grammarAccess.getContactWaitStatementRule()); }
	 ruleContactWaitStatement
{ after(grammarAccess.getContactWaitStatementRule()); } 
	 EOF 
;

// Rule ContactWaitStatement
ruleContactWaitStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getGroup()); }
		(rule__ContactWaitStatement__Group__0)
		{ after(grammarAccess.getContactWaitStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpStatement
entryRuleOpStatement
:
{ before(grammarAccess.getOpStatementRule()); }
	 ruleOpStatement
{ after(grammarAccess.getOpStatementRule()); } 
	 EOF 
;

// Rule OpStatement
ruleOpStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpStatementAccess().getAlternatives()); }
		(rule__OpStatement__Alternatives)
		{ after(grammarAccess.getOpStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossingStatement
entryRuleCrossingStatement
:
{ before(grammarAccess.getCrossingStatementRule()); }
	 ruleCrossingStatement
{ after(grammarAccess.getCrossingStatementRule()); } 
	 EOF 
;

// Rule CrossingStatement
ruleCrossingStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossingStatementAccess().getGroup()); }
		(rule__CrossingStatement__Group__0)
		{ after(grammarAccess.getCrossingStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLightStatement
entryRuleLightStatement
:
{ before(grammarAccess.getLightStatementRule()); }
	 ruleLightStatement
{ after(grammarAccess.getLightStatementRule()); } 
	 EOF 
;

// Rule LightStatement
ruleLightStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLightStatementAccess().getGroup()); }
		(rule__LightStatement__Group__0)
		{ after(grammarAccess.getLightStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalStatement
entryRuleConditionalStatement
:
{ before(grammarAccess.getConditionalStatementRule()); }
	 ruleConditionalStatement
{ after(grammarAccess.getConditionalStatementRule()); } 
	 EOF 
;

// Rule ConditionalStatement
ruleConditionalStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getGroup()); }
		(rule__ConditionalStatement__Group__0)
		{ after(grammarAccess.getConditionalStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalLine
entryRuleConditionalLine
:
{ before(grammarAccess.getConditionalLineRule()); }
	 ruleConditionalLine
{ after(grammarAccess.getConditionalLineRule()); } 
	 EOF 
;

// Rule ConditionalLine
ruleConditionalLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalLineAccess().getGroup()); }
		(rule__ConditionalLine__Group__0)
		{ after(grammarAccess.getConditionalLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContactIndex
entryRuleContactIndex
:
{ before(grammarAccess.getContactIndexRule()); }
	 ruleContactIndex
{ after(grammarAccess.getContactIndexRule()); } 
	 EOF 
;

// Rule ContactIndex
ruleContactIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContactIndexAccess().getAlternatives()); }
		(rule__ContactIndex__Alternatives)
		{ after(grammarAccess.getContactIndexAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSEG_NAME
entryRuleSEG_NAME
:
{ before(grammarAccess.getSEG_NAMERule()); }
	 ruleSEG_NAME
{ after(grammarAccess.getSEG_NAMERule()); } 
	 EOF 
;

// Rule SEG_NAME
ruleSEG_NAME 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getAlternatives()); }
		(rule__SEG_NAME__Alternatives)
		{ after(grammarAccess.getSEG_NAMEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BLOCK_END__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBLOCK_ENDAccess().getEndKeyword_0()); }
		'End.'
		{ after(grammarAccess.getBLOCK_ENDAccess().getEndKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBLOCK_ENDAccess().getLoopKeyword_1()); }
		'Loop.'
		{ after(grammarAccess.getBLOCK_ENDAccess().getLoopKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSetStatementParserRuleCall_0()); }
		ruleSetStatement
		{ after(grammarAccess.getStatementAccess().getSetStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWaitStatementParserRuleCall_1()); }
		ruleWaitStatement
		{ after(grammarAccess.getStatementAccess().getWaitStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getOpStatementParserRuleCall_2()); }
		ruleOpStatement
		{ after(grammarAccess.getStatementAccess().getOpStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getConditionalStatementParserRuleCall_3()); }
		ruleConditionalStatement
		{ after(grammarAccess.getStatementAccess().getConditionalStatementParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetStatementAccess().getSetTrackStatementParserRuleCall_0()); }
		ruleSetTrackStatement
		{ after(grammarAccess.getSetStatementAccess().getSetTrackStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetStatementAccess().getSetPointStatementParserRuleCall_1()); }
		ruleSetPointStatement
		{ after(grammarAccess.getSetStatementAccess().getSetPointStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackSettingAccess().getGroup_0()); }
		(rule__TrackSetting__Group_0__0)
		{ after(grammarAccess.getTrackSettingAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrackSettingAccess().getStopKeyword_1()); }
		'stop'
		{ after(grammarAccess.getTrackSettingAccess().getStopKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Alternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackSettingAccess().getFullKeyword_0_0_0()); }
		'full'
		{ after(grammarAccess.getTrackSettingAccess().getFullKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTrackSettingAccess().getSlowKeyword_0_0_1()); }
		'slow'
		{ after(grammarAccess.getTrackSettingAccess().getSlowKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__OrientationAlternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getOrientationStraightKeyword_4_0_0()); }
		'straight'
		{ after(grammarAccess.getSetPointStatementAccess().getOrientationStraightKeyword_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetPointStatementAccess().getOrientationBranchKeyword_4_0_1()); }
		'branch'
		{ after(grammarAccess.getSetPointStatementAccess().getOrientationBranchKeyword_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaitStatementAccess().getTimeWaitStatementParserRuleCall_0()); }
		ruleTimeWaitStatement
		{ after(grammarAccess.getWaitStatementAccess().getTimeWaitStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWaitStatementAccess().getContactWaitStatementParserRuleCall_1()); }
		ruleContactWaitStatement
		{ after(grammarAccess.getWaitStatementAccess().getContactWaitStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__EventAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getEventReachKeyword_0_0_0()); }
		'Reach'
		{ after(grammarAccess.getContactWaitStatementAccess().getEventReachKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getEventPassKeyword_0_0_1()); }
		'Pass'
		{ after(grammarAccess.getContactWaitStatementAccess().getEventPassKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpStatementAccess().getCrossingStatementParserRuleCall_0()); }
		ruleCrossingStatement
		{ after(grammarAccess.getOpStatementAccess().getCrossingStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpStatementAccess().getLightStatementParserRuleCall_1()); }
		ruleLightStatement
		{ after(grammarAccess.getOpStatementAccess().getLightStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__ModeAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossingStatementAccess().getModeOpenKeyword_0_0_0()); }
		'Open'
		{ after(grammarAccess.getCrossingStatementAccess().getModeOpenKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCrossingStatementAccess().getModeCloseKeyword_0_0_1()); }
		'Close'
		{ after(grammarAccess.getCrossingStatementAccess().getModeCloseKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__StateAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getStateOnKeyword_3_0_0()); }
		'on'
		{ after(grammarAccess.getLightStatementAccess().getStateOnKeyword_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLightStatementAccess().getStateOffKeyword_3_0_1()); }
		'off'
		{ after(grammarAccess.getLightStatementAccess().getStateOffKeyword_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactIndex__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactIndexAccess().getFirstKeyword_0()); }
		'first'
		{ after(grammarAccess.getContactIndexAccess().getFirstKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getContactIndexAccess().getSecondKeyword_1()); }
		'second'
		{ after(grammarAccess.getContactIndexAccess().getSecondKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SEG_NAME__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_ST_0Keyword_0()); }
		'KH_ST_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_ST_0Keyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_ST_1Keyword_1()); }
		'KH_ST_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_ST_1Keyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_ST_2Keyword_2()); }
		'KH_ST_2'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_ST_2Keyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_ST_3Keyword_3()); }
		'KH_ST_3'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_ST_3Keyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_ST_4Keyword_4()); }
		'KH_ST_4'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_ST_4Keyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_ST_5Keyword_5()); }
		'KH_ST_5'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_ST_5Keyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_ST_6Keyword_6()); }
		'KH_ST_6'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_ST_6Keyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_0Keyword_7()); }
		'KH_LN_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_0Keyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_1Keyword_8()); }
		'KH_LN_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_1Keyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_2Keyword_9()); }
		'KH_LN_2'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_2Keyword_9()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_3Keyword_10()); }
		'KH_LN_3'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_3Keyword_10()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_4Keyword_11()); }
		'KH_LN_4'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_4Keyword_11()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_5Keyword_12()); }
		'KH_LN_5'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_5Keyword_12()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_6Keyword_13()); }
		'KH_LN_6'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_6Keyword_13()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_7Keyword_14()); }
		'KH_LN_7'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_7Keyword_14()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKH_LN_8Keyword_15()); }
		'KH_LN_8'
		{ after(grammarAccess.getSEG_NAMEAccess().getKH_LN_8Keyword_15()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKIO_LN_0Keyword_16()); }
		'KIO_LN_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getKIO_LN_0Keyword_16()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getKIO_LN_1Keyword_17()); }
		'KIO_LN_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getKIO_LN_1Keyword_17()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_ST_0Keyword_18()); }
		'OC_ST_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_ST_0Keyword_18()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_ST_1Keyword_19()); }
		'OC_ST_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_ST_1Keyword_19()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_ST_2Keyword_20()); }
		'OC_ST_2'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_ST_2Keyword_20()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_ST_3Keyword_21()); }
		'OC_ST_3'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_ST_3Keyword_21()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_ST_4Keyword_22()); }
		'OC_ST_4'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_ST_4Keyword_22()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_LN_0Keyword_23()); }
		'OC_LN_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_LN_0Keyword_23()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_LN_1Keyword_24()); }
		'OC_LN_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_LN_1Keyword_24()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_LN_2Keyword_25()); }
		'OC_LN_2'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_LN_2Keyword_25()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_LN_3Keyword_26()); }
		'OC_LN_3'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_LN_3Keyword_26()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_LN_4Keyword_27()); }
		'OC_LN_4'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_LN_4Keyword_27()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_LN_5Keyword_28()); }
		'OC_LN_5'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_LN_5Keyword_28()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_ST_0Keyword_29()); }
		'IC_ST_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_ST_0Keyword_29()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_ST_1Keyword_30()); }
		'IC_ST_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_ST_1Keyword_30()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_ST_2Keyword_31()); }
		'IC_ST_2'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_ST_2Keyword_31()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_ST_3Keyword_32()); }
		'IC_ST_3'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_ST_3Keyword_32()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_ST_4Keyword_33()); }
		'IC_ST_4'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_ST_4Keyword_33()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_LN_0Keyword_34()); }
		'IC_LN_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_LN_0Keyword_34()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_LN_1Keyword_35()); }
		'IC_LN_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_LN_1Keyword_35()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_LN_2Keyword_36()); }
		'IC_LN_2'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_LN_2Keyword_36()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_LN_3Keyword_37()); }
		'IC_LN_3'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_LN_3Keyword_37()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_LN_4Keyword_38()); }
		'IC_LN_4'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_LN_4Keyword_38()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_LN_5Keyword_39()); }
		'IC_LN_5'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_LN_5Keyword_39()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOC_JCT_0Keyword_40()); }
		'OC_JCT_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getOC_JCT_0Keyword_40()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIC_JCT_0Keyword_41()); }
		'IC_JCT_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getIC_JCT_0Keyword_41()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOI_LN_0Keyword_42()); }
		'OI_LN_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getOI_LN_0Keyword_42()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOI_LN_1Keyword_43()); }
		'OI_LN_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getOI_LN_1Keyword_43()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getOI_LN_2Keyword_44()); }
		'OI_LN_2'
		{ after(grammarAccess.getSEG_NAMEAccess().getOI_LN_2Keyword_44()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIO_LN_0Keyword_45()); }
		'IO_LN_0'
		{ after(grammarAccess.getSEG_NAMEAccess().getIO_LN_0Keyword_45()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIO_LN_1Keyword_46()); }
		'IO_LN_1'
		{ after(grammarAccess.getSEG_NAMEAccess().getIO_LN_1Keyword_46()); }
	)
	|
	(
		{ before(grammarAccess.getSEG_NAMEAccess().getIO_LN_2Keyword_47()); }
		'IO_LN_2'
		{ after(grammarAccess.getSEG_NAMEAccess().getIO_LN_2Keyword_47()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStartKeyword_0()); }
	'Start:'
	{ after(grammarAccess.getBlockAccess().getStartKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
		(rule__Block__StatementsAssignment_1)
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
		(rule__Block__StatementsAssignment_1)*
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getEndAssignment_2()); }
	(rule__Block__EndAssignment_2)
	{ after(grammarAccess.getBlockAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetTrackStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__0__Impl
	rule__SetTrackStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getSetTrackKeyword_0()); }
	'Set track'
	{ after(grammarAccess.getSetTrackStatementAccess().getSetTrackKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__1__Impl
	rule__SetTrackStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_1()); }
	(rule__SetTrackStatement__SegmentsAssignment_1)
	{ after(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__2__Impl
	rule__SetTrackStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getGroup_2()); }
	(rule__SetTrackStatement__Group_2__0)*
	{ after(grammarAccess.getSetTrackStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__3__Impl
	rule__SetTrackStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getSetTrackStatementAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__4__Impl
	rule__SetTrackStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getModeAssignment_4()); }
	(rule__SetTrackStatement__ModeAssignment_4)
	{ after(grammarAccess.getSetTrackStatementAccess().getModeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getFullStopKeyword_5()); }
	'.'
	{ after(grammarAccess.getSetTrackStatementAccess().getFullStopKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetTrackStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group_2__0__Impl
	rule__SetTrackStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSetTrackStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetTrackStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_2_1()); }
	(rule__SetTrackStatement__SegmentsAssignment_2_1)
	{ after(grammarAccess.getSetTrackStatementAccess().getSegmentsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrackSetting__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackSetting__Group_0__0__Impl
	rule__TrackSetting__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackSettingAccess().getAlternatives_0_0()); }
	(rule__TrackSetting__Alternatives_0_0)
	{ after(grammarAccess.getTrackSettingAccess().getAlternatives_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrackSetting__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrackSetting__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackSettingAccess().getReverseKeyword_0_1()); }
	('reverse')?
	{ after(grammarAccess.getTrackSettingAccess().getReverseKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetPointStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__0__Impl
	rule__SetPointStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getSetPointKeyword_0()); }
	'Set point'
	{ after(grammarAccess.getSetPointStatementAccess().getSetPointKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__1__Impl
	rule__SetPointStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getPointsAssignment_1()); }
	(rule__SetPointStatement__PointsAssignment_1)
	{ after(grammarAccess.getSetPointStatementAccess().getPointsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__2__Impl
	rule__SetPointStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getGroup_2()); }
	(rule__SetPointStatement__Group_2__0)*
	{ after(grammarAccess.getSetPointStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__3__Impl
	rule__SetPointStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getSetPointStatementAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__4__Impl
	rule__SetPointStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getOrientationAssignment_4()); }
	(rule__SetPointStatement__OrientationAssignment_4)
	{ after(grammarAccess.getSetPointStatementAccess().getOrientationAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getFullStopKeyword_5()); }
	'.'
	{ after(grammarAccess.getSetPointStatementAccess().getFullStopKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetPointStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group_2__0__Impl
	rule__SetPointStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSetPointStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetPointStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetPointStatementAccess().getPointsAssignment_2_1()); }
	(rule__SetPointStatement__PointsAssignment_2_1)
	{ after(grammarAccess.getSetPointStatementAccess().getPointsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeWaitStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__0__Impl
	rule__TimeWaitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0()); }
		('Wait for')
		{ after(grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0()); }
	)
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0()); }
		('Wait for')*
		{ after(grammarAccess.getTimeWaitStatementAccess().getWaitForKeyword_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__1__Impl
	rule__TimeWaitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1()); }
		(rule__TimeWaitStatement__TimeAssignment_1)
		{ after(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1()); }
	)
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1()); }
		(rule__TimeWaitStatement__TimeAssignment_1)*
		{ after(grammarAccess.getTimeWaitStatementAccess().getTimeAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeWaitStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeWaitStatementAccess().getSecondsKeyword_2()); }
	'seconds.'
	{ after(grammarAccess.getTimeWaitStatementAccess().getSecondsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContactWaitStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__0__Impl
	rule__ContactWaitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getEventAssignment_0()); }
	(rule__ContactWaitStatement__EventAssignment_0)
	{ after(grammarAccess.getContactWaitStatementAccess().getEventAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__1__Impl
	rule__ContactWaitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getContactIndexAssignment_1()); }
	(rule__ContactWaitStatement__ContactIndexAssignment_1)
	{ after(grammarAccess.getContactWaitStatementAccess().getContactIndexAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__2__Impl
	rule__ContactWaitStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getContactOfKeyword_2()); }
	'contact of'
	{ after(grammarAccess.getContactWaitStatementAccess().getContactOfKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__3__Impl
	rule__ContactWaitStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getSegNameAssignment_3()); }
	(rule__ContactWaitStatement__SegNameAssignment_3)
	{ after(grammarAccess.getContactWaitStatementAccess().getSegNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContactWaitStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContactWaitStatementAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getContactWaitStatementAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CrossingStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossingStatement__Group__0__Impl
	rule__CrossingStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossingStatementAccess().getModeAssignment_0()); }
	(rule__CrossingStatement__ModeAssignment_0)
	{ after(grammarAccess.getCrossingStatementAccess().getModeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossingStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossingStatementAccess().getCrossingKeyword_1()); }
	'crossing.'
	{ after(grammarAccess.getCrossingStatementAccess().getCrossingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LightStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__0__Impl
	rule__LightStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getTurnLightKeyword_0()); }
	'Turn light'
	{ after(grammarAccess.getLightStatementAccess().getTurnLightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__1__Impl
	rule__LightStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getLightsAssignment_1()); }
	(rule__LightStatement__LightsAssignment_1)
	{ after(grammarAccess.getLightStatementAccess().getLightsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__2__Impl
	rule__LightStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getGroup_2()); }
	(rule__LightStatement__Group_2__0)*
	{ after(grammarAccess.getLightStatementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__3__Impl
	rule__LightStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getStateAssignment_3()); }
	(rule__LightStatement__StateAssignment_3)
	{ after(grammarAccess.getLightStatementAccess().getStateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getLightStatementAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LightStatement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group_2__0__Impl
	rule__LightStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getLightStatementAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightStatementAccess().getLightsAssignment_2_1()); }
	(rule__LightStatement__LightsAssignment_2_1)
	{ after(grammarAccess.getLightStatementAccess().getLightsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalStatement__Group__0__Impl
	rule__ConditionalStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalStatementAccess().getBranchKeyword_0()); }
	'Branch:'
	{ after(grammarAccess.getConditionalStatementAccess().getBranchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalStatement__Group__1__Impl
	rule__ConditionalStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalStatementAccess().getLinesAssignment_1()); }
	(rule__ConditionalStatement__LinesAssignment_1)
	{ after(grammarAccess.getConditionalStatementAccess().getLinesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2()); }
		(rule__ConditionalStatement__LinesAssignment_2)
		{ after(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2()); }
		(rule__ConditionalStatement__LinesAssignment_2)*
		{ after(grammarAccess.getConditionalStatementAccess().getLinesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__0__Impl
	rule__ConditionalLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getIfKeyword_0()); }
	'If'
	{ after(grammarAccess.getConditionalLineAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__1__Impl
	rule__ConditionalLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getContactAssignment_1()); }
	(rule__ConditionalLine__ContactAssignment_1)
	{ after(grammarAccess.getConditionalLineAccess().getContactAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__2__Impl
	rule__ConditionalLine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConditionalLineAccess().getContactOfKeyword_2()); }
		('contact of')
		{ after(grammarAccess.getConditionalLineAccess().getContactOfKeyword_2()); }
	)
	(
		{ before(grammarAccess.getConditionalLineAccess().getContactOfKeyword_2()); }
		('contact of')*
		{ after(grammarAccess.getConditionalLineAccess().getContactOfKeyword_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__3__Impl
	rule__ConditionalLine__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getSegNameAssignment_3()); }
	(rule__ConditionalLine__SegNameAssignment_3)
	{ after(grammarAccess.getConditionalLineAccess().getSegNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__4__Impl
	rule__ConditionalLine__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConditionalLineAccess().getIsReachedFirstDoKeyword_4()); }
		('is reached first, do')
		{ after(grammarAccess.getConditionalLineAccess().getIsReachedFirstDoKeyword_4()); }
	)
	(
		{ before(grammarAccess.getConditionalLineAccess().getIsReachedFirstDoKeyword_4()); }
		('is reached first, do')*
		{ after(grammarAccess.getConditionalLineAccess().getIsReachedFirstDoKeyword_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalLine__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalLineAccess().getBlockAssignment_5()); }
	(rule__ConditionalLine__BlockAssignment_5)
	{ after(grammarAccess.getConditionalLineAccess().getBlockAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__BlocksAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getBlocksBlockParserRuleCall_0()); }
		ruleBlock
		{ after(grammarAccess.getProgramAccess().getBlocksBlockParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getEndBLOCK_ENDParserRuleCall_2_0()); }
		ruleBLOCK_END
		{ after(grammarAccess.getBlockAccess().getEndBLOCK_ENDParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__SegmentsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getSegmentsSEG_NAMEParserRuleCall_1_0()); }
		ruleSEG_NAME
		{ after(grammarAccess.getSetTrackStatementAccess().getSegmentsSEG_NAMEParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__SegmentsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getSegmentsSEG_NAMEParserRuleCall_2_1_0()); }
		ruleSEG_NAME
		{ after(grammarAccess.getSetTrackStatementAccess().getSegmentsSEG_NAMEParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTrackStatement__ModeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetTrackStatementAccess().getModeTrackSettingParserRuleCall_4_0()); }
		ruleTrackSetting
		{ after(grammarAccess.getSetTrackStatementAccess().getModeTrackSettingParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__PointsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getPointsINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSetPointStatementAccess().getPointsINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__PointsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getPointsINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSetPointStatementAccess().getPointsINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetPointStatement__OrientationAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetPointStatementAccess().getOrientationAlternatives_4_0()); }
		(rule__SetPointStatement__OrientationAlternatives_4_0)
		{ after(grammarAccess.getSetPointStatementAccess().getOrientationAlternatives_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeWaitStatement__TimeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeWaitStatementAccess().getTimeINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTimeWaitStatementAccess().getTimeINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__EventAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getEventAlternatives_0_0()); }
		(rule__ContactWaitStatement__EventAlternatives_0_0)
		{ after(grammarAccess.getContactWaitStatementAccess().getEventAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__ContactIndexAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getContactIndexContactIndexParserRuleCall_1_0()); }
		ruleContactIndex
		{ after(grammarAccess.getContactWaitStatementAccess().getContactIndexContactIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContactWaitStatement__SegNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContactWaitStatementAccess().getSegNameSEG_NAMEParserRuleCall_3_0()); }
		ruleSEG_NAME
		{ after(grammarAccess.getContactWaitStatementAccess().getSegNameSEG_NAMEParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossingStatement__ModeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossingStatementAccess().getModeAlternatives_0_0()); }
		(rule__CrossingStatement__ModeAlternatives_0_0)
		{ after(grammarAccess.getCrossingStatementAccess().getModeAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__LightsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__LightsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLightStatementAccess().getLightsINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightStatement__StateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightStatementAccess().getStateAlternatives_3_0()); }
		(rule__LightStatement__StateAlternatives_3_0)
		{ after(grammarAccess.getLightStatementAccess().getStateAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__LinesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_1_0()); }
		ruleConditionalLine
		{ after(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalStatement__LinesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_2_0()); }
		ruleConditionalLine
		{ after(grammarAccess.getConditionalStatementAccess().getLinesConditionalLineParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__ContactAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalLineAccess().getContactContactIndexParserRuleCall_1_0()); }
		ruleContactIndex
		{ after(grammarAccess.getConditionalLineAccess().getContactContactIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__SegNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalLineAccess().getSegNameSEG_NAMEParserRuleCall_3_0()); }
		ruleSEG_NAME
		{ after(grammarAccess.getConditionalLineAccess().getSegNameSEG_NAMEParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalLine__BlockAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalLineAccess().getBlockBlockParserRuleCall_5_0()); }
		ruleBlock
		{ after(grammarAccess.getConditionalLineAccess().getBlockBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
