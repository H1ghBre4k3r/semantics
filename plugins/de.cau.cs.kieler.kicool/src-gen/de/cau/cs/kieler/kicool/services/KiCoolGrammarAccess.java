/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kicool.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class KiCoolGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdQualifiedIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cVersionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionINTTerminalRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		private final Keyword cLabelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelEStringParserRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInputKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInputClassAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInputClassIDTerminalRuleCall_6_1_0 = (RuleCall)cInputClassAssignment_6_1.eContents().get(0);
		private final Assignment cIntermediatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIntermediatesIntermediateReferenceParserRuleCall_7_0 = (RuleCall)cIntermediatesAssignment_7.eContents().get(0);
		private final Assignment cProcessorsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cProcessorsProcessorGroupParserRuleCall_8_0 = (RuleCall)cProcessorsAssignment_8.eContents().get(0);
		
		/// **
		// * @author ssm
		// * @kieler.design 2016-10-19 proposed 
		// * @kieler.rating 2016-10-19 proposed yellow
		// * / System kicool::System:
		//	'system' id=QualifiedID 'version' version=INT 'label' label=EString ('input' inputClass=ID)?
		//	intermediates+=IntermediateReference*
		//	processors=ProcessorGroup
		@Override public ParserRule getRule() { return rule; }

		//'system' id=QualifiedID 'version' version=INT 'label' label=EString ('input' inputClass=ID)?
		//intermediates+=IntermediateReference* processors=ProcessorGroup
		public Group getGroup() { return cGroup; }

		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//id=QualifiedID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_1_0() { return cIdQualifiedIDParserRuleCall_1_0; }

		//'version'
		public Keyword getVersionKeyword_2() { return cVersionKeyword_2; }

		//version=INT
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }

		//INT
		public RuleCall getVersionINTTerminalRuleCall_3_0() { return cVersionINTTerminalRuleCall_3_0; }

		//'label'
		public Keyword getLabelKeyword_4() { return cLabelKeyword_4; }

		//label=EString
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }

		//EString
		public RuleCall getLabelEStringParserRuleCall_5_0() { return cLabelEStringParserRuleCall_5_0; }

		//('input' inputClass=ID)?
		public Group getGroup_6() { return cGroup_6; }

		//'input'
		public Keyword getInputKeyword_6_0() { return cInputKeyword_6_0; }

		//inputClass=ID
		public Assignment getInputClassAssignment_6_1() { return cInputClassAssignment_6_1; }

		//ID
		public RuleCall getInputClassIDTerminalRuleCall_6_1_0() { return cInputClassIDTerminalRuleCall_6_1_0; }

		//intermediates+=IntermediateReference*
		public Assignment getIntermediatesAssignment_7() { return cIntermediatesAssignment_7; }

		//IntermediateReference
		public RuleCall getIntermediatesIntermediateReferenceParserRuleCall_7_0() { return cIntermediatesIntermediateReferenceParserRuleCall_7_0; }

		//processors=ProcessorGroup
		public Assignment getProcessorsAssignment_8() { return cProcessorsAssignment_8; }

		//ProcessorGroup
		public RuleCall getProcessorsProcessorGroupParserRuleCall_8_0() { return cProcessorsProcessorGroupParserRuleCall_8_0; }
	}

	public class IntermediateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.IntermediateReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntermediateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdQualifiedIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasEStringParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//IntermediateReference kicool::IntermediateReference:
		//	'intermediate' id=QualifiedID ('alias' alias=EString)?
		@Override public ParserRule getRule() { return rule; }

		//'intermediate' id=QualifiedID ('alias' alias=EString)?
		public Group getGroup() { return cGroup; }

		//'intermediate'
		public Keyword getIntermediateKeyword_0() { return cIntermediateKeyword_0; }

		//id=QualifiedID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_1_0() { return cIdQualifiedIDParserRuleCall_1_0; }

		//('alias' alias=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }

		//alias=EString
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//EString
		public RuleCall getAliasEStringParserRuleCall_2_1_0() { return cAliasEStringParserRuleCall_2_1_0; }
	}

	public class ProcessorGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.ProcessorGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLabelAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelEStringParserRuleCall_0_1_0 = (RuleCall)cLabelAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cProcessorsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cProcessorsProcessorParserRuleCall_1_0_0 = (RuleCall)cProcessorsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSystemKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cProcessorsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cProcessorsProcessorSystemParserRuleCall_1_1_1_0 = (RuleCall)cProcessorsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cProcessorsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cProcessorsProcessorAlternativeGroupParserRuleCall_1_2_1_0 = (RuleCall)cProcessorsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cProcessorsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cProcessorsProcessorGroupParserRuleCall_1_3_1_0 = (RuleCall)cProcessorsAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//ProcessorGroup kicool::ProcessorGroup:
		//	('label' label=EString)? (processors+=Processor
		//	|
		//	'system' processors+=ProcessorSystem
		//	| '['
		//	processors+=ProcessorAlternativeGroup
		//	']' | '['
		//	processors+=ProcessorGroup
		//	']')+
		@Override public ParserRule getRule() { return rule; }

		//('label' label=EString)? (processors+=Processor | 'system' processors+=ProcessorSystem | '['
		//processors+=ProcessorAlternativeGroup ']' | '[' processors+=ProcessorGroup ']')+
		public Group getGroup() { return cGroup; }

		//('label' label=EString)?
		public Group getGroup_0() { return cGroup_0; }

		//'label'
		public Keyword getLabelKeyword_0_0() { return cLabelKeyword_0_0; }

		//label=EString
		public Assignment getLabelAssignment_0_1() { return cLabelAssignment_0_1; }

		//EString
		public RuleCall getLabelEStringParserRuleCall_0_1_0() { return cLabelEStringParserRuleCall_0_1_0; }

		//(processors+=Processor | 'system' processors+=ProcessorSystem | '[' processors+=ProcessorAlternativeGroup ']' | '['
		//processors+=ProcessorGroup ']')+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//processors+=Processor
		public Assignment getProcessorsAssignment_1_0() { return cProcessorsAssignment_1_0; }

		//Processor
		public RuleCall getProcessorsProcessorParserRuleCall_1_0_0() { return cProcessorsProcessorParserRuleCall_1_0_0; }

		//'system' processors+=ProcessorSystem
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'system'
		public Keyword getSystemKeyword_1_1_0() { return cSystemKeyword_1_1_0; }

		//processors+=ProcessorSystem
		public Assignment getProcessorsAssignment_1_1_1() { return cProcessorsAssignment_1_1_1; }

		//ProcessorSystem
		public RuleCall getProcessorsProcessorSystemParserRuleCall_1_1_1_0() { return cProcessorsProcessorSystemParserRuleCall_1_1_1_0; }

		//'[' processors+=ProcessorAlternativeGroup ']'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//processors+=ProcessorAlternativeGroup
		public Assignment getProcessorsAssignment_1_2_1() { return cProcessorsAssignment_1_2_1; }

		//ProcessorAlternativeGroup
		public RuleCall getProcessorsProcessorAlternativeGroupParserRuleCall_1_2_1_0() { return cProcessorsProcessorAlternativeGroupParserRuleCall_1_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }

		//'[' processors+=ProcessorGroup ']'
		public Group getGroup_1_3() { return cGroup_1_3; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_3_0() { return cLeftSquareBracketKeyword_1_3_0; }

		//processors+=ProcessorGroup
		public Assignment getProcessorsAssignment_1_3_1() { return cProcessorsAssignment_1_3_1; }

		//ProcessorGroup
		public RuleCall getProcessorsProcessorGroupParserRuleCall_1_3_1_0() { return cProcessorsProcessorGroupParserRuleCall_1_3_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_3_2() { return cRightSquareBracketKeyword_1_3_2; }
	}

	public class ProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.Processor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPreKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cSetKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cPresetsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cPresetsKVPairParserRuleCall_0_1_1_0 = (RuleCall)cPresetsAssignment_0_1_1.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdQualifiedIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIntermediateKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetricAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cMetricIntermediateReferenceCrossReference_2_1_0 = (CrossReference)cMetricAssignment_2_1.eContents().get(0);
		private final RuleCall cMetricIntermediateReferenceQualifiedIDParserRuleCall_2_1_0_1 = (RuleCall)cMetricIntermediateReferenceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPostKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSetKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPostsetsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPostsetsKVPairParserRuleCall_3_1_1_0 = (RuleCall)cPostsetsAssignment_3_1_1.eContents().get(0);
		
		//Processor kicool::ProcessorReference:
		//	('pre' ('set' presets+=KVPair)+)?
		//	id=QualifiedID ('intermediate' metric=[kicool::IntermediateReference|QualifiedID])? ('post' ('set'
		//	postsets+=KVPair)+)?
		@Override public ParserRule getRule() { return rule; }

		//('pre' ('set' presets+=KVPair)+)? id=QualifiedID ('intermediate' metric=[kicool::IntermediateReference|QualifiedID])?
		//('post' ('set' postsets+=KVPair)+)?
		public Group getGroup() { return cGroup; }

		//('pre' ('set' presets+=KVPair)+)?
		public Group getGroup_0() { return cGroup_0; }

		//'pre'
		public Keyword getPreKeyword_0_0() { return cPreKeyword_0_0; }

		//('set' presets+=KVPair)+
		public Group getGroup_0_1() { return cGroup_0_1; }

		//'set'
		public Keyword getSetKeyword_0_1_0() { return cSetKeyword_0_1_0; }

		//presets+=KVPair
		public Assignment getPresetsAssignment_0_1_1() { return cPresetsAssignment_0_1_1; }

		//KVPair
		public RuleCall getPresetsKVPairParserRuleCall_0_1_1_0() { return cPresetsKVPairParserRuleCall_0_1_1_0; }

		//id=QualifiedID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_1_0() { return cIdQualifiedIDParserRuleCall_1_0; }

		//('intermediate' metric=[kicool::IntermediateReference|QualifiedID])?
		public Group getGroup_2() { return cGroup_2; }

		//'intermediate'
		public Keyword getIntermediateKeyword_2_0() { return cIntermediateKeyword_2_0; }

		//metric=[kicool::IntermediateReference|QualifiedID]
		public Assignment getMetricAssignment_2_1() { return cMetricAssignment_2_1; }

		//[kicool::IntermediateReference|QualifiedID]
		public CrossReference getMetricIntermediateReferenceCrossReference_2_1_0() { return cMetricIntermediateReferenceCrossReference_2_1_0; }

		//QualifiedID
		public RuleCall getMetricIntermediateReferenceQualifiedIDParserRuleCall_2_1_0_1() { return cMetricIntermediateReferenceQualifiedIDParserRuleCall_2_1_0_1; }

		//('post' ('set' postsets+=KVPair)+)?
		public Group getGroup_3() { return cGroup_3; }

		//'post'
		public Keyword getPostKeyword_3_0() { return cPostKeyword_3_0; }

		//('set' postsets+=KVPair)+
		public Group getGroup_3_1() { return cGroup_3_1; }

		//'set'
		public Keyword getSetKeyword_3_1_0() { return cSetKeyword_3_1_0; }

		//postsets+=KVPair
		public Assignment getPostsetsAssignment_3_1_1() { return cPostsetsAssignment_3_1_1; }

		//KVPair
		public RuleCall getPostsetsKVPairParserRuleCall_3_1_1_0() { return cPostsetsKVPairParserRuleCall_3_1_1_0; }
	}

	public class ProcessorSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.ProcessorSystem");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdQualifiedIDParserRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//ProcessorSystem kicool::ProcessorSystem:
		//	id=QualifiedID
		@Override public ParserRule getRule() { return rule; }

		//id=QualifiedID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_0() { return cIdQualifiedIDParserRuleCall_0; }
	}

	public class ProcessorAlternativeGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.ProcessorAlternativeGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLabelAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelEStringParserRuleCall_0_1_0 = (RuleCall)cLabelAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cProcessorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cProcessorsProcessorGroupParserRuleCall_1_0_0 = (RuleCall)cProcessorsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cProcessorsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cProcessorsProcessorGroupParserRuleCall_1_1_1_0 = (RuleCall)cProcessorsAssignment_1_1_1.eContents().get(0);
		
		//ProcessorAlternativeGroup kicool::ProcessorAlternativeGroup:
		//	('label' label=EString)? (processors+=ProcessorGroup ('|'
		//	processors+=ProcessorGroup)+)
		@Override public ParserRule getRule() { return rule; }

		//('label' label=EString)? (processors+=ProcessorGroup ('|' processors+=ProcessorGroup)+)
		public Group getGroup() { return cGroup; }

		//('label' label=EString)?
		public Group getGroup_0() { return cGroup_0; }

		//'label'
		public Keyword getLabelKeyword_0_0() { return cLabelKeyword_0_0; }

		//label=EString
		public Assignment getLabelAssignment_0_1() { return cLabelAssignment_0_1; }

		//EString
		public RuleCall getLabelEStringParserRuleCall_0_1_0() { return cLabelEStringParserRuleCall_0_1_0; }

		//(processors+=ProcessorGroup ('|' processors+=ProcessorGroup)+)
		public Group getGroup_1() { return cGroup_1; }

		//processors+=ProcessorGroup
		public Assignment getProcessorsAssignment_1_0() { return cProcessorsAssignment_1_0; }

		//ProcessorGroup
		public RuleCall getProcessorsProcessorGroupParserRuleCall_1_0_0() { return cProcessorsProcessorGroupParserRuleCall_1_0_0; }

		//('|' processors+=ProcessorGroup)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'|'
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }

		//processors+=ProcessorGroup
		public Assignment getProcessorsAssignment_1_1_1() { return cProcessorsAssignment_1_1_1; }

		//ProcessorGroup
		public RuleCall getProcessorsProcessorGroupParserRuleCall_1_1_1_0() { return cProcessorsProcessorGroupParserRuleCall_1_1_1_0; }
	}

	public class KVPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.KVPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cIsKeyValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsKeyValueKeyKeyword_1_0 = (Keyword)cIsKeyValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEStringAllTypesParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//KVPair kicool::KVPair:
		//	key=EString isKeyValue?='key'? value=EStringAllTypes
		@Override public ParserRule getRule() { return rule; }

		//key=EString isKeyValue?='key'? value=EStringAllTypes
		public Group getGroup() { return cGroup; }

		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }

		//isKeyValue?='key'?
		public Assignment getIsKeyValueAssignment_1() { return cIsKeyValueAssignment_1; }

		//'key'
		public Keyword getIsKeyValueKeyKeyword_1_0() { return cIsKeyValueKeyKeyword_1_0; }

		//value=EStringAllTypes
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//EStringAllTypes
		public RuleCall getValueEStringAllTypesParserRuleCall_2_0() { return cValueEStringAllTypesParserRuleCall_2_0; }
	}
	
	
	private final SystemElements pSystem;
	private final IntermediateReferenceElements pIntermediateReference;
	private final ProcessorGroupElements pProcessorGroup;
	private final ProcessorElements pProcessor;
	private final ProcessorSystemElements pProcessorSystem;
	private final ProcessorAlternativeGroupElements pProcessorAlternativeGroup;
	private final KVPairElements pKVPair;
	
	private final Grammar grammar;

	private final AnnotationsGrammarAccess gaAnnotations;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KiCoolGrammarAccess(GrammarProvider grammarProvider,
		AnnotationsGrammarAccess gaAnnotations,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pIntermediateReference = new IntermediateReferenceElements();
		this.pProcessorGroup = new ProcessorGroupElements();
		this.pProcessor = new ProcessorElements();
		this.pProcessorSystem = new ProcessorSystemElements();
		this.pProcessorAlternativeGroup = new ProcessorAlternativeGroupElements();
		this.pKVPair = new KVPairElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kicool.KiCool".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// **
	// * @author ssm
	// * @kieler.design 2016-10-19 proposed 
	// * @kieler.rating 2016-10-19 proposed yellow
	// * / System kicool::System:
	//	'system' id=QualifiedID 'version' version=INT 'label' label=EString ('input' inputClass=ID)?
	//	intermediates+=IntermediateReference*
	//	processors=ProcessorGroup
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//IntermediateReference kicool::IntermediateReference:
	//	'intermediate' id=QualifiedID ('alias' alias=EString)?
	public IntermediateReferenceElements getIntermediateReferenceAccess() {
		return pIntermediateReference;
	}
	
	public ParserRule getIntermediateReferenceRule() {
		return getIntermediateReferenceAccess().getRule();
	}

	//ProcessorGroup kicool::ProcessorGroup:
	//	('label' label=EString)? (processors+=Processor
	//	|
	//	'system' processors+=ProcessorSystem
	//	| '['
	//	processors+=ProcessorAlternativeGroup
	//	']' | '['
	//	processors+=ProcessorGroup
	//	']')+
	public ProcessorGroupElements getProcessorGroupAccess() {
		return pProcessorGroup;
	}
	
	public ParserRule getProcessorGroupRule() {
		return getProcessorGroupAccess().getRule();
	}

	//Processor kicool::ProcessorReference:
	//	('pre' ('set' presets+=KVPair)+)?
	//	id=QualifiedID ('intermediate' metric=[kicool::IntermediateReference|QualifiedID])? ('post' ('set'
	//	postsets+=KVPair)+)?
	public ProcessorElements getProcessorAccess() {
		return pProcessor;
	}
	
	public ParserRule getProcessorRule() {
		return getProcessorAccess().getRule();
	}

	//ProcessorSystem kicool::ProcessorSystem:
	//	id=QualifiedID
	public ProcessorSystemElements getProcessorSystemAccess() {
		return pProcessorSystem;
	}
	
	public ParserRule getProcessorSystemRule() {
		return getProcessorSystemAccess().getRule();
	}

	//ProcessorAlternativeGroup kicool::ProcessorAlternativeGroup:
	//	('label' label=EString)? (processors+=ProcessorGroup ('|'
	//	processors+=ProcessorGroup)+)
	public ProcessorAlternativeGroupElements getProcessorAlternativeGroupAccess() {
		return pProcessorAlternativeGroup;
	}
	
	public ParserRule getProcessorAlternativeGroupRule() {
		return getProcessorAlternativeGroupAccess().getRule();
	}

	//KVPair kicool::KVPair:
	//	key=EString isKeyValue?='key'? value=EStringAllTypes
	public KVPairElements getKVPairAccess() {
		return pKVPair;
	}
	
	public ParserRule getKVPairRule() {
		return getKVPairAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// General rule for pragmas
	//// We only have string and tag pragmas.    
	//Pragma:
	//	StringPragma | PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}

	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations. 
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	//RestrictedTypeAnnotation Annotation:
	//	CommentAnnotation | RestrictedKeyStringValueAnnotation | RestrictedTypedKeyStringValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}

	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//QuotedStringAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	//// e.g.: / ** semantic comment * /
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation Annotation:
	//	'@' name=ExtendedID
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//PragmaTag Pragma:
	//	'#' name=ExtendedID
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}

	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//RestrictedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}

	//StringPragma:
	//	'#' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringAllTypes (',' values+=EStringAllTypes)*
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//RestrictedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//EStringAllTypes:
	//	STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}

	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID ("." | "-" ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//QualifiedID:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//terminal COMMENT_ANNOTATION:
	//	'/ **'->'* /';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *' !'*'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
