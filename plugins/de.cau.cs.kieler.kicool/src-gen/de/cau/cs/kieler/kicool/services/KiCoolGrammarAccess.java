/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kicool.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KiCoolGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPragmasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0 = (RuleCall)cPragmasAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cPublicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPublicPublicKeyword_2_0 = (Keyword)cPublicAssignment_2.eContents().get(0);
		private final Assignment cDeveloperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cDeveloperDeveloperKeyword_3_0 = (Keyword)cDeveloperAssignment_3.eContents().get(0);
		private final Assignment cSimulationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cSimulationSimulationKeyword_4_0 = (Keyword)cSimulationAssignment_4.eContents().get(0);
		private final Keyword cSystemKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIdAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIdQualifiedIDParserRuleCall_6_0 = (RuleCall)cIdAssignment_6.eContents().get(0);
		private final Keyword cLabelKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLabelAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLabelEStringParserRuleCall_8_0 = (RuleCall)cLabelAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cStartKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cConfigKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cStartConfigAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cStartConfigJsonObjectValueParserRuleCall_9_2_0 = (RuleCall)cStartConfigAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cConfigKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cConfigAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cConfigJsonObjectValueParserRuleCall_10_1_0 = (RuleCall)cConfigAssignment_10_1.eContents().get(0);
		private final Assignment cIntermediatesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cIntermediatesIntermediateReferenceParserRuleCall_11_0 = (RuleCall)cIntermediatesAssignment_11.eContents().get(0);
		private final Assignment cProcessorsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cProcessorsProcessorGroupParserRuleCall_12_0 = (RuleCall)cProcessorsAssignment_12.eContents().get(0);
		
		///**
		// * @author ssm, als
		// * @kieler.design 2016-10-19 proposed 
		// * @kieler.rating 2016-10-19 proposed yellow
		// */ System kicool::System:
		//	pragmas+=Pragma*
		//	annotations+=Annotation*
		//	public?='public'?
		//	developer?='developer'?
		//	simulation?='simulation'?
		//	'system' id=QualifiedID
		//	'label' label=EString ('start' 'config' startConfig=JsonObjectValue)? ('config' config=JsonObjectValue)?
		//	intermediates+=IntermediateReference*
		//	processors=ProcessorGroup;
		@Override public ParserRule getRule() { return rule; }
		
		//pragmas+=Pragma* annotations+=Annotation* public?='public'? developer?='developer'? simulation?='simulation'? 'system'
		//id=QualifiedID 'label' label=EString ('start' 'config' startConfig=JsonObjectValue)? ('config' config=JsonObjectValue)?
		//intermediates+=IntermediateReference* processors=ProcessorGroup
		public Group getGroup() { return cGroup; }
		
		//pragmas+=Pragma*
		public Assignment getPragmasAssignment_0() { return cPragmasAssignment_0; }
		
		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0() { return cPragmasPragmaParserRuleCall_0_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//public?='public'?
		public Assignment getPublicAssignment_2() { return cPublicAssignment_2; }
		
		//'public'
		public Keyword getPublicPublicKeyword_2_0() { return cPublicPublicKeyword_2_0; }
		
		//developer?='developer'?
		public Assignment getDeveloperAssignment_3() { return cDeveloperAssignment_3; }
		
		//'developer'
		public Keyword getDeveloperDeveloperKeyword_3_0() { return cDeveloperDeveloperKeyword_3_0; }
		
		//simulation?='simulation'?
		public Assignment getSimulationAssignment_4() { return cSimulationAssignment_4; }
		
		//'simulation'
		public Keyword getSimulationSimulationKeyword_4_0() { return cSimulationSimulationKeyword_4_0; }
		
		//'system'
		public Keyword getSystemKeyword_5() { return cSystemKeyword_5; }
		
		//id=QualifiedID
		public Assignment getIdAssignment_6() { return cIdAssignment_6; }
		
		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_6_0() { return cIdQualifiedIDParserRuleCall_6_0; }
		
		//'label'
		public Keyword getLabelKeyword_7() { return cLabelKeyword_7; }
		
		//label=EString
		public Assignment getLabelAssignment_8() { return cLabelAssignment_8; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_8_0() { return cLabelEStringParserRuleCall_8_0; }
		
		//('start' 'config' startConfig=JsonObjectValue)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'start'
		public Keyword getStartKeyword_9_0() { return cStartKeyword_9_0; }
		
		//'config'
		public Keyword getConfigKeyword_9_1() { return cConfigKeyword_9_1; }
		
		//startConfig=JsonObjectValue
		public Assignment getStartConfigAssignment_9_2() { return cStartConfigAssignment_9_2; }
		
		//JsonObjectValue
		public RuleCall getStartConfigJsonObjectValueParserRuleCall_9_2_0() { return cStartConfigJsonObjectValueParserRuleCall_9_2_0; }
		
		//('config' config=JsonObjectValue)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'config'
		public Keyword getConfigKeyword_10_0() { return cConfigKeyword_10_0; }
		
		//config=JsonObjectValue
		public Assignment getConfigAssignment_10_1() { return cConfigAssignment_10_1; }
		
		//JsonObjectValue
		public RuleCall getConfigJsonObjectValueParserRuleCall_10_1_0() { return cConfigJsonObjectValueParserRuleCall_10_1_0; }
		
		//intermediates+=IntermediateReference*
		public Assignment getIntermediatesAssignment_11() { return cIntermediatesAssignment_11; }
		
		//IntermediateReference
		public RuleCall getIntermediatesIntermediateReferenceParserRuleCall_11_0() { return cIntermediatesIntermediateReferenceParserRuleCall_11_0; }
		
		//processors=ProcessorGroup
		public Assignment getProcessorsAssignment_12() { return cProcessorsAssignment_12; }
		
		//ProcessorGroup
		public RuleCall getProcessorsProcessorGroupParserRuleCall_12_0() { return cProcessorsProcessorGroupParserRuleCall_12_0; }
	}
	public class IntermediateReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.IntermediateReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntermediateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdQualifiedIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasEStringParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//IntermediateReference kicool::IntermediateReference:
		//	'intermediate' id=QualifiedID ('alias' alias=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'intermediate' id=QualifiedID ('alias' alias=EString)?
		public Group getGroup() { return cGroup; }
		
		//'intermediate'
		public Keyword getIntermediateKeyword_0() { return cIntermediateKeyword_0; }
		
		//id=QualifiedID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_1_0() { return cIdQualifiedIDParserRuleCall_1_0; }
		
		//('alias' alias=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//alias=EString
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//EString
		public RuleCall getAliasEStringParserRuleCall_2_1_0() { return cAliasEStringParserRuleCall_2_1_0; }
	}
	public class ProcessorGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.ProcessorGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLabelAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelEStringParserRuleCall_0_1_0 = (RuleCall)cLabelAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cProcessorsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cProcessorsProcessorParserRuleCall_1_0_0 = (RuleCall)cProcessorsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSystemKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cProcessorsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cProcessorsProcessorSystemParserRuleCall_1_1_1_0 = (RuleCall)cProcessorsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cProcessorsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cProcessorsProcessorAlternativeGroupParserRuleCall_1_2_1_0 = (RuleCall)cProcessorsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cProcessorsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cProcessorsProcessorGroupParserRuleCall_1_3_1_0 = (RuleCall)cProcessorsAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//ProcessorGroup kicool::ProcessorGroup:
		//	('label' label=EString)? (processors+=Processor
		//	|
		//	'system' processors+=ProcessorSystem
		//	| '['
		//	processors+=ProcessorAlternativeGroup
		//	']' | '['
		//	processors+=ProcessorGroup
		//	']')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('label' label=EString)? (processors+=Processor | 'system' processors+=ProcessorSystem | '['
		//processors+=ProcessorAlternativeGroup ']' | '[' processors+=ProcessorGroup ']')+
		public Group getGroup() { return cGroup; }
		
		//('label' label=EString)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'label'
		public Keyword getLabelKeyword_0_0() { return cLabelKeyword_0_0; }
		
		//label=EString
		public Assignment getLabelAssignment_0_1() { return cLabelAssignment_0_1; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_0_1_0() { return cLabelEStringParserRuleCall_0_1_0; }
		
		//(processors+=Processor | 'system' processors+=ProcessorSystem | '[' processors+=ProcessorAlternativeGroup ']' | '['
		//processors+=ProcessorGroup ']')+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//processors+=Processor
		public Assignment getProcessorsAssignment_1_0() { return cProcessorsAssignment_1_0; }
		
		//Processor
		public RuleCall getProcessorsProcessorParserRuleCall_1_0_0() { return cProcessorsProcessorParserRuleCall_1_0_0; }
		
		//'system' processors+=ProcessorSystem
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'system'
		public Keyword getSystemKeyword_1_1_0() { return cSystemKeyword_1_1_0; }
		
		//processors+=ProcessorSystem
		public Assignment getProcessorsAssignment_1_1_1() { return cProcessorsAssignment_1_1_1; }
		
		//ProcessorSystem
		public RuleCall getProcessorsProcessorSystemParserRuleCall_1_1_1_0() { return cProcessorsProcessorSystemParserRuleCall_1_1_1_0; }
		
		//'[' processors+=ProcessorAlternativeGroup ']'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//processors+=ProcessorAlternativeGroup
		public Assignment getProcessorsAssignment_1_2_1() { return cProcessorsAssignment_1_2_1; }
		
		//ProcessorAlternativeGroup
		public RuleCall getProcessorsProcessorAlternativeGroupParserRuleCall_1_2_1_0() { return cProcessorsProcessorAlternativeGroupParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
		
		//'[' processors+=ProcessorGroup ']'
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_3_0() { return cLeftSquareBracketKeyword_1_3_0; }
		
		//processors+=ProcessorGroup
		public Assignment getProcessorsAssignment_1_3_1() { return cProcessorsAssignment_1_3_1; }
		
		//ProcessorGroup
		public RuleCall getProcessorsProcessorGroupParserRuleCall_1_3_1_0() { return cProcessorsProcessorGroupParserRuleCall_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_2() { return cRightSquareBracketKeyword_1_3_2; }
	}
	public class ProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.Processor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPreKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cProcessKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPreprocessesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPreprocessesCoProcessorParserRuleCall_0_2_0 = (RuleCall)cPreprocessesAssignment_0_2.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdQualifiedIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelEStringParserRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConfigKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPreconfigAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPreconfigJsonObjectValueParserRuleCall_3_1_0 = (RuleCall)cPreconfigAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cPostKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cPostconfigAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cPostconfigJsonObjectValueParserRuleCall_3_2_1_0 = (RuleCall)cPostconfigAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIntermediateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMetricAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cMetricIntermediateReferenceCrossReference_4_1_0 = (CrossReference)cMetricAssignment_4_1.eContents().get(0);
		private final RuleCall cMetricIntermediateReferenceQualifiedIDParserRuleCall_4_1_0_1 = (RuleCall)cMetricIntermediateReferenceCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPostKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cProcessKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPostprocessesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPostprocessesCoProcessorParserRuleCall_5_2_0 = (RuleCall)cPostprocessesAssignment_5_2.eContents().get(0);
		
		//Processor kicool::ProcessorReference:
		//	('pre' 'process' preprocesses+=CoProcessor)*
		//	id=QualifiedID ('label' label=EString)? ('config' preconfig=JsonObjectValue ('post' postconfig=JsonObjectValue)?)?
		//	('intermediate' metric=[kicool::IntermediateReference|QualifiedID])? ('post' 'process' postprocesses+=CoProcessor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//('pre' 'process' preprocesses+=CoProcessor)* id=QualifiedID ('label' label=EString)? ('config' preconfig=JsonObjectValue
		//('post' postconfig=JsonObjectValue)?)? ('intermediate' metric=[kicool::IntermediateReference|QualifiedID])? ('post'
		//'process' postprocesses+=CoProcessor)*
		public Group getGroup() { return cGroup; }
		
		//('pre' 'process' preprocesses+=CoProcessor)*
		public Group getGroup_0() { return cGroup_0; }
		
		//'pre'
		public Keyword getPreKeyword_0_0() { return cPreKeyword_0_0; }
		
		//'process'
		public Keyword getProcessKeyword_0_1() { return cProcessKeyword_0_1; }
		
		//preprocesses+=CoProcessor
		public Assignment getPreprocessesAssignment_0_2() { return cPreprocessesAssignment_0_2; }
		
		//CoProcessor
		public RuleCall getPreprocessesCoProcessorParserRuleCall_0_2_0() { return cPreprocessesCoProcessorParserRuleCall_0_2_0; }
		
		//id=QualifiedID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_1_0() { return cIdQualifiedIDParserRuleCall_1_0; }
		
		//('label' label=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'label'
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }
		
		//label=EString
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_2_1_0() { return cLabelEStringParserRuleCall_2_1_0; }
		
		//('config' preconfig=JsonObjectValue ('post' postconfig=JsonObjectValue)?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'config'
		public Keyword getConfigKeyword_3_0() { return cConfigKeyword_3_0; }
		
		//preconfig=JsonObjectValue
		public Assignment getPreconfigAssignment_3_1() { return cPreconfigAssignment_3_1; }
		
		//JsonObjectValue
		public RuleCall getPreconfigJsonObjectValueParserRuleCall_3_1_0() { return cPreconfigJsonObjectValueParserRuleCall_3_1_0; }
		
		//('post' postconfig=JsonObjectValue)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'post'
		public Keyword getPostKeyword_3_2_0() { return cPostKeyword_3_2_0; }
		
		//postconfig=JsonObjectValue
		public Assignment getPostconfigAssignment_3_2_1() { return cPostconfigAssignment_3_2_1; }
		
		//JsonObjectValue
		public RuleCall getPostconfigJsonObjectValueParserRuleCall_3_2_1_0() { return cPostconfigJsonObjectValueParserRuleCall_3_2_1_0; }
		
		//('intermediate' metric=[kicool::IntermediateReference|QualifiedID])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'intermediate'
		public Keyword getIntermediateKeyword_4_0() { return cIntermediateKeyword_4_0; }
		
		//metric=[kicool::IntermediateReference|QualifiedID]
		public Assignment getMetricAssignment_4_1() { return cMetricAssignment_4_1; }
		
		//[kicool::IntermediateReference|QualifiedID]
		public CrossReference getMetricIntermediateReferenceCrossReference_4_1_0() { return cMetricIntermediateReferenceCrossReference_4_1_0; }
		
		//QualifiedID
		public RuleCall getMetricIntermediateReferenceQualifiedIDParserRuleCall_4_1_0_1() { return cMetricIntermediateReferenceQualifiedIDParserRuleCall_4_1_0_1; }
		
		//('post' 'process' postprocesses+=CoProcessor)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'post'
		public Keyword getPostKeyword_5_0() { return cPostKeyword_5_0; }
		
		//'process'
		public Keyword getProcessKeyword_5_1() { return cProcessKeyword_5_1; }
		
		//postprocesses+=CoProcessor
		public Assignment getPostprocessesAssignment_5_2() { return cPostprocessesAssignment_5_2; }
		
		//CoProcessor
		public RuleCall getPostprocessesCoProcessorParserRuleCall_5_2_0() { return cPostprocessesCoProcessorParserRuleCall_5_2_0; }
	}
	public class CoProcessorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.CoProcessor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSilentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSilentSilentKeyword_0_0 = (Keyword)cSilentAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdQualifiedIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConfigKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPreconfigAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPreconfigJsonObjectValueParserRuleCall_2_1_0 = (RuleCall)cPreconfigAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cPostKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPostconfigAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPostconfigJsonObjectValueParserRuleCall_2_2_1_0 = (RuleCall)cPostconfigAssignment_2_2_1.eContents().get(0);
		
		//CoProcessor kicool::ProcessorReference:
		//	silent?='silent'?
		//	id=QualifiedID ('config' preconfig=JsonObjectValue ('post' postconfig=JsonObjectValue)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//silent?='silent'? id=QualifiedID ('config' preconfig=JsonObjectValue ('post' postconfig=JsonObjectValue)?)?
		public Group getGroup() { return cGroup; }
		
		//silent?='silent'?
		public Assignment getSilentAssignment_0() { return cSilentAssignment_0; }
		
		//'silent'
		public Keyword getSilentSilentKeyword_0_0() { return cSilentSilentKeyword_0_0; }
		
		//id=QualifiedID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_1_0() { return cIdQualifiedIDParserRuleCall_1_0; }
		
		//('config' preconfig=JsonObjectValue ('post' postconfig=JsonObjectValue)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'config'
		public Keyword getConfigKeyword_2_0() { return cConfigKeyword_2_0; }
		
		//preconfig=JsonObjectValue
		public Assignment getPreconfigAssignment_2_1() { return cPreconfigAssignment_2_1; }
		
		//JsonObjectValue
		public RuleCall getPreconfigJsonObjectValueParserRuleCall_2_1_0() { return cPreconfigJsonObjectValueParserRuleCall_2_1_0; }
		
		//('post' postconfig=JsonObjectValue)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'post'
		public Keyword getPostKeyword_2_2_0() { return cPostKeyword_2_2_0; }
		
		//postconfig=JsonObjectValue
		public Assignment getPostconfigAssignment_2_2_1() { return cPostconfigAssignment_2_2_1; }
		
		//JsonObjectValue
		public RuleCall getPostconfigJsonObjectValueParserRuleCall_2_2_1_0() { return cPostconfigJsonObjectValueParserRuleCall_2_2_1_0; }
	}
	public class ProcessorSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.ProcessorSystem");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdQualifiedIDParserRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//ProcessorSystem kicool::ProcessorSystem:
		//	id=QualifiedID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=QualifiedID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//QualifiedID
		public RuleCall getIdQualifiedIDParserRuleCall_0() { return cIdQualifiedIDParserRuleCall_0; }
	}
	public class ProcessorAlternativeGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kicool.KiCool.ProcessorAlternativeGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLabelAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelEStringParserRuleCall_0_1_0 = (RuleCall)cLabelAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cProcessorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cProcessorsProcessorGroupParserRuleCall_1_0_0 = (RuleCall)cProcessorsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cProcessorsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cProcessorsProcessorGroupParserRuleCall_1_1_1_0 = (RuleCall)cProcessorsAssignment_1_1_1.eContents().get(0);
		
		//ProcessorAlternativeGroup kicool::ProcessorAlternativeGroup:
		//	('label' label=EString)? (processors+=ProcessorGroup ('|'
		//	processors+=ProcessorGroup)+);
		@Override public ParserRule getRule() { return rule; }
		
		//('label' label=EString)? (processors+=ProcessorGroup ('|' processors+=ProcessorGroup)+)
		public Group getGroup() { return cGroup; }
		
		//('label' label=EString)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'label'
		public Keyword getLabelKeyword_0_0() { return cLabelKeyword_0_0; }
		
		//label=EString
		public Assignment getLabelAssignment_0_1() { return cLabelAssignment_0_1; }
		
		//EString
		public RuleCall getLabelEStringParserRuleCall_0_1_0() { return cLabelEStringParserRuleCall_0_1_0; }
		
		//(processors+=ProcessorGroup ('|' processors+=ProcessorGroup)+)
		public Group getGroup_1() { return cGroup_1; }
		
		//processors+=ProcessorGroup
		public Assignment getProcessorsAssignment_1_0() { return cProcessorsAssignment_1_0; }
		
		//ProcessorGroup
		public RuleCall getProcessorsProcessorGroupParserRuleCall_1_0_0() { return cProcessorsProcessorGroupParserRuleCall_1_0_0; }
		
		//('|' processors+=ProcessorGroup)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }
		
		//processors+=ProcessorGroup
		public Assignment getProcessorsAssignment_1_1_1() { return cProcessorsAssignment_1_1_1; }
		
		//ProcessorGroup
		public RuleCall getProcessorsProcessorGroupParserRuleCall_1_1_1_0() { return cProcessorsProcessorGroupParserRuleCall_1_1_1_0; }
	}
	
	
	private final SystemElements pSystem;
	private final IntermediateReferenceElements pIntermediateReference;
	private final ProcessorGroupElements pProcessorGroup;
	private final ProcessorElements pProcessor;
	private final CoProcessorElements pCoProcessor;
	private final ProcessorSystemElements pProcessorSystem;
	private final ProcessorAlternativeGroupElements pProcessorAlternativeGroup;
	
	private final Grammar grammar;
	
	private final KExtGrammarAccess gaKExt;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KiCoolGrammarAccess(GrammarProvider grammarProvider,
			KExtGrammarAccess gaKExt,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pIntermediateReference = new IntermediateReferenceElements();
		this.pProcessorGroup = new ProcessorGroupElements();
		this.pProcessor = new ProcessorElements();
		this.pCoProcessor = new CoProcessorElements();
		this.pProcessorSystem = new ProcessorSystemElements();
		this.pProcessorAlternativeGroup = new ProcessorAlternativeGroupElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kicool.KiCool".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * @author ssm, als
	// * @kieler.design 2016-10-19 proposed 
	// * @kieler.rating 2016-10-19 proposed yellow
	// */ System kicool::System:
	//	pragmas+=Pragma*
	//	annotations+=Annotation*
	//	public?='public'?
	//	developer?='developer'?
	//	simulation?='simulation'?
	//	'system' id=QualifiedID
	//	'label' label=EString ('start' 'config' startConfig=JsonObjectValue)? ('config' config=JsonObjectValue)?
	//	intermediates+=IntermediateReference*
	//	processors=ProcessorGroup;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//IntermediateReference kicool::IntermediateReference:
	//	'intermediate' id=QualifiedID ('alias' alias=EString)?;
	public IntermediateReferenceElements getIntermediateReferenceAccess() {
		return pIntermediateReference;
	}
	
	public ParserRule getIntermediateReferenceRule() {
		return getIntermediateReferenceAccess().getRule();
	}
	
	//ProcessorGroup kicool::ProcessorGroup:
	//	('label' label=EString)? (processors+=Processor
	//	|
	//	'system' processors+=ProcessorSystem
	//	| '['
	//	processors+=ProcessorAlternativeGroup
	//	']' | '['
	//	processors+=ProcessorGroup
	//	']')+;
	public ProcessorGroupElements getProcessorGroupAccess() {
		return pProcessorGroup;
	}
	
	public ParserRule getProcessorGroupRule() {
		return getProcessorGroupAccess().getRule();
	}
	
	//Processor kicool::ProcessorReference:
	//	('pre' 'process' preprocesses+=CoProcessor)*
	//	id=QualifiedID ('label' label=EString)? ('config' preconfig=JsonObjectValue ('post' postconfig=JsonObjectValue)?)?
	//	('intermediate' metric=[kicool::IntermediateReference|QualifiedID])? ('post' 'process' postprocesses+=CoProcessor)*;
	public ProcessorElements getProcessorAccess() {
		return pProcessor;
	}
	
	public ParserRule getProcessorRule() {
		return getProcessorAccess().getRule();
	}
	
	//CoProcessor kicool::ProcessorReference:
	//	silent?='silent'?
	//	id=QualifiedID ('config' preconfig=JsonObjectValue ('post' postconfig=JsonObjectValue)?)?;
	public CoProcessorElements getCoProcessorAccess() {
		return pCoProcessor;
	}
	
	public ParserRule getCoProcessorRule() {
		return getCoProcessorAccess().getRule();
	}
	
	//ProcessorSystem kicool::ProcessorSystem:
	//	id=QualifiedID;
	public ProcessorSystemElements getProcessorSystemAccess() {
		return pProcessorSystem;
	}
	
	public ParserRule getProcessorSystemRule() {
		return getProcessorSystemAccess().getRule();
	}
	
	//ProcessorAlternativeGroup kicool::ProcessorAlternativeGroup:
	//	('label' label=EString)? (processors+=ProcessorGroup ('|'
	//	processors+=ProcessorGroup)+);
	public ProcessorAlternativeGroupElements getProcessorAlternativeGroupAccess() {
		return pProcessorAlternativeGroup;
	}
	
	public ParserRule getProcessorAlternativeGroupRule() {
		return getProcessorAlternativeGroupAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// */ /*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// */ // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	scopes+=RootScope;
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope kext::KExtScope:
	//	{kext::KExtScope} declarations+=Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)*;
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope kext::KExtScope:
	//	{kext::KExtScope} name=ID? '{'
	//	declarations+=Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)* '}';
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=Expression;
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'json'
	//	expression=JsonObjectValue;
	public KExtGrammarAccess.AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return gaKExt.getAnnotatedJsonExpressionAccess();
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon kexpressions::Declaration:
	//	VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon |
	//	ClassDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal' | type=HostType hostType=STRING)
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal' | type=HostType hostType=STRING)
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration kext::ClassDeclaration:
	//	{kext::ClassDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'?
	//	host?='host'? (type=ClassType
	//	name=EString?
	//	'{'
	//	declarations+=DeclarationOrMethod*
	//	'}'
	//	| type=StructType
	//	name=EString?
	//	'{'
	//	declarations+=Declaration*
	//	'}') (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//	';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ClassDeclarationElements getClassDeclarationAccess() {
		return gaKExt.getClassDeclarationAccess();
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod kexpressions::Declaration:
	//	Declaration | MethodDeclaration;
	public KExtGrammarAccess.DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return gaKExt.getDeclarationOrMethodAccess();
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//ClassDeclarationWOSemicolon kext::ClassDeclaration:
	//	{kext::ClassDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'?
	//	host?='host'? (type=ClassType
	//	name=EString?
	//	'{'
	//	declarations+=DeclarationOrMethodWOSemicolon*
	//	'}'
	//	| type=StructType
	//	name=EString?
	//	'{'
	//	declarations+=DeclarationWOSemicolon*
	//	'}') (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return gaKExt.getClassDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon kexpressions::Declaration:
	//	DeclarationWOSemicolon | MethodDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return gaKExt.getDeclarationOrMethodWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//MethodDeclaration kexpressions::MethodDeclaration:
	//	{kexpressions::MethodDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	returnType=MethodReturnType?
	//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
	//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
	//	';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.MethodDeclarationElements getMethodDeclarationAccess() {
		return gaKExt.getMethodDeclarationAccess();
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//MethodDeclarationWOSemicolon kexpressions::MethodDeclaration:
	//	{kexpressions::MethodDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	returnType=MethodReturnType?
	//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
	//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return gaKExt.getMethodDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	//NamespaceID:
	//	ExtendedID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	//ReferenceDeclaration kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier? ('ref' reference=[annotations::NamedObject|NamespaceID] |
	//	'extern' extern+=ExternString (',' extern+=ExternString)*) valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier? ('ref' reference=[annotations::NamedObject|NamespaceID] |
	//	'extern' extern+=ExternString (',' extern+=ExternString)*) valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString kexpressions::ExternString:
	//	annotations+=TagAnnotation*
	//	code=STRING;
	public KExtGrammarAccess.ExternStringElements getExternStringAccess() {
		return gaKExt.getExternStringAccess();
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//ScheduleDeclaration kexpressions::ScheduleDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	'schedule' name=STRING? ('global' global=PriorityProtocol)? ('{' priorities+=PriorityProtocol (','
	//	priorities+=PriorityProtocol)* '}')?
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon kexpressions::ScheduleDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	'schedule' name=STRING? ('global' global=PriorityProtocol)? ('{' priorities+=PriorityProtocol (','
	//	priorities+=PriorityProtocol)* '}')?
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//	CONFLICT="conflicting" | CONFLUENT="commuting";
	public KExtGrammarAccess.PriorityProtocolElements getPriorityProtocolAccess() {
		return gaKExt.getPriorityProtocolAccess();
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	annotations+=QuotedStringAnnotation*
	//	name=PrimeID ('[' cardinalities+=Expression ']')* ('=' initialValue=Expression)? ('combine'
	//	combineOperator=CombineOperator)? ('label' label=STRING)?;
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject kexpressions::ValuedObject:
	//	annotations+=QuotedStringAnnotation*
	//	name=PrimeID;
	public KExtGrammarAccess.SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return gaKExt.getSimpleValuedObjectAccess();
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// */ /*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */ // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect keffects::Effect:
	//	Assignment | PostfixEffect | ValuedEmission | HostcodeEffect | ReferenceCallEffect | FunctionCallEffect |
	//	PrintCallEffect | RandomizeCallEffect | PureEmission;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//PureEmission keffects::Emission:
	//	annotations+=QuotedStringAnnotation*
	//	reference=ValuedObjectReference ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission keffects::Emission:
	//	annotations+=QuotedStringAnnotation*
	//	reference=ValuedObjectReference
	//	"(" newValue=Expression ")" ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission keffects::Emission:
	//	ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1     
	//Assignment keffects::Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=AssignOperator expression=Expression ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*    
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;	 
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=PostfixOperator ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect keffects::ReferenceCallEffect:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.'
	//	subReference=ValuedObjectReference)? ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()') ('schedule'
	//	schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation* ('extern' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()'));
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.    
	//PrintCallEffect keffects::PrintCallEffect:
	//	annotations+=Annotation*
	//	'print' ('(' parameters+=Parameter (',' parameters+=Parameter)* ')') ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect keffects::RandomizeCallEffect:
	//	{keffects::RandomizeCallEffect} annotations+=Annotation*
	//	'randomize' ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//	ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
	//	ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
	//	ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// */ // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */ // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression) ('||' subExpressions+=LogicalAndExpression)*)?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression) ('&&' subExpressions+=BitwiseOrExpression)*)?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseXOrExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseXOrExpression) ('|' subExpressions+=BitwiseXOrExpression)*)?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseXOrOperator
	//	subExpressions+=BitwiseAndExpression) ('^' subExpressions+=BitwiseAndExpression)*)?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation) ('&' subExpressions+=CompareOperation)*)?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression Expression:
	//	ValuedExpression
	//	| NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression Expression:
	//	{OperatorExpression} operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | BitwiseNotExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression Expression:
	//	ShiftExpressions;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//ShiftExpressions Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression
	//	('<<' subExpressions+=SumExpression)* | {OperatorExpression.subExpressions+=current} operator=ShiftRightOperator
	//	subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)* | {OperatorExpression.subExpressions+=current}
	//	operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)*;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftLeftOperator
	//	subExpressions+=ShiftRightExpression) ('<<' subExpressions+=ShiftRightExpression)*)?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightOperator
	//	subExpressions+=ShiftRightUnsignedExpression) ('>>' subExpressions+=ShiftRightUnsignedExpression)*)?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightUnsignedOperator
	//	subExpressions+=SumExpression) ('>>>' subExpressions+=SumExpression)*)?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression
	//	('+' subExpressions+=ProductExpression)* | {OperatorExpression.subExpressions+=current} operator=SubOperator
	//	subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)*;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator
	//	subExpressions+=ProductExpression)*;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=SubOperator
	//	subExpressions+=ProductExpression)*;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//ProductExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*'
	//	subExpressions+=NegExpression)* | {OperatorExpression.subExpressions+=current} operator=DivOperator
	//	subExpressions+=NegExpression ('/' subExpressions+=NegExpression)* | {OperatorExpression.subExpressions+=current}
	//	operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)*;
	public KExpressionsGrammarAccess.ProductExpressionElements getProductExpressionAccess() {
		return gaKExpressions.getProductExpressionAccess();
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=NegExpression) ('*'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=DivOperator subExpressions+=NegExpression) ('/'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator subExpressions+=NegExpression) ('%'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | TernaryOperation;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//TernaryOperation Expression:
	//	{OperatorExpression} subExpressions+=AtomicValuedExpression operator=ConditionalOperator
	//	subExpressions+=AtomicValuedExpression (':' subExpressions+=AtomicValuedExpression)?
	//	| InitExpression;
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//InitExpression Expression:
	//	FbyExpression ({OperatorExpression.subExpressions+=current} (operator=InitOperator subExpressions+=FbyExpression)
	//	('->' subExpressions+=FbyExpression)*)?;
	public KExpressionsGrammarAccess.InitExpressionElements getInitExpressionAccess() {
		return gaKExpressions.getInitExpressionAccess();
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//FbyExpression Expression:
	//	SfbyExpression ({OperatorExpression.subExpressions+=current} (operator=FbyOperator subExpressions+=SfbyExpression)
	//	('fby' subExpressions+=SfbyExpression)*)?;
	public KExpressionsGrammarAccess.FbyExpressionElements getFbyExpressionAccess() {
		return gaKExpressions.getFbyExpressionAccess();
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//SfbyExpression Expression:
	//	AtomicValuedExpression ({OperatorExpression.subExpressions+=current} (operator=SfbyOperator
	//	subExpressions+=AtomicValuedExpression) ('sfby' subExpressions+=AtomicValuedExpression)*)?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicExpression Expression:
	//	BoolValue
	//	| '(' BoolExpression ')'
	//	| ReferenceCall
	//	| FunctionCall
	//	| RandomCall
	//	| RandomizeCall
	//	| ValuedObjectTestExpression // Last to allow detection of calls
	//	| TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression Expression:
	//	IntValue
	//	| FloatValue
	//	| StringValue
	//	| VectorValue
	//	| '(' ValuedExpression ')'
	//	| AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.     
	//BoolScheduleExpression Expression:
	//	LogicalOrExpression ('schedule' schedule+=ScheduleObjectReference)?;
	public KExpressionsGrammarAccess.BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return gaKExpressions.getBoolScheduleExpressionAccess();
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) '(' subExpressions+=ValuedObjectTestExpression (','
	//	subExpressions+=ValuedObjectReference)? ')'
	//	| ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID:
	//	ID "'"*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list. 
	//ReferenceCall:
	//	valuedObject=[ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.' subReference=ValuedObjectReference)? ('('
	//	parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function. 
	//RandomCall:
	//	{RandomCall}
	//	'random' '()'?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function. 
	//RandomizeCall:
	//	{RandomizeCall}
	//	'randomize' '()'?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'extern' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall:
	//	{PrintCall}
	//	'print' ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' |
	//	'()');
	public KExpressionsGrammarAccess.PrintCallElements getPrintCallAccess() {
		return gaKExpressions.getPrintCallAccess();
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	accessType=ParameterAccessType
	//	expression=ValuedObjectReference | expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	annotations+=Annotation*
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue:
	//	'{' values+=VectorValueMember (',' values+=VectorValueMember)* '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember Expression:
	//	BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue:
	//	{IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue Value:
	//	IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//	BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//	BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//	SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//	SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//	SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//	CONDITIONAL="?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum InitOperator returns OperatorType:
	//	INIT="->";
	public KExpressionsGrammarAccess.InitOperatorElements getInitOperatorAccess() {
		return gaKExpressions.getInitOperatorAccess();
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum FbyOperator returns OperatorType:
	//	FBY="fby";
	public KExpressionsGrammarAccess.FbyOperatorElements getFbyOperatorAccess() {
		return gaKExpressions.getFbyOperatorAccess();
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//	SFBY="sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum ValueType:
	//	PURE="pure" | BOOL="bool" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//	STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//	CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier:
	//	PUBLIC='public' | PROTECTED='protected' | PRIVATE='private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//	VOID="void" |
	//	BOOL="bool" | INT="int" | FLOAT="float" |
	//	STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType:
	//	CALL_BY_REFERENCE="&" | PURE_OUTPUT="!&";
	public KExpressionsGrammarAccess.ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return gaKExpressions.getParameterAccessTypeAccess();
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                // 
	//// -------------------- //
	//JsonObjectValue:
	//	{JsonObjectValue}
	//	'{' (members+=JsonObjectMember (',' members+=JsonObjectMember)*)?
	//	'}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember:
	//	key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue:
	//	{JsonArrayValue}
	//	'[' (elements+=JsonValue (',' elements+=JsonValue)*)?
	//	']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue Value:
	//	JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue:
	//	{NullValue}
	//	'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma:
	//	'#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation:
	//	'@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma annotations::Pragma:
	//	super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//Annotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//terminal HOSTCODE:
	//	"`" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "`"))* "`";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// */ // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationsAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationsAnnotationRule() {
		return getAnnotationsAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.    
	//Pragma:
	//	StringPragma | PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations. 
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	//RestrictedTypeAnnotation Annotation:
	//	CommentAnnotation | RestrictedKeyStringValueAnnotation | RestrictedTypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//QuotedStringAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL CommentAnnotation:
	//	values+=SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation:
	//	'@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag Pragma:
	//	'#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringBoolean (',' values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma:
	//	'#' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes:
	//	STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID (('.' | '-') ID)* ('#' INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EDouble:
	//	'-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//terminal COMMENT_ANNOTATION:
	//	'/**'->'*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal ML_COMMENT:
	//	'/*' !'*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION:
	//	'//*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'//' !'*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotations.getSL_COMMENTRule();
	}
	
	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//terminal FLOAT returns ecore::EDouble:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? (('_'? 'a'..'z' | '_'? 'A'..'Z') | '_' '0'..'9' | '__') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
