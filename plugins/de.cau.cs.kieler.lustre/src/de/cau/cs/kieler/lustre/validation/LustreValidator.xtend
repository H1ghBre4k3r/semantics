/*
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.lustre.validation

import de.cau.cs.kieler.lustre.lustre.Program
import org.eclipse.xtext.validation.Check
import de.cau.cs.kieler.lustre.lustre.Node_Decl
import de.cau.cs.kieler.lustre.lustre.Equation
import java.util.Hashtable
import de.cau.cs.kieler.lustre.lustre.Var_Decl
import de.cau.cs.kieler.lustre.lustre.LustrePackage
import de.cau.cs.kieler.lustre.lustre.Package_Provide

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
 
class LustreValidator extends AbstractLustreValidator {
    
    public static val ALREADY_ASSIGNED = "alreadyAssigned"

    @Check
    def checkAllVariablesDefined(Node_Decl node) {
        val usedVariables = new Hashtable<String, Boolean>
        val variablesTypes = new Hashtable<String, String>

        for (Var_Decl decl : node.head.ret.varList + node.bdy.decl) {
            usedVariables.put(decl.name, false)
            variablesTypes.put(decl.name, decl.type.name)
        }
        for (Var_Decl decl : node.head.param.varList) {
            variablesTypes.put(decl.name, decl.type.name)
        }
        
        for (Equation eq : node.bdy.eq) {
            val alreadyDefined = usedVariables.get(eq.left)
            if (alreadyDefined === null)
                error("Variable " + eq.left + " was never declared", eq, LustrePackage.Literals.EQUATION__LEFT)
            else if (alreadyDefined)
                error("Variable '" + eq.left + "' was already assigned", eq, LustrePackage.Literals.EQUATION__LEFT, ALREADY_ASSIGNED)
            else
                usedVariables.put(eq.left, true)
        }
        
    }

    @Check
    def checkUniqueVariableDefinition(Node_Decl node) {
        
    }

    @Check
    def checkNodeHeaders(Package_Provide header) {
        
    }

    @Check
    def checkTyping(Program program) {
        
    }
}
