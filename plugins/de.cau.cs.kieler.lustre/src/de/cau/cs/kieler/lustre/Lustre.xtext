/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2015 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
grammar de.cau.cs.kieler.lustre.Lustre with de.cau.cs.kieler.kexpressions.kext.KExt

generate lustre "http://www.cau.de/cs/kieler/lustre/Lustre"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions
import "http://kieler.cs.cau.de/keffects/0.1.0" as keffects
import "http://kieler.cs.cau.de/kext/0.1.0" as kext

/**
 * The syntax for this grammar is extracted from the Lustre V6 reference manual.
 * http://www-verimag.imag.fr/DIST-TOOLS/SYNCHRONE/lustre-v6/doc/lv6-ref-man.pdf
 * 
 * @author lgr
 */

LustreProgram hidden(WS, SL_COMMENT, ML_COMMENT):
    ('include' (includes+=STRING | includes+=STRING))*
    (
        ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
        | ('type' types+=TypeDeclaration (';' types+=TypeDeclaration)* ';')
        | externals+=ExternalNodeDeclaration
        | nodes+=NodeDeclaration
    )*
;

@Override 
enum ValueType returns kexpressions::ValueType:
    BOOL="bool" 
    | INT="int" 
    | FLOAT="real"
;

enum EnumType returns kexpressions::ValueType:
    ENUM="enum" 
;

// Type Declaration
// TODO: Does not work: this should be a VariableDeclaration too, since it can be a node parameter and thus must be scoped
TypeDeclaration:
    {TypeDeclaration}
    name=ID 
    ('=' 
        (
            type=ValueType
            | (type=EnumType '{' enums+=PrimeID (',' enums+=PrimeID)* '}')
            // TODO: StructType may also be left empty
            | (
                type=StructType 
                '{' 
                variables+=(VariableDeclarationInit|VariableDeclarationNoInit) 
                (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))* 
                (';')? 
                '}'
            )
        )
    )?
;

// External Node Declaration
ExternalNodeDeclaration returns kexpressions::Declaration:
    {ExternalNodeDeclaration}
    (isUnsafe?='unsafe')? 'extern' ('function' | hasState?='node') 
    valuedObjects+=NodeValuedObject
    ('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
    'returns' 
    ('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
    (';')?
;

VariableDeclarationNoInit returns kexpressions::VariableDeclaration:
    {LustreVariableDeclaration}
    valuedObjects+=ValuedObjectNoInit (',' valuedObjects+=ValuedObjectNoInit)* ':' type=ValueType ('when' clockExpr=BoolExpression)?
;

VariableDeclarationInit returns kexpressions::VariableDeclaration:
    {LustreVariableDeclaration}
    valuedObjects+=ValuedObjectInit ('when' clockExpr=BoolExpression)?
;

ValuedObjectNoInit returns kexpressions::ValuedObject:
    name=PrimeID
    ('^' cardinalities+=Expression)*
;

ValuedObjectInit returns kexpressions::ValuedObject:
    {LustreValuedObject}
    name=PrimeID
    ('^' cardinalities+=Expression)*
    (':' type=ValueType)
    ('=' initialValue=Expression)?
;

// Node Declaration
NodeDeclaration returns kexpressions::Declaration:
    {NodeDeclaration}
    (isUnsafe?='unsafe')? ('function' | hasState?='node')
    valuedObjects+=NodeValuedObject
    ('(' inputs+=VariableDeclarationNoInit (';' inputs+=VariableDeclarationNoInit)* ')' | '()')
    'returns' 
    ('(' outputs+=VariableDeclarationNoInit (';' outputs+=VariableDeclarationNoInit)* ')' | '()')
    ';'? 
    (
        ('const' constants+=VariableDeclarationInit (';' constants+=VariableDeclarationInit)* ';')
        | ('var' variables+=(VariableDeclarationInit|VariableDeclarationNoInit) (';' variables+=(VariableDeclarationInit|VariableDeclarationNoInit))* ';')
    )*
    'let'
    (
        equations+=Equation 
        | emissions+=Emission
        | assertions+=Assertion 
        | automatons+=Automaton
    )*
    'tel'
    ('.' | (';')?)  
;

NodeValuedObject returns kexpressions::ValuedObject:
    {NodeValuedObject}
    name=ID
;

Equation returns keffects::Assignment:
    {Equation}
    (
        // Left side: (x, y, ...) or x, y, ... or x 
        ('(' references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)* ')')
        | (references+=ValuedObjectReference ',' references+=ValuedObjectReference (',' references+=ValuedObjectReference)*)
        | reference=ValuedObjectReference
    )
    operator=AssignOperator 
    expression=Expression   
    ';' 
;

Emission returns keffects::Emission:
    'emit' (ValuedEmission | PureEmission) ';'
;

Assertion returns kexpressions::Expression:
    {Assertion}
    'assert' expr=Expression ';'
;

Automaton:
    'automaton' name=ID states+=AState (states+=AState)* 'returns' '..' ';' 
;

AState:
    (initial?='initial')? 
    'state' 
    valuedObject=StateValuedObject
    (
        ('const' constants+=VariableDeclarationInit ';' (constants+=VariableDeclarationInit ';')* ) 
        | ('var' variables+=VariableDeclarationInit (';' variables+=VariableDeclarationInit)* ';')
    )*
    
    // Body 
    ('let' 
        (
            equations+=Equation
            | emissions+=Emission
            | assertions+=Assertion 
            | automatons+=Automaton
        )*
    'tel')?
    
    ('.' | (';')?)
    transitions+=ATransition*
;

StateValuedObject returns kexpressions::ValuedObject:
    {StateValuedObject}
    name=ID
;

ATransition:
    {ATransition} 
    ('until'|strong?='unless') actions+=AnAction*
;

AnAction:
    ('if' condition=BoolExpression)? ('do' (effects+=Equation | effects+=Emission)*)? ('restart'|history?='resume') nextState=[StateValuedObject] ';'
;

/**
 * -------------------- Expression Adjustments
 * 
 * The precedence hierarchy is not as follows:
 * 
 * Expression
 * + BoolExpression
 *   + InitExpression
 *     + TernaryOperation *
 *       + ImpliesExpression
 *         + LogicalXorExpression
 *           + LogicalOrExpression
 *             + LogicalAndExpression
 *               + CompareExpression
 *                 + NotOrValuedExpression
 *                   + ValuedExpression (see valued expression below)
 *                   + NotExpression *
 *                     + AtomicExpression *
 *                       + BoolValue
 *                       + ValuedObjectTestExpression
 *                         + ValuedObjectReference
 *                       + FunctionCall
 *                       + TextExpression
 *                       + NoneOfExpression
 *                       + NorExpression
 * + ValuedExpression
 *   + SumExpression
 *      + ProductExpression
 *                  + IntDivExpression
 *                    + NegExpression *
 *                      + FbyExpression
 *                        + WhenExpression
 *                          + CurrentExpression
 *                            + PreExpression
 *                              + AtomicValuedExpression *
 *                                + IntValue
 *                                + FloatValue
 *                                + StringValue
 *                                + AtomicExpression
 * 
 */
// Needs override because of mod operator is 'mod' not '%' and IntDivExpressin comes next
@Override 
ProductExpression returns kexpressions::Expression:
    IntDivExpression  
    (
    ({kexpressions::OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=IntDivExpression ('*' subExpressions+=IntDivExpression)*)
    |
    ({kexpressions::OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=IntDivExpression ('/' subExpressions+=IntDivExpression)*)
    |
    ({kexpressions::OperatorExpression.subExpressions+=current} operator=ModOperator subExpressions+=IntDivExpression ('mod' subExpressions+=IntDivExpression)*)
    )*  
;   

IntDivExpression returns kexpressions::Expression:
    NegExpression 
    ({kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=IntDivOperator subExpressions+=NegExpression)
        ('div' subExpressions+=AtomicValuedExpression)*
    )?
;

// Skip TernaryOperation after NegExpression
@Override 
NegExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=SubOperator subExpressions+=(NegExpression)
    | FbyExpression
;

// Force WhenExpression, CurrentExpression and PreExpression inbetween FbyExpression and AtomicValuedExpression
@Override 
FbyExpression returns kexpressions::Expression:
    WhenExpression
    ({kexpressions::OperatorExpression.subExpressions+=current}
        (operator=FbyOperator subExpressions+=WhenExpression)
        ('fby' subExpressions+=WhenExpression)*
    )?;

WhenExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    subExpressions += AtomicValuedExpression operator=WhenOperator subExpressions += AtomicValuedExpression
    | CurrentExpression
;

CurrentExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=CurrentOperator subExpressions += AtomicValuedExpression
    | PreExpression
;

PreExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=PreOperator subExpressions+=LastExpression
    | LastExpression
;

LastExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=LastOperator subExpressions+=AtomicValuedExpression
    | AtomicValuedExpression
;

// Force TernaryOperation, InitExpression, ImpliesExpression and LogicalXorExpression inbetween BoolExpression and LogicalOrExpression
@Override
BoolExpression returns kexpressions::Expression: 
    InitExpression
;

@Override    
InitExpression returns kexpressions::Expression:
    TernaryOperation 
    ({kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=InitOperator subExpressions+=TernaryOperation) 
        ('->' subExpressions+=TernaryOperation)*
    )?;

// Overwide Ternary operator to support if ... then ... else
@Override 
TernaryOperation returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=ConditionalOperator subExpressions += TernaryOperation 'then' subExpressions += TernaryOperation 'else' subExpressions += TernaryOperation
    | ImpliesExpression
;

ImpliesExpression returns kexpressions::Expression:
    LogicalXorExpression
    (
        {kexpressions::OperatorExpression.subExpressions+=current}
        (operator=ImpliesOperator subExpressions+=LogicalXorExpression)
        ('=>' subExpressions+=LogicalXorExpression)*
    )?
;

LogicalXorExpression returns kexpressions::Expression:
    LogicalOrExpression
    (
        {kexpressions::OperatorExpression.subExpressions+=current}
        (operator=LogicalXorOperator subExpressions+=LogicalOrExpression)
        ('xor' subExpressions+=LogicalOrExpression)*
    )?
;

// Override LogicalAndExpresssion and LogicalOrExpression to allow asssociativity
@Override 
LogicalOrExpression returns kexpressions::Expression:
    LogicalAndExpression 
    (
        {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)
        ('or' subExpressions+=LogicalAndExpression)*
    )?
;

// Directly redirect to CompareOperation to exclude the bitwise operations
@Override 
LogicalAndExpression returns kexpressions::Expression:
    CompareOperation 
    (
        {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=LogicalAndOperator subExpressions+=CompareOperation)
        ('and' subExpressions+=CompareOperation)*
    )?
;

// Directly redirect to SumExpression to exclude shift operations
@Override
ValuedExpression returns kexpressions::Expression:
    SumExpression
;

// Exclude FunctionCall, RandomCall, RandomizeCall and TextExpression
@Override
AtomicExpression returns kexpressions::Expression:
    BoolValue
    | '(' BoolExpression ')'
    | ReferenceCall
    | ValuedObjectTestExpression // Last to allow detection of calls
    | NorAtMostOneExpression
;

NorAtMostOneExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression}
    (operator=AtMostOneOperator | operator=NorOperator)
    '('subExpressions+=Expression (',' subExpressions+=Expression)* ')'
;

// Exclude BitwiseNotExpression
@Override 
NotExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=NotOperator subExpressions+=(NotExpression)
    | AtomicExpression
;

/**
 * -------------------- Operator Adjustments
 */
// Override operators that are different in Lustre 
@Override 
enum AssignOperator returns keffects::AssignOperator:
    // Reduce possible assignments to only work with '='
    ASSIGN="="
;

@Override 
enum CompareOperator returns kexpressions::OperatorType:
    EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>"
;

@Override 
enum LogicalOrOperator returns kexpressions::OperatorType:
    LOGICAL_OR="or"
;

@Override 
enum LogicalAndOperator returns kexpressions::OperatorType:
    LOGICAL_AND="and"
;

@Override 
enum NotOperator returns kexpressions::OperatorType:
    NOT="not"
;

@Override 
enum FbyOperator returns kexpressions::OperatorType:  
    FBY="fby"
;

@Override 
enum ModOperator returns kexpressions::OperatorType:  
    MOD="mod"
;

// Define operators that are Lustre specific
enum CurrentOperator returns kexpressions::OperatorType:  
    CURRENT="current"
;

enum WhenOperator returns kexpressions::OperatorType:  
    WHEN="when"
;

@Override 
enum InitOperator returns kexpressions::OperatorType:  
    INIT="->"
;

enum LogicalXorOperator returns kexpressions::OperatorType:  
    BITWISE_XOR="xor"
;

enum ImpliesOperator returns kexpressions::OperatorType:  
    IMPLIES="=>"
;

enum IntDivOperator returns kexpressions::OperatorType:
    DIV = "div"
;

@Override 
enum ConditionalOperator returns kexpressions::OperatorType:
    CONDITIONAL = "if"
;

enum AtMostOneOperator returns kexpressions::OperatorType:  
    ATMOSTONEOF="#"
;

enum NorOperator returns kexpressions::OperatorType:  
    NOR="nor"
;

enum LastOperator returns kexpressions::OperatorType:  
    LAST="last"
;

/*
 * -------------------- Lexical tokens
 */
@Override 
terminal ML_COMMENT: 
    '(*' -> '*)'
;
 
@Override 
terminal SL_COMMENT: 
    '--' !('\n'|'\r')* ('\r'? '\n')?
;