module de.cau.cs.kieler.lustre.Lustre

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

// Project information
var rootPath = ".."
var projectName = "de.cau.cs.kieler.lustre"
var grammar = "de.cau.cs.kieler.lustre.Lustre"
var grammarURI = "classpath:/de/cau/cs/kieler/lustre/Lustre.xtext"
// File extension
var file.extensions = "lus"
// Parser backtracking
var backtrack = true
// Indicates languages that that contained in the same plugin as another language but does not influence major package naming.
// This will adjust package names.
// I.e.: KExt in KEpressions
var secondaryGrammar = false
// Cleans the src-gen folder (disable for secondary grammars)
var clean = true

// IMPORTANT: Generate EMF meta-model

Workflow {
    bean = StandaloneSetup {
        platformUri = "${rootPath}"
        registerGeneratedEPackage = "de.cau.cs.kieler.kexpressions.KExpressionsPackage"
        registerGeneratedEPackage = "de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage"
        registerGeneratedEPackage = "de.cau.cs.kieler.kexpressions.kext.KExtPackage"
//        registerGeneratedEPackage = "de.cau.cs.kieler.lustre.LustrePackage"
        registerGenModelFile = "platform:/resource/de.cau.cs.kieler.kexpressions/model/kexpressions.genmodel"
        registerGenModelFile = "platform:/resource/de.cau.cs.kieler.kexpressions/model/keffects.genmodel"
        registerGenModelFile = "platform:/resource/de.cau.cs.kieler.kexpressions/model/kext.genmodel"
//        registerGenModelFile = "platform:/resource/de.cau.cs.kieler.lustre/model/generated/Lustre.genmodel"
    }
    
    component = XtextGenerator {
        configuration = de.cau.cs.kieler.annotations.xtext.KielerGeneratorModule {
            project = de.cau.cs.kieler.annotations.xtext.KielerProjectConfig {
                projectRelatedPackageNames = secondaryGrammar
                grammar = grammar
                baseName = projectName
                rootPath = rootPath
                eclipsePlugin = {
                    enabled = true
                }
                createEclipseMetaData = true
                genericIde = {
                    enabled = true
                }       
            }
            
            code = {
                encoding = "UTF-8"
                preferXtendStubs = true
            }
        }
        
        cleaner = {
            enabled = clean
        }
               
        language = XtextGeneratorLanguage {
            name = grammar
            fileExtensions = file.extensions
            grammarUri = grammarURI
            
            fragment = grammarAccess.GrammarAccessFragment2 {}
            // ONLY uncomment when EMF model should be generated from grammar
            fragment = ecore.EMFGeneratorFragment2 {}
            fragment = serializer.SerializerFragment2 {}
            fragment = resourceFactory.ResourceFactoryFragment2 {}
            fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
                options = {
                    backtrack = backtrack
                    classSplitting = true
                }
            }
            fragment = validation.ValidatorFragment2 {}
            fragment = scoping.ImportNamespacesScopingFragment2 {}
            fragment = exporting.QualifiedNamesFragment2 {}
            fragment = formatting.Formatter2Fragment2 {}
            fragment = ui.labeling.LabelProviderFragment2 {}
            fragment = ui.outline.QuickOutlineFragment2 {}
            fragment = ui.outline.OutlineTreeProviderFragment2 {}
            fragment = ui.quickfix.QuickfixProviderFragment2 {}
            fragment = ui.contentAssist.ContentAssistFragment2 {}
            fragment = ui.refactoring.RefactorElementNameFragment2 {}
   
        }
    }
}