/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.scade.scade.impl;

import de.cau.cs.kieler.lustre.scade.scade.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ScadeFactoryImpl extends EFactoryImpl implements ScadeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ScadeFactory init()
  {
    try
    {
      ScadeFactory theScadeFactory = (ScadeFactory)EPackage.Registry.INSTANCE.getEFactory(ScadePackage.eNS_URI);
      if (theScadeFactory != null)
      {
        return theScadeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ScadeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScadeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ScadePackage.SCADE_PROGRAM: return createScadeProgram();
      case ScadePackage.SCADE_EQUATION: return createScadeEquation();
      case ScadePackage.VALUED_OBJECT_STRING: return createValuedObjectString();
      case ScadePackage.OPERATOR_EXPRESSION: return createOperatorExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScadeProgram createScadeProgram()
  {
    ScadeProgramImpl scadeProgram = new ScadeProgramImpl();
    return scadeProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScadeEquation createScadeEquation()
  {
    ScadeEquationImpl scadeEquation = new ScadeEquationImpl();
    return scadeEquation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValuedObjectString createValuedObjectString()
  {
    ValuedObjectStringImpl valuedObjectString = new ValuedObjectStringImpl();
    return valuedObjectString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperatorExpression createOperatorExpression()
  {
    OperatorExpressionImpl operatorExpression = new OperatorExpressionImpl();
    return operatorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScadePackage getScadePackage()
  {
    return (ScadePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ScadePackage getPackage()
  {
    return ScadePackage.eINSTANCE;
  }

} //ScadeFactoryImpl
