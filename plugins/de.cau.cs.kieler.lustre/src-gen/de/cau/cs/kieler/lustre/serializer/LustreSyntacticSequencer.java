/*
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.lustre.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LustreSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LustreGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Left_Part_LeftParenthesisKeyword_0_0_q;
	protected AbstractElementAlias match_Node_Declaration_SemicolonKeyword_15_q;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LustreGrammarAccess) access;
		match_Left_Part_LeftParenthesisKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getLeft_PartAccess().getLeftParenthesisKeyword_0_0());
		match_Node_Declaration_SemicolonKeyword_15_q = new TokenAlias(false, true, grammarAccess.getNode_DeclarationAccess().getSemicolonKeyword_15());
		match_Primary_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Primary_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Left_Part_LeftParenthesisKeyword_0_0_q.equals(syntax))
				emit_Left_Part_LeftParenthesisKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Node_Declaration_SemicolonKeyword_15_q.equals(syntax))
				emit_Node_Declaration_SemicolonKeyword_15_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) id+=Left
	 */
	protected void emit_Left_Part_LeftParenthesisKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     assertions+=Assertion 'tel' (ambiguity) (rule end)
	 *     automatons+=Automaton 'tel' (ambiguity) (rule end)
	 *     constants+=Local_Constant_Declaration 'let' 'tel' (ambiguity) (rule end)
	 *     equations+=Equation 'tel' (ambiguity) (rule end)
	 *     returned+=Variable_Declaration ')' ';' 'let' 'tel' (ambiguity) (rule end)
	 *     variables+=Local_Variable_Declaration 'let' 'tel' (ambiguity) (rule end)
	 */
	protected void emit_Node_Declaration_SemicolonKeyword_15_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '..' (ambiguity) '-' expression=Primary
	 *     (rule start) '..' (ambiguity) 'current' expression=Primary
	 *     (rule start) '..' (ambiguity) 'if' ifexpr=Expression
	 *     (rule start) '..' (ambiguity) 'not' expression=Primary
	 *     (rule start) '..' (ambiguity) 'pre' expression=Primary
	 *     (rule start) '..' (ambiguity) value=BOOL
	 *     (rule start) '..' (ambiguity) value=FLOAT
	 *     (rule start) '..' (ambiguity) value=INT
	 *     (rule start) '..' (ambiguity) value=[Variable_Declaration|IDENT]
	 *     (rule start) '..' (ambiguity) {And.subExpressions+=}
	 *     (rule start) '..' (ambiguity) {Arrow.subExpressions+=}
	 *     (rule start) '..' (ambiguity) {Comparison.left=}
	 *     (rule start) '..' (ambiguity) {Div.subExpressions+=}
	 *     (rule start) '..' (ambiguity) {Equality.left=}
	 *     (rule start) '..' (ambiguity) {Fby.subExpressions+=}
	 *     (rule start) '..' (ambiguity) {Minus.subExpressions+=}
	 *     (rule start) '..' (ambiguity) {Mod.subExpressions+=}
	 *     (rule start) '..' (ambiguity) {Mul.subExpressions+=}
	 *     (rule start) '..' (ambiguity) {Or.subExpressions+=}
	 *     (rule start) '..' (ambiguity) {Plus.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) '-' expression=Primary
	 *     (rule start) 'assert' (ambiguity) 'current' expression=Primary
	 *     (rule start) 'assert' (ambiguity) 'if' ifexpr=Expression
	 *     (rule start) 'assert' (ambiguity) 'not' expression=Primary
	 *     (rule start) 'assert' (ambiguity) 'pre' expression=Primary
	 *     (rule start) 'assert' (ambiguity) value=BOOL
	 *     (rule start) 'assert' (ambiguity) value=FLOAT
	 *     (rule start) 'assert' (ambiguity) value=INT
	 *     (rule start) 'assert' (ambiguity) value=[Variable_Declaration|IDENT]
	 *     (rule start) 'assert' (ambiguity) {And.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) {Arrow.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) {Comparison.left=}
	 *     (rule start) 'assert' (ambiguity) {Div.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) {Equality.left=}
	 *     (rule start) 'assert' (ambiguity) {Fby.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) {Minus.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) {Mod.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) {Mul.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) {Or.subExpressions+=}
	 *     (rule start) 'assert' (ambiguity) {Plus.subExpressions+=}
	 *     (rule start) (ambiguity) '-' expression=Primary
	 *     (rule start) (ambiguity) 'current' expression=Primary
	 *     (rule start) (ambiguity) 'if' ifexpr=Expression
	 *     (rule start) (ambiguity) 'not' expression=Primary
	 *     (rule start) (ambiguity) 'pre' expression=Primary
	 *     (rule start) (ambiguity) value=BOOL
	 *     (rule start) (ambiguity) value=FLOAT
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=[Variable_Declaration|IDENT]
	 *     (rule start) (ambiguity) {And.subExpressions+=}
	 *     (rule start) (ambiguity) {Arrow.subExpressions+=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Div.subExpressions+=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 *     (rule start) (ambiguity) {Fby.subExpressions+=}
	 *     (rule start) (ambiguity) {Minus.subExpressions+=}
	 *     (rule start) (ambiguity) {Mod.subExpressions+=}
	 *     (rule start) (ambiguity) {Mul.subExpressions+=}
	 *     (rule start) (ambiguity) {Or.subExpressions+=}
	 *     (rule start) (ambiguity) {Plus.subExpressions+=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'if' ifexpr=Expression
	 *     (rule start) (ambiguity) {And.subExpressions+=}
	 *     (rule start) (ambiguity) {Arrow.subExpressions+=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Div.subExpressions+=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 *     (rule start) (ambiguity) {Fby.subExpressions+=}
	 *     (rule start) (ambiguity) {Minus.subExpressions+=}
	 *     (rule start) (ambiguity) {Mod.subExpressions+=}
	 *     (rule start) (ambiguity) {Mul.subExpressions+=}
	 *     (rule start) (ambiguity) {Or.subExpressions+=}
	 *     (rule start) (ambiguity) {Plus.subExpressions+=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
