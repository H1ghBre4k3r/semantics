/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.lustre;

import de.cau.cs.kieler.kexpressions.Declaration;
import de.cau.cs.kieler.kexpressions.Expression;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.VariableDeclaration;

import de.cau.cs.kieler.kexpressions.keffects.Assignment;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Node Declaration</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#isIsUnsafe <em>Is Unsafe</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#isHasState <em>Has State</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getStaticParams <em>Static Params</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getInput <em>Input</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getOutput <em>Output</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getEffectiveNode <em>Effective Node</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getStaticArgs <em>Static Args</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getConstants <em>Constants</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getVariables <em>Variables</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getEquations <em>Equations</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getAssertions <em>Assertions</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getAutomatons <em>Automatons</em>}</li>
 * </ul>
 *
 * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration()
 * @model
 * @generated
 */
public interface NodeDeclaration extends Declaration
{
  /**
   * Returns the value of the '<em><b>Is Unsafe</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Is Unsafe</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Is Unsafe</em>' attribute.
   * @see #setIsUnsafe(boolean)
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_IsUnsafe()
   * @model
   * @generated
   */
  boolean isIsUnsafe();

  /**
   * Sets the value of the '{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#isIsUnsafe <em>Is Unsafe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Is Unsafe</em>' attribute.
   * @see #isIsUnsafe()
   * @generated
   */
  void setIsUnsafe(boolean value);

  /**
   * Returns the value of the '<em><b>Has State</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Has State</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Has State</em>' attribute.
   * @see #setHasState(boolean)
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_HasState()
   * @model
   * @generated
   */
  boolean isHasState();

  /**
   * Sets the value of the '{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#isHasState <em>Has State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Has State</em>' attribute.
   * @see #isHasState()
   * @generated
   */
  void setHasState(boolean value);

  /**
   * Returns the value of the '<em><b>Static Params</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.lustre.lustre.StaticParam}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Static Params</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Static Params</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_StaticParams()
   * @model containment="true"
   * @generated
   */
  EList<StaticParam> getStaticParams();

  /**
   * Returns the value of the '<em><b>Input</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Input</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Input</em>' containment reference.
   * @see #setInput(Params)
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Input()
   * @model containment="true"
   * @generated
   */
  Params getInput();

  /**
   * Sets the value of the '{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getInput <em>Input</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Input</em>' containment reference.
   * @see #getInput()
   * @generated
   */
  void setInput(Params value);

  /**
   * Returns the value of the '<em><b>Output</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Output</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Output</em>' containment reference.
   * @see #setOutput(Params)
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Output()
   * @model containment="true"
   * @generated
   */
  Params getOutput();

  /**
   * Sets the value of the '{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getOutput <em>Output</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Output</em>' containment reference.
   * @see #getOutput()
   * @generated
   */
  void setOutput(Params value);

  /**
   * Returns the value of the '<em><b>Effective Node</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Effective Node</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Effective Node</em>' containment reference.
   * @see #setEffectiveNode(ValuedObjectReference)
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_EffectiveNode()
   * @model containment="true"
   * @generated
   */
  ValuedObjectReference getEffectiveNode();

  /**
   * Sets the value of the '{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getEffectiveNode <em>Effective Node</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Effective Node</em>' containment reference.
   * @see #getEffectiveNode()
   * @generated
   */
  void setEffectiveNode(ValuedObjectReference value);

  /**
   * Returns the value of the '<em><b>Static Args</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.lustre.lustre.StaticArg}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Static Args</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Static Args</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_StaticArgs()
   * @model containment="true"
   * @generated
   */
  EList<StaticArg> getStaticArgs();

  /**
   * Returns the value of the '<em><b>Constants</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.VariableDeclaration}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Constants</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Constants</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Constants()
   * @model containment="true"
   * @generated
   */
  EList<VariableDeclaration> getConstants();

  /**
   * Returns the value of the '<em><b>Variables</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.lustre.lustre.ClockedVariableDeclaration}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Variables</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Variables</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Variables()
   * @model containment="true"
   * @generated
   */
  EList<ClockedVariableDeclaration> getVariables();

  /**
   * Returns the value of the '<em><b>Equations</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.keffects.Assignment}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Equations</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Equations</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Equations()
   * @model containment="true"
   * @generated
   */
  EList<Assignment> getEquations();

  /**
   * Returns the value of the '<em><b>Assertions</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.Expression}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Assertions</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Assertions</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Assertions()
   * @model containment="true"
   * @generated
   */
  EList<Expression> getAssertions();

  /**
   * Returns the value of the '<em><b>Automatons</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.lustre.lustre.Automaton}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Automatons</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Automatons</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Automatons()
   * @model containment="true"
   * @generated
   */
  EList<Automaton> getAutomatons();

} // NodeDeclaration
