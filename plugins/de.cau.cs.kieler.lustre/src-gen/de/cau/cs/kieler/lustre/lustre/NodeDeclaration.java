/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.lustre;

import de.cau.cs.kieler.kexpressions.Declaration;
import de.cau.cs.kieler.kexpressions.Expression;
import de.cau.cs.kieler.kexpressions.VariableDeclaration;

import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Node Declaration</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#isIsUnsafe <em>Is Unsafe</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#isHasState <em>Has State</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getInputs <em>Inputs</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getOutputs <em>Outputs</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getConstants <em>Constants</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getVariables <em>Variables</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getEquations <em>Equations</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getEmissions <em>Emissions</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getAssertions <em>Assertions</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#getAutomatons <em>Automatons</em>}</li>
 * </ul>
 *
 * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration()
 * @model
 * @generated
 */
public interface NodeDeclaration extends Declaration
{
  /**
   * Returns the value of the '<em><b>Is Unsafe</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Is Unsafe</em>' attribute.
   * @see #setIsUnsafe(boolean)
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_IsUnsafe()
   * @model
   * @generated
   */
  boolean isIsUnsafe();

  /**
   * Sets the value of the '{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#isIsUnsafe <em>Is Unsafe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Is Unsafe</em>' attribute.
   * @see #isIsUnsafe()
   * @generated
   */
  void setIsUnsafe(boolean value);

  /**
   * Returns the value of the '<em><b>Has State</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Has State</em>' attribute.
   * @see #setHasState(boolean)
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_HasState()
   * @model
   * @generated
   */
  boolean isHasState();

  /**
   * Sets the value of the '{@link de.cau.cs.kieler.lustre.lustre.NodeDeclaration#isHasState <em>Has State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Has State</em>' attribute.
   * @see #isHasState()
   * @generated
   */
  void setHasState(boolean value);

  /**
   * Returns the value of the '<em><b>Inputs</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.VariableDeclaration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Inputs</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Inputs()
   * @model containment="true"
   * @generated
   */
  EList<VariableDeclaration> getInputs();

  /**
   * Returns the value of the '<em><b>Outputs</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.VariableDeclaration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Outputs</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Outputs()
   * @model containment="true"
   * @generated
   */
  EList<VariableDeclaration> getOutputs();

  /**
   * Returns the value of the '<em><b>Constants</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.VariableDeclaration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Constants</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Constants()
   * @model containment="true"
   * @generated
   */
  EList<VariableDeclaration> getConstants();

  /**
   * Returns the value of the '<em><b>Variables</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.VariableDeclaration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Variables</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Variables()
   * @model containment="true"
   * @generated
   */
  EList<VariableDeclaration> getVariables();

  /**
   * Returns the value of the '<em><b>Equations</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.keffects.Assignment}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Equations</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Equations()
   * @model containment="true"
   * @generated
   */
  EList<Assignment> getEquations();

  /**
   * Returns the value of the '<em><b>Emissions</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.keffects.Emission}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Emissions</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Emissions()
   * @model containment="true"
   * @generated
   */
  EList<Emission> getEmissions();

  /**
   * Returns the value of the '<em><b>Assertions</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.kexpressions.Expression}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Assertions</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Assertions()
   * @model containment="true"
   * @generated
   */
  EList<Expression> getAssertions();

  /**
   * Returns the value of the '<em><b>Automatons</b></em>' containment reference list.
   * The list contents are of type {@link de.cau.cs.kieler.lustre.lustre.Automaton}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Automatons</em>' containment reference list.
   * @see de.cau.cs.kieler.lustre.lustre.LustrePackage#getNodeDeclaration_Automatons()
   * @model containment="true"
   * @generated
   */
  EList<Automaton> getAutomatons();

} // NodeDeclaration
