/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.lustre.impl;

import de.cau.cs.kieler.kexpressions.ValueType;

import de.cau.cs.kieler.lustre.lustre.LustrePackage;
import de.cau.cs.kieler.lustre.lustre.Params;
import de.cau.cs.kieler.lustre.lustre.StaticParam;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Static Param</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.StaticParamImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.StaticParamImpl#getType <em>Type</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.StaticParamImpl#getNodeInput <em>Node Input</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.StaticParamImpl#getNodeOutput <em>Node Output</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StaticParamImpl extends MinimalEObjectImpl.Container implements StaticParam
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final ValueType TYPE_EDEFAULT = ValueType.PURE;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected ValueType type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getNodeInput() <em>Node Input</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeInput()
   * @generated
   * @ordered
   */
  protected Params nodeInput;

  /**
   * The cached value of the '{@link #getNodeOutput() <em>Node Output</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeOutput()
   * @generated
   * @ordered
   */
  protected Params nodeOutput;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StaticParamImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LustrePackage.Literals.STATIC_PARAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.STATIC_PARAM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(ValueType newType)
  {
    ValueType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.STATIC_PARAM__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Params getNodeInput()
  {
    return nodeInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodeInput(Params newNodeInput, NotificationChain msgs)
  {
    Params oldNodeInput = nodeInput;
    nodeInput = newNodeInput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LustrePackage.STATIC_PARAM__NODE_INPUT, oldNodeInput, newNodeInput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeInput(Params newNodeInput)
  {
    if (newNodeInput != nodeInput)
    {
      NotificationChain msgs = null;
      if (nodeInput != null)
        msgs = ((InternalEObject)nodeInput).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LustrePackage.STATIC_PARAM__NODE_INPUT, null, msgs);
      if (newNodeInput != null)
        msgs = ((InternalEObject)newNodeInput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LustrePackage.STATIC_PARAM__NODE_INPUT, null, msgs);
      msgs = basicSetNodeInput(newNodeInput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.STATIC_PARAM__NODE_INPUT, newNodeInput, newNodeInput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Params getNodeOutput()
  {
    return nodeOutput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNodeOutput(Params newNodeOutput, NotificationChain msgs)
  {
    Params oldNodeOutput = nodeOutput;
    nodeOutput = newNodeOutput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LustrePackage.STATIC_PARAM__NODE_OUTPUT, oldNodeOutput, newNodeOutput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeOutput(Params newNodeOutput)
  {
    if (newNodeOutput != nodeOutput)
    {
      NotificationChain msgs = null;
      if (nodeOutput != null)
        msgs = ((InternalEObject)nodeOutput).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LustrePackage.STATIC_PARAM__NODE_OUTPUT, null, msgs);
      if (newNodeOutput != null)
        msgs = ((InternalEObject)newNodeOutput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LustrePackage.STATIC_PARAM__NODE_OUTPUT, null, msgs);
      msgs = basicSetNodeOutput(newNodeOutput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.STATIC_PARAM__NODE_OUTPUT, newNodeOutput, newNodeOutput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LustrePackage.STATIC_PARAM__NODE_INPUT:
        return basicSetNodeInput(null, msgs);
      case LustrePackage.STATIC_PARAM__NODE_OUTPUT:
        return basicSetNodeOutput(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LustrePackage.STATIC_PARAM__NAME:
        return getName();
      case LustrePackage.STATIC_PARAM__TYPE:
        return getType();
      case LustrePackage.STATIC_PARAM__NODE_INPUT:
        return getNodeInput();
      case LustrePackage.STATIC_PARAM__NODE_OUTPUT:
        return getNodeOutput();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LustrePackage.STATIC_PARAM__NAME:
        setName((String)newValue);
        return;
      case LustrePackage.STATIC_PARAM__TYPE:
        setType((ValueType)newValue);
        return;
      case LustrePackage.STATIC_PARAM__NODE_INPUT:
        setNodeInput((Params)newValue);
        return;
      case LustrePackage.STATIC_PARAM__NODE_OUTPUT:
        setNodeOutput((Params)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.STATIC_PARAM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LustrePackage.STATIC_PARAM__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case LustrePackage.STATIC_PARAM__NODE_INPUT:
        setNodeInput((Params)null);
        return;
      case LustrePackage.STATIC_PARAM__NODE_OUTPUT:
        setNodeOutput((Params)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.STATIC_PARAM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LustrePackage.STATIC_PARAM__TYPE:
        return type != TYPE_EDEFAULT;
      case LustrePackage.STATIC_PARAM__NODE_INPUT:
        return nodeInput != null;
      case LustrePackage.STATIC_PARAM__NODE_OUTPUT:
        return nodeOutput != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //StaticParamImpl
