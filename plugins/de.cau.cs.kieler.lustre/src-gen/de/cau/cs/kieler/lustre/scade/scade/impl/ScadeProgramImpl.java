/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.scade.scade.impl;

import de.cau.cs.kieler.kexpressions.Expression;

import de.cau.cs.kieler.lustre.lustre.Automaton;

import de.cau.cs.kieler.lustre.scade.scade.ScadeEquation;
import de.cau.cs.kieler.lustre.scade.scade.ScadePackage;
import de.cau.cs.kieler.lustre.scade.scade.ScadeProgram;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.scade.scade.impl.ScadeProgramImpl#getEquations <em>Equations</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.scade.scade.impl.ScadeProgramImpl#getAssertions <em>Assertions</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.scade.scade.impl.ScadeProgramImpl#getAutomatons <em>Automatons</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ScadeProgramImpl extends MinimalEObjectImpl.Container implements ScadeProgram
{
  /**
   * The cached value of the '{@link #getEquations() <em>Equations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEquations()
   * @generated
   * @ordered
   */
  protected EList<ScadeEquation> equations;

  /**
   * The cached value of the '{@link #getAssertions() <em>Assertions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertions()
   * @generated
   * @ordered
   */
  protected EList<Expression> assertions;

  /**
   * The cached value of the '{@link #getAutomatons() <em>Automatons</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAutomatons()
   * @generated
   * @ordered
   */
  protected EList<Automaton> automatons;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScadeProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ScadePackage.Literals.SCADE_PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ScadeEquation> getEquations()
  {
    if (equations == null)
    {
      equations = new EObjectContainmentEList<ScadeEquation>(ScadeEquation.class, this, ScadePackage.SCADE_PROGRAM__EQUATIONS);
    }
    return equations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getAssertions()
  {
    if (assertions == null)
    {
      assertions = new EObjectContainmentEList<Expression>(Expression.class, this, ScadePackage.SCADE_PROGRAM__ASSERTIONS);
    }
    return assertions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Automaton> getAutomatons()
  {
    if (automatons == null)
    {
      automatons = new EObjectContainmentEList<Automaton>(Automaton.class, this, ScadePackage.SCADE_PROGRAM__AUTOMATONS);
    }
    return automatons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ScadePackage.SCADE_PROGRAM__EQUATIONS:
        return ((InternalEList<?>)getEquations()).basicRemove(otherEnd, msgs);
      case ScadePackage.SCADE_PROGRAM__ASSERTIONS:
        return ((InternalEList<?>)getAssertions()).basicRemove(otherEnd, msgs);
      case ScadePackage.SCADE_PROGRAM__AUTOMATONS:
        return ((InternalEList<?>)getAutomatons()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ScadePackage.SCADE_PROGRAM__EQUATIONS:
        return getEquations();
      case ScadePackage.SCADE_PROGRAM__ASSERTIONS:
        return getAssertions();
      case ScadePackage.SCADE_PROGRAM__AUTOMATONS:
        return getAutomatons();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ScadePackage.SCADE_PROGRAM__EQUATIONS:
        getEquations().clear();
        getEquations().addAll((Collection<? extends ScadeEquation>)newValue);
        return;
      case ScadePackage.SCADE_PROGRAM__ASSERTIONS:
        getAssertions().clear();
        getAssertions().addAll((Collection<? extends Expression>)newValue);
        return;
      case ScadePackage.SCADE_PROGRAM__AUTOMATONS:
        getAutomatons().clear();
        getAutomatons().addAll((Collection<? extends Automaton>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ScadePackage.SCADE_PROGRAM__EQUATIONS:
        getEquations().clear();
        return;
      case ScadePackage.SCADE_PROGRAM__ASSERTIONS:
        getAssertions().clear();
        return;
      case ScadePackage.SCADE_PROGRAM__AUTOMATONS:
        getAutomatons().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ScadePackage.SCADE_PROGRAM__EQUATIONS:
        return equations != null && !equations.isEmpty();
      case ScadePackage.SCADE_PROGRAM__ASSERTIONS:
        return assertions != null && !assertions.isEmpty();
      case ScadePackage.SCADE_PROGRAM__AUTOMATONS:
        return automatons != null && !automatons.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ScadeProgramImpl
