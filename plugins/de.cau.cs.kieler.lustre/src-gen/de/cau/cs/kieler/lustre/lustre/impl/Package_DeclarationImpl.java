/**
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.lustre.lustre.impl;

import de.cau.cs.kieler.lustre.lustre.Constant_Declaration;
import de.cau.cs.kieler.lustre.lustre.LustrePackage;
import de.cau.cs.kieler.lustre.lustre.Node_Declaration;
import de.cau.cs.kieler.lustre.lustre.Package_Declaration;
import de.cau.cs.kieler.lustre.lustre.Package_Provided;
import de.cau.cs.kieler.lustre.lustre.Type_Declaration;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Package Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.Package_DeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.Package_DeclarationImpl#getUses <em>Uses</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.Package_DeclarationImpl#getProvides <em>Provides</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.Package_DeclarationImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.Package_DeclarationImpl#getTypes <em>Types</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.Package_DeclarationImpl#getConstants <em>Constants</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Package_DeclarationImpl extends MinimalEObjectImpl.Container implements Package_Declaration
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getUses() <em>Uses</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUses()
   * @generated
   * @ordered
   */
  protected EList<String> uses;

  /**
   * The cached value of the '{@link #getProvides() <em>Provides</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProvides()
   * @generated
   * @ordered
   */
  protected EList<Package_Provided> provides;

  /**
   * The cached value of the '{@link #getNodes() <em>Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodes()
   * @generated
   * @ordered
   */
  protected EList<Node_Declaration> nodes;

  /**
   * The cached value of the '{@link #getTypes() <em>Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypes()
   * @generated
   * @ordered
   */
  protected EList<Type_Declaration> types;

  /**
   * The cached value of the '{@link #getConstants() <em>Constants</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstants()
   * @generated
   * @ordered
   */
  protected EList<Constant_Declaration> constants;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Package_DeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LustrePackage.Literals.PACKAGE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.PACKAGE_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getUses()
  {
    if (uses == null)
    {
      uses = new EDataTypeEList<String>(String.class, this, LustrePackage.PACKAGE_DECLARATION__USES);
    }
    return uses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Package_Provided> getProvides()
  {
    if (provides == null)
    {
      provides = new EObjectContainmentEList<Package_Provided>(Package_Provided.class, this, LustrePackage.PACKAGE_DECLARATION__PROVIDES);
    }
    return provides;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Node_Declaration> getNodes()
  {
    if (nodes == null)
    {
      nodes = new EObjectContainmentEList<Node_Declaration>(Node_Declaration.class, this, LustrePackage.PACKAGE_DECLARATION__NODES);
    }
    return nodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Type_Declaration> getTypes()
  {
    if (types == null)
    {
      types = new EObjectContainmentEList<Type_Declaration>(Type_Declaration.class, this, LustrePackage.PACKAGE_DECLARATION__TYPES);
    }
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Constant_Declaration> getConstants()
  {
    if (constants == null)
    {
      constants = new EObjectContainmentEList<Constant_Declaration>(Constant_Declaration.class, this, LustrePackage.PACKAGE_DECLARATION__CONSTANTS);
    }
    return constants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LustrePackage.PACKAGE_DECLARATION__PROVIDES:
        return ((InternalEList<?>)getProvides()).basicRemove(otherEnd, msgs);
      case LustrePackage.PACKAGE_DECLARATION__NODES:
        return ((InternalEList<?>)getNodes()).basicRemove(otherEnd, msgs);
      case LustrePackage.PACKAGE_DECLARATION__TYPES:
        return ((InternalEList<?>)getTypes()).basicRemove(otherEnd, msgs);
      case LustrePackage.PACKAGE_DECLARATION__CONSTANTS:
        return ((InternalEList<?>)getConstants()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LustrePackage.PACKAGE_DECLARATION__NAME:
        return getName();
      case LustrePackage.PACKAGE_DECLARATION__USES:
        return getUses();
      case LustrePackage.PACKAGE_DECLARATION__PROVIDES:
        return getProvides();
      case LustrePackage.PACKAGE_DECLARATION__NODES:
        return getNodes();
      case LustrePackage.PACKAGE_DECLARATION__TYPES:
        return getTypes();
      case LustrePackage.PACKAGE_DECLARATION__CONSTANTS:
        return getConstants();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LustrePackage.PACKAGE_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case LustrePackage.PACKAGE_DECLARATION__USES:
        getUses().clear();
        getUses().addAll((Collection<? extends String>)newValue);
        return;
      case LustrePackage.PACKAGE_DECLARATION__PROVIDES:
        getProvides().clear();
        getProvides().addAll((Collection<? extends Package_Provided>)newValue);
        return;
      case LustrePackage.PACKAGE_DECLARATION__NODES:
        getNodes().clear();
        getNodes().addAll((Collection<? extends Node_Declaration>)newValue);
        return;
      case LustrePackage.PACKAGE_DECLARATION__TYPES:
        getTypes().clear();
        getTypes().addAll((Collection<? extends Type_Declaration>)newValue);
        return;
      case LustrePackage.PACKAGE_DECLARATION__CONSTANTS:
        getConstants().clear();
        getConstants().addAll((Collection<? extends Constant_Declaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.PACKAGE_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LustrePackage.PACKAGE_DECLARATION__USES:
        getUses().clear();
        return;
      case LustrePackage.PACKAGE_DECLARATION__PROVIDES:
        getProvides().clear();
        return;
      case LustrePackage.PACKAGE_DECLARATION__NODES:
        getNodes().clear();
        return;
      case LustrePackage.PACKAGE_DECLARATION__TYPES:
        getTypes().clear();
        return;
      case LustrePackage.PACKAGE_DECLARATION__CONSTANTS:
        getConstants().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.PACKAGE_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LustrePackage.PACKAGE_DECLARATION__USES:
        return uses != null && !uses.isEmpty();
      case LustrePackage.PACKAGE_DECLARATION__PROVIDES:
        return provides != null && !provides.isEmpty();
      case LustrePackage.PACKAGE_DECLARATION__NODES:
        return nodes != null && !nodes.isEmpty();
      case LustrePackage.PACKAGE_DECLARATION__TYPES:
        return types != null && !types.isEmpty();
      case LustrePackage.PACKAGE_DECLARATION__CONSTANTS:
        return constants != null && !constants.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", uses: ");
    result.append(uses);
    result.append(')');
    return result.toString();
  }

} //Package_DeclarationImpl
