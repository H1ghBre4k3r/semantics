/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.lustre.impl;

import de.cau.cs.kieler.kexpressions.Expression;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.VariableDeclaration;

import de.cau.cs.kieler.kexpressions.impl.DeclarationImpl;

import de.cau.cs.kieler.kexpressions.keffects.Assignment;

import de.cau.cs.kieler.lustre.lustre.Automaton;
import de.cau.cs.kieler.lustre.lustre.ClockedVariableDeclaration;
import de.cau.cs.kieler.lustre.lustre.LustrePackage;
import de.cau.cs.kieler.lustre.lustre.NodeDeclaration;
import de.cau.cs.kieler.lustre.lustre.Params;
import de.cau.cs.kieler.lustre.lustre.StaticArg;
import de.cau.cs.kieler.lustre.lustre.StaticParam;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#isIsUnsafe <em>Is Unsafe</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#isHasState <em>Has State</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getStaticParams <em>Static Params</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getInput <em>Input</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getOutput <em>Output</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getEffectiveNode <em>Effective Node</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getStaticArgs <em>Static Args</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getConstants <em>Constants</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getEquations <em>Equations</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getAssertions <em>Assertions</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.NodeDeclarationImpl#getAutomatons <em>Automatons</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeDeclarationImpl extends DeclarationImpl implements NodeDeclaration
{
  /**
   * The default value of the '{@link #isIsUnsafe() <em>Is Unsafe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsUnsafe()
   * @generated
   * @ordered
   */
  protected static final boolean IS_UNSAFE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsUnsafe() <em>Is Unsafe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsUnsafe()
   * @generated
   * @ordered
   */
  protected boolean isUnsafe = IS_UNSAFE_EDEFAULT;

  /**
   * The default value of the '{@link #isHasState() <em>Has State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasState()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_STATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHasState() <em>Has State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasState()
   * @generated
   * @ordered
   */
  protected boolean hasState = HAS_STATE_EDEFAULT;

  /**
   * The cached value of the '{@link #getStaticParams() <em>Static Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStaticParams()
   * @generated
   * @ordered
   */
  protected EList<StaticParam> staticParams;

  /**
   * The cached value of the '{@link #getInput() <em>Input</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInput()
   * @generated
   * @ordered
   */
  protected Params input;

  /**
   * The cached value of the '{@link #getOutput() <em>Output</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutput()
   * @generated
   * @ordered
   */
  protected Params output;

  /**
   * The cached value of the '{@link #getEffectiveNode() <em>Effective Node</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEffectiveNode()
   * @generated
   * @ordered
   */
  protected ValuedObjectReference effectiveNode;

  /**
   * The cached value of the '{@link #getStaticArgs() <em>Static Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStaticArgs()
   * @generated
   * @ordered
   */
  protected EList<StaticArg> staticArgs;

  /**
   * The cached value of the '{@link #getConstants() <em>Constants</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstants()
   * @generated
   * @ordered
   */
  protected EList<VariableDeclaration> constants;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<ClockedVariableDeclaration> variables;

  /**
   * The cached value of the '{@link #getEquations() <em>Equations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEquations()
   * @generated
   * @ordered
   */
  protected EList<Assignment> equations;

  /**
   * The cached value of the '{@link #getAssertions() <em>Assertions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertions()
   * @generated
   * @ordered
   */
  protected EList<Expression> assertions;

  /**
   * The cached value of the '{@link #getAutomatons() <em>Automatons</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAutomatons()
   * @generated
   * @ordered
   */
  protected EList<Automaton> automatons;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LustrePackage.Literals.NODE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsUnsafe()
  {
    return isUnsafe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsUnsafe(boolean newIsUnsafe)
  {
    boolean oldIsUnsafe = isUnsafe;
    isUnsafe = newIsUnsafe;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.NODE_DECLARATION__IS_UNSAFE, oldIsUnsafe, isUnsafe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHasState()
  {
    return hasState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHasState(boolean newHasState)
  {
    boolean oldHasState = hasState;
    hasState = newHasState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.NODE_DECLARATION__HAS_STATE, oldHasState, hasState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StaticParam> getStaticParams()
  {
    if (staticParams == null)
    {
      staticParams = new EObjectContainmentEList<StaticParam>(StaticParam.class, this, LustrePackage.NODE_DECLARATION__STATIC_PARAMS);
    }
    return staticParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Params getInput()
  {
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInput(Params newInput, NotificationChain msgs)
  {
    Params oldInput = input;
    input = newInput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LustrePackage.NODE_DECLARATION__INPUT, oldInput, newInput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInput(Params newInput)
  {
    if (newInput != input)
    {
      NotificationChain msgs = null;
      if (input != null)
        msgs = ((InternalEObject)input).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LustrePackage.NODE_DECLARATION__INPUT, null, msgs);
      if (newInput != null)
        msgs = ((InternalEObject)newInput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LustrePackage.NODE_DECLARATION__INPUT, null, msgs);
      msgs = basicSetInput(newInput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.NODE_DECLARATION__INPUT, newInput, newInput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Params getOutput()
  {
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOutput(Params newOutput, NotificationChain msgs)
  {
    Params oldOutput = output;
    output = newOutput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LustrePackage.NODE_DECLARATION__OUTPUT, oldOutput, newOutput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOutput(Params newOutput)
  {
    if (newOutput != output)
    {
      NotificationChain msgs = null;
      if (output != null)
        msgs = ((InternalEObject)output).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LustrePackage.NODE_DECLARATION__OUTPUT, null, msgs);
      if (newOutput != null)
        msgs = ((InternalEObject)newOutput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LustrePackage.NODE_DECLARATION__OUTPUT, null, msgs);
      msgs = basicSetOutput(newOutput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.NODE_DECLARATION__OUTPUT, newOutput, newOutput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValuedObjectReference getEffectiveNode()
  {
    return effectiveNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEffectiveNode(ValuedObjectReference newEffectiveNode, NotificationChain msgs)
  {
    ValuedObjectReference oldEffectiveNode = effectiveNode;
    effectiveNode = newEffectiveNode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE, oldEffectiveNode, newEffectiveNode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEffectiveNode(ValuedObjectReference newEffectiveNode)
  {
    if (newEffectiveNode != effectiveNode)
    {
      NotificationChain msgs = null;
      if (effectiveNode != null)
        msgs = ((InternalEObject)effectiveNode).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE, null, msgs);
      if (newEffectiveNode != null)
        msgs = ((InternalEObject)newEffectiveNode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE, null, msgs);
      msgs = basicSetEffectiveNode(newEffectiveNode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE, newEffectiveNode, newEffectiveNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StaticArg> getStaticArgs()
  {
    if (staticArgs == null)
    {
      staticArgs = new EObjectContainmentEList<StaticArg>(StaticArg.class, this, LustrePackage.NODE_DECLARATION__STATIC_ARGS);
    }
    return staticArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<VariableDeclaration> getConstants()
  {
    if (constants == null)
    {
      constants = new EObjectContainmentEList<VariableDeclaration>(VariableDeclaration.class, this, LustrePackage.NODE_DECLARATION__CONSTANTS);
    }
    return constants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ClockedVariableDeclaration> getVariables()
  {
    if (variables == null)
    {
      variables = new EObjectContainmentEList<ClockedVariableDeclaration>(ClockedVariableDeclaration.class, this, LustrePackage.NODE_DECLARATION__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Assignment> getEquations()
  {
    if (equations == null)
    {
      equations = new EObjectContainmentEList<Assignment>(Assignment.class, this, LustrePackage.NODE_DECLARATION__EQUATIONS);
    }
    return equations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getAssertions()
  {
    if (assertions == null)
    {
      assertions = new EObjectContainmentEList<Expression>(Expression.class, this, LustrePackage.NODE_DECLARATION__ASSERTIONS);
    }
    return assertions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Automaton> getAutomatons()
  {
    if (automatons == null)
    {
      automatons = new EObjectContainmentEList<Automaton>(Automaton.class, this, LustrePackage.NODE_DECLARATION__AUTOMATONS);
    }
    return automatons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LustrePackage.NODE_DECLARATION__STATIC_PARAMS:
        return ((InternalEList<?>)getStaticParams()).basicRemove(otherEnd, msgs);
      case LustrePackage.NODE_DECLARATION__INPUT:
        return basicSetInput(null, msgs);
      case LustrePackage.NODE_DECLARATION__OUTPUT:
        return basicSetOutput(null, msgs);
      case LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE:
        return basicSetEffectiveNode(null, msgs);
      case LustrePackage.NODE_DECLARATION__STATIC_ARGS:
        return ((InternalEList<?>)getStaticArgs()).basicRemove(otherEnd, msgs);
      case LustrePackage.NODE_DECLARATION__CONSTANTS:
        return ((InternalEList<?>)getConstants()).basicRemove(otherEnd, msgs);
      case LustrePackage.NODE_DECLARATION__VARIABLES:
        return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
      case LustrePackage.NODE_DECLARATION__EQUATIONS:
        return ((InternalEList<?>)getEquations()).basicRemove(otherEnd, msgs);
      case LustrePackage.NODE_DECLARATION__ASSERTIONS:
        return ((InternalEList<?>)getAssertions()).basicRemove(otherEnd, msgs);
      case LustrePackage.NODE_DECLARATION__AUTOMATONS:
        return ((InternalEList<?>)getAutomatons()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LustrePackage.NODE_DECLARATION__IS_UNSAFE:
        return isIsUnsafe();
      case LustrePackage.NODE_DECLARATION__HAS_STATE:
        return isHasState();
      case LustrePackage.NODE_DECLARATION__STATIC_PARAMS:
        return getStaticParams();
      case LustrePackage.NODE_DECLARATION__INPUT:
        return getInput();
      case LustrePackage.NODE_DECLARATION__OUTPUT:
        return getOutput();
      case LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE:
        return getEffectiveNode();
      case LustrePackage.NODE_DECLARATION__STATIC_ARGS:
        return getStaticArgs();
      case LustrePackage.NODE_DECLARATION__CONSTANTS:
        return getConstants();
      case LustrePackage.NODE_DECLARATION__VARIABLES:
        return getVariables();
      case LustrePackage.NODE_DECLARATION__EQUATIONS:
        return getEquations();
      case LustrePackage.NODE_DECLARATION__ASSERTIONS:
        return getAssertions();
      case LustrePackage.NODE_DECLARATION__AUTOMATONS:
        return getAutomatons();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LustrePackage.NODE_DECLARATION__IS_UNSAFE:
        setIsUnsafe((Boolean)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__HAS_STATE:
        setHasState((Boolean)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__STATIC_PARAMS:
        getStaticParams().clear();
        getStaticParams().addAll((Collection<? extends StaticParam>)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__INPUT:
        setInput((Params)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__OUTPUT:
        setOutput((Params)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE:
        setEffectiveNode((ValuedObjectReference)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__STATIC_ARGS:
        getStaticArgs().clear();
        getStaticArgs().addAll((Collection<? extends StaticArg>)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__CONSTANTS:
        getConstants().clear();
        getConstants().addAll((Collection<? extends VariableDeclaration>)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends ClockedVariableDeclaration>)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__EQUATIONS:
        getEquations().clear();
        getEquations().addAll((Collection<? extends Assignment>)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__ASSERTIONS:
        getAssertions().clear();
        getAssertions().addAll((Collection<? extends Expression>)newValue);
        return;
      case LustrePackage.NODE_DECLARATION__AUTOMATONS:
        getAutomatons().clear();
        getAutomatons().addAll((Collection<? extends Automaton>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.NODE_DECLARATION__IS_UNSAFE:
        setIsUnsafe(IS_UNSAFE_EDEFAULT);
        return;
      case LustrePackage.NODE_DECLARATION__HAS_STATE:
        setHasState(HAS_STATE_EDEFAULT);
        return;
      case LustrePackage.NODE_DECLARATION__STATIC_PARAMS:
        getStaticParams().clear();
        return;
      case LustrePackage.NODE_DECLARATION__INPUT:
        setInput((Params)null);
        return;
      case LustrePackage.NODE_DECLARATION__OUTPUT:
        setOutput((Params)null);
        return;
      case LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE:
        setEffectiveNode((ValuedObjectReference)null);
        return;
      case LustrePackage.NODE_DECLARATION__STATIC_ARGS:
        getStaticArgs().clear();
        return;
      case LustrePackage.NODE_DECLARATION__CONSTANTS:
        getConstants().clear();
        return;
      case LustrePackage.NODE_DECLARATION__VARIABLES:
        getVariables().clear();
        return;
      case LustrePackage.NODE_DECLARATION__EQUATIONS:
        getEquations().clear();
        return;
      case LustrePackage.NODE_DECLARATION__ASSERTIONS:
        getAssertions().clear();
        return;
      case LustrePackage.NODE_DECLARATION__AUTOMATONS:
        getAutomatons().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.NODE_DECLARATION__IS_UNSAFE:
        return isUnsafe != IS_UNSAFE_EDEFAULT;
      case LustrePackage.NODE_DECLARATION__HAS_STATE:
        return hasState != HAS_STATE_EDEFAULT;
      case LustrePackage.NODE_DECLARATION__STATIC_PARAMS:
        return staticParams != null && !staticParams.isEmpty();
      case LustrePackage.NODE_DECLARATION__INPUT:
        return input != null;
      case LustrePackage.NODE_DECLARATION__OUTPUT:
        return output != null;
      case LustrePackage.NODE_DECLARATION__EFFECTIVE_NODE:
        return effectiveNode != null;
      case LustrePackage.NODE_DECLARATION__STATIC_ARGS:
        return staticArgs != null && !staticArgs.isEmpty();
      case LustrePackage.NODE_DECLARATION__CONSTANTS:
        return constants != null && !constants.isEmpty();
      case LustrePackage.NODE_DECLARATION__VARIABLES:
        return variables != null && !variables.isEmpty();
      case LustrePackage.NODE_DECLARATION__EQUATIONS:
        return equations != null && !equations.isEmpty();
      case LustrePackage.NODE_DECLARATION__ASSERTIONS:
        return assertions != null && !assertions.isEmpty();
      case LustrePackage.NODE_DECLARATION__AUTOMATONS:
        return automatons != null && !automatons.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isUnsafe: ");
    result.append(isUnsafe);
    result.append(", hasState: ");
    result.append(hasState);
    result.append(')');
    return result.toString();
  }

} //NodeDeclarationImpl
