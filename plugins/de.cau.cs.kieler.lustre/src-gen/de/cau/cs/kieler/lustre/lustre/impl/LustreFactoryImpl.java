/**
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.lustre.lustre.impl;

import de.cau.cs.kieler.lustre.lustre.And;
import de.cau.cs.kieler.lustre.lustre.Arrow;
import de.cau.cs.kieler.lustre.lustre.Assertion;
import de.cau.cs.kieler.lustre.lustre.BooleanConstant;
import de.cau.cs.kieler.lustre.lustre.Comparison;
import de.cau.cs.kieler.lustre.lustre.Const_Decl;
import de.cau.cs.kieler.lustre.lustre.Current;
import de.cau.cs.kieler.lustre.lustre.Declared_Clock;
import de.cau.cs.kieler.lustre.lustre.Div;
import de.cau.cs.kieler.lustre.lustre.Enum_Type;
import de.cau.cs.kieler.lustre.lustre.Eq_or_Ast;
import de.cau.cs.kieler.lustre.lustre.Equality;
import de.cau.cs.kieler.lustre.lustre.Equation;
import de.cau.cs.kieler.lustre.lustre.Equation_List;
import de.cau.cs.kieler.lustre.lustre.Expression;
import de.cau.cs.kieler.lustre.lustre.FN_Body;
import de.cau.cs.kieler.lustre.lustre.Fby;
import de.cau.cs.kieler.lustre.lustre.Field;
import de.cau.cs.kieler.lustre.lustre.Field_List;
import de.cau.cs.kieler.lustre.lustre.FloatConstant;
import de.cau.cs.kieler.lustre.lustre.Ident_List;
import de.cau.cs.kieler.lustre.lustre.Identifier;
import de.cau.cs.kieler.lustre.lustre.IfThenElse;
import de.cau.cs.kieler.lustre.lustre.IntConstant;
import de.cau.cs.kieler.lustre.lustre.Left;
import de.cau.cs.kieler.lustre.lustre.Left_List;
import de.cau.cs.kieler.lustre.lustre.Left_Part;
import de.cau.cs.kieler.lustre.lustre.LustreFactory;
import de.cau.cs.kieler.lustre.lustre.LustrePackage;
import de.cau.cs.kieler.lustre.lustre.Minus;
import de.cau.cs.kieler.lustre.lustre.Mul;
import de.cau.cs.kieler.lustre.lustre.Node_Decl;
import de.cau.cs.kieler.lustre.lustre.Node_Header;
import de.cau.cs.kieler.lustre.lustre.Not;
import de.cau.cs.kieler.lustre.lustre.Or;
import de.cau.cs.kieler.lustre.lustre.Package_Body_Content;
import de.cau.cs.kieler.lustre.lustre.Package_Header;
import de.cau.cs.kieler.lustre.lustre.Package_Provide;
import de.cau.cs.kieler.lustre.lustre.Plus;
import de.cau.cs.kieler.lustre.lustre.Pre;
import de.cau.cs.kieler.lustre.lustre.Program;
import de.cau.cs.kieler.lustre.lustre.Record_Type;
import de.cau.cs.kieler.lustre.lustre.SelTrancheEnd;
import de.cau.cs.kieler.lustre.lustre.Selector;
import de.cau.cs.kieler.lustre.lustre.Type;
import de.cau.cs.kieler.lustre.lustre.Type_Decl;
import de.cau.cs.kieler.lustre.lustre.UMinus;
import de.cau.cs.kieler.lustre.lustre.Var_Decl;
import de.cau.cs.kieler.lustre.lustre.Var_Decl_List;
import de.cau.cs.kieler.lustre.lustre.Variableref;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LustreFactoryImpl extends EFactoryImpl implements LustreFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LustreFactory init()
  {
    try
    {
      LustreFactory theLustreFactory = (LustreFactory)EPackage.Registry.INSTANCE.getEFactory(LustrePackage.eNS_URI);
      if (theLustreFactory != null)
      {
        return theLustreFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LustreFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LustreFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LustrePackage.PROGRAM: return createProgram();
      case LustrePackage.PACKAGE: return createPackage();
      case LustrePackage.PACKAGE_HEADER: return createPackage_Header();
      case LustrePackage.PACKAGE_PROVIDE: return createPackage_Provide();
      case LustrePackage.PACKAGE_BODY_CONTENT: return createPackage_Body_Content();
      case LustrePackage.NODE_DECL: return createNode_Decl();
      case LustrePackage.IDENTIFIER: return createIdentifier();
      case LustrePackage.TYPE_DECL: return createType_Decl();
      case LustrePackage.TYPE: return createType();
      case LustrePackage.RECORD_TYPE: return createRecord_Type();
      case LustrePackage.FIELD_LIST: return createField_List();
      case LustrePackage.FIELD: return createField();
      case LustrePackage.ENUM_TYPE: return createEnum_Type();
      case LustrePackage.CONST_DECL: return createConst_Decl();
      case LustrePackage.IDENT_LIST: return createIdent_List();
      case LustrePackage.NODE_HEADER: return createNode_Header();
      case LustrePackage.VAR_DECL_LIST: return createVar_Decl_List();
      case LustrePackage.VAR_DECL: return createVar_Decl();
      case LustrePackage.DECLARED_CLOCK: return createDeclared_Clock();
      case LustrePackage.FN_BODY: return createFN_Body();
      case LustrePackage.EQUATION_LIST: return createEquation_List();
      case LustrePackage.EQ_OR_AST: return createEq_or_Ast();
      case LustrePackage.EQUATION: return createEquation();
      case LustrePackage.LEFT_PART: return createLeft_Part();
      case LustrePackage.LEFT_LIST: return createLeft_List();
      case LustrePackage.LEFT: return createLeft();
      case LustrePackage.SELECTOR: return createSelector();
      case LustrePackage.SEL_TRANCHE_END: return createSelTrancheEnd();
      case LustrePackage.EXPRESSION: return createExpression();
      case LustrePackage.ASSERTION: return createAssertion();
      case LustrePackage.IF_THEN_ELSE: return createIfThenElse();
      case LustrePackage.FBY: return createFby();
      case LustrePackage.ARROW: return createArrow();
      case LustrePackage.OR: return createOr();
      case LustrePackage.AND: return createAnd();
      case LustrePackage.EQUALITY: return createEquality();
      case LustrePackage.COMPARISON: return createComparison();
      case LustrePackage.PLUS: return createPlus();
      case LustrePackage.MINUS: return createMinus();
      case LustrePackage.MUL: return createMul();
      case LustrePackage.DIV: return createDiv();
      case LustrePackage.NOT: return createNot();
      case LustrePackage.UMINUS: return createUMinus();
      case LustrePackage.PRE: return createPre();
      case LustrePackage.CURRENT: return createCurrent();
      case LustrePackage.VARIABLEREF: return createVariableref();
      case LustrePackage.BOOLEAN_CONSTANT: return createBooleanConstant();
      case LustrePackage.FLOAT_CONSTANT: return createFloatConstant();
      case LustrePackage.INT_CONSTANT: return createIntConstant();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.cau.cs.kieler.lustre.lustre.Package createPackage()
  {
    PackageImpl package_ = new PackageImpl();
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Package_Header createPackage_Header()
  {
    Package_HeaderImpl package_Header = new Package_HeaderImpl();
    return package_Header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Package_Provide createPackage_Provide()
  {
    Package_ProvideImpl package_Provide = new Package_ProvideImpl();
    return package_Provide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Package_Body_Content createPackage_Body_Content()
  {
    Package_Body_ContentImpl package_Body_Content = new Package_Body_ContentImpl();
    return package_Body_Content;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node_Decl createNode_Decl()
  {
    Node_DeclImpl node_Decl = new Node_DeclImpl();
    return node_Decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Identifier createIdentifier()
  {
    IdentifierImpl identifier = new IdentifierImpl();
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type_Decl createType_Decl()
  {
    Type_DeclImpl type_Decl = new Type_DeclImpl();
    return type_Decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Record_Type createRecord_Type()
  {
    Record_TypeImpl record_Type = new Record_TypeImpl();
    return record_Type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Field_List createField_List()
  {
    Field_ListImpl field_List = new Field_ListImpl();
    return field_List;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enum_Type createEnum_Type()
  {
    Enum_TypeImpl enum_Type = new Enum_TypeImpl();
    return enum_Type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Const_Decl createConst_Decl()
  {
    Const_DeclImpl const_Decl = new Const_DeclImpl();
    return const_Decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ident_List createIdent_List()
  {
    Ident_ListImpl ident_List = new Ident_ListImpl();
    return ident_List;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node_Header createNode_Header()
  {
    Node_HeaderImpl node_Header = new Node_HeaderImpl();
    return node_Header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var_Decl_List createVar_Decl_List()
  {
    Var_Decl_ListImpl var_Decl_List = new Var_Decl_ListImpl();
    return var_Decl_List;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var_Decl createVar_Decl()
  {
    Var_DeclImpl var_Decl = new Var_DeclImpl();
    return var_Decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declared_Clock createDeclared_Clock()
  {
    Declared_ClockImpl declared_Clock = new Declared_ClockImpl();
    return declared_Clock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FN_Body createFN_Body()
  {
    FN_BodyImpl fN_Body = new FN_BodyImpl();
    return fN_Body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Equation_List createEquation_List()
  {
    Equation_ListImpl equation_List = new Equation_ListImpl();
    return equation_List;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Eq_or_Ast createEq_or_Ast()
  {
    Eq_or_AstImpl eq_or_Ast = new Eq_or_AstImpl();
    return eq_or_Ast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Equation createEquation()
  {
    EquationImpl equation = new EquationImpl();
    return equation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Left_Part createLeft_Part()
  {
    Left_PartImpl left_Part = new Left_PartImpl();
    return left_Part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Left_List createLeft_List()
  {
    Left_ListImpl left_List = new Left_ListImpl();
    return left_List;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Left createLeft()
  {
    LeftImpl left = new LeftImpl();
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelTrancheEnd createSelTrancheEnd()
  {
    SelTrancheEndImpl selTrancheEnd = new SelTrancheEndImpl();
    return selTrancheEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assertion createAssertion()
  {
    AssertionImpl assertion = new AssertionImpl();
    return assertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfThenElse createIfThenElse()
  {
    IfThenElseImpl ifThenElse = new IfThenElseImpl();
    return ifThenElse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fby createFby()
  {
    FbyImpl fby = new FbyImpl();
    return fby;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Arrow createArrow()
  {
    ArrowImpl arrow = new ArrowImpl();
    return arrow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mul createMul()
  {
    MulImpl mul = new MulImpl();
    return mul;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Div createDiv()
  {
    DivImpl div = new DivImpl();
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UMinus createUMinus()
  {
    UMinusImpl uMinus = new UMinusImpl();
    return uMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pre createPre()
  {
    PreImpl pre = new PreImpl();
    return pre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Current createCurrent()
  {
    CurrentImpl current = new CurrentImpl();
    return current;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variableref createVariableref()
  {
    VariablerefImpl variableref = new VariablerefImpl();
    return variableref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanConstant createBooleanConstant()
  {
    BooleanConstantImpl booleanConstant = new BooleanConstantImpl();
    return booleanConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FloatConstant createFloatConstant()
  {
    FloatConstantImpl floatConstant = new FloatConstantImpl();
    return floatConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LustrePackage getLustrePackage()
  {
    return (LustrePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LustrePackage getPackage()
  {
    return LustrePackage.eINSTANCE;
  }

} //LustreFactoryImpl
