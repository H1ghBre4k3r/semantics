/*
 * generated by Xtext 2.10.0
 */
grammar InternalLustre;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cau.cs.kieler.lustre.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.lustre.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;

}

@parser::members {

 	private LustreGrammarAccess grammarAccess;

    public InternalLustreParser(TokenStream input, LustreGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected LustreGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_LUSTRE_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_LUSTRE_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getPkgPackageParserRuleCall_0());
			}
			lv_pkg_0_0=rulePackage
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				set(
					$current,
					"pkg",
					lv_pkg_0_0,
					"de.cau.cs.kieler.lustre.Lustre.Package");
				afterParserOrEnumRuleCall();
			}
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current; }
	EOF;

// Rule Package
rulePackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageAccess().getHeadPackage_HeaderParserRuleCall_0_0());
				}
				lv_head_0_0=rulePackage_Header
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageRule());
					}
					set(
						$current,
						"head",
						lv_head_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Package_Header");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageAccess().getBodyPackage_Body_ContentParserRuleCall_1_0());
				}
				lv_body_1_0=rulePackage_Body_Content
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"de.cau.cs.kieler.lustre.Lustre.Package_Body_Content");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRulePackage_Header
entryRulePackage_Header returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackage_HeaderRule()); }
	iv_rulePackage_Header=rulePackage_Header
	{ $current=$iv_rulePackage_Header.current; }
	EOF;

// Rule Package_Header
rulePackage_Header returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackage_HeaderAccess().getPackageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPackage_HeaderAccess().getNameIDENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackage_HeaderRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			otherlv_2='uses'
			{
				newLeafNode(otherlv_2, grammarAccess.getPackage_HeaderAccess().getUsesKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPackage_HeaderAccess().getUsesIdent_ListParserRuleCall_2_1_0());
					}
					lv_uses_3_0=ruleIdent_List
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackage_HeaderRule());
						}
						set(
							$current,
							"uses",
							lv_uses_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Ident_List");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='provides'
		{
			newLeafNode(otherlv_4, grammarAccess.getPackage_HeaderAccess().getProvidesKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackage_HeaderAccess().getProvidesPackage_ProvideParserRuleCall_4_0());
				}
				lv_provides_5_0=rulePackage_Provide
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackage_HeaderRule());
					}
					add(
						$current,
						"provides",
						lv_provides_5_0,
						"de.cau.cs.kieler.lustre.Lustre.Package_Provide");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRulePackage_Provide
entryRulePackage_Provide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackage_ProvideRule()); }
	iv_rulePackage_Provide=rulePackage_Provide
	{ $current=$iv_rulePackage_Provide.current; }
	EOF;

// Rule Package_Provide
rulePackage_Provide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='node'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackage_ProvideAccess().getNodeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackage_ProvideRule());
					}
				}
				otherlv_1=RULE_IDENT
				{
					newLeafNode(otherlv_1, grammarAccess.getPackage_ProvideAccess().getNameNode_HeaderCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPackage_ProvideAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackage_ProvideAccess().getParamVar_Decl_ListParserRuleCall_3_0());
				}
				lv_param_3_0=ruleVar_Decl_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackage_ProvideRule());
					}
					set(
						$current,
						"param",
						lv_param_3_0,
						"de.cau.cs.kieler.lustre.Lustre.Var_Decl_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPackage_ProvideAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='returns'
		{
			newLeafNode(otherlv_5, grammarAccess.getPackage_ProvideAccess().getReturnsKeyword_5());
		}
		otherlv_6='('
		{
			newLeafNode(otherlv_6, grammarAccess.getPackage_ProvideAccess().getLeftParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackage_ProvideAccess().getRetVar_Decl_ListParserRuleCall_7_0());
				}
				lv_ret_7_0=ruleVar_Decl_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackage_ProvideRule());
					}
					set(
						$current,
						"ret",
						lv_ret_7_0,
						"de.cau.cs.kieler.lustre.Lustre.Var_Decl_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getPackage_ProvideAccess().getRightParenthesisKeyword_8());
		}
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getPackage_ProvideAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRulePackage_Body_Content
entryRulePackage_Body_Content returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackage_Body_ContentRule()); }
	iv_rulePackage_Body_Content=rulePackage_Body_Content
	{ $current=$iv_rulePackage_Body_Content.current; }
	EOF;

// Rule Package_Body_Content
rulePackage_Body_Content returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='body'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackage_Body_ContentAccess().getBodyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackage_Body_ContentAccess().getEntitiesEntity_DeclParserRuleCall_1_0());
				}
				lv_entities_1_0=ruleEntity_Decl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackage_Body_ContentRule());
					}
					add(
						$current,
						"entities",
						lv_entities_1_0,
						"de.cau.cs.kieler.lustre.Lustre.Entity_Decl");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEntity_Decl
entryRuleEntity_Decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntity_DeclRule()); }
	iv_ruleEntity_Decl=ruleEntity_Decl
	{ $current=$iv_ruleEntity_Decl.current; }
	EOF;

// Rule Entity_Decl
ruleEntity_Decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getEntity_DeclAccess().getNode_DeclParserRuleCall());
	}
	this_Node_Decl_0=ruleNode_Decl
	{
		$current = $this_Node_Decl_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleIdentifier=ruleIdentifier
	{ $current=$iv_ruleIdentifier.current; }
	EOF;

// Rule Identifier
ruleIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_pkg_0_0=RULE_IDENT
					{
						newLeafNode(lv_pkg_0_0, grammarAccess.getIdentifierAccess().getPkgIDENTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentifierRule());
						}
						setWithLastConsumed(
							$current,
							"pkg",
							lv_pkg_0_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			(
				(
					lv_fromPgk_1_0='::'
					{
						newLeafNode(lv_fromPgk_1_0, grammarAccess.getIdentifierAccess().getFromPgkColonColonKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentifierRule());
						}
						setWithLastConsumed($current, "fromPgk", true, "::");
					}
				)
			)
		)?
		(
			(
				lv_name_2_0=RULE_IDENT
				{
					newLeafNode(lv_name_2_0, grammarAccess.getIdentifierAccess().getNameIDENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdentifierRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_IDENT
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTypeAccess().getNameIDENTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"de.cau.cs.kieler.lustre.Lustre.IDENT");
			}
		)
	)
;

// Entry rule entryRuleField_List
entryRuleField_List returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getField_ListRule()); }
	iv_ruleField_List=ruleField_List
	{ $current=$iv_ruleField_List.current; }
	EOF;

// Rule Field_List
ruleField_List returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getField_ListAccess().getFieldsFieldParserRuleCall_0_0());
				}
				lv_fields_0_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getField_ListRule());
					}
					add(
						$current,
						"fields",
						lv_fields_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getField_ListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getField_ListAccess().getFieldsFieldParserRuleCall_1_1_0());
					}
					lv_fields_2_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getField_ListRule());
						}
						add(
							$current,
							"fields",
							lv_fields_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.cau.cs.kieler.lustre.Lustre.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIdent_List
entryRuleIdent_List returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdent_ListRule()); }
	iv_ruleIdent_List=ruleIdent_List
	{ $current=$iv_ruleIdent_List.current; }
	EOF;

// Rule Ident_List
ruleIdent_List returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_names_0_0=RULE_IDENT
				{
					newLeafNode(lv_names_0_0, grammarAccess.getIdent_ListAccess().getNamesIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdent_ListRule());
					}
					addWithLastConsumed(
						$current,
						"names",
						lv_names_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getIdent_ListAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_names_2_0=RULE_IDENT
					{
						newLeafNode(lv_names_2_0, grammarAccess.getIdent_ListAccess().getNamesIDENTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdent_ListRule());
						}
						addWithLastConsumed(
							$current,
							"names",
							lv_names_2_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNode_Decl
entryRuleNode_Decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNode_DeclRule()); }
	iv_ruleNode_Decl=ruleNode_Decl
	{ $current=$iv_ruleNode_Decl.current; }
	EOF;

// Rule Node_Decl
ruleNode_Decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNode_DeclAccess().getHeadNode_HeaderParserRuleCall_0_0());
				}
				lv_head_0_0=ruleNode_Header
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNode_DeclRule());
					}
					set(
						$current,
						"head",
						lv_head_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Node_Header");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNode_DeclAccess().getBdyFN_BodyParserRuleCall_1_0());
				}
				lv_bdy_1_0=ruleFN_Body
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNode_DeclRule());
					}
					set(
						$current,
						"bdy",
						lv_bdy_1_0,
						"de.cau.cs.kieler.lustre.Lustre.FN_Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNode_Header
entryRuleNode_Header returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNode_HeaderRule()); }
	iv_ruleNode_Header=ruleNode_Header
	{ $current=$iv_ruleNode_Header.current; }
	EOF;

// Rule Node_Header
ruleNode_Header returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='node'
		{
			newLeafNode(otherlv_0, grammarAccess.getNode_HeaderAccess().getNodeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNode_HeaderAccess().getNameIDENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNode_HeaderRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getNode_HeaderAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNode_HeaderAccess().getParamVar_Decl_ListParserRuleCall_3_0());
				}
				lv_param_3_0=ruleVar_Decl_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNode_HeaderRule());
					}
					set(
						$current,
						"param",
						lv_param_3_0,
						"de.cau.cs.kieler.lustre.Lustre.Var_Decl_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getNode_HeaderAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='returns'
		{
			newLeafNode(otherlv_5, grammarAccess.getNode_HeaderAccess().getReturnsKeyword_5());
		}
		otherlv_6='('
		{
			newLeafNode(otherlv_6, grammarAccess.getNode_HeaderAccess().getLeftParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNode_HeaderAccess().getRetVar_Decl_ListParserRuleCall_7_0());
				}
				lv_ret_7_0=ruleVar_Decl_List
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNode_HeaderRule());
					}
					set(
						$current,
						"ret",
						lv_ret_7_0,
						"de.cau.cs.kieler.lustre.Lustre.Var_Decl_List");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getNode_HeaderAccess().getRightParenthesisKeyword_8());
		}
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getNode_HeaderAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRuleVar_Decl_List
entryRuleVar_Decl_List returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_Decl_ListRule()); }
	iv_ruleVar_Decl_List=ruleVar_Decl_List
	{ $current=$iv_ruleVar_Decl_List.current; }
	EOF;

// Rule Var_Decl_List
ruleVar_Decl_List returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVar_Decl_ListAccess().getVarListVar_DeclParserRuleCall_0_0());
				}
				lv_varList_0_0=ruleVar_Decl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVar_Decl_ListRule());
					}
					add(
						$current,
						"varList",
						lv_varList_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Var_Decl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVar_Decl_ListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_Decl_ListAccess().getVarListVar_DeclParserRuleCall_1_1_0());
					}
					lv_varList_2_0=ruleVar_Decl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_Decl_ListRule());
						}
						add(
							$current,
							"varList",
							lv_varList_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Var_Decl");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleVar_Decl
entryRuleVar_Decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_DeclRule()); }
	iv_ruleVar_Decl=ruleVar_Decl
	{ $current=$iv_ruleVar_Decl.current; }
	EOF;

// Rule Var_Decl
ruleVar_Decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVar_DeclAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVar_DeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVar_DeclAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVar_DeclAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVar_DeclRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.cau.cs.kieler.lustre.Lustre.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVar_DeclAccess().getClkDeclared_ClockParserRuleCall_3_0());
				}
				lv_clk_3_0=ruleDeclared_Clock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVar_DeclRule());
					}
					set(
						$current,
						"clk",
						lv_clk_3_0,
						"de.cau.cs.kieler.lustre.Lustre.Declared_Clock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleDeclared_Clock
entryRuleDeclared_Clock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclared_ClockRule()); }
	iv_ruleDeclared_Clock=ruleDeclared_Clock
	{ $current=$iv_ruleDeclared_Clock.current; }
	EOF;

// Rule Declared_Clock
ruleDeclared_Clock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='when'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeclared_ClockAccess().getWhenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclared_ClockAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclared_ClockRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.lustre.Lustre.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFN_Body
entryRuleFN_Body returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFN_BodyRule()); }
	iv_ruleFN_Body=ruleFN_Body
	{ $current=$iv_ruleFN_Body.current; }
	EOF;

// Rule FN_Body
ruleFN_Body returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFN_BodyAccess().getFN_BodyAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFN_BodyAccess().getDeclLocal_Var_DeclParserRuleCall_1_0());
				}
				lv_decl_1_0=ruleLocal_Var_Decl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFN_BodyRule());
					}
					add(
						$current,
						"decl",
						lv_decl_1_0,
						"de.cau.cs.kieler.lustre.Lustre.Local_Var_Decl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='let'
		{
			newLeafNode(otherlv_2, grammarAccess.getFN_BodyAccess().getLetKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFN_BodyAccess().getEqEquationParserRuleCall_3_0());
				}
				lv_eq_3_0=ruleEquation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFN_BodyRule());
					}
					add(
						$current,
						"eq",
						lv_eq_3_0,
						"de.cau.cs.kieler.lustre.Lustre.Equation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='tel'
		{
			newLeafNode(otherlv_4, grammarAccess.getFN_BodyAccess().getTelKeyword_4());
		}
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getFN_BodyAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleLocal_Var_Decl
entryRuleLocal_Var_Decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocal_Var_DeclRule()); }
	iv_ruleLocal_Var_Decl=ruleLocal_Var_Decl
	{ $current=$iv_ruleLocal_Var_Decl.current; }
	EOF;

// Rule Local_Var_Decl
ruleLocal_Var_Decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocal_Var_DeclAccess().getVarKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getLocal_Var_DeclAccess().getVar_DeclParserRuleCall_1());
		}
		this_Var_Decl_1=ruleVar_Decl
		{
			$current = $this_Var_Decl_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getLocal_Var_DeclAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleEq_or_Ast
entryRuleEq_or_Ast returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEq_or_AstRule()); }
	iv_ruleEq_or_Ast=ruleEq_or_Ast
	{ $current=$iv_ruleEq_or_Ast.current; }
	EOF;

// Rule Eq_or_Ast
ruleEq_or_Ast returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEq_or_AstAccess().getEquationParserRuleCall_0());
		}
		this_Equation_0=ruleEquation
		{
			$current = $this_Equation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEq_or_AstAccess().getAssertionParserRuleCall_1());
		}
		this_Assertion_1=ruleAssertion
		{
			$current = $this_Assertion_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	iv_ruleEquation=ruleEquation
	{ $current=$iv_ruleEquation.current; }
	EOF;

// Rule Equation
ruleEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_left_0_0=RULE_IDENT
				{
					newLeafNode(lv_left_0_0, grammarAccess.getEquationAccess().getLeftIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEquationRule());
					}
					setWithLastConsumed(
						$current,
						"left",
						lv_left_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getEquationAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEquationAccess().getRightRight_PartParserRuleCall_2_0());
				}
				lv_right_2_0=ruleRight_Part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquationRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"de.cau.cs.kieler.lustre.Lustre.Right_Part");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getEquationAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleLeft_List
entryRuleLeft_List returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeft_ListRule()); }
	iv_ruleLeft_List=ruleLeft_List
	{ $current=$iv_ruleLeft_List.current; }
	EOF;

// Rule Left_List
ruleLeft_List returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLeft_ListAccess().getIdLeftParserRuleCall_0_0());
				}
				lv_id_0_0=ruleLeft
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeft_ListRule());
					}
					add(
						$current,
						"id",
						lv_id_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Left");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getLeft_ListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeft_ListAccess().getIdLeftParserRuleCall_1_1_0());
					}
					lv_id_2_0=ruleLeft
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeft_ListRule());
						}
						add(
							$current,
							"id",
							lv_id_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Left");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getNameIdentifierParserRuleCall_0_0());
				}
				lv_name_0_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getSelSelectorParserRuleCall_1_0());
				}
				lv_sel_1_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"sel",
						lv_sel_1_0,
						"de.cau.cs.kieler.lustre.Lustre.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='.'
			{
				newLeafNode(otherlv_0, grammarAccess.getSelectorAccess().getFullStopKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getSelectorAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectorRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)
		    |
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getBeginExpressionParserRuleCall_1_1_0());
					}
					lv_begin_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"begin",
							lv_begin_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getEndSelTrancheEndParserRuleCall_1_2_0());
					}
					lv_end_4_0=ruleSelTrancheEnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"end",
							lv_end_4_0,
							"de.cau.cs.kieler.lustre.Lustre.SelTrancheEnd");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleSelTrancheEnd
entryRuleSelTrancheEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelTrancheEndRule()); }
	iv_ruleSelTrancheEnd=ruleSelTrancheEnd
	{ $current=$iv_ruleSelTrancheEnd.current; }
	EOF;

// Rule SelTrancheEnd
ruleSelTrancheEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='..'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelTrancheEndAccess().getFullStopFullStopKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSelTrancheEndAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRight_Part
entryRuleRight_Part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRight_PartRule()); }
	iv_ruleRight_Part=ruleRight_Part
	{ $current=$iv_ruleRight_Part.current; }
	EOF;

// Rule Right_Part
ruleRight_Part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRight_PartAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	iv_ruleAssertion=ruleAssertion
	{ $current=$iv_ruleAssertion.current; }
	EOF;

// Rule Assertion
ruleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assert'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertionAccess().getAssertKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAssertionAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssertionAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getIfThenElseAction_0_0(),
						$current);
				}
			)
			otherlv_1='if'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getIfKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getIfexprExpressionParserRuleCall_0_2_0());
					}
					lv_ifexpr_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"ifexpr",
							lv_ifexpr_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='then'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getThenKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getThenexprExpressionParserRuleCall_0_4_0());
					}
					lv_thenexpr_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"thenexpr",
							lv_thenexpr_4_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getElseKeyword_0_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getElseexprExpressionParserRuleCall_0_6_0());
					}
					lv_elseexpr_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"elseexpr",
							lv_elseexpr_6_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFbyParserRuleCall_1());
		}
		this_Fby_7=ruleFby
		{
			$current = $this_Fby_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFby
entryRuleFby returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFbyRule()); }
	iv_ruleFby=ruleFby
	{ $current=$iv_ruleFby.current; }
	EOF;

// Rule Fby
ruleFby returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFbyAccess().getArrowParserRuleCall_0());
		}
		this_Arrow_0=ruleArrow
		{
			$current = $this_Arrow_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFbyAccess().getFbyLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='fby'
			{
				newLeafNode(otherlv_2, grammarAccess.getFbyAccess().getFbyKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFbyAccess().getRightArrowParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleArrow
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFbyRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Arrow");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleArrow
entryRuleArrow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrowRule()); }
	iv_ruleArrow=ruleArrow
	{ $current=$iv_ruleArrow.current; }
	EOF;

// Rule Arrow
ruleArrow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArrowAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getArrowAccess().getArrowLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='->'
			{
				newLeafNode(otherlv_2, grammarAccess.getArrowAccess().getHyphenMinusGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrowAccess().getRightOrParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrowRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='or'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='and'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<>'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0());
		}
		this_PlusOrMinus_0=rulePlusOrMinus
		{
			$current = $this_PlusOrMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='>='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='>'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='<'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	iv_rulePlusOrMinus=rulePlusOrMinus
	{ $current=$iv_rulePlusOrMinus.current; }
	EOF;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0());
		}
		this_MulOrDiv_0=ruleMulOrDiv
		{
			$current = $this_MulOrDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMulOrDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"de.cau.cs.kieler.lustre.Lustre.MulOrDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	iv_ruleMulOrDiv=ruleMulOrDiv
	{ $current=$iv_ruleMulOrDiv.current; }
	EOF;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMulOrDivAccess().getMulLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMulOrDivAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMulOrDivAccess().getDivLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMulOrDivAccess().getSolidusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_1_0());
					}
					lv_right_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_4='not'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getNotKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getUMinusAction_2_0(),
						$current);
				}
			)
			otherlv_7='-'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getHyphenMinusKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_2_2_0());
					}
					lv_expression_8_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_8_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getPreAction_3_0(),
						$current);
				}
			)
			otherlv_10='pre'
			{
				newLeafNode(otherlv_10, grammarAccess.getPrimaryAccess().getPreKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_3_2_0());
					}
					lv_expression_11_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_11_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getCurrentAction_4_0(),
						$current);
				}
			)
			otherlv_13='current'
			{
				newLeafNode(otherlv_13, grammarAccess.getPrimaryAccess().getCurrentKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_4_2_0());
					}
					lv_expression_14_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_14_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicExpressionParserRuleCall_5());
		}
		this_AtomicExpression_15=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getConstantExpressionParserRuleCall_0());
		}
		this_ConstantExpression_0=ruleConstantExpression
		{
			$current = $this_ConstantExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicExpressionAccess().getVariablerefAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_2_0=RULE_IDENT
					{
						newLeafNode(lv_value_2_0, grammarAccess.getAtomicExpressionAccess().getValueIDENTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	iv_ruleConstantExpression=ruleConstantExpression
	{ $current=$iv_ruleConstantExpression.current; }
	EOF;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getBooleanConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_BOOL
					{
						newLeafNode(lv_value_1_0, grammarAccess.getConstantExpressionAccess().getValueBOOLTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"de.cau.cs.kieler.lustre.Lustre.BOOL");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getFloatConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_FLOAT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getConstantExpressionAccess().getValueFLOATTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"de.cau.cs.kieler.lustre.Lustre.FLOAT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getIntConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_INT
					{
						newLeafNode(lv_value_5_0, grammarAccess.getConstantExpressionAccess().getValueINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"de.cau.cs.kieler.lustre.Lustre.INT");
					}
				)
			)
		)
	)
;

RULE_BOOL : ('true'|'false');

RULE_IDENT : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_FLOAT : (('0'..'9')+ '.' ('0'..'9')*|'.' ('0'..'9')+);

RULE_STRING_CONST : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_LUSTRE_COMMENT : (RULE_LUSTRE_ML_COMMENT|RULE_LUSTRE_SL_COMMENT);

fragment RULE_LUSTRE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

fragment RULE_LUSTRE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
