/*
 * generated by Xtext 2.10.0
 */
grammar InternalLustre;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cau.cs.kieler.lustre.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.lustre.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;

}

@parser::members {

 	private LustreGrammarAccess grammarAccess;

    public InternalLustreParser(TokenStream input, LustreGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected LustreGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_LUSTRE_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_LUSTRE_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getNodesNode_DeclarationParserRuleCall_0());
			}
			lv_nodes_0_0=ruleNode_Declaration
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"nodes",
					lv_nodes_0_0,
					"de.cau.cs.kieler.lustre.Lustre.Node_Declaration");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRulePackage_Provided
entryRulePackage_Provided returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackage_ProvidedRule()); }
	iv_rulePackage_Provided=rulePackage_Provided
	{ $current=$iv_rulePackage_Provided.current; }
	EOF;

// Rule Package_Provided
rulePackage_Provided returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='node'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackage_ProvidedAccess().getNodeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackage_ProvidedRule());
					}
				}
				otherlv_1=RULE_IDENT
				{
					newLeafNode(otherlv_1, grammarAccess.getPackage_ProvidedAccess().getNameNode_DeclarationCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPackage_ProvidedAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPackage_ProvidedAccess().getParametersPackage_Provided_IOParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=rulePackage_Provided_IO
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackage_ProvidedRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Package_Provided_IO");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getPackage_ProvidedAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPackage_ProvidedAccess().getParametersPackage_Provided_IOParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=rulePackage_Provided_IO
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPackage_ProvidedRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"de.cau.cs.kieler.lustre.Lustre.Package_Provided_IO");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getPackage_ProvidedAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7='returns'
		{
			newLeafNode(otherlv_7, grammarAccess.getPackage_ProvidedAccess().getReturnsKeyword_5());
		}
		otherlv_8='('
		{
			newLeafNode(otherlv_8, grammarAccess.getPackage_ProvidedAccess().getLeftParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackage_ProvidedAccess().getReturnedPackage_Provided_IOParserRuleCall_7_0());
				}
				lv_returned_9_0=rulePackage_Provided_IO
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackage_ProvidedRule());
					}
					add(
						$current,
						"returned",
						lv_returned_9_0,
						"de.cau.cs.kieler.lustre.Lustre.Package_Provided_IO");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getPackage_ProvidedAccess().getCommaKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPackage_ProvidedAccess().getReturnedPackage_Provided_IOParserRuleCall_8_1_0());
					}
					lv_returned_11_0=rulePackage_Provided_IO
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackage_ProvidedRule());
						}
						add(
							$current,
							"returned",
							lv_returned_11_0,
							"de.cau.cs.kieler.lustre.Lustre.Package_Provided_IO");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_12=')'
		{
			newLeafNode(otherlv_12, grammarAccess.getPackage_ProvidedAccess().getRightParenthesisKeyword_9());
		}
		otherlv_13=';'
		{
			newLeafNode(otherlv_13, grammarAccess.getPackage_ProvidedAccess().getSemicolonKeyword_10());
		}
	)
;

// Entry rule entryRulePackage_Provided_IO
entryRulePackage_Provided_IO returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackage_Provided_IORule()); }
	iv_rulePackage_Provided_IO=rulePackage_Provided_IO
	{ $current=$iv_rulePackage_Provided_IO.current; }
	EOF;

// Rule Package_Provided_IO
rulePackage_Provided_IO returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackage_Provided_IORule());
					}
				}
				otherlv_0=RULE_IDENT
				{
					newLeafNode(otherlv_0, grammarAccess.getPackage_Provided_IOAccess().getNameVariable_DeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPackage_Provided_IOAccess().getColonKeyword_1());
		}
		(
			(
				lv_type_2_0=RULE_IDENT
				{
					newLeafNode(lv_type_2_0, grammarAccess.getPackage_Provided_IOAccess().getTypeIDENTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackage_Provided_IORule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_2_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
	)
;

// Entry rule entryRuleType_Declaration
entryRuleType_Declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getType_DeclarationRule()); }
	iv_ruleType_Declaration=ruleType_Declaration
	{ $current=$iv_ruleType_Declaration.current; }
	EOF;

// Rule Type_Declaration
ruleType_Declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='type'
			{
				newLeafNode(otherlv_0, grammarAccess.getType_DeclarationAccess().getTypeKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getType_DeclarationAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getType_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getType_DeclarationAccess().getSemicolonKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='type'
			{
				newLeafNode(otherlv_3, grammarAccess.getType_DeclarationAccess().getTypeKeyword_1_0());
			}
			(
				(
					lv_name_4_0=RULE_IDENT
					{
						newLeafNode(lv_name_4_0, grammarAccess.getType_DeclarationAccess().getNameIDENTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getType_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_5='='
			{
				newLeafNode(otherlv_5, grammarAccess.getType_DeclarationAccess().getEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getType_DeclarationAccess().getTypeTypeParserRuleCall_1_3_0());
					}
					lv_type_6_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getType_DeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_6_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getType_DeclarationAccess().getSemicolonKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_IDENT
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTypeAccess().getNameIDENTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"de.cau.cs.kieler.lustre.Lustre.IDENT");
			}
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
				}
				otherlv_2=RULE_IDENT
				{
					newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getTypeTypeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConstant_Declaration
entryRuleConstant_Declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_DeclarationRule()); }
	iv_ruleConstant_Declaration=ruleConstant_Declaration
	{ $current=$iv_ruleConstant_Declaration.current; }
	EOF;

// Rule Constant_Declaration
ruleConstant_Declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='const'
			{
				newLeafNode(otherlv_0, grammarAccess.getConstant_DeclarationAccess().getConstKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getConstant_DeclarationAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstant_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getConstant_DeclarationAccess().getColonKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_DeclarationAccess().getTypeTypeParserRuleCall_0_3_0());
					}
					lv_type_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_DeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getConstant_DeclarationAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='const'
			{
				newLeafNode(otherlv_5, grammarAccess.getConstant_DeclarationAccess().getConstKeyword_1_0());
			}
			(
				(
					lv_name_6_0=RULE_IDENT
					{
						newLeafNode(lv_name_6_0, grammarAccess.getConstant_DeclarationAccess().getNameIDENTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstant_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_6_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_7='='
			{
				newLeafNode(otherlv_7, grammarAccess.getConstant_DeclarationAccess().getEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_DeclarationAccess().getExprConstantExpressionParserRuleCall_1_3_0());
					}
					lv_expr_8_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_DeclarationRule());
						}
						set(
							$current,
							"expr",
							lv_expr_8_0,
							"de.cau.cs.kieler.lustre.Lustre.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getConstant_DeclarationAccess().getSemicolonKeyword_1_4());
			}
		)
		    |
		(
			otherlv_10='const'
			{
				newLeafNode(otherlv_10, grammarAccess.getConstant_DeclarationAccess().getConstKeyword_2_0());
			}
			(
				(
					lv_name_11_0=RULE_IDENT
					{
						newLeafNode(lv_name_11_0, grammarAccess.getConstant_DeclarationAccess().getNameIDENTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstant_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_11_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_12=':'
			{
				newLeafNode(otherlv_12, grammarAccess.getConstant_DeclarationAccess().getColonKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_DeclarationAccess().getTypeTypeParserRuleCall_2_3_0());
					}
					lv_type_13_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_DeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_13_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14='='
			{
				newLeafNode(otherlv_14, grammarAccess.getConstant_DeclarationAccess().getEqualsSignKeyword_2_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_DeclarationAccess().getExprConstantExpressionParserRuleCall_2_5_0());
					}
					lv_expr_15_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_DeclarationRule());
						}
						set(
							$current,
							"expr",
							lv_expr_15_0,
							"de.cau.cs.kieler.lustre.Lustre.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16=';'
			{
				newLeafNode(otherlv_16, grammarAccess.getConstant_DeclarationAccess().getSemicolonKeyword_2_6());
			}
		)
	)
;

// Entry rule entryRuleVariable_Declaration
entryRuleVariable_Declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_DeclarationRule()); }
	iv_ruleVariable_Declaration=ruleVariable_Declaration
	{ $current=$iv_ruleVariable_Declaration.current; }
	EOF;

// Rule Variable_Declaration
ruleVariable_Declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVariable_DeclarationAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariable_DeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariable_DeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_DeclarationAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_DeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.cau.cs.kieler.lustre.Lustre.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='when'
			{
				newLeafNode(otherlv_3, grammarAccess.getVariable_DeclarationAccess().getWhenKeyword_3_0());
			}
			(
				(
					lv_clock_4_0=RULE_IDENT
					{
						newLeafNode(lv_clock_4_0, grammarAccess.getVariable_DeclarationAccess().getClockIDENTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariable_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"clock",
							lv_clock_4_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLocal_Variable_Declaration
entryRuleLocal_Variable_Declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocal_Variable_DeclarationRule()); }
	iv_ruleLocal_Variable_Declaration=ruleLocal_Variable_Declaration
	{ $current=$iv_ruleLocal_Variable_Declaration.current; }
	EOF;

// Rule Local_Variable_Declaration
ruleLocal_Variable_Declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocal_Variable_DeclarationAccess().getVarKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getLocal_Variable_DeclarationAccess().getVariable_DeclarationParserRuleCall_1());
		}
		this_Variable_Declaration_1=ruleVariable_Declaration
		{
			$current = $this_Variable_Declaration_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getLocal_Variable_DeclarationAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleLocal_Constant_Declaration
entryRuleLocal_Constant_Declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocal_Constant_DeclarationRule()); }
	iv_ruleLocal_Constant_Declaration=ruleLocal_Constant_Declaration
	{ $current=$iv_ruleLocal_Constant_Declaration.current; }
	EOF;

// Rule Local_Constant_Declaration
ruleLocal_Constant_Declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLocal_Constant_DeclarationAccess().getConstant_DeclarationAction_0_0(),
						$current);
				}
			)
			otherlv_1='const'
			{
				newLeafNode(otherlv_1, grammarAccess.getLocal_Constant_DeclarationAccess().getConstKeyword_0_1());
			}
			(
				(
					lv_name_2_0=RULE_IDENT
					{
						newLeafNode(lv_name_2_0, grammarAccess.getLocal_Constant_DeclarationAccess().getNameIDENTTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLocal_Constant_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getLocal_Constant_DeclarationAccess().getEqualsSignKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLocal_Constant_DeclarationAccess().getExprConstantExpressionParserRuleCall_0_4_0());
					}
					lv_expr_4_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLocal_Constant_DeclarationRule());
						}
						set(
							$current,
							"expr",
							lv_expr_4_0,
							"de.cau.cs.kieler.lustre.Lustre.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getLocal_Constant_DeclarationAccess().getSemicolonKeyword_0_5());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLocal_Constant_DeclarationAccess().getConstant_DeclarationAction_1_0(),
						$current);
				}
			)
			otherlv_7='const'
			{
				newLeafNode(otherlv_7, grammarAccess.getLocal_Constant_DeclarationAccess().getConstKeyword_1_1());
			}
			(
				(
					lv_name_8_0=RULE_IDENT
					{
						newLeafNode(lv_name_8_0, grammarAccess.getLocal_Constant_DeclarationAccess().getNameIDENTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLocal_Constant_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_8_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getLocal_Constant_DeclarationAccess().getColonKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLocal_Constant_DeclarationAccess().getTypeTypeParserRuleCall_1_4_0());
					}
					lv_type_10_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLocal_Constant_DeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_10_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='='
			{
				newLeafNode(otherlv_11, grammarAccess.getLocal_Constant_DeclarationAccess().getEqualsSignKeyword_1_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLocal_Constant_DeclarationAccess().getExprConstantExpressionParserRuleCall_1_6_0());
					}
					lv_expr_12_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLocal_Constant_DeclarationRule());
						}
						set(
							$current,
							"expr",
							lv_expr_12_0,
							"de.cau.cs.kieler.lustre.Lustre.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_13=';'
			{
				newLeafNode(otherlv_13, grammarAccess.getLocal_Constant_DeclarationAccess().getSemicolonKeyword_1_7());
			}
		)
	)
;

// Entry rule entryRuleNode_Declaration
entryRuleNode_Declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNode_DeclarationRule()); }
	iv_ruleNode_Declaration=ruleNode_Declaration
	{ $current=$iv_ruleNode_Declaration.current; }
	EOF;

// Rule Node_Declaration
ruleNode_Declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='node'
		{
			newLeafNode(otherlv_0, grammarAccess.getNode_DeclarationAccess().getNodeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNode_DeclarationAccess().getNameIDENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNode_DeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getNode_DeclarationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNode_DeclarationAccess().getParametersVariable_DeclarationParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleVariable_Declaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Variable_Declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getNode_DeclarationAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNode_DeclarationAccess().getParametersVariable_DeclarationParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleVariable_Declaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"de.cau.cs.kieler.lustre.Lustre.Variable_Declaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getNode_DeclarationAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7='returns'
		{
			newLeafNode(otherlv_7, grammarAccess.getNode_DeclarationAccess().getReturnsKeyword_5());
		}
		otherlv_8='('
		{
			newLeafNode(otherlv_8, grammarAccess.getNode_DeclarationAccess().getLeftParenthesisKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNode_DeclarationAccess().getReturnedVariable_DeclarationParserRuleCall_7_0());
				}
				lv_returned_9_0=ruleVariable_Declaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
					}
					add(
						$current,
						"returned",
						lv_returned_9_0,
						"de.cau.cs.kieler.lustre.Lustre.Variable_Declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getNode_DeclarationAccess().getCommaKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNode_DeclarationAccess().getReturnedVariable_DeclarationParserRuleCall_8_1_0());
					}
					lv_returned_11_0=ruleVariable_Declaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
						}
						add(
							$current,
							"returned",
							lv_returned_11_0,
							"de.cau.cs.kieler.lustre.Lustre.Variable_Declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_12=')'
		{
			newLeafNode(otherlv_12, grammarAccess.getNode_DeclarationAccess().getRightParenthesisKeyword_9());
		}
		otherlv_13=';'
		{
			newLeafNode(otherlv_13, grammarAccess.getNode_DeclarationAccess().getSemicolonKeyword_10());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNode_DeclarationAccess().getConstantsLocal_Constant_DeclarationParserRuleCall_11_0_0());
					}
					lv_constants_14_0=ruleLocal_Constant_Declaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
						}
						add(
							$current,
							"constants",
							lv_constants_14_0,
							"de.cau.cs.kieler.lustre.Lustre.Local_Constant_Declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNode_DeclarationAccess().getVariablesLocal_Variable_DeclarationParserRuleCall_11_1_0());
					}
					lv_variables_15_0=ruleLocal_Variable_Declaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
						}
						add(
							$current,
							"variables",
							lv_variables_15_0,
							"de.cau.cs.kieler.lustre.Lustre.Local_Variable_Declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_16='let'
		{
			newLeafNode(otherlv_16, grammarAccess.getNode_DeclarationAccess().getLetKeyword_12());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNode_DeclarationAccess().getEquationsEquationParserRuleCall_13_0_0());
					}
					lv_equations_17_0=ruleEquation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
						}
						add(
							$current,
							"equations",
							lv_equations_17_0,
							"de.cau.cs.kieler.lustre.Lustre.Equation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNode_DeclarationAccess().getAssertionsAssertionParserRuleCall_13_1_0());
					}
					lv_assertions_18_0=ruleAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
						}
						add(
							$current,
							"assertions",
							lv_assertions_18_0,
							"de.cau.cs.kieler.lustre.Lustre.Assertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getNode_DeclarationAccess().getAutomatonsAutomatonParserRuleCall_13_2_0());
					}
					lv_automatons_19_0=ruleAutomaton
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNode_DeclarationRule());
						}
						add(
							$current,
							"automatons",
							lv_automatons_19_0,
							"de.cau.cs.kieler.lustre.Lustre.Automaton");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_20='tel'
		{
			newLeafNode(otherlv_20, grammarAccess.getNode_DeclarationAccess().getTelKeyword_14());
		}
		(
			otherlv_21=';'
			{
				newLeafNode(otherlv_21, grammarAccess.getNode_DeclarationAccess().getSemicolonKeyword_15());
			}
		)?
	)
;

// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	iv_ruleEquation=ruleEquation
	{ $current=$iv_ruleEquation.current; }
	EOF;

// Rule Equation
ruleEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEquationRule());
					}
				}
				otherlv_0=RULE_IDENT
				{
					newLeafNode(otherlv_0, grammarAccess.getEquationAccess().getLeftVariable_DeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getEquationAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEquationAccess().getRightRight_PartParserRuleCall_2_0());
				}
				lv_right_2_0=ruleRight_Part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquationRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"de.cau.cs.kieler.lustre.Lustre.Right_Part");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getEquationAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	iv_ruleAssertion=ruleAssertion
	{ $current=$iv_ruleAssertion.current; }
	EOF;

// Rule Assertion
ruleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assert'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertionAccess().getAssertKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAssertionAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssertionAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleAutomaton
entryRuleAutomaton returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutomatonRule()); }
	iv_ruleAutomaton=ruleAutomaton
	{ $current=$iv_ruleAutomaton.current; }
	EOF;

// Rule Automaton
ruleAutomaton returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='automaton'
		{
			newLeafNode(otherlv_0, grammarAccess.getAutomatonAccess().getAutomatonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAutomatonAccess().getStatesAStateParserRuleCall_1_0());
				}
				lv_states_1_0=ruleAState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAutomatonRule());
					}
					add(
						$current,
						"states",
						lv_states_1_0,
						"de.cau.cs.kieler.lustre.Lustre.AState");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='|'
			{
				newLeafNode(otherlv_2, grammarAccess.getAutomatonAccess().getVerticalLineKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAutomatonAccess().getStatesAStateParserRuleCall_2_1_0());
					}
					lv_states_3_0=ruleAState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAutomatonRule());
						}
						add(
							$current,
							"states",
							lv_states_3_0,
							"de.cau.cs.kieler.lustre.Lustre.AState");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getAutomatonAccess().getEndKeyword_3());
		}
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getAutomatonAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleAState
entryRuleAState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAStateRule()); }
	iv_ruleAState=ruleAState
	{ $current=$iv_ruleAState.current; }
	EOF;

// Rule AState
ruleAState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAStateAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getAStateAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAStateAccess().getEquationsEquationParserRuleCall_2_0_0());
					}
					lv_equations_2_0=ruleEquation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAStateRule());
						}
						add(
							$current,
							"equations",
							lv_equations_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Equation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAStateAccess().getAssertionsAssertionParserRuleCall_2_1_0());
					}
					lv_assertions_3_0=ruleAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAStateRule());
						}
						add(
							$current,
							"assertions",
							lv_assertions_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Assertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAStateAccess().getAutomatonsAutomatonParserRuleCall_2_2_0());
					}
					lv_automatons_4_0=ruleAutomaton
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAStateRule());
						}
						add(
							$current,
							"automatons",
							lv_automatons_4_0,
							"de.cau.cs.kieler.lustre.Lustre.Automaton");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAStateAccess().getTransitionsATransitionParserRuleCall_3_0());
				}
				lv_transitions_5_0=ruleATransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAStateRule());
					}
					add(
						$current,
						"transitions",
						lv_transitions_5_0,
						"de.cau.cs.kieler.lustre.Lustre.ATransition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleATransition
entryRuleATransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getATransitionRule()); }
	iv_ruleATransition=ruleATransition
	{ $current=$iv_ruleATransition.current; }
	EOF;

// Rule ATransition
ruleATransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='until'
			{
				newLeafNode(otherlv_0, grammarAccess.getATransitionAccess().getUntilKeyword_0_0());
			}
			    |
			(
				(
					lv_strong_1_0='unless'
					{
						newLeafNode(lv_strong_1_0, grammarAccess.getATransitionAccess().getStrongUnlessKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getATransitionRule());
						}
						setWithLastConsumed($current, "strong", true, "unless");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getATransitionAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getATransitionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"de.cau.cs.kieler.lustre.Lustre.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='then'
			{
				newLeafNode(otherlv_3, grammarAccess.getATransitionAccess().getThenKeyword_2_0());
			}
			    |
			(
				(
					lv_history_4_0='continue'
					{
						newLeafNode(lv_history_4_0, grammarAccess.getATransitionAccess().getHistoryContinueKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getATransitionRule());
						}
						setWithLastConsumed($current, "history", true, "continue");
					}
				)
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getATransitionRule());
					}
				}
				otherlv_5=RULE_IDENT
				{
					newLeafNode(otherlv_5, grammarAccess.getATransitionAccess().getNextStateAStateCrossReference_3_0());
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getATransitionAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleLeft_List
entryRuleLeft_List returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeft_ListRule()); }
	iv_ruleLeft_List=ruleLeft_List
	{ $current=$iv_ruleLeft_List.current; }
	EOF;

// Rule Left_List
ruleLeft_List returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLeft_ListAccess().getIdLeftParserRuleCall_0_0());
				}
				lv_id_0_0=ruleLeft
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeft_ListRule());
					}
					add(
						$current,
						"id",
						lv_id_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Left");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getLeft_ListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeft_ListAccess().getIdLeftParserRuleCall_1_1_0());
					}
					lv_id_2_0=ruleLeft
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeft_ListRule());
						}
						add(
							$current,
							"id",
							lv_id_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Left");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLeftAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeftRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getSelectorSelectorParserRuleCall_1_0());
				}
				lv_selector_1_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"selector",
						lv_selector_1_0,
						"de.cau.cs.kieler.lustre.Lustre.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='.'
			{
				newLeafNode(otherlv_0, grammarAccess.getSelectorAccess().getFullStopKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getSelectorAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectorRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)
		    |
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getBeginExpressionParserRuleCall_1_1_0());
					}
					lv_begin_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"begin",
							lv_begin_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getEndSelTrancheEndParserRuleCall_1_2_0());
					}
					lv_end_4_0=ruleSelTrancheEnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"end",
							lv_end_4_0,
							"de.cau.cs.kieler.lustre.Lustre.SelTrancheEnd");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleSelTrancheEnd
entryRuleSelTrancheEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelTrancheEndRule()); }
	iv_ruleSelTrancheEnd=ruleSelTrancheEnd
	{ $current=$iv_ruleSelTrancheEnd.current; }
	EOF;

// Rule SelTrancheEnd
ruleSelTrancheEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='..'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelTrancheEndAccess().getFullStopFullStopKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSelTrancheEndAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRight_Part
entryRuleRight_Part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRight_PartRule()); }
	iv_ruleRight_Part=ruleRight_Part
	{ $current=$iv_ruleRight_Part.current; }
	EOF;

// Rule Right_Part
ruleRight_Part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRight_PartAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getIfThenElseAction_0_0(),
						$current);
				}
			)
			otherlv_1='if'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getIfKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getIfexprExpressionParserRuleCall_0_2_0());
					}
					lv_ifexpr_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"ifexpr",
							lv_ifexpr_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='then'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getThenKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getThenexprExpressionParserRuleCall_0_4_0());
					}
					lv_thenexpr_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"thenexpr",
							lv_thenexpr_4_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getElseKeyword_0_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getElseexprExpressionParserRuleCall_0_6_0());
					}
					lv_elseexpr_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"elseexpr",
							lv_elseexpr_6_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFbyParserRuleCall_1());
		}
		this_Fby_7=ruleFby
		{
			$current = $this_Fby_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFby
entryRuleFby returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFbyRule()); }
	iv_ruleFby=ruleFby
	{ $current=$iv_ruleFby.current; }
	EOF;

// Rule Fby
ruleFby returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFbyAccess().getArrowParserRuleCall_0());
		}
		this_Arrow_0=ruleArrow
		{
			$current = $this_Arrow_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getFbyAccess().getFbySubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='fby'
				{
					newLeafNode(otherlv_2, grammarAccess.getFbyAccess().getFbyKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFbyAccess().getSubExpressionsArrowParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleArrow
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFbyRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.lustre.Lustre.Arrow");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleArrow
entryRuleArrow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrowRule()); }
	iv_ruleArrow=ruleArrow
	{ $current=$iv_ruleArrow.current; }
	EOF;

// Rule Arrow
ruleArrow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArrowAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getArrowAccess().getArrowSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='->'
				{
					newLeafNode(otherlv_2, grammarAccess.getArrowAccess().getHyphenMinusGreaterThanSignKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArrowAccess().getSubExpressionsOrParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleOr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArrowRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.lustre.Lustre.Or");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getOrAccess().getOrSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='or'
				{
					newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOrAccess().getSubExpressionsAndParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleAnd
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOrRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.lustre.Lustre.And");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndAccess().getAndSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='and'
				{
					newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAndAccess().getSubExpressionsEqualityParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleEquality
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAndRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.lustre.Lustre.Equality");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<>'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getModParserRuleCall_0());
		}
		this_Mod_0=ruleMod
		{
			$current = $this_Mod_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='>='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='>'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='<'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightModParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Mod");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMod
entryRuleMod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModRule()); }
	iv_ruleMod=ruleMod
	{ $current=$iv_ruleMod.current; }
	EOF;

// Rule Mod
ruleMod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModAccess().getPlusOrMinusParserRuleCall_0());
		}
		this_PlusOrMinus_0=rulePlusOrMinus
		{
			$current = $this_PlusOrMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getModAccess().getModSubExpressionsAction_1_0(),
						$current);
				}
			)
			otherlv_2='mod'
			{
				newLeafNode(otherlv_2, grammarAccess.getModAccess().getModKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModAccess().getSubExpressionsPlusOrMinusParserRuleCall_1_2_0());
					}
					lv_subExpressions_3_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_3_0,
							"de.cau.cs.kieler.lustre.Lustre.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	iv_rulePlusOrMinus=rulePlusOrMinus
	{ $current=$iv_rulePlusOrMinus.current; }
	EOF;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0());
		}
		this_MulOrDiv_0=ruleMulOrDiv
		{
			$current = $this_MulOrDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndAdd(
								grammarAccess.getPlusOrMinusAccess().getPlusSubExpressionsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndAdd(
								grammarAccess.getPlusOrMinusAccess().getMinusSubExpressionsAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusAccess().getSubExpressionsMulOrDivParserRuleCall_1_1_0());
					}
					lv_subExpressions_5_0=ruleMulOrDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_5_0,
							"de.cau.cs.kieler.lustre.Lustre.MulOrDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	iv_ruleMulOrDiv=ruleMulOrDiv
	{ $current=$iv_ruleMulOrDiv.current; }
	EOF;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndAdd(
								grammarAccess.getMulOrDivAccess().getMulSubExpressionsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMulOrDivAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndAdd(
								grammarAccess.getMulOrDivAccess().getDivSubExpressionsAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMulOrDivAccess().getSolidusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivAccess().getSubExpressionsPrimaryParserRuleCall_1_1_0());
					}
					lv_subExpressions_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_5_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_4='not'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getNotKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getUMinusAction_2_0(),
						$current);
				}
			)
			otherlv_7='-'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getHyphenMinusKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_2_2_0());
					}
					lv_expression_8_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_8_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getPreAction_3_0(),
						$current);
				}
			)
			otherlv_10='pre'
			{
				newLeafNode(otherlv_10, grammarAccess.getPrimaryAccess().getPreKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_3_2_0());
					}
					lv_expression_11_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_11_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getCurrentAction_4_0(),
						$current);
				}
			)
			otherlv_13='current'
			{
				newLeafNode(otherlv_13, grammarAccess.getPrimaryAccess().getCurrentKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_4_2_0());
					}
					lv_expression_14_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_14_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicExpressionParserRuleCall_5());
		}
		this_AtomicExpression_15=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getConstantExpressionParserRuleCall_0());
		}
		this_ConstantExpression_0=ruleConstantExpression
		{
			$current = $this_ConstantExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getVariableReferenceParserRuleCall_1());
		}
		this_VariableReference_1=ruleVariableReference
		{
			$current = $this_VariableReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	iv_ruleVariableReference=ruleVariableReference
	{ $current=$iv_ruleVariableReference.current; }
	EOF;

// Rule VariableReference
ruleVariableReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableReferenceAccess().getVariableReferenceAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableReferenceRule());
					}
				}
				otherlv_1=RULE_IDENT
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableReferenceAccess().getValueVariable_DeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	iv_ruleConstantExpression=ruleConstantExpression
	{ $current=$iv_ruleConstantExpression.current; }
	EOF;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getBoolConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_BOOL
					{
						newLeafNode(lv_value_1_0, grammarAccess.getConstantExpressionAccess().getValueBOOLTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"de.cau.cs.kieler.lustre.Lustre.BOOL");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getFloatConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_FLOAT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getConstantExpressionAccess().getValueFLOATTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"de.cau.cs.kieler.lustre.Lustre.FLOAT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getIntConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_INT
					{
						newLeafNode(lv_value_5_0, grammarAccess.getConstantExpressionAccess().getValueINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"de.cau.cs.kieler.lustre.Lustre.INT");
					}
				)
			)
		)
	)
;

RULE_BOOL : ('true'|'false');

RULE_IDENT : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_FLOAT : (('0'..'9')+ '.' ('0'..'9')*|'.' ('0'..'9')+);

RULE_STRING_CONSTANT : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_LUSTRE_COMMENT : (RULE_ML_COMMENT|RULE_SL_COMMENT);

fragment RULE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

fragment RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
