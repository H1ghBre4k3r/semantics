/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.lustre.impl;

import de.cau.cs.kieler.kexpressions.Expression;
import de.cau.cs.kieler.kexpressions.ValuedObject;
import de.cau.cs.kieler.kexpressions.VariableDeclaration;

import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;

import de.cau.cs.kieler.lustre.lustre.AState;
import de.cau.cs.kieler.lustre.lustre.ATransition;
import de.cau.cs.kieler.lustre.lustre.Automaton;
import de.cau.cs.kieler.lustre.lustre.LustrePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>AState</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#isInitial <em>Initial</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#getValuedObject <em>Valued Object</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#getConstants <em>Constants</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#getEquations <em>Equations</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#getEmissions <em>Emissions</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#getAssertions <em>Assertions</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#getAutomatons <em>Automatons</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.AStateImpl#getTransitions <em>Transitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AStateImpl extends MinimalEObjectImpl.Container implements AState
{
  /**
   * The default value of the '{@link #isInitial() <em>Initial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInitial()
   * @generated
   * @ordered
   */
  protected static final boolean INITIAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInitial() <em>Initial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInitial()
   * @generated
   * @ordered
   */
  protected boolean initial = INITIAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getValuedObject() <em>Valued Object</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValuedObject()
   * @generated
   * @ordered
   */
  protected ValuedObject valuedObject;

  /**
   * The cached value of the '{@link #getConstants() <em>Constants</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstants()
   * @generated
   * @ordered
   */
  protected EList<VariableDeclaration> constants;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<VariableDeclaration> variables;

  /**
   * The cached value of the '{@link #getEquations() <em>Equations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEquations()
   * @generated
   * @ordered
   */
  protected EList<Assignment> equations;

  /**
   * The cached value of the '{@link #getEmissions() <em>Emissions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmissions()
   * @generated
   * @ordered
   */
  protected EList<Emission> emissions;

  /**
   * The cached value of the '{@link #getAssertions() <em>Assertions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertions()
   * @generated
   * @ordered
   */
  protected EList<Expression> assertions;

  /**
   * The cached value of the '{@link #getAutomatons() <em>Automatons</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAutomatons()
   * @generated
   * @ordered
   */
  protected EList<Automaton> automatons;

  /**
   * The cached value of the '{@link #getTransitions() <em>Transitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitions()
   * @generated
   * @ordered
   */
  protected EList<ATransition> transitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AStateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LustrePackage.Literals.ASTATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInitial()
  {
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitial(boolean newInitial)
  {
    boolean oldInitial = initial;
    initial = newInitial;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.ASTATE__INITIAL, oldInitial, initial));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValuedObject getValuedObject()
  {
    return valuedObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValuedObject(ValuedObject newValuedObject, NotificationChain msgs)
  {
    ValuedObject oldValuedObject = valuedObject;
    valuedObject = newValuedObject;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LustrePackage.ASTATE__VALUED_OBJECT, oldValuedObject, newValuedObject);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValuedObject(ValuedObject newValuedObject)
  {
    if (newValuedObject != valuedObject)
    {
      NotificationChain msgs = null;
      if (valuedObject != null)
        msgs = ((InternalEObject)valuedObject).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LustrePackage.ASTATE__VALUED_OBJECT, null, msgs);
      if (newValuedObject != null)
        msgs = ((InternalEObject)newValuedObject).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LustrePackage.ASTATE__VALUED_OBJECT, null, msgs);
      msgs = basicSetValuedObject(newValuedObject, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.ASTATE__VALUED_OBJECT, newValuedObject, newValuedObject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VariableDeclaration> getConstants()
  {
    if (constants == null)
    {
      constants = new EObjectContainmentEList<VariableDeclaration>(VariableDeclaration.class, this, LustrePackage.ASTATE__CONSTANTS);
    }
    return constants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VariableDeclaration> getVariables()
  {
    if (variables == null)
    {
      variables = new EObjectContainmentEList<VariableDeclaration>(VariableDeclaration.class, this, LustrePackage.ASTATE__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Assignment> getEquations()
  {
    if (equations == null)
    {
      equations = new EObjectContainmentEList<Assignment>(Assignment.class, this, LustrePackage.ASTATE__EQUATIONS);
    }
    return equations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Emission> getEmissions()
  {
    if (emissions == null)
    {
      emissions = new EObjectContainmentEList<Emission>(Emission.class, this, LustrePackage.ASTATE__EMISSIONS);
    }
    return emissions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getAssertions()
  {
    if (assertions == null)
    {
      assertions = new EObjectContainmentEList<Expression>(Expression.class, this, LustrePackage.ASTATE__ASSERTIONS);
    }
    return assertions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Automaton> getAutomatons()
  {
    if (automatons == null)
    {
      automatons = new EObjectContainmentEList<Automaton>(Automaton.class, this, LustrePackage.ASTATE__AUTOMATONS);
    }
    return automatons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ATransition> getTransitions()
  {
    if (transitions == null)
    {
      transitions = new EObjectContainmentEList<ATransition>(ATransition.class, this, LustrePackage.ASTATE__TRANSITIONS);
    }
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LustrePackage.ASTATE__VALUED_OBJECT:
        return basicSetValuedObject(null, msgs);
      case LustrePackage.ASTATE__CONSTANTS:
        return ((InternalEList<?>)getConstants()).basicRemove(otherEnd, msgs);
      case LustrePackage.ASTATE__VARIABLES:
        return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
      case LustrePackage.ASTATE__EQUATIONS:
        return ((InternalEList<?>)getEquations()).basicRemove(otherEnd, msgs);
      case LustrePackage.ASTATE__EMISSIONS:
        return ((InternalEList<?>)getEmissions()).basicRemove(otherEnd, msgs);
      case LustrePackage.ASTATE__ASSERTIONS:
        return ((InternalEList<?>)getAssertions()).basicRemove(otherEnd, msgs);
      case LustrePackage.ASTATE__AUTOMATONS:
        return ((InternalEList<?>)getAutomatons()).basicRemove(otherEnd, msgs);
      case LustrePackage.ASTATE__TRANSITIONS:
        return ((InternalEList<?>)getTransitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LustrePackage.ASTATE__INITIAL:
        return isInitial();
      case LustrePackage.ASTATE__VALUED_OBJECT:
        return getValuedObject();
      case LustrePackage.ASTATE__CONSTANTS:
        return getConstants();
      case LustrePackage.ASTATE__VARIABLES:
        return getVariables();
      case LustrePackage.ASTATE__EQUATIONS:
        return getEquations();
      case LustrePackage.ASTATE__EMISSIONS:
        return getEmissions();
      case LustrePackage.ASTATE__ASSERTIONS:
        return getAssertions();
      case LustrePackage.ASTATE__AUTOMATONS:
        return getAutomatons();
      case LustrePackage.ASTATE__TRANSITIONS:
        return getTransitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LustrePackage.ASTATE__INITIAL:
        setInitial((Boolean)newValue);
        return;
      case LustrePackage.ASTATE__VALUED_OBJECT:
        setValuedObject((ValuedObject)newValue);
        return;
      case LustrePackage.ASTATE__CONSTANTS:
        getConstants().clear();
        getConstants().addAll((Collection<? extends VariableDeclaration>)newValue);
        return;
      case LustrePackage.ASTATE__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends VariableDeclaration>)newValue);
        return;
      case LustrePackage.ASTATE__EQUATIONS:
        getEquations().clear();
        getEquations().addAll((Collection<? extends Assignment>)newValue);
        return;
      case LustrePackage.ASTATE__EMISSIONS:
        getEmissions().clear();
        getEmissions().addAll((Collection<? extends Emission>)newValue);
        return;
      case LustrePackage.ASTATE__ASSERTIONS:
        getAssertions().clear();
        getAssertions().addAll((Collection<? extends Expression>)newValue);
        return;
      case LustrePackage.ASTATE__AUTOMATONS:
        getAutomatons().clear();
        getAutomatons().addAll((Collection<? extends Automaton>)newValue);
        return;
      case LustrePackage.ASTATE__TRANSITIONS:
        getTransitions().clear();
        getTransitions().addAll((Collection<? extends ATransition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.ASTATE__INITIAL:
        setInitial(INITIAL_EDEFAULT);
        return;
      case LustrePackage.ASTATE__VALUED_OBJECT:
        setValuedObject((ValuedObject)null);
        return;
      case LustrePackage.ASTATE__CONSTANTS:
        getConstants().clear();
        return;
      case LustrePackage.ASTATE__VARIABLES:
        getVariables().clear();
        return;
      case LustrePackage.ASTATE__EQUATIONS:
        getEquations().clear();
        return;
      case LustrePackage.ASTATE__EMISSIONS:
        getEmissions().clear();
        return;
      case LustrePackage.ASTATE__ASSERTIONS:
        getAssertions().clear();
        return;
      case LustrePackage.ASTATE__AUTOMATONS:
        getAutomatons().clear();
        return;
      case LustrePackage.ASTATE__TRANSITIONS:
        getTransitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.ASTATE__INITIAL:
        return initial != INITIAL_EDEFAULT;
      case LustrePackage.ASTATE__VALUED_OBJECT:
        return valuedObject != null;
      case LustrePackage.ASTATE__CONSTANTS:
        return constants != null && !constants.isEmpty();
      case LustrePackage.ASTATE__VARIABLES:
        return variables != null && !variables.isEmpty();
      case LustrePackage.ASTATE__EQUATIONS:
        return equations != null && !equations.isEmpty();
      case LustrePackage.ASTATE__EMISSIONS:
        return emissions != null && !emissions.isEmpty();
      case LustrePackage.ASTATE__ASSERTIONS:
        return assertions != null && !assertions.isEmpty();
      case LustrePackage.ASTATE__AUTOMATONS:
        return automatons != null && !automatons.isEmpty();
      case LustrePackage.ASTATE__TRANSITIONS:
        return transitions != null && !transitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (initial: ");
    result.append(initial);
    result.append(')');
    return result.toString();
  }

} //AStateImpl
