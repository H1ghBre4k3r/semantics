/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.lustre.impl;

import de.cau.cs.kieler.lustre.lustre.ExternalNodeDeclaration;
import de.cau.cs.kieler.lustre.lustre.LustrePackage;
import de.cau.cs.kieler.lustre.lustre.Params;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>External Node Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#isIsUnsafe <em>Is Unsafe</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#isHasState <em>Has State</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#getInput <em>Input</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#getOutput <em>Output</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExternalNodeDeclarationImpl extends MinimalEObjectImpl.Container implements ExternalNodeDeclaration
{
  /**
   * The default value of the '{@link #isIsUnsafe() <em>Is Unsafe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsUnsafe()
   * @generated
   * @ordered
   */
  protected static final boolean IS_UNSAFE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsUnsafe() <em>Is Unsafe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsUnsafe()
   * @generated
   * @ordered
   */
  protected boolean isUnsafe = IS_UNSAFE_EDEFAULT;

  /**
   * The default value of the '{@link #isHasState() <em>Has State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasState()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_STATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHasState() <em>Has State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasState()
   * @generated
   * @ordered
   */
  protected boolean hasState = HAS_STATE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getInput() <em>Input</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInput()
   * @generated
   * @ordered
   */
  protected Params input;

  /**
   * The cached value of the '{@link #getOutput() <em>Output</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutput()
   * @generated
   * @ordered
   */
  protected Params output;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalNodeDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LustrePackage.Literals.EXTERNAL_NODE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsUnsafe()
  {
    return isUnsafe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsUnsafe(boolean newIsUnsafe)
  {
    boolean oldIsUnsafe = isUnsafe;
    isUnsafe = newIsUnsafe;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE, oldIsUnsafe, isUnsafe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isHasState()
  {
    return hasState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHasState(boolean newHasState)
  {
    boolean oldHasState = hasState;
    hasState = newHasState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE, oldHasState, hasState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Params getInput()
  {
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInput(Params newInput, NotificationChain msgs)
  {
    Params oldInput = input;
    input = newInput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT, oldInput, newInput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInput(Params newInput)
  {
    if (newInput != input)
    {
      NotificationChain msgs = null;
      if (input != null)
        msgs = ((InternalEObject)input).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT, null, msgs);
      if (newInput != null)
        msgs = ((InternalEObject)newInput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT, null, msgs);
      msgs = basicSetInput(newInput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT, newInput, newInput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Params getOutput()
  {
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOutput(Params newOutput, NotificationChain msgs)
  {
    Params oldOutput = output;
    output = newOutput;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT, oldOutput, newOutput);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutput(Params newOutput)
  {
    if (newOutput != output)
    {
      NotificationChain msgs = null;
      if (output != null)
        msgs = ((InternalEObject)output).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT, null, msgs);
      if (newOutput != null)
        msgs = ((InternalEObject)newOutput).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT, null, msgs);
      msgs = basicSetOutput(newOutput, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT, newOutput, newOutput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT:
        return basicSetInput(null, msgs);
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT:
        return basicSetOutput(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE:
        return isIsUnsafe();
      case LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE:
        return isHasState();
      case LustrePackage.EXTERNAL_NODE_DECLARATION__NAME:
        return getName();
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT:
        return getInput();
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT:
        return getOutput();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE:
        setIsUnsafe((Boolean)newValue);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE:
        setHasState((Boolean)newValue);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT:
        setInput((Params)newValue);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT:
        setOutput((Params)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE:
        setIsUnsafe(IS_UNSAFE_EDEFAULT);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE:
        setHasState(HAS_STATE_EDEFAULT);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT:
        setInput((Params)null);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT:
        setOutput((Params)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE:
        return isUnsafe != IS_UNSAFE_EDEFAULT;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE:
        return hasState != HAS_STATE_EDEFAULT;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUT:
        return input != null;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUT:
        return output != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isUnsafe: ");
    result.append(isUnsafe);
    result.append(", hasState: ");
    result.append(hasState);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ExternalNodeDeclarationImpl
