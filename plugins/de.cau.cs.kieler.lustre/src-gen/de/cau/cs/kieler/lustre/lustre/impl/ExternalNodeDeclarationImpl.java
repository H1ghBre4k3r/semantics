/**
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.lustre.impl;

import de.cau.cs.kieler.kexpressions.VariableDeclaration;

import de.cau.cs.kieler.kexpressions.impl.DeclarationImpl;

import de.cau.cs.kieler.lustre.lustre.ExternalNodeDeclaration;
import de.cau.cs.kieler.lustre.lustre.LustrePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>External Node Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#isIsUnsafe <em>Is Unsafe</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#isHasState <em>Has State</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#getInputs <em>Inputs</em>}</li>
 *   <li>{@link de.cau.cs.kieler.lustre.lustre.impl.ExternalNodeDeclarationImpl#getOutputs <em>Outputs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExternalNodeDeclarationImpl extends DeclarationImpl implements ExternalNodeDeclaration
{
  /**
   * The default value of the '{@link #isIsUnsafe() <em>Is Unsafe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsUnsafe()
   * @generated
   * @ordered
   */
  protected static final boolean IS_UNSAFE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsUnsafe() <em>Is Unsafe</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsUnsafe()
   * @generated
   * @ordered
   */
  protected boolean isUnsafe = IS_UNSAFE_EDEFAULT;

  /**
   * The default value of the '{@link #isHasState() <em>Has State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasState()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_STATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHasState() <em>Has State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHasState()
   * @generated
   * @ordered
   */
  protected boolean hasState = HAS_STATE_EDEFAULT;

  /**
   * The cached value of the '{@link #getInputs() <em>Inputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputs()
   * @generated
   * @ordered
   */
  protected EList<VariableDeclaration> inputs;

  /**
   * The cached value of the '{@link #getOutputs() <em>Outputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputs()
   * @generated
   * @ordered
   */
  protected EList<VariableDeclaration> outputs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExternalNodeDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LustrePackage.Literals.EXTERNAL_NODE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsUnsafe()
  {
    return isUnsafe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsUnsafe(boolean newIsUnsafe)
  {
    boolean oldIsUnsafe = isUnsafe;
    isUnsafe = newIsUnsafe;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE, oldIsUnsafe, isUnsafe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isHasState()
  {
    return hasState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHasState(boolean newHasState)
  {
    boolean oldHasState = hasState;
    hasState = newHasState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE, oldHasState, hasState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VariableDeclaration> getInputs()
  {
    if (inputs == null)
    {
      inputs = new EObjectContainmentEList<VariableDeclaration>(VariableDeclaration.class, this, LustrePackage.EXTERNAL_NODE_DECLARATION__INPUTS);
    }
    return inputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VariableDeclaration> getOutputs()
  {
    if (outputs == null)
    {
      outputs = new EObjectContainmentEList<VariableDeclaration>(VariableDeclaration.class, this, LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUTS);
    }
    return outputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUTS:
        return ((InternalEList<?>)getInputs()).basicRemove(otherEnd, msgs);
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUTS:
        return ((InternalEList<?>)getOutputs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE:
        return isIsUnsafe();
      case LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE:
        return isHasState();
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUTS:
        return getInputs();
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUTS:
        return getOutputs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE:
        setIsUnsafe((Boolean)newValue);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE:
        setHasState((Boolean)newValue);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUTS:
        getInputs().clear();
        getInputs().addAll((Collection<? extends VariableDeclaration>)newValue);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUTS:
        getOutputs().clear();
        getOutputs().addAll((Collection<? extends VariableDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE:
        setIsUnsafe(IS_UNSAFE_EDEFAULT);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE:
        setHasState(HAS_STATE_EDEFAULT);
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUTS:
        getInputs().clear();
        return;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUTS:
        getOutputs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LustrePackage.EXTERNAL_NODE_DECLARATION__IS_UNSAFE:
        return isUnsafe != IS_UNSAFE_EDEFAULT;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__HAS_STATE:
        return hasState != HAS_STATE_EDEFAULT;
      case LustrePackage.EXTERNAL_NODE_DECLARATION__INPUTS:
        return inputs != null && !inputs.isEmpty();
      case LustrePackage.EXTERNAL_NODE_DECLARATION__OUTPUTS:
        return outputs != null && !outputs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isUnsafe: ");
    result.append(isUnsafe);
    result.append(", hasState: ");
    result.append(hasState);
    result.append(')');
    return result.toString();
  }

} //ExternalNodeDeclarationImpl
