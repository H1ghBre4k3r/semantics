/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.legacy.kexpressions.keffects.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.sccharts.legacy.annotations.Annotation;
import de.cau.cs.kieler.sccharts.legacy.annotations.AnnotationsPackage;
import de.cau.cs.kieler.sccharts.legacy.annotations.BooleanAnnotation;
import de.cau.cs.kieler.sccharts.legacy.annotations.CommentAnnotation;
import de.cau.cs.kieler.sccharts.legacy.annotations.FloatAnnotation;
import de.cau.cs.kieler.sccharts.legacy.annotations.IntAnnotation;
import de.cau.cs.kieler.sccharts.legacy.annotations.StringAnnotation;
import de.cau.cs.kieler.sccharts.legacy.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.BoolValue;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.FloatValue;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.FunctionCall;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.IntValue;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.OperatorExpression;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.StringValue;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.TextExpression;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.keffects.Emission;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.serializer.KExpressionsSemanticSequencer;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public abstract class AbstractKEffectsSemanticSequencer extends KExpressionsSemanticSequencer {

	@Inject
	private KEffectsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.BOOLEAN_ANNOTATION:
				sequence_KeyBooleanValueAnnotation(context, (BooleanAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.FLOAT_ANNOTATION:
				sequence_KeyFloatValueAnnotation(context, (FloatAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.INT_ANNOTATION:
				sequence_KeyIntValueAnnotation(context, (IntAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KEffectsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				if (rule == grammarAccess.getAssignmentRule()) {
					sequence_Assignment(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEffectRule()) {
					sequence_Assignment_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPostfixEffectRule()) {
					sequence_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else break;
			case KEffectsPackage.EMISSION:
				sequence_Emission(context, (Emission) semanticObject); 
				return; 
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.sccharts.legacy.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (annotations+=Annotation* valuedObject=[ValuedObject|ID] indices+=Expression* operator=AssignOperator expression=Expression)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Effect returns Assignment
	 *
	 * Constraint:
	 *     (
	 *         (annotations+=Annotation* valuedObject=[ValuedObject|ID] indices+=Expression* operator=AssignOperator expression=Expression) | 
	 *         (annotations+=Annotation* valuedObject=[ValuedObject|ID] indices+=Expression* operator=PostfixOperator)
	 *     )
	 */
	protected void sequence_Assignment_PostfixEffect(ISerializationContext context, Assignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Effect returns Emission
	 *     Emission returns Emission
	 *
	 * Constraint:
	 *     (annotations+=RestrictedAnnotation* valuedObject=[ValuedObject|ID] newValue=Expression?)
	 */
	protected void sequence_Emission(ISerializationContext context, Emission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Effect returns FunctionCallEffect
	 *     FunctionCallEffect returns FunctionCallEffect
	 *
	 * Constraint:
	 *     (annotations+=Annotation* functionName=ExtendedID (parameters+=Parameter parameters+=Parameter*)?)
	 */
	protected void sequence_FunctionCallEffect(ISerializationContext context, FunctionCallEffect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Effect returns HostcodeEffect
	 *     HostcodeEffect returns HostcodeEffect
	 *
	 * Constraint:
	 *     (annotations+=Annotation* text=HOSTCODE)
	 */
	protected void sequence_HostcodeEffect(ISerializationContext context, HostcodeEffect semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PostfixEffect returns Assignment
	 *
	 * Constraint:
	 *     (annotations+=Annotation* valuedObject=[ValuedObject|ID] indices+=Expression* operator=PostfixOperator)
	 */
	protected void sequence_PostfixEffect(ISerializationContext context, Assignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
