/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.legacy.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.sccharts.legacy.text.actions.services.ActionsGrammarAccess;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.sccharts.legacy.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.sccharts.legacy.annotations.services.AnnotationsGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SctGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.Root");
		private final RuleCall cSCChartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////generate sct "http://kieler.cs.cau.de/sccharts/textual/0.1.0"
		//// ---------------------------------------------------------------------------------------------------
		//Root sccharts::State:
		//	SCChart
		@Override public ParserRule getRule() { return rule; }

		//SCChart
		public RuleCall getSCChartParserRuleCall() { return cSCChartParserRuleCall; }
	}

	public class SingleControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.SingleControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//SingleControlflowRegion sccharts::ControlflowRegion:
		//	{sccharts::ControlflowRegion} states+=State+
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ControlflowRegion} states+=State+
		public Group getGroup() { return cGroup; }

		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }

		//states+=State+
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_1_0() { return cStatesStateParserRuleCall_1_0; }
	}

	public class SingleDataflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.SingleDataflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEquationsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEquationsEquationParserRuleCall_1_0_0 = (RuleCall)cEquationsAssignment_1_0.eContents().get(0);
		private final Assignment cNodesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_1_1_0 = (RuleCall)cNodesAssignment_1_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//SingleDataflowRegion sccharts::DataflowRegion:
		//	{sccharts::DataflowRegion} (equations+=Equation | nodes+=Node)+
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DataflowRegion} (equations+=Equation | nodes+=Node)+
		public Group getGroup() { return cGroup; }

		//{sccharts::DataflowRegion}
		public Action getDataflowRegionAction_0() { return cDataflowRegionAction_0; }

		//(equations+=Equation | nodes+=Node)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//equations+=Equation
		public Assignment getEquationsAssignment_1_0() { return cEquationsAssignment_1_0; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_1_0_0() { return cEquationsEquationParserRuleCall_1_0_0; }

		//nodes+=Node
		public Assignment getNodesAssignment_1_1() { return cNodesAssignment_1_1; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_1_1_0() { return cNodesNodeParserRuleCall_1_1_0; }
	}

	public class ControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.ControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cRegionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//ControlflowRegion sccharts::ControlflowRegion:
		//	{sccharts::ControlflowRegion} annotations+=Annotation*
		//	'region' id=ID? label=STRING? ':'
		//	declarations+=Declaration*
		//	states+=State+
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ControlflowRegion} annotations+=Annotation* 'region' id=ID? label=STRING? ':' declarations+=Declaration*
		//states+=State+
		public Group getGroup() { return cGroup; }

		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//'region'
		public Keyword getRegionKeyword_2() { return cRegionKeyword_2; }

		//id=ID?
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }

		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_6_0() { return cDeclarationsDeclarationParserRuleCall_6_0; }

		//states+=State+
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }

		//State
		public RuleCall getStatesStateParserRuleCall_7_0() { return cStatesStateParserRuleCall_7_0; }
	}

	public class DataflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.DataflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cDataflowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cEquationsAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cEquationsEquationParserRuleCall_7_0_0 = (RuleCall)cEquationsAssignment_7_0.eContents().get(0);
		private final Assignment cNodesAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_7_1_0 = (RuleCall)cNodesAssignment_7_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//DataflowRegion sccharts::DataflowRegion:
		//	{sccharts::DataflowRegion} annotations+=Annotation*
		//	'dataflow' id=ID? label=STRING? ':'
		//	declarations+=Declaration* (equations+=Equation | nodes+=Node)*
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DataflowRegion} annotations+=Annotation* 'dataflow' id=ID? label=STRING? ':' declarations+=Declaration*
		//(equations+=Equation | nodes+=Node)*
		public Group getGroup() { return cGroup; }

		//{sccharts::DataflowRegion}
		public Action getDataflowRegionAction_0() { return cDataflowRegionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//'dataflow'
		public Keyword getDataflowKeyword_2() { return cDataflowKeyword_2; }

		//id=ID?
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }

		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_6_0() { return cDeclarationsDeclarationParserRuleCall_6_0; }

		//(equations+=Equation | nodes+=Node)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//equations+=Equation
		public Assignment getEquationsAssignment_7_0() { return cEquationsAssignment_7_0; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_7_0_0() { return cEquationsEquationParserRuleCall_7_0_0; }

		//nodes+=Node
		public Assignment getNodesAssignment_7_1() { return cNodesAssignment_7_1; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_7_1_0() { return cNodesNodeParserRuleCall_7_1_0; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cValuedObjectAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_1_0_0_0 = (CrossReference)cValuedObjectAssignment_1_0_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_2_0 = (RuleCall)cExpressionAssignment_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cValuedObjectAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_1_1_0_0 = (CrossReference)cValuedObjectAssignment_1_1_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_1_1_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cNodeAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cNodeNodeCrossReference_1_1_2_0 = (CrossReference)cNodeAssignment_1_1_2.eContents().get(0);
		private final RuleCall cNodeNodeIDTerminalRuleCall_1_1_2_0_1 = (RuleCall)cNodeNodeCrossReference_1_1_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cExpressionAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cExpressionValuedObjectReferenceParserRuleCall_1_1_4_0 = (RuleCall)cExpressionAssignment_1_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		
		//Equation sccharts::Equation:
		//	{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';'
		//	| valuedObject=[kexpressions::ValuedObject] '=' node=[sccharts::Node] '.' expression=ValuedObjectReference ';')
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';' |
		//valuedObject=[kexpressions::ValuedObject] '=' node=[sccharts::Node] '.' expression=ValuedObjectReference ';')
		public Group getGroup() { return cGroup; }

		//{sccharts::Equation}
		public Action getEquationAction_0() { return cEquationAction_0; }

		//(valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';' | valuedObject=[kexpressions::ValuedObject] '='
		//node=[sccharts::Node] '.' expression=ValuedObjectReference ';')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//valuedObject=[kexpressions::ValuedObject]
		public Assignment getValuedObjectAssignment_1_0_0() { return cValuedObjectAssignment_1_0_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getValuedObjectValuedObjectCrossReference_1_0_0_0() { return cValuedObjectValuedObjectCrossReference_1_0_0_0; }

		//ID
		public RuleCall getValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_0_1() { return cValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_0_2() { return cExpressionAssignment_1_0_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_2_0() { return cExpressionExpressionParserRuleCall_1_0_2_0; }

		//';'
		public Keyword getSemicolonKeyword_1_0_3() { return cSemicolonKeyword_1_0_3; }

		//valuedObject=[kexpressions::ValuedObject] '=' node=[sccharts::Node] '.' expression=ValuedObjectReference ';'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//valuedObject=[kexpressions::ValuedObject]
		public Assignment getValuedObjectAssignment_1_1_0() { return cValuedObjectAssignment_1_1_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getValuedObjectValuedObjectCrossReference_1_1_0_0() { return cValuedObjectValuedObjectCrossReference_1_1_0_0; }

		//ID
		public RuleCall getValuedObjectValuedObjectIDTerminalRuleCall_1_1_0_0_1() { return cValuedObjectValuedObjectIDTerminalRuleCall_1_1_0_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_1_1_1() { return cEqualsSignKeyword_1_1_1; }

		//node=[sccharts::Node]
		public Assignment getNodeAssignment_1_1_2() { return cNodeAssignment_1_1_2; }

		//[sccharts::Node]
		public CrossReference getNodeNodeCrossReference_1_1_2_0() { return cNodeNodeCrossReference_1_1_2_0; }

		//ID
		public RuleCall getNodeNodeIDTerminalRuleCall_1_1_2_0_1() { return cNodeNodeIDTerminalRuleCall_1_1_2_0_1; }

		//'.'
		public Keyword getFullStopKeyword_1_1_3() { return cFullStopKeyword_1_1_3; }

		//expression=ValuedObjectReference
		public Assignment getExpressionAssignment_1_1_4() { return cExpressionAssignment_1_1_4; }

		//ValuedObjectReference
		public RuleCall getExpressionValuedObjectReferenceParserRuleCall_1_1_4_0() { return cExpressionValuedObjectReferenceParserRuleCall_1_1_4_0; }

		//';'
		public Keyword getSemicolonKeyword_1_1_5() { return cSemicolonKeyword_1_1_5; }
	}

	public class SCChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.SCChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cScchartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cReferencesKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cReferencedScopeAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final CrossReference cReferencedScopeStateCrossReference_4_0_1_0 = (CrossReference)cReferencedScopeAssignment_4_0_1.eContents().get(0);
		private final RuleCall cReferencedScopeStateIDTerminalRuleCall_4_0_1_0_1 = (RuleCall)cReferencedScopeStateCrossReference_4_0_1_0.eContents().get(1);
		private final Group cGroup_4_0_2 = (Group)cGroup_4_0.eContents().get(2);
		private final Keyword cBindKeyword_4_0_2_0 = (Keyword)cGroup_4_0_2.eContents().get(0);
		private final Assignment cBindingsAssignment_4_0_2_1 = (Assignment)cGroup_4_0_2.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_4_0_2_1_0 = (RuleCall)cBindingsAssignment_4_0_2_1.eContents().get(0);
		private final Group cGroup_4_0_2_2 = (Group)cGroup_4_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_4_0_2_2_0 = (Keyword)cGroup_4_0_2_2.eContents().get(0);
		private final Assignment cBindingsAssignment_4_0_2_2_1 = (Assignment)cGroup_4_0_2_2.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_4_0_2_2_1_0 = (RuleCall)cBindingsAssignment_4_0_2_2_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Assignment cDeclarationsAssignment_4_1_1_0 = (Assignment)cAlternatives_4_1_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_1_1_0_0 = (RuleCall)cDeclarationsAssignment_4_1_1_0.eContents().get(0);
		private final Assignment cLocalActionsAssignment_4_1_1_1 = (Assignment)cAlternatives_4_1_1.eContents().get(1);
		private final RuleCall cLocalActionsLocalActionParserRuleCall_4_1_1_1_0 = (RuleCall)cLocalActionsAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Assignment cRegionsAssignment_4_1_2_0 = (Assignment)cGroup_4_1_2.eContents().get(0);
		private final RuleCall cRegionsSingleControlflowRegionParserRuleCall_4_1_2_0_0 = (RuleCall)cRegionsAssignment_4_1_2_0.eContents().get(0);
		private final Assignment cRegionsAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_4_1_2_1_0 = (RuleCall)cRegionsAssignment_4_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		
		//// ---------------------------------------------------------------------------------------------------
		//SCChart sccharts::State:
		//	annotations+=Annotation*
		//	'scchart' id=ID label=STRING? ('references' referencedScope=[sccharts::State] ('bind' bindings+=Binding (','
		//	bindings+=Binding)*)?
		//	| '{' (declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion? regions+=Region*)? // this rule only works correctly if it is optional
		//	'}')?
		@Override public ParserRule getRule() { return rule; }

		////    ('package' name = QualifiedName)?
		////    imports += ImportDecl*
		////    
		//annotations+=Annotation* 'scchart' id=ID label=STRING? ('references' referencedScope=[sccharts::State] ('bind'
		//bindings+=Binding (',' bindings+=Binding)*)? | '{' (declarations+=Declaration | localActions+=LocalAction)*
		//(regions+=SingleControlflowRegion? regions+=Region*)? // this rule only works correctly if it is optional
		//'}')?
		public Group getGroup() { return cGroup; }

		////    ('package' name = QualifiedName)?
		////    imports += ImportDecl*
		////    
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'scchart'
		public Keyword getScchartKeyword_1() { return cScchartKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//('references' referencedScope=[sccharts::State] ('bind' bindings+=Binding (',' bindings+=Binding)*)? | '{'
		//(declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion? regions+=Region*)? // this rule only works correctly if it is optional
		//'}')?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//'references' referencedScope=[sccharts::State] ('bind' bindings+=Binding (',' bindings+=Binding)*)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//'references'
		public Keyword getReferencesKeyword_4_0_0() { return cReferencesKeyword_4_0_0; }

		//referencedScope=[sccharts::State]
		public Assignment getReferencedScopeAssignment_4_0_1() { return cReferencedScopeAssignment_4_0_1; }

		//[sccharts::State]
		public CrossReference getReferencedScopeStateCrossReference_4_0_1_0() { return cReferencedScopeStateCrossReference_4_0_1_0; }

		//ID
		public RuleCall getReferencedScopeStateIDTerminalRuleCall_4_0_1_0_1() { return cReferencedScopeStateIDTerminalRuleCall_4_0_1_0_1; }

		//('bind' bindings+=Binding (',' bindings+=Binding)*)?
		public Group getGroup_4_0_2() { return cGroup_4_0_2; }

		//'bind'
		public Keyword getBindKeyword_4_0_2_0() { return cBindKeyword_4_0_2_0; }

		//bindings+=Binding
		public Assignment getBindingsAssignment_4_0_2_1() { return cBindingsAssignment_4_0_2_1; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_4_0_2_1_0() { return cBindingsBindingParserRuleCall_4_0_2_1_0; }

		//(',' bindings+=Binding)*
		public Group getGroup_4_0_2_2() { return cGroup_4_0_2_2; }

		//','
		public Keyword getCommaKeyword_4_0_2_2_0() { return cCommaKeyword_4_0_2_2_0; }

		//bindings+=Binding
		public Assignment getBindingsAssignment_4_0_2_2_1() { return cBindingsAssignment_4_0_2_2_1; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_4_0_2_2_1_0() { return cBindingsBindingParserRuleCall_4_0_2_2_1_0; }

		//'{' (declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion? regions+=Region*)? // this rule only works correctly if it is optional
		//'}'
		public Group getGroup_4_1() { return cGroup_4_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }

		//(declarations+=Declaration | localActions+=LocalAction)*
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }

		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_4_1_1_0() { return cDeclarationsAssignment_4_1_1_0; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_1_1_0_0() { return cDeclarationsDeclarationParserRuleCall_4_1_1_0_0; }

		//localActions+=LocalAction
		public Assignment getLocalActionsAssignment_4_1_1_1() { return cLocalActionsAssignment_4_1_1_1; }

		//LocalAction
		public RuleCall getLocalActionsLocalActionParserRuleCall_4_1_1_1_0() { return cLocalActionsLocalActionParserRuleCall_4_1_1_1_0; }

		//(regions+=SingleControlflowRegion? regions+=Region*)?
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//// ssm: DEACTIVATED dataflow for Synchron Release
		////                (regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)? (regions+=Region)*
		//regions+=SingleControlflowRegion?
		public Assignment getRegionsAssignment_4_1_2_0() { return cRegionsAssignment_4_1_2_0; }

		//SingleControlflowRegion
		public RuleCall getRegionsSingleControlflowRegionParserRuleCall_4_1_2_0_0() { return cRegionsSingleControlflowRegionParserRuleCall_4_1_2_0_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_4_1_2_1() { return cRegionsAssignment_4_1_2_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_4_1_2_1_0() { return cRegionsRegionParserRuleCall_4_1_2_1_0; }

		//// this rule only works correctly if it is optional
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_3() { return cRightCurlyBracketKeyword_4_1_3; }
	}

	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.Region");
		private final RuleCall cControlflowRegionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Region sccharts::Region:
		//	ControlflowRegion
		@Override public ParserRule getRule() { return rule; }

		//// ssm: DEACTIVATED dataflow for Synchron Release
		////	ControlflowRegion | DataflowRegion	
		//ControlflowRegion
		public RuleCall getControlflowRegionParserRuleCall() { return cControlflowRegionParserRuleCall; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cInitialAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cInitialInitialKeyword_1_0_0_0 = (Keyword)cInitialAssignment_1_0_0.eContents().get(0);
		private final Assignment cFinalAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0_1_0 = (Keyword)cFinalAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cFinalAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cFinalFinalKeyword_1_1_0_0 = (Keyword)cFinalAssignment_1_1_0.eContents().get(0);
		private final Assignment cInitialAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cInitialInitialKeyword_1_1_1_0 = (Keyword)cInitialAssignment_1_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeStateTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cReferencesKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cReferencedScopeAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final CrossReference cReferencedScopeStateCrossReference_6_0_1_0 = (CrossReference)cReferencedScopeAssignment_6_0_1.eContents().get(0);
		private final RuleCall cReferencedScopeStateIDTerminalRuleCall_6_0_1_0_1 = (RuleCall)cReferencedScopeStateCrossReference_6_0_1_0.eContents().get(1);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cBindKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cBindingsAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_6_0_2_1_0 = (RuleCall)cBindingsAssignment_6_0_2_1.eContents().get(0);
		private final Group cGroup_6_0_2_2 = (Group)cGroup_6_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_6_0_2_2_0 = (Keyword)cGroup_6_0_2_2.eContents().get(0);
		private final Assignment cBindingsAssignment_6_0_2_2_1 = (Assignment)cGroup_6_0_2_2.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_6_0_2_2_1_0 = (RuleCall)cBindingsAssignment_6_0_2_2_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Alternatives cAlternatives_6_1_1 = (Alternatives)cGroup_6_1.eContents().get(1);
		private final Assignment cDeclarationsAssignment_6_1_1_0 = (Assignment)cAlternatives_6_1_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_6_1_1_0_0 = (RuleCall)cDeclarationsAssignment_6_1_1_0.eContents().get(0);
		private final Assignment cLocalActionsAssignment_6_1_1_1 = (Assignment)cAlternatives_6_1_1.eContents().get(1);
		private final RuleCall cLocalActionsLocalActionParserRuleCall_6_1_1_1_0 = (RuleCall)cLocalActionsAssignment_6_1_1_1.eContents().get(0);
		private final Group cGroup_6_1_2 = (Group)cGroup_6_1.eContents().get(2);
		private final Assignment cRegionsAssignment_6_1_2_0 = (Assignment)cGroup_6_1_2.eContents().get(0);
		private final RuleCall cRegionsSingleControlflowRegionParserRuleCall_6_1_2_0_0 = (RuleCall)cRegionsAssignment_6_1_2_0.eContents().get(0);
		private final Assignment cRegionsAssignment_6_1_2_1 = (Assignment)cGroup_6_1_2.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_6_1_2_1_0 = (RuleCall)cRegionsAssignment_6_1_2_1.eContents().get(0);
		private final Group cGroup_6_1_3 = (Group)cGroup_6_1.eContents().get(3);
		private final Alternatives cAlternatives_6_1_3_0 = (Alternatives)cGroup_6_1_3.eContents().get(0);
		private final Assignment cRegionsAssignment_6_1_3_0_0 = (Assignment)cAlternatives_6_1_3_0.eContents().get(0);
		private final RuleCall cRegionsSingleDataflowRegionParserRuleCall_6_1_3_0_0_0 = (RuleCall)cRegionsAssignment_6_1_3_0_0.eContents().get(0);
		private final Assignment cRegionsAssignment_6_1_3_0_1 = (Assignment)cAlternatives_6_1_3_0.eContents().get(1);
		private final RuleCall cRegionsSingleControlflowRegionParserRuleCall_6_1_3_0_1_0 = (RuleCall)cRegionsAssignment_6_1_3_0_1.eContents().get(0);
		private final Assignment cRegionsAssignment_6_1_3_1 = (Assignment)cGroup_6_1_3.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_6_1_3_1_0 = (RuleCall)cRegionsAssignment_6_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_1_4 = (Keyword)cGroup_6_1.eContents().get(4);
		private final Assignment cOutgoingTransitionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_7_0 = (RuleCall)cOutgoingTransitionsAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////ImportDecl: 
		////    'import' 
		////        (importedType=[sccharts::State|QualifiedName] 
		////        | importedNamespace=QualifiedNameWithWildcard)
		////;
		////
		////QualifiedName:
		////  ID ('.' ID)*;
		////
		////QualifiedNameWithWildcard :
		////    QualifiedName  '.' '*';
		//// ---------------------------------------------------------------------------------------------------
		//State sccharts::State:
		//	annotations+=Annotation* (initial?='initial' final?='final'? | final?='final' initial?='initial'?)?
		//	type=StateType? 'state' id=ID label=STRING? ('references' referencedScope=[sccharts::State] ('bind' bindings+=Binding
		//	(',' bindings+=Binding)*)?
		//	| '{' (declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion? regions+=Region*)
		//	((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)? regions+=Region*)
		//	'}')?
		//	// The semicolon is mandatory for backtracking!
		//	outgoingTransitions+=Transition* ';'
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (initial?='initial' final?='final'? | final?='final' initial?='initial'?)? type=StateType?
		//'state' id=ID label=STRING? ('references' referencedScope=[sccharts::State] ('bind' bindings+=Binding (','
		//bindings+=Binding)*)? | '{' (declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion?
		//regions+=Region*) ((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)? regions+=Region*) '}')? // The semicolon is mandatory for backtracking!
		//outgoingTransitions+=Transition* ';'
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//(initial?='initial' final?='final'? | final?='final' initial?='initial'?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//initial?='initial' final?='final'?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//initial?='initial'
		public Assignment getInitialAssignment_1_0_0() { return cInitialAssignment_1_0_0; }

		//'initial'
		public Keyword getInitialInitialKeyword_1_0_0_0() { return cInitialInitialKeyword_1_0_0_0; }

		//final?='final'?
		public Assignment getFinalAssignment_1_0_1() { return cFinalAssignment_1_0_1; }

		//'final'
		public Keyword getFinalFinalKeyword_1_0_1_0() { return cFinalFinalKeyword_1_0_1_0; }

		//final?='final' initial?='initial'?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//final?='final'
		public Assignment getFinalAssignment_1_1_0() { return cFinalAssignment_1_1_0; }

		//'final'
		public Keyword getFinalFinalKeyword_1_1_0_0() { return cFinalFinalKeyword_1_1_0_0; }

		//initial?='initial'?
		public Assignment getInitialAssignment_1_1_1() { return cInitialAssignment_1_1_1; }

		//'initial'
		public Keyword getInitialInitialKeyword_1_1_1_0() { return cInitialInitialKeyword_1_1_1_0; }

		//type=StateType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_2_0() { return cTypeStateTypeEnumRuleCall_2_0; }

		//'state'
		public Keyword getStateKeyword_3() { return cStateKeyword_3; }

		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }

		//label=STRING?
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_0() { return cLabelSTRINGTerminalRuleCall_5_0; }

		//('references' referencedScope=[sccharts::State] ('bind' bindings+=Binding (',' bindings+=Binding)*)? | '{'
		//(declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion? regions+=Region*)
		//((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)? regions+=Region*) '}')?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//'references' referencedScope=[sccharts::State] ('bind' bindings+=Binding (',' bindings+=Binding)*)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//'references'
		public Keyword getReferencesKeyword_6_0_0() { return cReferencesKeyword_6_0_0; }

		//referencedScope=[sccharts::State]
		public Assignment getReferencedScopeAssignment_6_0_1() { return cReferencedScopeAssignment_6_0_1; }

		//[sccharts::State]
		public CrossReference getReferencedScopeStateCrossReference_6_0_1_0() { return cReferencedScopeStateCrossReference_6_0_1_0; }

		//ID
		public RuleCall getReferencedScopeStateIDTerminalRuleCall_6_0_1_0_1() { return cReferencedScopeStateIDTerminalRuleCall_6_0_1_0_1; }

		//('bind' bindings+=Binding (',' bindings+=Binding)*)?
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }

		//'bind'
		public Keyword getBindKeyword_6_0_2_0() { return cBindKeyword_6_0_2_0; }

		//bindings+=Binding
		public Assignment getBindingsAssignment_6_0_2_1() { return cBindingsAssignment_6_0_2_1; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_6_0_2_1_0() { return cBindingsBindingParserRuleCall_6_0_2_1_0; }

		//(',' bindings+=Binding)*
		public Group getGroup_6_0_2_2() { return cGroup_6_0_2_2; }

		//','
		public Keyword getCommaKeyword_6_0_2_2_0() { return cCommaKeyword_6_0_2_2_0; }

		//bindings+=Binding
		public Assignment getBindingsAssignment_6_0_2_2_1() { return cBindingsAssignment_6_0_2_2_1; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_6_0_2_2_1_0() { return cBindingsBindingParserRuleCall_6_0_2_2_1_0; }

		//'{' (declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion? regions+=Region*)
		//((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)? regions+=Region*) '}'
		public Group getGroup_6_1() { return cGroup_6_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1_0() { return cLeftCurlyBracketKeyword_6_1_0; }

		//(declarations+=Declaration | localActions+=LocalAction)*
		public Alternatives getAlternatives_6_1_1() { return cAlternatives_6_1_1; }

		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_6_1_1_0() { return cDeclarationsAssignment_6_1_1_0; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_6_1_1_0_0() { return cDeclarationsDeclarationParserRuleCall_6_1_1_0_0; }

		//localActions+=LocalAction
		public Assignment getLocalActionsAssignment_6_1_1_1() { return cLocalActionsAssignment_6_1_1_1; }

		//LocalAction
		public RuleCall getLocalActionsLocalActionParserRuleCall_6_1_1_1_0() { return cLocalActionsLocalActionParserRuleCall_6_1_1_1_0; }

		//(regions+=SingleControlflowRegion? regions+=Region*)
		public Group getGroup_6_1_2() { return cGroup_6_1_2; }

		//regions+=SingleControlflowRegion?
		public Assignment getRegionsAssignment_6_1_2_0() { return cRegionsAssignment_6_1_2_0; }

		//SingleControlflowRegion
		public RuleCall getRegionsSingleControlflowRegionParserRuleCall_6_1_2_0_0() { return cRegionsSingleControlflowRegionParserRuleCall_6_1_2_0_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_6_1_2_1() { return cRegionsAssignment_6_1_2_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_6_1_2_1_0() { return cRegionsRegionParserRuleCall_6_1_2_1_0; }

		//((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)? regions+=Region*)
		public Group getGroup_6_1_3() { return cGroup_6_1_3; }

		//(regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)?
		public Alternatives getAlternatives_6_1_3_0() { return cAlternatives_6_1_3_0; }

		//regions+=SingleDataflowRegion
		public Assignment getRegionsAssignment_6_1_3_0_0() { return cRegionsAssignment_6_1_3_0_0; }

		//SingleDataflowRegion
		public RuleCall getRegionsSingleDataflowRegionParserRuleCall_6_1_3_0_0_0() { return cRegionsSingleDataflowRegionParserRuleCall_6_1_3_0_0_0; }

		//regions+=SingleControlflowRegion
		public Assignment getRegionsAssignment_6_1_3_0_1() { return cRegionsAssignment_6_1_3_0_1; }

		//SingleControlflowRegion
		public RuleCall getRegionsSingleControlflowRegionParserRuleCall_6_1_3_0_1_0() { return cRegionsSingleControlflowRegionParserRuleCall_6_1_3_0_1_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_6_1_3_1() { return cRegionsAssignment_6_1_3_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_6_1_3_1_0() { return cRegionsRegionParserRuleCall_6_1_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6_1_4() { return cRightCurlyBracketKeyword_6_1_4; }

		//// The semicolon is mandatory for backtracking!
		//outgoingTransitions+=Transition*
		public Assignment getOutgoingTransitionsAssignment_7() { return cOutgoingTransitionsAssignment_7; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_7_0() { return cOutgoingTransitionsTransitionParserRuleCall_7_0; }

		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefineNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Node sccharts::Node:
		//	ReferenceNode | CallNode | DefineNode
		@Override public ParserRule getRule() { return rule; }

		//ReferenceNode | CallNode | DefineNode
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReferenceNode
		public RuleCall getReferenceNodeParserRuleCall_0() { return cReferenceNodeParserRuleCall_0; }

		//CallNode
		public RuleCall getCallNodeParserRuleCall_1() { return cCallNodeParserRuleCall_1; }

		//DefineNode
		public RuleCall getDefineNodeParserRuleCall_2() { return cDefineNodeParserRuleCall_2; }
	}

	public class CallNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.CallNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCallReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCallReferenceDefineNodeCrossReference_3_0 = (CrossReference)cCallReferenceAssignment_3.eContents().get(0);
		private final RuleCall cCallReferenceDefineNodeIDTerminalRuleCall_3_0_1 = (RuleCall)cCallReferenceDefineNodeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersValuedObjectReferenceParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParametersValuedObjectReferenceParserRuleCall_6_1_0 = (RuleCall)cParametersAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CallNode sccharts::CallNode:
		//	{sccharts::CallNode} id=ID '=' callReference=[sccharts::DefineNode]
		//	'(' parameters+=ValuedObjectReference? (',' parameters+=ValuedObjectReference)* ')'
		//	';'
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::CallNode} id=ID '=' callReference=[sccharts::DefineNode] '(' parameters+=ValuedObjectReference? (','
		//parameters+=ValuedObjectReference)* ')' ';'
		public Group getGroup() { return cGroup; }

		//{sccharts::CallNode}
		public Action getCallNodeAction_0() { return cCallNodeAction_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//callReference=[sccharts::DefineNode]
		public Assignment getCallReferenceAssignment_3() { return cCallReferenceAssignment_3; }

		//[sccharts::DefineNode]
		public CrossReference getCallReferenceDefineNodeCrossReference_3_0() { return cCallReferenceDefineNodeCrossReference_3_0; }

		//ID
		public RuleCall getCallReferenceDefineNodeIDTerminalRuleCall_3_0_1() { return cCallReferenceDefineNodeIDTerminalRuleCall_3_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//parameters+=ValuedObjectReference?
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }

		//ValuedObjectReference
		public RuleCall getParametersValuedObjectReferenceParserRuleCall_5_0() { return cParametersValuedObjectReferenceParserRuleCall_5_0; }

		//(',' parameters+=ValuedObjectReference)*
		public Group getGroup_6() { return cGroup_6; }

		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//parameters+=ValuedObjectReference
		public Assignment getParametersAssignment_6_1() { return cParametersAssignment_6_1; }

		//ValuedObjectReference
		public RuleCall getParametersValuedObjectReferenceParserRuleCall_6_1_0() { return cParametersValuedObjectReferenceParserRuleCall_6_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class DefineNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.DefineNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputsDeclarationParserRuleCall_4_0 = (RuleCall)cInputsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cReturnsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutputsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutputsDeclarationParserRuleCall_8_0 = (RuleCall)cOutputsAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Group cGroup_11_0 = (Group)cAlternatives_11.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_11_0_0 = (Assignment)cGroup_11_0.eContents().get(0);
		private final CrossReference cValuedObjectsValuedObjectCrossReference_11_0_0_0 = (CrossReference)cValuedObjectsAssignment_11_0_0.eContents().get(0);
		private final RuleCall cValuedObjectsValuedObjectIDTerminalRuleCall_11_0_0_0_1 = (RuleCall)cValuedObjectsValuedObjectCrossReference_11_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_11_0_1 = (Keyword)cGroup_11_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_11_0_2 = (Assignment)cGroup_11_0.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_11_0_2_0 = (RuleCall)cExpressionsAssignment_11_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_0_3 = (Keyword)cGroup_11_0.eContents().get(3);
		private final Assignment cStatesAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_11_1_0 = (RuleCall)cStatesAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//DefineNode sccharts::DefineNode:
		//	{sccharts::DefineNode}
		//	'node' id=ID '(' inputs+=Declaration* ')'
		//	'returns' '(' outputs+=Declaration* ')' '{' ((valuedObjects+=[kexpressions::ValuedObject] '=' expressions+=Expression
		//	';')*
		//	| states+=State*)
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DefineNode} 'node' id=ID '(' inputs+=Declaration* ')' 'returns' '(' outputs+=Declaration* ')' '{'
		//((valuedObjects+=[kexpressions::ValuedObject] '=' expressions+=Expression ';')* | states+=State*) '}'
		public Group getGroup() { return cGroup; }

		//{sccharts::DefineNode}
		public Action getDefineNodeAction_0() { return cDefineNodeAction_0; }

		//'node'
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//inputs+=Declaration*
		public Assignment getInputsAssignment_4() { return cInputsAssignment_4; }

		//Declaration
		public RuleCall getInputsDeclarationParserRuleCall_4_0() { return cInputsDeclarationParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//'returns'
		public Keyword getReturnsKeyword_6() { return cReturnsKeyword_6; }

		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outputs+=Declaration*
		public Assignment getOutputsAssignment_8() { return cOutputsAssignment_8; }

		//Declaration
		public RuleCall getOutputsDeclarationParserRuleCall_8_0() { return cOutputsDeclarationParserRuleCall_8_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }

		//((valuedObjects+=[kexpressions::ValuedObject] '=' expressions+=Expression ';')* | states+=State*)
		public Alternatives getAlternatives_11() { return cAlternatives_11; }

		//(valuedObjects+=[kexpressions::ValuedObject] '=' expressions+=Expression ';')*
		public Group getGroup_11_0() { return cGroup_11_0; }

		//valuedObjects+=[kexpressions::ValuedObject]
		public Assignment getValuedObjectsAssignment_11_0_0() { return cValuedObjectsAssignment_11_0_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getValuedObjectsValuedObjectCrossReference_11_0_0_0() { return cValuedObjectsValuedObjectCrossReference_11_0_0_0; }

		//ID
		public RuleCall getValuedObjectsValuedObjectIDTerminalRuleCall_11_0_0_0_1() { return cValuedObjectsValuedObjectIDTerminalRuleCall_11_0_0_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_11_0_1() { return cEqualsSignKeyword_11_0_1; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_11_0_2() { return cExpressionsAssignment_11_0_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_11_0_2_0() { return cExpressionsExpressionParserRuleCall_11_0_2_0; }

		//';'
		public Keyword getSemicolonKeyword_11_0_3() { return cSemicolonKeyword_11_0_3; }

		//// keep that? yes, but do not allow to mix them
		//states+=State*
		public Assignment getStatesAssignment_11_1() { return cStatesAssignment_11_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_11_1_0() { return cStatesStateParserRuleCall_11_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class ReferenceNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.ReferenceNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReferencedScopeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cReferencedScopeStateCrossReference_5_0 = (CrossReference)cReferencedScopeAssignment_5.eContents().get(0);
		private final RuleCall cReferencedScopeStateIDTerminalRuleCall_5_0_1 = (RuleCall)cReferencedScopeStateCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParametersValuedObjectReferenceParserRuleCall_7_0 = (RuleCall)cParametersAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cParametersAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cParametersValuedObjectReferenceParserRuleCall_8_1_0 = (RuleCall)cParametersAssignment_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ReferenceNode sccharts::ReferenceNode:
		//	{sccharts::ReferenceNode} id=ID label=STRING? '=' 'ref' referencedScope=[sccharts::State]
		//	'(' parameters+=ValuedObjectReference? (',' parameters+=ValuedObjectReference)* ')'
		//	';'
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ReferenceNode} id=ID label=STRING? '=' 'ref' referencedScope=[sccharts::State] '('
		//parameters+=ValuedObjectReference? (',' parameters+=ValuedObjectReference)* ')' ';'
		public Group getGroup() { return cGroup; }

		//{sccharts::ReferenceNode}
		public Action getReferenceNodeAction_0() { return cReferenceNodeAction_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//label=STRING?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//'ref'
		public Keyword getRefKeyword_4() { return cRefKeyword_4; }

		//referencedScope=[sccharts::State]
		public Assignment getReferencedScopeAssignment_5() { return cReferencedScopeAssignment_5; }

		//[sccharts::State]
		public CrossReference getReferencedScopeStateCrossReference_5_0() { return cReferencedScopeStateCrossReference_5_0; }

		//ID
		public RuleCall getReferencedScopeStateIDTerminalRuleCall_5_0_1() { return cReferencedScopeStateIDTerminalRuleCall_5_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//parameters+=ValuedObjectReference?
		public Assignment getParametersAssignment_7() { return cParametersAssignment_7; }

		//ValuedObjectReference
		public RuleCall getParametersValuedObjectReferenceParserRuleCall_7_0() { return cParametersValuedObjectReferenceParserRuleCall_7_0; }

		//(',' parameters+=ValuedObjectReference)*
		public Group getGroup_8() { return cGroup_8; }

		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//parameters+=ValuedObjectReference
		public Assignment getParametersAssignment_8_1() { return cParametersAssignment_8_1; }

		//ValuedObjectReference
		public RuleCall getParametersValuedObjectReferenceParserRuleCall_8_1_0() { return cParametersValuedObjectReferenceParserRuleCall_8_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class LocalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.LocalAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDuringActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSuspendActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIterateActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// ---------------------------------------------------------------------------------------------------
		//LocalAction sccharts::LocalAction:
		//	EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction
		@Override public ParserRule getRule() { return rule; }

		//EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryAction
		public RuleCall getEntryActionParserRuleCall_0() { return cEntryActionParserRuleCall_0; }

		//DuringAction
		public RuleCall getDuringActionParserRuleCall_1() { return cDuringActionParserRuleCall_1; }

		//ExitAction
		public RuleCall getExitActionParserRuleCall_2() { return cExitActionParserRuleCall_2; }

		//SuspendAction
		public RuleCall getSuspendActionParserRuleCall_3() { return cSuspendActionParserRuleCall_3; }

		//IterateAction
		public RuleCall getIterateActionParserRuleCall_4() { return cIterateActionParserRuleCall_4; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTransitionTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTargetStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetStateStateCrossReference_2_0 = (CrossReference)cTargetStateAssignment_2.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetStateStateCrossReference_2_0.eContents().get(1);
		private final Assignment cImmediateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cImmediateImmediateKeyword_3_0 = (Keyword)cImmediateAssignment_3.eContents().get(0);
		private final Assignment cDeferredAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cDeferredDeferredKeyword_4_0 = (Keyword)cDeferredAssignment_4.eContents().get(0);
		private final Assignment cHistoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHistoryHistoryTypeEnumRuleCall_5_0 = (RuleCall)cHistoryAssignment_5.eContents().get(0);
		private final Assignment cLabelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_0 = (RuleCall)cLabelAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cDelayAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cDelayINTTerminalRuleCall_7_1_0_0 = (RuleCall)cDelayAssignment_7_1_0.eContents().get(0);
		private final Assignment cTriggerAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_7_1_1_0 = (RuleCall)cTriggerAssignment_7_1_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cSolidusKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cEffectsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_7_2_1_0 = (RuleCall)cEffectsAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_7_2_2 = (Group)cGroup_7_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_2_2_0 = (Keyword)cGroup_7_2_2.eContents().get(0);
		private final Assignment cEffectsAssignment_7_2_2_1 = (Assignment)cGroup_7_2_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_7_2_2_1_0 = (RuleCall)cEffectsAssignment_7_2_2_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Transition sccharts::Transition:
		//	annotations+=Annotation*
		//	type=TransitionType targetState=[sccharts::State] immediate?='immediate'?
		//	deferred?='deferred'?
		//	history=HistoryType?
		//	label=STRING? ('with' (delay=INT? trigger=BoolExpression)? ('/' effects+=Effect (';' effects+=Effect)*)?)?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* type=TransitionType targetState=[sccharts::State] immediate?='immediate'? deferred?='deferred'?
		//history=HistoryType? label=STRING? ('with' (delay=INT? trigger=BoolExpression)? ('/' effects+=Effect (';'
		//effects+=Effect)*)?)?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//type=TransitionType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TransitionType
		public RuleCall getTypeTransitionTypeEnumRuleCall_1_0() { return cTypeTransitionTypeEnumRuleCall_1_0; }

		//targetState=[sccharts::State]
		public Assignment getTargetStateAssignment_2() { return cTargetStateAssignment_2; }

		//[sccharts::State]
		public CrossReference getTargetStateStateCrossReference_2_0() { return cTargetStateStateCrossReference_2_0; }

		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_2_0_1() { return cTargetStateStateIDTerminalRuleCall_2_0_1; }

		//immediate?='immediate'?
		public Assignment getImmediateAssignment_3() { return cImmediateAssignment_3; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_3_0() { return cImmediateImmediateKeyword_3_0; }

		//deferred?='deferred'?
		public Assignment getDeferredAssignment_4() { return cDeferredAssignment_4; }

		//'deferred'
		public Keyword getDeferredDeferredKeyword_4_0() { return cDeferredDeferredKeyword_4_0; }

		//history=HistoryType?
		public Assignment getHistoryAssignment_5() { return cHistoryAssignment_5; }

		//HistoryType
		public RuleCall getHistoryHistoryTypeEnumRuleCall_5_0() { return cHistoryHistoryTypeEnumRuleCall_5_0; }

		//label=STRING?
		public Assignment getLabelAssignment_6() { return cLabelAssignment_6; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_0() { return cLabelSTRINGTerminalRuleCall_6_0; }

		//('with' (delay=INT? trigger=BoolExpression)? ('/' effects+=Effect (';' effects+=Effect)*)?)?
		public Group getGroup_7() { return cGroup_7; }

		//'with'
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }

		//(delay=INT? trigger=BoolExpression)?
		public Group getGroup_7_1() { return cGroup_7_1; }

		//delay=INT?
		public Assignment getDelayAssignment_7_1_0() { return cDelayAssignment_7_1_0; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_7_1_0_0() { return cDelayINTTerminalRuleCall_7_1_0_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_7_1_1() { return cTriggerAssignment_7_1_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_7_1_1_0() { return cTriggerBoolExpressionParserRuleCall_7_1_1_0; }

		//('/' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_7_2() { return cGroup_7_2; }

		//'/'
		public Keyword getSolidusKeyword_7_2_0() { return cSolidusKeyword_7_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_7_2_1() { return cEffectsAssignment_7_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_7_2_1_0() { return cEffectsEffectParserRuleCall_7_2_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_7_2_2() { return cGroup_7_2_2; }

		//';'
		public Keyword getSemicolonKeyword_7_2_2_0() { return cSemicolonKeyword_7_2_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_7_2_2_1() { return cEffectsAssignment_7_2_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_7_2_2_1_0() { return cEffectsEffectParserRuleCall_7_2_2_1_0; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cFormalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFormalValuedObjectCrossReference_1_0 = (CrossReference)cFormalAssignment_1.eContents().get(0);
		private final RuleCall cFormalValuedObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cFormalValuedObjectCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cActualAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final CrossReference cActualValuedObjectCrossReference_3_0_0_0 = (CrossReference)cActualAssignment_3_0_0.eContents().get(0);
		private final RuleCall cActualValuedObjectIDTerminalRuleCall_3_0_0_0_1 = (RuleCall)cActualValuedObjectCrossReference_3_0_0_0.eContents().get(1);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cIndicesAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_3_0_1_1_0 = (RuleCall)cIndicesAssignment_3_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_0_1_2 = (Keyword)cGroup_3_0_1.eContents().get(2);
		private final Assignment cValueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cValueAnyValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Binding sccharts::Binding:
		//	annotations+=Annotation*
		//	formal=[kexpressions::ValuedObject]
		//	'to' (actual=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
		//	| value=AnyValue)
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* formal=[kexpressions::ValuedObject] 'to' (actual=[kexpressions::ValuedObject] ('['
		//indices+=Expression ']')* | value=AnyValue)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//formal=[kexpressions::ValuedObject]
		public Assignment getFormalAssignment_1() { return cFormalAssignment_1; }

		//[kexpressions::ValuedObject]
		public CrossReference getFormalValuedObjectCrossReference_1_0() { return cFormalValuedObjectCrossReference_1_0; }

		//ID
		public RuleCall getFormalValuedObjectIDTerminalRuleCall_1_0_1() { return cFormalValuedObjectIDTerminalRuleCall_1_0_1; }

		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//(actual=[kexpressions::ValuedObject] ('[' indices+=Expression ']')* | value=AnyValue)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//actual=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//actual=[kexpressions::ValuedObject]
		public Assignment getActualAssignment_3_0_0() { return cActualAssignment_3_0_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getActualValuedObjectCrossReference_3_0_0_0() { return cActualValuedObjectCrossReference_3_0_0_0; }

		//ID
		public RuleCall getActualValuedObjectIDTerminalRuleCall_3_0_0_0_1() { return cActualValuedObjectIDTerminalRuleCall_3_0_0_0_1; }

		//('[' indices+=Expression ']')*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_0_1_0() { return cLeftSquareBracketKeyword_3_0_1_0; }

		//indices+=Expression
		public Assignment getIndicesAssignment_3_0_1_1() { return cIndicesAssignment_3_0_1_1; }

		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_3_0_1_1_0() { return cIndicesExpressionParserRuleCall_3_0_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_0_1_2() { return cRightSquareBracketKeyword_3_0_1_2; }

		//value=AnyValue
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//AnyValue
		public RuleCall getValueAnyValueParserRuleCall_3_1_0() { return cValueAnyValueParserRuleCall_3_1_0; }
	}
	
	
	public class StateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNormalKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONNECTOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONNECTORConnectorKeyword_1_0 = (Keyword)cCONNECTOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFERENCEReferenceKeyword_2_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTUALTextualKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum StateType returns sccharts::StateType:
		//	NORMAL='normal' | CONNECTOR='connector' | REFERENCE='reference' | TEXTUAL='textual';
		public EnumRule getRule() { return rule; }

		//NORMAL='normal' | CONNECTOR='connector' | REFERENCE='reference' | TEXTUAL='textual'
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORMAL='normal'
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }

		//'normal'
		public Keyword getNORMALNormalKeyword_0_0() { return cNORMALNormalKeyword_0_0; }

		//CONNECTOR='connector'
		public EnumLiteralDeclaration getCONNECTOREnumLiteralDeclaration_1() { return cCONNECTOREnumLiteralDeclaration_1; }

		//'connector'
		public Keyword getCONNECTORConnectorKeyword_1_0() { return cCONNECTORConnectorKeyword_1_0; }

		//REFERENCE='reference'
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_2() { return cREFERENCEEnumLiteralDeclaration_2; }

		//'reference'
		public Keyword getREFERENCEReferenceKeyword_2_0() { return cREFERENCEReferenceKeyword_2_0; }

		//TEXTUAL='textual'
		public EnumLiteralDeclaration getTEXTUALEnumLiteralDeclaration_3() { return cTEXTUALEnumLiteralDeclaration_3; }

		//'textual'
		public Keyword getTEXTUALTextualKeyword_3_0() { return cTEXTUALTextualKeyword_3_0; }
	}

	public class TransitionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.legacy.text.Sct.TransitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKABORTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cWEAKABORTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGABORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGABORTOKeyword_1_0 = (Keyword)cSTRONGABORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TransitionType returns sccharts::TransitionType:
		//	WEAKABORT='-->' | STRONGABORT='o->' | TERMINATION='>->';
		public EnumRule getRule() { return rule; }

		//WEAKABORT='-->' | STRONGABORT='o->' | TERMINATION='>->'
		public Alternatives getAlternatives() { return cAlternatives; }

		//WEAKABORT='-->'
		public EnumLiteralDeclaration getWEAKABORTEnumLiteralDeclaration_0() { return cWEAKABORTEnumLiteralDeclaration_0; }

		//'-->'
		public Keyword getWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }

		//STRONGABORT='o->'
		public EnumLiteralDeclaration getSTRONGABORTEnumLiteralDeclaration_1() { return cSTRONGABORTEnumLiteralDeclaration_1; }

		//'o->'
		public Keyword getSTRONGABORTOKeyword_1_0() { return cSTRONGABORTOKeyword_1_0; }

		//TERMINATION='>->'
		public EnumLiteralDeclaration getTERMINATIONEnumLiteralDeclaration_2() { return cTERMINATIONEnumLiteralDeclaration_2; }

		//'>->'
		public Keyword getTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0() { return cTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0; }
	}
	
	private final RootElements pRoot;
	private final SingleControlflowRegionElements pSingleControlflowRegion;
	private final SingleDataflowRegionElements pSingleDataflowRegion;
	private final ControlflowRegionElements pControlflowRegion;
	private final DataflowRegionElements pDataflowRegion;
	private final EquationElements pEquation;
	private final SCChartElements pSCChart;
	private final RegionElements pRegion;
	private final StateElements pState;
	private final NodeElements pNode;
	private final CallNodeElements pCallNode;
	private final DefineNodeElements pDefineNode;
	private final ReferenceNodeElements pReferenceNode;
	private final LocalActionElements pLocalAction;
	private final TransitionElements pTransition;
	private final BindingElements pBinding;
	private final StateTypeElements eStateType;
	private final TransitionTypeElements eTransitionType;
	
	private final Grammar grammar;

	private final ActionsGrammarAccess gaActions;

	private final KExtGrammarAccess gaKExt;

	private final KEffectsGrammarAccess gaKEffects;

	private final KExpressionsGrammarAccess gaKExpressions;

	private final AnnotationsGrammarAccess gaAnnotations;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SctGrammarAccess(GrammarProvider grammarProvider,
		ActionsGrammarAccess gaActions,
		KExtGrammarAccess gaKExt,
		KEffectsGrammarAccess gaKEffects,
		KExpressionsGrammarAccess gaKExpressions,
		AnnotationsGrammarAccess gaAnnotations,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaActions = gaActions;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pSingleControlflowRegion = new SingleControlflowRegionElements();
		this.pSingleDataflowRegion = new SingleDataflowRegionElements();
		this.pControlflowRegion = new ControlflowRegionElements();
		this.pDataflowRegion = new DataflowRegionElements();
		this.pEquation = new EquationElements();
		this.pSCChart = new SCChartElements();
		this.pRegion = new RegionElements();
		this.pState = new StateElements();
		this.pNode = new NodeElements();
		this.pCallNode = new CallNodeElements();
		this.pDefineNode = new DefineNodeElements();
		this.pReferenceNode = new ReferenceNodeElements();
		this.pLocalAction = new LocalActionElements();
		this.pTransition = new TransitionElements();
		this.pBinding = new BindingElements();
		this.eStateType = new StateTypeElements();
		this.eTransitionType = new TransitionTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sccharts.legacy.text.Sct".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ActionsGrammarAccess getActionsGrammarAccess() {
		return gaActions;
	}

	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}

	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////generate sct "http://kieler.cs.cau.de/sccharts/textual/0.1.0"
	//// ---------------------------------------------------------------------------------------------------
	//Root sccharts::State:
	//	SCChart
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//SingleControlflowRegion sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} states+=State+
	public SingleControlflowRegionElements getSingleControlflowRegionAccess() {
		return pSingleControlflowRegion;
	}
	
	public ParserRule getSingleControlflowRegionRule() {
		return getSingleControlflowRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//SingleDataflowRegion sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} (equations+=Equation | nodes+=Node)+
	public SingleDataflowRegionElements getSingleDataflowRegionAccess() {
		return pSingleDataflowRegion;
	}
	
	public ParserRule getSingleDataflowRegionRule() {
		return getSingleDataflowRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//ControlflowRegion sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} annotations+=Annotation*
	//	'region' id=ID? label=STRING? ':'
	//	declarations+=Declaration*
	//	states+=State+
	public ControlflowRegionElements getControlflowRegionAccess() {
		return pControlflowRegion;
	}
	
	public ParserRule getControlflowRegionRule() {
		return getControlflowRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//DataflowRegion sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} annotations+=Annotation*
	//	'dataflow' id=ID? label=STRING? ':'
	//	declarations+=Declaration* (equations+=Equation | nodes+=Node)*
	public DataflowRegionElements getDataflowRegionAccess() {
		return pDataflowRegion;
	}
	
	public ParserRule getDataflowRegionRule() {
		return getDataflowRegionAccess().getRule();
	}

	//Equation sccharts::Equation:
	//	{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';'
	//	| valuedObject=[kexpressions::ValuedObject] '=' node=[sccharts::Node] '.' expression=ValuedObjectReference ';')
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//SCChart sccharts::State:
	//	annotations+=Annotation*
	//	'scchart' id=ID label=STRING? ('references' referencedScope=[sccharts::State] ('bind' bindings+=Binding (','
	//	bindings+=Binding)*)?
	//	| '{' (declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion? regions+=Region*)? // this rule only works correctly if it is optional
	//	'}')?
	public SCChartElements getSCChartAccess() {
		return pSCChart;
	}
	
	public ParserRule getSCChartRule() {
		return getSCChartAccess().getRule();
	}

	//Region sccharts::Region:
	//	ControlflowRegion
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	////ImportDecl: 
	////    'import' 
	////        (importedType=[sccharts::State|QualifiedName] 
	////        | importedNamespace=QualifiedNameWithWildcard)
	////;
	////
	////QualifiedName:
	////  ID ('.' ID)*;
	////
	////QualifiedNameWithWildcard :
	////    QualifiedName  '.' '*';
	//// ---------------------------------------------------------------------------------------------------
	//State sccharts::State:
	//	annotations+=Annotation* (initial?='initial' final?='final'? | final?='final' initial?='initial'?)?
	//	type=StateType? 'state' id=ID label=STRING? ('references' referencedScope=[sccharts::State] ('bind' bindings+=Binding
	//	(',' bindings+=Binding)*)?
	//	| '{' (declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleControlflowRegion? regions+=Region*)
	//	((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)? regions+=Region*)
	//	'}')?
	//	// The semicolon is mandatory for backtracking!
	//	outgoingTransitions+=Transition* ';'
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Node sccharts::Node:
	//	ReferenceNode | CallNode | DefineNode
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//CallNode sccharts::CallNode:
	//	{sccharts::CallNode} id=ID '=' callReference=[sccharts::DefineNode]
	//	'(' parameters+=ValuedObjectReference? (',' parameters+=ValuedObjectReference)* ')'
	//	';'
	public CallNodeElements getCallNodeAccess() {
		return pCallNode;
	}
	
	public ParserRule getCallNodeRule() {
		return getCallNodeAccess().getRule();
	}

	//DefineNode sccharts::DefineNode:
	//	{sccharts::DefineNode}
	//	'node' id=ID '(' inputs+=Declaration* ')'
	//	'returns' '(' outputs+=Declaration* ')' '{' ((valuedObjects+=[kexpressions::ValuedObject] '=' expressions+=Expression
	//	';')*
	//	| states+=State*)
	//	'}'
	public DefineNodeElements getDefineNodeAccess() {
		return pDefineNode;
	}
	
	public ParserRule getDefineNodeRule() {
		return getDefineNodeAccess().getRule();
	}

	//ReferenceNode sccharts::ReferenceNode:
	//	{sccharts::ReferenceNode} id=ID label=STRING? '=' 'ref' referencedScope=[sccharts::State]
	//	'(' parameters+=ValuedObjectReference? (',' parameters+=ValuedObjectReference)* ')'
	//	';'
	public ReferenceNodeElements getReferenceNodeAccess() {
		return pReferenceNode;
	}
	
	public ParserRule getReferenceNodeRule() {
		return getReferenceNodeAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//LocalAction sccharts::LocalAction:
	//	EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction
	public LocalActionElements getLocalActionAccess() {
		return pLocalAction;
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Transition sccharts::Transition:
	//	annotations+=Annotation*
	//	type=TransitionType targetState=[sccharts::State] immediate?='immediate'?
	//	deferred?='deferred'?
	//	history=HistoryType?
	//	label=STRING? ('with' (delay=INT? trigger=BoolExpression)? ('/' effects+=Effect (';' effects+=Effect)*)?)?
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Binding sccharts::Binding:
	//	annotations+=Annotation*
	//	formal=[kexpressions::ValuedObject]
	//	'to' (actual=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	| value=AnyValue)
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//enum StateType returns sccharts::StateType:
	//	NORMAL='normal' | CONNECTOR='connector' | REFERENCE='reference' | TEXTUAL='textual';
	public StateTypeElements getStateTypeAccess() {
		return eStateType;
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//enum TransitionType returns sccharts::TransitionType:
	//	WEAKABORT='-->' | STRONGABORT='o->' | TERMINATION='>->';
	public TransitionTypeElements getTransitionTypeAccess() {
		return eTransitionType;
	}
	
	public EnumRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	////// chsch: The action rule is used in Kits.xtext for entry-, during-, exitActions, suspensionTrigger 
	////Action returns sccharts::Action:
	////    {sccharts::Action}
	//////    (annotations += Annotation)*
	////	(isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ("/" effects+=Effect ((';') effects+=Effect)*)?; 		
	//EntryAction sccharts::EntryAction:
	//	{sccharts::EntryAction}
	//	//    (annotations += Annotation)*
	//	'entry' trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)? ';'?
	public ActionsGrammarAccess.EntryActionElements getEntryActionAccess() {
		return gaActions.getEntryActionAccess();
	}
	
	public ParserRule getEntryActionRule() {
		return getEntryActionAccess().getRule();
	}

	//DuringAction sccharts::DuringAction:
	//	{sccharts::DuringAction} immediate?='immediate'? 'during' trigger=BoolExpression? ("/" effects+=Effect (';'
	//	effects+=Effect)*)? ';'?
	public ActionsGrammarAccess.DuringActionElements getDuringActionAccess() {
		return gaActions.getDuringActionAccess();
	}
	
	public ParserRule getDuringActionRule() {
		return getDuringActionAccess().getRule();
	}

	//ExitAction sccharts::ExitAction:
	//	{sccharts::ExitAction}
	//	//    (annotations += Annotation)*
	//	'exit' trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)? ';'?
	public ActionsGrammarAccess.ExitActionElements getExitActionAccess() {
		return gaActions.getExitActionAccess();
	}
	
	public ParserRule getExitActionRule() {
		return getExitActionAccess().getRule();
	}

	//SuspendAction sccharts::SuspendAction:
	//	{sccharts::SuspendAction} immediate?='immediate'? weak?='weak'? 'suspend' trigger=BoolExpression? ';'?
	public ActionsGrammarAccess.SuspendActionElements getSuspendActionAccess() {
		return gaActions.getSuspendActionAccess();
	}
	
	public ParserRule getSuspendActionRule() {
		return getSuspendActionAccess().getRule();
	}

	//IterateAction sccharts::IterateAction:
	//	{sccharts::IterateAction} immediate?='immediate'? 'iterate' trigger=BoolExpression? ("/" effects+=Effect (';'
	//	effects+=Effect)*)? ';'?
	public ActionsGrammarAccess.IterateActionElements getIterateActionAccess() {
		return gaActions.getIterateActionAccess();
	}
	
	public ParserRule getIterateActionRule() {
		return getIterateActionAccess().getRule();
	}

	//enum DivOperator returns kexpressions::OperatorType:
	//	DIV=":";
	public ActionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaActions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum HistoryType returns sccharts::HistoryType:
	//	RESET='reset' | SHALLOW='shallow history' | DEEP='history';
	public ActionsGrammarAccess.HistoryTypeElements getHistoryTypeAccess() {
		return gaActions.getHistoryTypeAccess();
	}
	
	public EnumRule getHistoryTypeRule() {
		return getHistoryTypeAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	declarations+=Declaration*
	//	entities+=TestEntity*
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=Expression
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	extern?='extern'?
	//	volatile?='volatile'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	name=ID ('[' cardinalities+=Expression ']')* ('=' initialValue=Expression)? ('combine'
	//	combineOperator=CombineOperator)?
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect keffects::Effect:
	//	Assignment | PostfixEffect | Emission | HostcodeEffect | FunctionCallEffect
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission keffects::Emission:
	//	annotations+=RestrictedAnnotation*
	//	valuedObject=[kexpressions::ValuedObject] ("(" newValue=Expression ")")?
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaKEffects.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1     
	//Assignment keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	operator=AssignOperator expression=Expression
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	operator=PostfixOperator
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=HOSTCODE
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation*
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>'
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" | ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression
	//	| ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression) ('||' subExpressions+=LogicalAndExpression)*)?
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression) ('&&' subExpressions+=BitwiseOrExpression)*)?
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseAndExpression) ('|' subExpressions+=BitwiseAndExpression)*)?
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation) ('&' subExpressions+=CompareOperation)*)?
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression Expression:
	//	ValuedExpression
	//	| NotExpression
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression Expression:
	//	AddExpression
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} (operator=AddOperator subExpressions+=SubExpression) ('+'
	//	subExpressions+=SubExpression)*)?
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} (operator=SubOperator subExpressions+=MultExpression)
	//	('-' subExpressions+=MultExpression)*)?
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=DivExpression) ('*'
	//	subExpressions+=DivExpression)*)?
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} (operator=super::DivOperator
	//	subExpressions+=ModExpression) ('/' subExpressions+=ModExpression)*)?
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator
	//	subExpressions+=AtomicValuedExpression) ('%' subExpressions+=AtomicValuedExpression)*)?
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicExpression Expression:
	//	BoolValue
	//	| ValuedObjectTestExpression
	//	| '(' BoolExpression ')'
	//	| FunctionCall
	//	| TextExpression
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression Expression:
	//	IntValue
	//	| FloatValue
	//	| StringValue
	//	| '(' ValuedExpression ')'
	//	| AtomicExpression
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) '(' subExpressions+=ValuedObjectTestExpression ')'
	//	| ValuedObjectReference
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ('[' indices+=Expression ']')*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>';
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//// Int Value Rule
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//// Float Value Rule
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//// Bool Value Rule
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//// String Value Rule	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//AnyValue Value:
	//	IntValue | FloatValue | BoolValue | StringValue
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//terminal HOSTCODE:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	} 

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyBooleanValueAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restiricted Annotation Rule
	//// The restricted annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//RestrictedAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.RestrictedAnnotationElements getRestrictedAnnotationAccess() {
		return gaAnnotations.getRestrictedAnnotationAccess();
	}
	
	public ParserRule getRestrictedAnnotationRule() {
		return getRestrictedAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	//// e.g.: / ** semantic comment * /
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation Annotation:
	//	'@' name=ExtendedID
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EString (',' values+=EString)*
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// KeyBooleanValueAnnotation    
	//// e.g.: @visible true;
	//KeyBooleanValueAnnotation BooleanAnnotation:
	//	'@' name=ExtendedID value=BOOLEAN
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaAnnotations.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// KeyIntValueAnnotation
	//// e.g.: @minSpace 10;    
	//KeyIntValueAnnotation IntAnnotation:
	//	'@' name=ExtendedID value=Integer
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaAnnotations.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// KeyFloatValueAnnotation
	//// e.g.: @minSpace 10.0;    
	//KeyFloatValueAnnotation FloatAnnotation:
	//	'@' name=ExtendedID value=Floateger
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaAnnotations.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID ("." ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//terminal COMMENT_ANNOTATION:
	//	'/ **'->'* /';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *' !'*'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
