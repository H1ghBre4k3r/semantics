/**
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2013 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
package de.cau.cs.kieler.scgsched.provider;

import de.cau.cs.kieler.scgsched.util.ScgschedAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScgschedItemProviderAdapterFactory extends ScgschedAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public ScgschedItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scgsched.SCGraphSched} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected SCGraphSchedItemProvider scGraphSchedItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scgsched.SCGraphSched}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createSCGraphSchedAdapter() {
		if (scGraphSchedItemProvider == null) {
			scGraphSchedItemProvider = new SCGraphSchedItemProvider(this);
		}

		return scGraphSchedItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scgsched.EmptyExpression} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected EmptyExpressionItemProvider emptyExpressionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scgsched.EmptyExpression}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createEmptyExpressionAdapter() {
		if (emptyExpressionItemProvider == null) {
			emptyExpressionItemProvider = new EmptyExpressionItemProvider(this);
		}

		return emptyExpressionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scgsched.GuardExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuardExpressionItemProvider guardExpressionItemProvider;

				/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scgsched.GuardExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuardExpressionAdapter() {
		if (guardExpressionItemProvider == null) {
			guardExpressionItemProvider = new GuardExpressionItemProvider(this);
		}

		return guardExpressionItemProvider;
	}

				/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scgsched.Schedule} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ScheduleItemProvider scheduleItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scgsched.Schedule}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createScheduleAdapter() {
		if (scheduleItemProvider == null) {
			scheduleItemProvider = new ScheduleItemProvider(this);
		}

		return scheduleItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scgsched.Analysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalysisItemProvider analysisItemProvider;

				/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scgsched.Analysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalysisAdapter() {
		if (analysisItemProvider == null) {
			analysisItemProvider = new AnalysisItemProvider(this);
		}

		return analysisItemProvider;
	}

				/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scgsched.Alteration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlterationItemProvider alterationItemProvider;

				/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scgsched.Alteration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlterationAdapter() {
		if (alterationItemProvider == null) {
			alterationItemProvider = new AlterationItemProvider(this);
		}

		return alterationItemProvider;
	}

				/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scgsched.AssignmentAddition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentAdditionItemProvider assignmentAdditionItemProvider;

				/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scgsched.AssignmentAddition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentAdditionAdapter() {
		if (assignmentAdditionItemProvider == null) {
			assignmentAdditionItemProvider = new AssignmentAdditionItemProvider(this);
		}

		return assignmentAdditionItemProvider;
	}

				/**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scgsched.ConditionalAddition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalAdditionItemProvider conditionalAdditionItemProvider;

				/**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scgsched.ConditionalAddition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalAdditionAdapter() {
		if (conditionalAdditionItemProvider == null) {
			conditionalAdditionItemProvider = new ConditionalAdditionItemProvider(this);
		}

		return conditionalAdditionItemProvider;
	}

				/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

    /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

    /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

    /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

    /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

    /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

    /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void dispose() {
		if (scGraphSchedItemProvider != null) scGraphSchedItemProvider.dispose();
		if (emptyExpressionItemProvider != null) emptyExpressionItemProvider.dispose();
		if (guardExpressionItemProvider != null) guardExpressionItemProvider.dispose();
		if (scheduleItemProvider != null) scheduleItemProvider.dispose();
		if (analysisItemProvider != null) analysisItemProvider.dispose();
		if (alterationItemProvider != null) alterationItemProvider.dispose();
		if (assignmentAdditionItemProvider != null) assignmentAdditionItemProvider.dispose();
		if (conditionalAdditionItemProvider != null) conditionalAdditionItemProvider.dispose();
	}

}
