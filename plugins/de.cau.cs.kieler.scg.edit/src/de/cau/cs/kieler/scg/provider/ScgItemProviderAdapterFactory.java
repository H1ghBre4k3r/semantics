/**
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2013 by
 * + Christian-Albrechts-University of Kiel
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
package de.cau.cs.kieler.scg.provider;

import de.cau.cs.kieler.scg.util.ScgAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScgItemProviderAdapterFactory extends ScgAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ScgItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.SCGraph} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SCGraphItemProvider scGraphItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.SCGraph}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSCGraphAdapter() {
        if (scGraphItemProvider == null) {
            scGraphItemProvider = new SCGraphItemProvider(this);
        }

        return scGraphItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Node} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NodeItemProvider nodeItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Node}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNodeAdapter() {
        if (nodeItemProvider == null) {
            nodeItemProvider = new NodeItemProvider(this);
        }

        return nodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Conditional} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConditionalItemProvider conditionalItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Conditional}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConditionalAdapter() {
        if (conditionalItemProvider == null) {
            conditionalItemProvider = new ConditionalItemProvider(this);
        }

        return conditionalItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Surface} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SurfaceItemProvider surfaceItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Surface}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSurfaceAdapter() {
        if (surfaceItemProvider == null) {
            surfaceItemProvider = new SurfaceItemProvider(this);
        }

        return surfaceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Depth} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DepthItemProvider depthItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Depth}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDepthAdapter() {
        if (depthItemProvider == null) {
            depthItemProvider = new DepthItemProvider(this);
        }

        return depthItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Assignment} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AssignmentItemProvider assignmentItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Assignment}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAssignmentAdapter() {
        if (assignmentItemProvider == null) {
            assignmentItemProvider = new AssignmentItemProvider(this);
        }

        return assignmentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Fork} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ForkItemProvider forkItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Fork}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createForkAdapter() {
        if (forkItemProvider == null) {
            forkItemProvider = new ForkItemProvider(this);
        }

        return forkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Join} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JoinItemProvider joinItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Join}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJoinAdapter() {
        if (joinItemProvider == null) {
            joinItemProvider = new JoinItemProvider(this);
        }

        return joinItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Link} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LinkItemProvider linkItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Link}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLinkAdapter() {
        if (linkItemProvider == null) {
            linkItemProvider = new LinkItemProvider(this);
        }

        return linkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Entry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EntryItemProvider entryItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Entry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEntryAdapter() {
        if (entryItemProvider == null) {
            entryItemProvider = new EntryItemProvider(this);
        }

        return entryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Exit} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExitItemProvider exitItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Exit}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExitAdapter() {
        if (exitItemProvider == null) {
            exitItemProvider = new ExitItemProvider(this);
        }

        return exitItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.ControlFlow} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ControlFlowItemProvider controlFlowItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.ControlFlow}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createControlFlowAdapter() {
        if (controlFlowItemProvider == null) {
            controlFlowItemProvider = new ControlFlowItemProvider(this);
        }

        return controlFlowItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Dependency} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DependencyItemProvider dependencyItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Dependency}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDependencyAdapter() {
        if (dependencyItemProvider == null) {
            dependencyItemProvider = new DependencyItemProvider(this);
        }

        return dependencyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.ConditionalDependency} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConditionalDependencyItemProvider conditionalDependencyItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.ConditionalDependency}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConditionalDependencyAdapter() {
        if (conditionalDependencyItemProvider == null) {
            conditionalDependencyItemProvider = new ConditionalDependencyItemProvider(this);
        }

        return conditionalDependencyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.ThenDependency} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ThenDependencyItemProvider thenDependencyItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.ThenDependency}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createThenDependencyAdapter() {
        if (thenDependencyItemProvider == null) {
            thenDependencyItemProvider = new ThenDependencyItemProvider(this);
        }

        return thenDependencyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.ElseDependency} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElseDependencyItemProvider elseDependencyItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.ElseDependency}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElseDependencyAdapter() {
        if (elseDependencyItemProvider == null) {
            elseDependencyItemProvider = new ElseDependencyItemProvider(this);
        }

        return elseDependencyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.DataDependency} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DataDependencyItemProvider dataDependencyItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.DataDependency}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDataDependencyAdapter() {
        if (dataDependencyItemProvider == null) {
            dataDependencyItemProvider = new DataDependencyItemProvider(this);
        }

        return dataDependencyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.ControlDependency} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ControlDependencyItemProvider controlDependencyItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.ControlDependency}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createControlDependencyAdapter() {
        if (controlDependencyItemProvider == null) {
            controlDependencyItemProvider = new ControlDependencyItemProvider(this);
        }

        return controlDependencyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.AbsoluteWrite_Read} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AbsoluteWrite_ReadItemProvider absoluteWrite_ReadItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.AbsoluteWrite_Read}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAbsoluteWrite_ReadAdapter() {
        if (absoluteWrite_ReadItemProvider == null) {
            absoluteWrite_ReadItemProvider = new AbsoluteWrite_ReadItemProvider(this);
        }

        return absoluteWrite_ReadItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.RelativeWrite_Read} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RelativeWrite_ReadItemProvider relativeWrite_ReadItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.RelativeWrite_Read}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRelativeWrite_ReadAdapter() {
        if (relativeWrite_ReadItemProvider == null) {
            relativeWrite_ReadItemProvider = new RelativeWrite_ReadItemProvider(this);
        }

        return relativeWrite_ReadItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.AbsoluteWrite_RelativeWrite} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AbsoluteWrite_RelativeWriteItemProvider absoluteWrite_RelativeWriteItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.AbsoluteWrite_RelativeWrite}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAbsoluteWrite_RelativeWriteAdapter() {
        if (absoluteWrite_RelativeWriteItemProvider == null) {
            absoluteWrite_RelativeWriteItemProvider = new AbsoluteWrite_RelativeWriteItemProvider(this);
        }

        return absoluteWrite_RelativeWriteItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Write_Write} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Write_WriteItemProvider write_WriteItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Write_Write}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createWrite_WriteAdapter() {
        if (write_WriteItemProvider == null) {
            write_WriteItemProvider = new Write_WriteItemProvider(this);
        }

        return write_WriteItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.BasicBlock} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BasicBlockItemProvider basicBlockItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.BasicBlock}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBasicBlockAdapter() {
        if (basicBlockItemProvider == null) {
            basicBlockItemProvider = new BasicBlockItemProvider(this);
        }

        return basicBlockItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.SchedulingBlock} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SchedulingBlockItemProvider schedulingBlockItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.SchedulingBlock}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSchedulingBlockAdapter() {
        if (schedulingBlockItemProvider == null) {
            schedulingBlockItemProvider = new SchedulingBlockItemProvider(this);
        }

        return schedulingBlockItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Predecessor} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PredecessorItemProvider predecessorItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Predecessor}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPredecessorAdapter() {
        if (predecessorItemProvider == null) {
            predecessorItemProvider = new PredecessorItemProvider(this);
        }

        return predecessorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.ScheduleBlock} instances.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	protected ScheduleBlockItemProvider scheduleBlockItemProvider;

				/**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.ScheduleBlock}.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @generated
     */
	@Override
	public Adapter createScheduleBlockAdapter() {
        if (scheduleBlockItemProvider == null) {
            scheduleBlockItemProvider = new ScheduleBlockItemProvider(this);
        }

        return scheduleBlockItemProvider;
    }

				/**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Schedule} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ScheduleItemProvider scheduleItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Schedule}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createScheduleAdapter() {
        if (scheduleItemProvider == null) {
            scheduleItemProvider = new ScheduleItemProvider(this);
        }

        return scheduleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scg.Guard} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GuardItemProvider guardItemProvider;

                /**
     * This creates an adapter for a {@link de.cau.cs.kieler.scg.Guard}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGuardAdapter() {
        if (guardItemProvider == null) {
            guardItemProvider = new GuardItemProvider(this);
        }

        return guardItemProvider;
    }

                /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (scGraphItemProvider != null) scGraphItemProvider.dispose();
        if (nodeItemProvider != null) nodeItemProvider.dispose();
        if (conditionalItemProvider != null) conditionalItemProvider.dispose();
        if (surfaceItemProvider != null) surfaceItemProvider.dispose();
        if (depthItemProvider != null) depthItemProvider.dispose();
        if (assignmentItemProvider != null) assignmentItemProvider.dispose();
        if (forkItemProvider != null) forkItemProvider.dispose();
        if (joinItemProvider != null) joinItemProvider.dispose();
        if (linkItemProvider != null) linkItemProvider.dispose();
        if (entryItemProvider != null) entryItemProvider.dispose();
        if (exitItemProvider != null) exitItemProvider.dispose();
        if (controlFlowItemProvider != null) controlFlowItemProvider.dispose();
        if (dependencyItemProvider != null) dependencyItemProvider.dispose();
        if (conditionalDependencyItemProvider != null) conditionalDependencyItemProvider.dispose();
        if (thenDependencyItemProvider != null) thenDependencyItemProvider.dispose();
        if (elseDependencyItemProvider != null) elseDependencyItemProvider.dispose();
        if (dataDependencyItemProvider != null) dataDependencyItemProvider.dispose();
        if (controlDependencyItemProvider != null) controlDependencyItemProvider.dispose();
        if (absoluteWrite_ReadItemProvider != null) absoluteWrite_ReadItemProvider.dispose();
        if (relativeWrite_ReadItemProvider != null) relativeWrite_ReadItemProvider.dispose();
        if (absoluteWrite_RelativeWriteItemProvider != null) absoluteWrite_RelativeWriteItemProvider.dispose();
        if (write_WriteItemProvider != null) write_WriteItemProvider.dispose();
        if (basicBlockItemProvider != null) basicBlockItemProvider.dispose();
        if (schedulingBlockItemProvider != null) schedulingBlockItemProvider.dispose();
        if (predecessorItemProvider != null) predecessorItemProvider.dispose();
        if (scheduleBlockItemProvider != null) scheduleBlockItemProvider.dispose();
        if (scheduleItemProvider != null) scheduleItemProvider.dispose();
        if (guardItemProvider != null) guardItemProvider.dispose();
    }

}
