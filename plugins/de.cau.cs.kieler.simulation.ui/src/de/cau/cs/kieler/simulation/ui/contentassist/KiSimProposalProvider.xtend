/*
 * generated by Xtext
 */
package de.cau.cs.kieler.simulation.ui.contentassist

import de.cau.cs.kieler.prom.ExtensionLookupUtil
import de.cau.cs.kieler.simulation.core.DataHandler
import de.cau.cs.kieler.simulation.kisim.DataHandlerConfiguration
import org.eclipse.core.runtime.IConfigurationElement
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import de.cau.cs.kieler.prom.build.AttributeExtensions
import com.google.inject.Inject

/** 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class KiSimProposalProvider extends AbstractKiSimProposalProvider {
    
    @Inject
    extension AttributeExtensions attributeExtensions
    
    /**
     * Adds proposals for classes with ConfigurableAttribute.
     */
    override complete_AttributeMapping(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        // Add proposals of super class
        super.complete_AttributeMapping(model, ruleCall, context, acceptor)
        
        // Add proposals for configurable attributes
        var proposals = <String> newArrayList
        switch(model) {
            DataHandlerConfiguration : {
                // Load the data handler with the corresponding name
                // to add all its configurable attributes
                val name = model.name
                val requiredConfig = [IConfigurationElement elem | elem.getAttribute("name") == name]
                val configurationElements = ExtensionLookupUtil.getConfigurationElements("de.cau.cs.kieler.simulation.dataHandler",
                                                                                          requiredConfig)
                if(!configurationElements.isNullOrEmpty) {
                    val element = configurationElements.get(0)
                    val handler = ExtensionLookupUtil.instantiateClassFromConfiguration(element) as DataHandler
                    if(handler != null) {
                        val attributeNames = handler.configurableAttributes.map[it.name]
                        proposals.addAll(attributeNames)
                    }
                }
            }
        }
     
        // Create and register the completion proposal
        for(proposal : proposals) {
            acceptor.accept(createCompletionProposal(proposal, context))
        }
    }
}
