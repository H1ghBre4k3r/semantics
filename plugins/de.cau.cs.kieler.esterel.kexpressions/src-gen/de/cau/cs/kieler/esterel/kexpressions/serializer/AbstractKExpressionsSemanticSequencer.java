/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.kexpressions.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.PragmaAnnotation;
import de.cau.cs.kieler.annotations.PragmaStringAnnotation;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.annotations.serializer.AnnotationsSemanticSequencer;
import de.cau.cs.kieler.esterel.kexpressions.BooleanValue;
import de.cau.cs.kieler.esterel.kexpressions.ChannelDescription;
import de.cau.cs.kieler.esterel.kexpressions.FloatValue;
import de.cau.cs.kieler.esterel.kexpressions.ISignal;
import de.cau.cs.kieler.esterel.kexpressions.IVariable;
import de.cau.cs.kieler.esterel.kexpressions.Input;
import de.cau.cs.kieler.esterel.kexpressions.InputOutput;
import de.cau.cs.kieler.esterel.kexpressions.IntValue;
import de.cau.cs.kieler.esterel.kexpressions.InterfaceVariableDecl;
import de.cau.cs.kieler.esterel.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.esterel.kexpressions.OperatorExpression;
import de.cau.cs.kieler.esterel.kexpressions.Output;
import de.cau.cs.kieler.esterel.kexpressions.Return;
import de.cau.cs.kieler.esterel.kexpressions.TextExpression;
import de.cau.cs.kieler.esterel.kexpressions.TypeIdentifier;
import de.cau.cs.kieler.esterel.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.esterel.kexpressions.VariableDecl;
import de.cau.cs.kieler.esterel.kexpressions.services.KExpressionsGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractKExpressionsSemanticSequencer extends AnnotationsSemanticSequencer {

	@Inject
	private KExpressionsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.PRAGMA_ANNOTATION:
				sequence_PragmaTagAnnotation(context, (PragmaAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.PRAGMA_STRING_ANNOTATION:
				sequence_PramgaKeyStringValueAnnotation(context, (PragmaStringAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedKeyStringValueAnnotationRule()) {
					sequence_RestrictedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()) {
					sequence_RestrictedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case KExpressionsPackage.CHANNEL_DESCRIPTION:
				sequence_ChannelDescription(context, (ChannelDescription) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.ISIGNAL:
				sequence_ISignal(context, (ISignal) semanticObject); 
				return; 
			case KExpressionsPackage.IVARIABLE:
				sequence_IVariable(context, (IVariable) semanticObject); 
				return; 
			case KExpressionsPackage.INPUT:
				sequence_InterfaceSignalDecl(context, (Input) semanticObject); 
				return; 
			case KExpressionsPackage.INPUT_OUTPUT:
				sequence_InterfaceSignalDecl(context, (InputOutput) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.INTERFACE_VARIABLE_DECL:
				sequence_InterfaceVariableDecl(context, (InterfaceVariableDecl) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()) {
					sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression_OperatorExpression_0_1_0(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBooleanExpressionRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()) {
					sequence_AndExpression_CompareOperation_NotExpression_OrExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.OUTPUT:
				sequence_InterfaceSignalDecl(context, (Output) semanticObject); 
				return; 
			case KExpressionsPackage.RETURN:
				sequence_InterfaceSignalDecl(context, (Return) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.TYPE_IDENTIFIER:
				sequence_TypeIdentifier(context, (TypeIdentifier) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.VARIABLE_DECL:
				sequence_VariableDecl(context, (VariableDecl) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Root returns OperatorExpression
	 *     Expression returns OperatorExpression
	 *     CompareOperation.OperatorExpression_0_1_0 returns OperatorExpression
	 *     NotOrValuedExpression returns OperatorExpression
	 *     ValuedExpression returns OperatorExpression
	 *     AddExpression returns OperatorExpression
	 *     AddExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SubExpression returns OperatorExpression
	 *     SubExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultExpression returns OperatorExpression
	 *     MultExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     DivExpression returns OperatorExpression
	 *     DivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ModExpression returns OperatorExpression
	 *     ModExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     NegExpression returns OperatorExpression
	 *     AtomicValuedExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 operator=OrOperator subExpressions+=AndExpression) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 operator=AndOperator subExpressions+=CompareOperation) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_0_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 operator=AddOperator subExpressions+=SubExpression) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 operator=SubOperator subExpressions+=MultExpression) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 operator=MultOperator subExpressions+=DivExpression) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=DivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=ModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (operator=PreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=ValueTestOperator subExpressions+=ValuedObjectReference)
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression_OperatorExpression_0_1_0(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns OperatorExpression
	 *     OrExpression returns OperatorExpression
	 *     OrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AndExpression returns OperatorExpression
	 *     AndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     CompareOperation returns OperatorExpression
	 *     NotExpression returns OperatorExpression
	 *     AtomicExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 operator=OrOperator subExpressions+=AndExpression) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 operator=AndOperator subExpressions+=CompareOperation) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_0_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (operator=PreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=ValueTestOperator subExpressions+=ValuedObjectReference)
	 *     )
	 */
	protected void sequence_AndExpression_CompareOperation_NotExpression_OrExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns BooleanValue
	 *     Expression returns BooleanValue
	 *     BooleanExpression returns BooleanValue
	 *     OrExpression returns BooleanValue
	 *     OrExpression.OperatorExpression_1_0 returns BooleanValue
	 *     AndExpression returns BooleanValue
	 *     AndExpression.OperatorExpression_1_0 returns BooleanValue
	 *     CompareOperation returns BooleanValue
	 *     CompareOperation.OperatorExpression_0_1_0 returns BooleanValue
	 *     NotOrValuedExpression returns BooleanValue
	 *     NotExpression returns BooleanValue
	 *     ValuedExpression returns BooleanValue
	 *     AddExpression returns BooleanValue
	 *     AddExpression.OperatorExpression_1_0 returns BooleanValue
	 *     SubExpression returns BooleanValue
	 *     SubExpression.OperatorExpression_1_0 returns BooleanValue
	 *     MultExpression returns BooleanValue
	 *     MultExpression.OperatorExpression_1_0 returns BooleanValue
	 *     DivExpression returns BooleanValue
	 *     DivExpression.OperatorExpression_1_0 returns BooleanValue
	 *     ModExpression returns BooleanValue
	 *     ModExpression.OperatorExpression_1_0 returns BooleanValue
	 *     NegExpression returns BooleanValue
	 *     AtomicExpression returns BooleanValue
	 *     AtomicValuedExpression returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChannelDescription returns ChannelDescription
	 *
	 * Constraint:
	 *     (type=TypeIdentifier | type=TypeIdentifier | (expression=Expression type=TypeIdentifier))
	 */
	protected void sequence_ChannelDescription(ISerializationContext context, ChannelDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns FloatValue
	 *     Expression returns FloatValue
	 *     CompareOperation.OperatorExpression_0_1_0 returns FloatValue
	 *     NotOrValuedExpression returns FloatValue
	 *     ValuedExpression returns FloatValue
	 *     AddExpression returns FloatValue
	 *     AddExpression.OperatorExpression_1_0 returns FloatValue
	 *     SubExpression returns FloatValue
	 *     SubExpression.OperatorExpression_1_0 returns FloatValue
	 *     MultExpression returns FloatValue
	 *     MultExpression.OperatorExpression_1_0 returns FloatValue
	 *     DivExpression returns FloatValue
	 *     DivExpression.OperatorExpression_1_0 returns FloatValue
	 *     ModExpression returns FloatValue
	 *     ModExpression.OperatorExpression_1_0 returns FloatValue
	 *     NegExpression returns FloatValue
	 *     AtomicValuedExpression returns FloatValue
	 *     FloatValue returns FloatValue
	 *
	 * Constraint:
	 *     value=FLOAT
	 */
	protected void sequence_FloatValue(ISerializationContext context, FloatValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.FLOAT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.FLOAT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ISignal returns ISignal
	 *
	 * Constraint:
	 *     (name=ID channelDescr=ChannelDescription?)
	 */
	protected void sequence_ISignal(ISerializationContext context, ISignal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IVariable returns IVariable
	 *
	 * Constraint:
	 *     (name=ID expression=Expression?)
	 */
	protected void sequence_IVariable(ISerializationContext context, IVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns IntValue
	 *     Expression returns IntValue
	 *     CompareOperation.OperatorExpression_0_1_0 returns IntValue
	 *     NotOrValuedExpression returns IntValue
	 *     ValuedExpression returns IntValue
	 *     AddExpression returns IntValue
	 *     AddExpression.OperatorExpression_1_0 returns IntValue
	 *     SubExpression returns IntValue
	 *     SubExpression.OperatorExpression_1_0 returns IntValue
	 *     MultExpression returns IntValue
	 *     MultExpression.OperatorExpression_1_0 returns IntValue
	 *     DivExpression returns IntValue
	 *     DivExpression.OperatorExpression_1_0 returns IntValue
	 *     ModExpression returns IntValue
	 *     ModExpression.OperatorExpression_1_0 returns IntValue
	 *     NegExpression returns IntValue
	 *     AtomicValuedExpression returns IntValue
	 *     IntValue returns IntValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntValue(ISerializationContext context, IntValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.INT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.INT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Input
	 *     InterfaceDeclaration returns Input
	 *     InterfaceSignalDecl returns Input
	 *
	 * Constraint:
	 *     (signals+=ISignal signals+=ISignal*)
	 */
	protected void sequence_InterfaceSignalDecl(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns InputOutput
	 *     InterfaceDeclaration returns InputOutput
	 *     InterfaceSignalDecl returns InputOutput
	 *
	 * Constraint:
	 *     (signals+=ISignal signals+=ISignal*)
	 */
	protected void sequence_InterfaceSignalDecl(ISerializationContext context, InputOutput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Output
	 *     InterfaceDeclaration returns Output
	 *     InterfaceSignalDecl returns Output
	 *
	 * Constraint:
	 *     (signals+=ISignal signals+=ISignal*)
	 */
	protected void sequence_InterfaceSignalDecl(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Return
	 *     InterfaceDeclaration returns Return
	 *     InterfaceSignalDecl returns Return
	 *
	 * Constraint:
	 *     (signals+=ISignal signals+=ISignal*)
	 */
	protected void sequence_InterfaceSignalDecl(ISerializationContext context, Return semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns InterfaceVariableDecl
	 *     InterfaceDeclaration returns InterfaceVariableDecl
	 *     InterfaceVariableDecl returns InterfaceVariableDecl
	 *
	 * Constraint:
	 *     (varDecls+=VariableDecl varDecls+=VariableDecl*)
	 */
	protected void sequence_InterfaceVariableDecl(ISerializationContext context, InterfaceVariableDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns TextExpression
	 *     Expression returns TextExpression
	 *     BooleanExpression returns TextExpression
	 *     OrExpression returns TextExpression
	 *     OrExpression.OperatorExpression_1_0 returns TextExpression
	 *     AndExpression returns TextExpression
	 *     AndExpression.OperatorExpression_1_0 returns TextExpression
	 *     CompareOperation returns TextExpression
	 *     CompareOperation.OperatorExpression_0_1_0 returns TextExpression
	 *     NotOrValuedExpression returns TextExpression
	 *     NotExpression returns TextExpression
	 *     ValuedExpression returns TextExpression
	 *     AddExpression returns TextExpression
	 *     AddExpression.OperatorExpression_1_0 returns TextExpression
	 *     SubExpression returns TextExpression
	 *     SubExpression.OperatorExpression_1_0 returns TextExpression
	 *     MultExpression returns TextExpression
	 *     MultExpression.OperatorExpression_1_0 returns TextExpression
	 *     DivExpression returns TextExpression
	 *     DivExpression.OperatorExpression_1_0 returns TextExpression
	 *     ModExpression returns TextExpression
	 *     ModExpression.OperatorExpression_1_0 returns TextExpression
	 *     NegExpression returns TextExpression
	 *     AtomicExpression returns TextExpression
	 *     AtomicValuedExpression returns TextExpression
	 *     TextExpression returns TextExpression
	 *
	 * Constraint:
	 *     (code=HOSTCODE type=ID?)
	 */
	protected void sequence_TextExpression(ISerializationContext context, TextExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeIdentifier returns TypeIdentifier
	 *
	 * Constraint:
	 *     (type=ValueType | typeID=ID | ((type=ValueType | typeID=ID) operator=CombineOperator))
	 */
	protected void sequence_TypeIdentifier(ISerializationContext context, TypeIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns ValuedObjectReference
	 *     Expression returns ValuedObjectReference
	 *     BooleanExpression returns ValuedObjectReference
	 *     OrExpression returns ValuedObjectReference
	 *     OrExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     AndExpression returns ValuedObjectReference
	 *     AndExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     CompareOperation returns ValuedObjectReference
	 *     CompareOperation.OperatorExpression_0_1_0 returns ValuedObjectReference
	 *     NotOrValuedExpression returns ValuedObjectReference
	 *     NotExpression returns ValuedObjectReference
	 *     ValuedExpression returns ValuedObjectReference
	 *     AddExpression returns ValuedObjectReference
	 *     AddExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     SubExpression returns ValuedObjectReference
	 *     SubExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     MultExpression returns ValuedObjectReference
	 *     MultExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     DivExpression returns ValuedObjectReference
	 *     DivExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     ModExpression returns ValuedObjectReference
	 *     ModExpression.OperatorExpression_1_0 returns ValuedObjectReference
	 *     NegExpression returns ValuedObjectReference
	 *     AtomicExpression returns ValuedObjectReference
	 *     AtomicValuedExpression returns ValuedObjectReference
	 *     ValuedObjectTestExpression returns ValuedObjectReference
	 *     ValuedObjectReference returns ValuedObjectReference
	 *
	 * Constraint:
	 *     valuedObject=[ValuedObject|ID]
	 */
	protected void sequence_ValuedObjectReference(ISerializationContext context, ValuedObjectReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectIDTerminalRuleCall_0_1(), semanticObject.getValuedObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValuedObjectTestExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     ((operator=PreOperator subExpressions+=ValuedObjectTestExpression) | (operator=ValueTestOperator subExpressions+=ValuedObjectReference))
	 */
	protected void sequence_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDecl returns VariableDecl
	 *
	 * Constraint:
	 *     (variables+=IVariable variables+=IVariable* type=TypeIdentifier)
	 */
	protected void sequence_VariableDecl(ISerializationContext context, VariableDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
