/**
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.cview.model.cViewModel.impl;

import de.cau.cs.kieler.cview.model.cViewModel.CViewModelPackage;
import de.cau.cs.kieler.cview.model.cViewModel.Component;
import de.cau.cs.kieler.cview.model.cViewModel.ComponentType;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getParent <em>Parent</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getType <em>Type</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getCustomTypeID <em>Custom Type ID</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getLanguageID <em>Language ID</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getReference <em>Reference</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getReferenceUnresolved <em>Reference Unresolved</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getLocation <em>Location</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getReferenceLine <em>Reference Line</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getChildren <em>Children</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getTooltip <em>Tooltip</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#getRawdata <em>Rawdata</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#isFiltered <em>Filtered</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ComponentImpl#isHide <em>Hide</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentImpl extends MinimalEObjectImpl.Container implements Component
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParent() <em>Parent</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected Component parent;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final ComponentType TYPE_EDEFAULT = ComponentType.DIR;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected ComponentType type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getCustomTypeID() <em>Custom Type ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCustomTypeID()
   * @generated
   * @ordered
   */
  protected static final String CUSTOM_TYPE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCustomTypeID() <em>Custom Type ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCustomTypeID()
   * @generated
   * @ordered
   */
  protected String customTypeID = CUSTOM_TYPE_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getLanguageID() <em>Language ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLanguageID()
   * @generated
   * @ordered
   */
  protected static final String LANGUAGE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLanguageID() <em>Language ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLanguageID()
   * @generated
   * @ordered
   */
  protected String languageID = LANGUAGE_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected Component reference;

  /**
   * The default value of the '{@link #getReferenceUnresolved() <em>Reference Unresolved</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferenceUnresolved()
   * @generated
   * @ordered
   */
  protected static final String REFERENCE_UNRESOLVED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getReferenceUnresolved() <em>Reference Unresolved</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferenceUnresolved()
   * @generated
   * @ordered
   */
  protected String referenceUnresolved = REFERENCE_UNRESOLVED_EDEFAULT;

  /**
   * The default value of the '{@link #getLocation() <em>Location</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocation()
   * @generated
   * @ordered
   */
  protected static final String LOCATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLocation() <em>Location</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocation()
   * @generated
   * @ordered
   */
  protected String location = LOCATION_EDEFAULT;

  /**
   * The default value of the '{@link #getReferenceLine() <em>Reference Line</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferenceLine()
   * @generated
   * @ordered
   */
  protected static final int REFERENCE_LINE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getReferenceLine() <em>Reference Line</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferenceLine()
   * @generated
   * @ordered
   */
  protected int referenceLine = REFERENCE_LINE_EDEFAULT;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected EList<Component> children;

  /**
   * The default value of the '{@link #getTooltip() <em>Tooltip</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTooltip()
   * @generated
   * @ordered
   */
  protected static final String TOOLTIP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTooltip() <em>Tooltip</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTooltip()
   * @generated
   * @ordered
   */
  protected String tooltip = TOOLTIP_EDEFAULT;

  /**
   * The default value of the '{@link #getRawdata() <em>Rawdata</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRawdata()
   * @generated
   * @ordered
   */
  protected static final String RAWDATA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRawdata() <em>Rawdata</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRawdata()
   * @generated
   * @ordered
   */
  protected String rawdata = RAWDATA_EDEFAULT;

  /**
   * The default value of the '{@link #isFiltered() <em>Filtered</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFiltered()
   * @generated
   * @ordered
   */
  protected static final boolean FILTERED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFiltered() <em>Filtered</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFiltered()
   * @generated
   * @ordered
   */
  protected boolean filtered = FILTERED_EDEFAULT;

  /**
   * The default value of the '{@link #isHide() <em>Hide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHide()
   * @generated
   * @ordered
   */
  protected static final boolean HIDE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHide() <em>Hide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHide()
   * @generated
   * @ordered
   */
  protected boolean hide = HIDE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CViewModelPackage.Literals.COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component getParent()
  {
    if (parent != null && parent.eIsProxy())
    {
      InternalEObject oldParent = (InternalEObject)parent;
      parent = (Component)eResolveProxy(oldParent);
      if (parent != oldParent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CViewModelPackage.COMPONENT__PARENT, oldParent, parent));
      }
    }
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component basicGetParent()
  {
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParent(Component newParent)
  {
    Component oldParent = parent;
    parent = newParent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__PARENT, oldParent, parent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(ComponentType newType)
  {
    ComponentType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCustomTypeID()
  {
    return customTypeID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCustomTypeID(String newCustomTypeID)
  {
    String oldCustomTypeID = customTypeID;
    customTypeID = newCustomTypeID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__CUSTOM_TYPE_ID, oldCustomTypeID, customTypeID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLanguageID()
  {
    return languageID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLanguageID(String newLanguageID)
  {
    String oldLanguageID = languageID;
    languageID = newLanguageID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__LANGUAGE_ID, oldLanguageID, languageID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component getReference()
  {
    if (reference != null && reference.eIsProxy())
    {
      InternalEObject oldReference = (InternalEObject)reference;
      reference = (Component)eResolveProxy(oldReference);
      if (reference != oldReference)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CViewModelPackage.COMPONENT__REFERENCE, oldReference, reference));
      }
    }
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component basicGetReference()
  {
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReference(Component newReference)
  {
    Component oldReference = reference;
    reference = newReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__REFERENCE, oldReference, reference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getReferenceUnresolved()
  {
    return referenceUnresolved;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReferenceUnresolved(String newReferenceUnresolved)
  {
    String oldReferenceUnresolved = referenceUnresolved;
    referenceUnresolved = newReferenceUnresolved;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__REFERENCE_UNRESOLVED, oldReferenceUnresolved, referenceUnresolved));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLocation()
  {
    return location;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLocation(String newLocation)
  {
    String oldLocation = location;
    location = newLocation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__LOCATION, oldLocation, location));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getReferenceLine()
  {
    return referenceLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReferenceLine(int newReferenceLine)
  {
    int oldReferenceLine = referenceLine;
    referenceLine = newReferenceLine;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__REFERENCE_LINE, oldReferenceLine, referenceLine));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getChildren()
  {
    if (children == null)
    {
      children = new EObjectResolvingEList<Component>(Component.class, this, CViewModelPackage.COMPONENT__CHILDREN);
    }
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTooltip()
  {
    return tooltip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTooltip(String newTooltip)
  {
    String oldTooltip = tooltip;
    tooltip = newTooltip;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__TOOLTIP, oldTooltip, tooltip));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRawdata()
  {
    return rawdata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRawdata(String newRawdata)
  {
    String oldRawdata = rawdata;
    rawdata = newRawdata;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__RAWDATA, oldRawdata, rawdata));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFiltered()
  {
    return filtered;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFiltered(boolean newFiltered)
  {
    boolean oldFiltered = filtered;
    filtered = newFiltered;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__FILTERED, oldFiltered, filtered));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHide()
  {
    return hide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHide(boolean newHide)
  {
    boolean oldHide = hide;
    hide = newHide;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.COMPONENT__HIDE, oldHide, hide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CViewModelPackage.COMPONENT__NAME:
        return getName();
      case CViewModelPackage.COMPONENT__PARENT:
        if (resolve) return getParent();
        return basicGetParent();
      case CViewModelPackage.COMPONENT__TYPE:
        return getType();
      case CViewModelPackage.COMPONENT__CUSTOM_TYPE_ID:
        return getCustomTypeID();
      case CViewModelPackage.COMPONENT__LANGUAGE_ID:
        return getLanguageID();
      case CViewModelPackage.COMPONENT__REFERENCE:
        if (resolve) return getReference();
        return basicGetReference();
      case CViewModelPackage.COMPONENT__REFERENCE_UNRESOLVED:
        return getReferenceUnresolved();
      case CViewModelPackage.COMPONENT__LOCATION:
        return getLocation();
      case CViewModelPackage.COMPONENT__REFERENCE_LINE:
        return getReferenceLine();
      case CViewModelPackage.COMPONENT__CHILDREN:
        return getChildren();
      case CViewModelPackage.COMPONENT__TOOLTIP:
        return getTooltip();
      case CViewModelPackage.COMPONENT__RAWDATA:
        return getRawdata();
      case CViewModelPackage.COMPONENT__FILTERED:
        return isFiltered();
      case CViewModelPackage.COMPONENT__HIDE:
        return isHide();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CViewModelPackage.COMPONENT__NAME:
        setName((String)newValue);
        return;
      case CViewModelPackage.COMPONENT__PARENT:
        setParent((Component)newValue);
        return;
      case CViewModelPackage.COMPONENT__TYPE:
        setType((ComponentType)newValue);
        return;
      case CViewModelPackage.COMPONENT__CUSTOM_TYPE_ID:
        setCustomTypeID((String)newValue);
        return;
      case CViewModelPackage.COMPONENT__LANGUAGE_ID:
        setLanguageID((String)newValue);
        return;
      case CViewModelPackage.COMPONENT__REFERENCE:
        setReference((Component)newValue);
        return;
      case CViewModelPackage.COMPONENT__REFERENCE_UNRESOLVED:
        setReferenceUnresolved((String)newValue);
        return;
      case CViewModelPackage.COMPONENT__LOCATION:
        setLocation((String)newValue);
        return;
      case CViewModelPackage.COMPONENT__REFERENCE_LINE:
        setReferenceLine((Integer)newValue);
        return;
      case CViewModelPackage.COMPONENT__CHILDREN:
        getChildren().clear();
        getChildren().addAll((Collection<? extends Component>)newValue);
        return;
      case CViewModelPackage.COMPONENT__TOOLTIP:
        setTooltip((String)newValue);
        return;
      case CViewModelPackage.COMPONENT__RAWDATA:
        setRawdata((String)newValue);
        return;
      case CViewModelPackage.COMPONENT__FILTERED:
        setFiltered((Boolean)newValue);
        return;
      case CViewModelPackage.COMPONENT__HIDE:
        setHide((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CViewModelPackage.COMPONENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__PARENT:
        setParent((Component)null);
        return;
      case CViewModelPackage.COMPONENT__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__CUSTOM_TYPE_ID:
        setCustomTypeID(CUSTOM_TYPE_ID_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__LANGUAGE_ID:
        setLanguageID(LANGUAGE_ID_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__REFERENCE:
        setReference((Component)null);
        return;
      case CViewModelPackage.COMPONENT__REFERENCE_UNRESOLVED:
        setReferenceUnresolved(REFERENCE_UNRESOLVED_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__LOCATION:
        setLocation(LOCATION_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__REFERENCE_LINE:
        setReferenceLine(REFERENCE_LINE_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__CHILDREN:
        getChildren().clear();
        return;
      case CViewModelPackage.COMPONENT__TOOLTIP:
        setTooltip(TOOLTIP_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__RAWDATA:
        setRawdata(RAWDATA_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__FILTERED:
        setFiltered(FILTERED_EDEFAULT);
        return;
      case CViewModelPackage.COMPONENT__HIDE:
        setHide(HIDE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CViewModelPackage.COMPONENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case CViewModelPackage.COMPONENT__PARENT:
        return parent != null;
      case CViewModelPackage.COMPONENT__TYPE:
        return type != TYPE_EDEFAULT;
      case CViewModelPackage.COMPONENT__CUSTOM_TYPE_ID:
        return CUSTOM_TYPE_ID_EDEFAULT == null ? customTypeID != null : !CUSTOM_TYPE_ID_EDEFAULT.equals(customTypeID);
      case CViewModelPackage.COMPONENT__LANGUAGE_ID:
        return LANGUAGE_ID_EDEFAULT == null ? languageID != null : !LANGUAGE_ID_EDEFAULT.equals(languageID);
      case CViewModelPackage.COMPONENT__REFERENCE:
        return reference != null;
      case CViewModelPackage.COMPONENT__REFERENCE_UNRESOLVED:
        return REFERENCE_UNRESOLVED_EDEFAULT == null ? referenceUnresolved != null : !REFERENCE_UNRESOLVED_EDEFAULT.equals(referenceUnresolved);
      case CViewModelPackage.COMPONENT__LOCATION:
        return LOCATION_EDEFAULT == null ? location != null : !LOCATION_EDEFAULT.equals(location);
      case CViewModelPackage.COMPONENT__REFERENCE_LINE:
        return referenceLine != REFERENCE_LINE_EDEFAULT;
      case CViewModelPackage.COMPONENT__CHILDREN:
        return children != null && !children.isEmpty();
      case CViewModelPackage.COMPONENT__TOOLTIP:
        return TOOLTIP_EDEFAULT == null ? tooltip != null : !TOOLTIP_EDEFAULT.equals(tooltip);
      case CViewModelPackage.COMPONENT__RAWDATA:
        return RAWDATA_EDEFAULT == null ? rawdata != null : !RAWDATA_EDEFAULT.equals(rawdata);
      case CViewModelPackage.COMPONENT__FILTERED:
        return filtered != FILTERED_EDEFAULT;
      case CViewModelPackage.COMPONENT__HIDE:
        return hide != HIDE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", type: ");
    result.append(type);
    result.append(", customTypeID: ");
    result.append(customTypeID);
    result.append(", languageID: ");
    result.append(languageID);
    result.append(", referenceUnresolved: ");
    result.append(referenceUnresolved);
    result.append(", location: ");
    result.append(location);
    result.append(", referenceLine: ");
    result.append(referenceLine);
    result.append(", tooltip: ");
    result.append(tooltip);
    result.append(", rawdata: ");
    result.append(rawdata);
    result.append(", filtered: ");
    result.append(filtered);
    result.append(", hide: ");
    result.append(hide);
    result.append(')');
    return result.toString();
  }

} //ComponentImpl
