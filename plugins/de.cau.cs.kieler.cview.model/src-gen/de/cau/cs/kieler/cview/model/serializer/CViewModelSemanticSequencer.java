/*
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.cview.model.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.cview.model.cViewModel.CViewModel;
import de.cau.cs.kieler.cview.model.cViewModel.CViewModelPackage;
import de.cau.cs.kieler.cview.model.cViewModel.Component;
import de.cau.cs.kieler.cview.model.cViewModel.File;
import de.cau.cs.kieler.cview.model.cViewModel.Folder;
import de.cau.cs.kieler.cview.model.services.CViewModelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class CViewModelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CViewModelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CViewModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CViewModelPackage.CVIEW_MODEL:
				sequence_CViewModel(context, (CViewModel) semanticObject); 
				return; 
			case CViewModelPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case CViewModelPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case CViewModelPackage.FOLDER:
				sequence_Folder(context, (Folder) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CViewModel returns CViewModel
	 *
	 * Constraint:
	 *     (folders+=Folder* files+=File* components+=Component*)
	 */
	protected void sequence_CViewModel(ISerializationContext context, CViewModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (name=ID parent=[Component|ID]? type=ComponentType referenceFile=[File|ID]? referenceLine=INT?)
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     File returns File
	 *
	 * Constraint:
	 *     (name=ID parent=[Folder|ID]? location=STRING)
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Folder returns Folder
	 *
	 * Constraint:
	 *     (name=ID parent=[Folder|ID]? project?='project' location=STRING)
	 */
	protected void sequence_Folder(ISerializationContext context, Folder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
