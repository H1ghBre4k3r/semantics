/*
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.cview.model.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.cview.model.cViewModel.CViewModel;
import de.cau.cs.kieler.cview.model.cViewModel.CViewModelPackage;
import de.cau.cs.kieler.cview.model.cViewModel.Component;
import de.cau.cs.kieler.cview.model.cViewModel.Connection;
import de.cau.cs.kieler.cview.model.services.CViewModelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CViewModelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CViewModelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CViewModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CViewModelPackage.CVIEW_MODEL:
				sequence_CViewModel(context, (CViewModel) semanticObject); 
				return; 
			case CViewModelPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case CViewModelPackage.CONNECTION:
				sequence_Connection(context, (Connection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CViewModel returns CViewModel
	 *
	 * Constraint:
	 *     (components+=Component* connections+=Connection*)
	 */
	protected void sequence_CViewModel(ISerializationContext context, CViewModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         parent=[Component|ID]? 
	 *         type=ComponentType 
	 *         customTypeID=STRING 
	 *         languageID=STRING 
	 *         reference=[Component|ID] 
	 *         referenceUnresolved=STRING 
	 *         location=STRING 
	 *         referenceLine=INT? 
	 *         children+=[Component|ID]* 
	 *         tooltip=STRING 
	 *         rawdata=STRING 
	 *         filtered?='filtered'?
	 *     )
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connection returns Connection
	 *
	 * Constraint:
	 *     (
	 *         src=[Component|ID] 
	 *         dst=[Component|ID] 
	 *         label=STRING 
	 *         type=STRING 
	 *         color=STRING 
	 *         tooltip=STRING
	 *     )
	 */
	protected void sequence_Connection(ISerializationContext context, Connection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CViewModelPackage.Literals.CONNECTION__SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CViewModelPackage.Literals.CONNECTION__SRC));
			if (transientValues.isValueTransient(semanticObject, CViewModelPackage.Literals.CONNECTION__DST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CViewModelPackage.Literals.CONNECTION__DST));
			if (transientValues.isValueTransient(semanticObject, CViewModelPackage.Literals.CONNECTION__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CViewModelPackage.Literals.CONNECTION__LABEL));
			if (transientValues.isValueTransient(semanticObject, CViewModelPackage.Literals.CONNECTION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CViewModelPackage.Literals.CONNECTION__TYPE));
			if (transientValues.isValueTransient(semanticObject, CViewModelPackage.Literals.CONNECTION__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CViewModelPackage.Literals.CONNECTION__COLOR));
			if (transientValues.isValueTransient(semanticObject, CViewModelPackage.Literals.CONNECTION__TOOLTIP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CViewModelPackage.Literals.CONNECTION__TOOLTIP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnectionAccess().getSrcComponentIDTerminalRuleCall_1_0_1(), semanticObject.getSrc());
		feeder.accept(grammarAccess.getConnectionAccess().getDstComponentIDTerminalRuleCall_3_0_1(), semanticObject.getDst());
		feeder.accept(grammarAccess.getConnectionAccess().getLabelSTRINGTerminalRuleCall_5_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getConnectionAccess().getTypeSTRINGTerminalRuleCall_7_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getConnectionAccess().getColorSTRINGTerminalRuleCall_9_0(), semanticObject.getColor());
		feeder.accept(grammarAccess.getConnectionAccess().getTooltipSTRINGTerminalRuleCall_11_0(), semanticObject.getTooltip());
		feeder.finish();
	}
	
	
}
