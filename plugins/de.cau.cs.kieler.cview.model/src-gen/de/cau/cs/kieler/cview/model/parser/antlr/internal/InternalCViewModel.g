/*
 * generated by Xtext 2.10.0
 */
grammar InternalCViewModel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.cau.cs.kieler.cview.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.cview.model.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.cview.model.services.CViewModelGrammarAccess;

}

@parser::members {

 	private CViewModelGrammarAccess grammarAccess;

    public InternalCViewModelParser(TokenStream input, CViewModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CViewModel";
   	}

   	@Override
   	protected CViewModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCViewModel
entryRuleCViewModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCViewModelRule()); }
	iv_ruleCViewModel=ruleCViewModel
	{ $current=$iv_ruleCViewModel.current; }
	EOF;

// Rule CViewModel
ruleCViewModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCViewModelAccess().getComponentsComponentParserRuleCall_0_0());
				}
				lv_components_0_0=ruleComponent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCViewModelRule());
					}
					add(
						$current,
						"components",
						lv_components_0_0,
						"de.cau.cs.kieler.cview.model.CViewModel.Component");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getCViewModelAccess().getSemicolonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCViewModelAccess().getConnectionsConnectionParserRuleCall_2_0());
				}
				lv_connections_2_0=ruleConnection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCViewModelRule());
					}
					add(
						$current,
						"connections",
						lv_connections_2_0,
						"de.cau.cs.kieler.cview.model.CViewModel.Connection");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	iv_ruleComponent=ruleComponent
	{ $current=$iv_ruleComponent.current; }
	EOF;

// Rule Component
ruleComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Component'
		{
			newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getComponentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='parent'
			{
				newLeafNode(otherlv_2, grammarAccess.getComponentAccess().getParentKeyword_2_0());
			}
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getComponentAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComponentRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getComponentAccess().getParentComponentCrossReference_2_2_0());
					}
				)
			)
		)?
		otherlv_5='type'
		{
			newLeafNode(otherlv_5, grammarAccess.getComponentAccess().getTypeKeyword_3());
		}
		otherlv_6='='
		{
			newLeafNode(otherlv_6, grammarAccess.getComponentAccess().getEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentAccess().getTypeComponentTypeEnumRuleCall_5_0());
				}
				lv_type_7_0=ruleComponentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentRule());
					}
					set(
						$current,
						"type",
						lv_type_7_0,
						"de.cau.cs.kieler.cview.model.CViewModel.ComponentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='location'
		{
			newLeafNode(otherlv_8, grammarAccess.getComponentAccess().getLocationKeyword_6());
		}
		otherlv_9='='
		{
			newLeafNode(otherlv_9, grammarAccess.getComponentAccess().getEqualsSignKeyword_7());
		}
		(
			(
				lv_location_10_0=RULE_STRING
				{
					newLeafNode(lv_location_10_0, grammarAccess.getComponentAccess().getLocationSTRINGTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentRule());
					}
					setWithLastConsumed(
						$current,
						"location",
						lv_location_10_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_11='referenceLine'
			{
				newLeafNode(otherlv_11, grammarAccess.getComponentAccess().getReferenceLineKeyword_9_0());
			}
			otherlv_12='='
			{
				newLeafNode(otherlv_12, grammarAccess.getComponentAccess().getEqualsSignKeyword_9_1());
			}
			(
				(
					lv_referenceLine_13_0=RULE_INT
					{
						newLeafNode(lv_referenceLine_13_0, grammarAccess.getComponentAccess().getReferenceLineINTTerminalRuleCall_9_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComponentRule());
						}
						setWithLastConsumed(
							$current,
							"referenceLine",
							lv_referenceLine_13_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_14='children'
			{
				newLeafNode(otherlv_14, grammarAccess.getComponentAccess().getChildrenKeyword_10_0());
			}
			otherlv_15='='
			{
				newLeafNode(otherlv_15, grammarAccess.getComponentAccess().getEqualsSignKeyword_10_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComponentRule());
						}
					}
					otherlv_16=RULE_ID
					{
						newLeafNode(otherlv_16, grammarAccess.getComponentAccess().getChildrenComponentCrossReference_10_2_0());
					}
				)
			)*
		)?
		otherlv_17='tooltip'
		{
			newLeafNode(otherlv_17, grammarAccess.getComponentAccess().getTooltipKeyword_11());
		}
		(
			(
				lv_tooltip_18_0=RULE_STRING
				{
					newLeafNode(lv_tooltip_18_0, grammarAccess.getComponentAccess().getTooltipSTRINGTerminalRuleCall_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentRule());
					}
					setWithLastConsumed(
						$current,
						"tooltip",
						lv_tooltip_18_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_19='rawdata'
		{
			newLeafNode(otherlv_19, grammarAccess.getComponentAccess().getRawdataKeyword_13());
		}
		(
			(
				lv_rawdata_20_0=RULE_STRING
				{
					newLeafNode(lv_rawdata_20_0, grammarAccess.getComponentAccess().getRawdataSTRINGTerminalRuleCall_14_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentRule());
					}
					setWithLastConsumed(
						$current,
						"rawdata",
						lv_rawdata_20_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	iv_ruleConnection=ruleConnection
	{ $current=$iv_ruleConnection.current; }
	EOF;

// Rule Connection
ruleConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='src'
		{
			newLeafNode(otherlv_0, grammarAccess.getConnectionAccess().getSrcKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getConnectionAccess().getSrcComponentCrossReference_1_0());
				}
			)
		)
		otherlv_2='dst'
		{
			newLeafNode(otherlv_2, grammarAccess.getConnectionAccess().getDstKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getConnectionAccess().getDstComponentCrossReference_3_0());
				}
			)
		)
		otherlv_4='label'
		{
			newLeafNode(otherlv_4, grammarAccess.getConnectionAccess().getLabelKeyword_4());
		}
		(
			(
				lv_label_5_0=RULE_STRING
				{
					newLeafNode(lv_label_5_0, grammarAccess.getConnectionAccess().getLabelSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='type'
		{
			newLeafNode(otherlv_6, grammarAccess.getConnectionAccess().getTypeKeyword_6());
		}
		(
			(
				lv_type_7_0=RULE_STRING
				{
					newLeafNode(lv_type_7_0, grammarAccess.getConnectionAccess().getTypeSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_8='color'
		{
			newLeafNode(otherlv_8, grammarAccess.getConnectionAccess().getColorKeyword_8());
		}
		(
			(
				lv_color_9_0=RULE_STRING
				{
					newLeafNode(lv_color_9_0, grammarAccess.getConnectionAccess().getColorSTRINGTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
					setWithLastConsumed(
						$current,
						"color",
						lv_color_9_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_10='tooltip'
		{
			newLeafNode(otherlv_10, grammarAccess.getConnectionAccess().getTooltipKeyword_10());
		}
		(
			(
				lv_tooltip_11_0=RULE_STRING
				{
					newLeafNode(lv_tooltip_11_0, grammarAccess.getConnectionAccess().getTooltipSTRINGTerminalRuleCall_11_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectionRule());
					}
					setWithLastConsumed(
						$current,
						"tooltip",
						lv_tooltip_11_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Rule ComponentType
ruleComponentType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='DIR'
			{
				$current = grammarAccess.getComponentTypeAccess().getDIREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComponentTypeAccess().getDIREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='FILE'
			{
				$current = grammarAccess.getComponentTypeAccess().getFILEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComponentTypeAccess().getFILEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='FUNC'
			{
				$current = grammarAccess.getComponentTypeAccess().getFUNCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComponentTypeAccess().getFUNCEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='COMPOUND'
			{
				$current = grammarAccess.getComponentTypeAccess().getCOMPOUNDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComponentTypeAccess().getCOMPOUNDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='READER'
			{
				$current = grammarAccess.getComponentTypeAccess().getREADEREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getComponentTypeAccess().getREADEREnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='WRITER'
			{
				$current = grammarAccess.getComponentTypeAccess().getWRITEREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getComponentTypeAccess().getWRITEREnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
