/**
 * generated by Xtext 2.12.0
 */
package de.cau.cs.kieler.cview.model.cViewModel.impl;

import de.cau.cs.kieler.cview.model.cViewModel.CViewModelPackage;
import de.cau.cs.kieler.cview.model.cViewModel.Component;
import de.cau.cs.kieler.cview.model.cViewModel.Connection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getSrc <em>Src</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getDst <em>Dst</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getLabel <em>Label</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getType <em>Type</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getColor <em>Color</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getTooltip <em>Tooltip</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getLocation <em>Location</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getReferenceLine <em>Reference Line</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getSize <em>Size</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#getWeight <em>Weight</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.ConnectionImpl#isHide <em>Hide</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConnectionImpl extends MinimalEObjectImpl.Container implements Connection
{
  /**
   * The cached value of the '{@link #getSrc() <em>Src</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrc()
   * @generated
   * @ordered
   */
  protected Component src;

  /**
   * The cached value of the '{@link #getDst() <em>Dst</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDst()
   * @generated
   * @ordered
   */
  protected Component dst;

  /**
   * The default value of the '{@link #getLabel() <em>Label</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected static final String LABEL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLabel() <em>Label</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected String label = LABEL_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected static final String COLOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected String color = COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getTooltip() <em>Tooltip</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTooltip()
   * @generated
   * @ordered
   */
  protected static final String TOOLTIP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTooltip() <em>Tooltip</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTooltip()
   * @generated
   * @ordered
   */
  protected String tooltip = TOOLTIP_EDEFAULT;

  /**
   * The default value of the '{@link #getLocation() <em>Location</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocation()
   * @generated
   * @ordered
   */
  protected static final String LOCATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLocation() <em>Location</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocation()
   * @generated
   * @ordered
   */
  protected String location = LOCATION_EDEFAULT;

  /**
   * The default value of the '{@link #getReferenceLine() <em>Reference Line</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferenceLine()
   * @generated
   * @ordered
   */
  protected static final int REFERENCE_LINE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getReferenceLine() <em>Reference Line</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferenceLine()
   * @generated
   * @ordered
   */
  protected int referenceLine = REFERENCE_LINE_EDEFAULT;

  /**
   * The default value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected static final int SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected int size = SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #getWeight() <em>Weight</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWeight()
   * @generated
   * @ordered
   */
  protected static final int WEIGHT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getWeight() <em>Weight</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWeight()
   * @generated
   * @ordered
   */
  protected int weight = WEIGHT_EDEFAULT;

  /**
   * The default value of the '{@link #isHide() <em>Hide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHide()
   * @generated
   * @ordered
   */
  protected static final boolean HIDE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHide() <em>Hide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHide()
   * @generated
   * @ordered
   */
  protected boolean hide = HIDE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CViewModelPackage.Literals.CONNECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component getSrc()
  {
    if (src != null && src.eIsProxy())
    {
      InternalEObject oldSrc = (InternalEObject)src;
      src = (Component)eResolveProxy(oldSrc);
      if (src != oldSrc)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CViewModelPackage.CONNECTION__SRC, oldSrc, src));
      }
    }
    return src;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component basicGetSrc()
  {
    return src;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSrc(Component newSrc)
  {
    Component oldSrc = src;
    src = newSrc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__SRC, oldSrc, src));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component getDst()
  {
    if (dst != null && dst.eIsProxy())
    {
      InternalEObject oldDst = (InternalEObject)dst;
      dst = (Component)eResolveProxy(oldDst);
      if (dst != oldDst)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CViewModelPackage.CONNECTION__DST, oldDst, dst));
      }
    }
    return dst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component basicGetDst()
  {
    return dst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDst(Component newDst)
  {
    Component oldDst = dst;
    dst = newDst;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__DST, oldDst, dst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLabel()
  {
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLabel(String newLabel)
  {
    String oldLabel = label;
    label = newLabel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__LABEL, oldLabel, label));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor(String newColor)
  {
    String oldColor = color;
    color = newColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__COLOR, oldColor, color));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTooltip()
  {
    return tooltip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTooltip(String newTooltip)
  {
    String oldTooltip = tooltip;
    tooltip = newTooltip;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__TOOLTIP, oldTooltip, tooltip));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLocation()
  {
    return location;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLocation(String newLocation)
  {
    String oldLocation = location;
    location = newLocation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__LOCATION, oldLocation, location));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getReferenceLine()
  {
    return referenceLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReferenceLine(int newReferenceLine)
  {
    int oldReferenceLine = referenceLine;
    referenceLine = newReferenceLine;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__REFERENCE_LINE, oldReferenceLine, referenceLine));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSize(int newSize)
  {
    int oldSize = size;
    size = newSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__SIZE, oldSize, size));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getWeight()
  {
    return weight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWeight(int newWeight)
  {
    int oldWeight = weight;
    weight = newWeight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__WEIGHT, oldWeight, weight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHide()
  {
    return hide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHide(boolean newHide)
  {
    boolean oldHide = hide;
    hide = newHide;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.CONNECTION__HIDE, oldHide, hide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CViewModelPackage.CONNECTION__SRC:
        if (resolve) return getSrc();
        return basicGetSrc();
      case CViewModelPackage.CONNECTION__DST:
        if (resolve) return getDst();
        return basicGetDst();
      case CViewModelPackage.CONNECTION__LABEL:
        return getLabel();
      case CViewModelPackage.CONNECTION__TYPE:
        return getType();
      case CViewModelPackage.CONNECTION__COLOR:
        return getColor();
      case CViewModelPackage.CONNECTION__TOOLTIP:
        return getTooltip();
      case CViewModelPackage.CONNECTION__LOCATION:
        return getLocation();
      case CViewModelPackage.CONNECTION__REFERENCE_LINE:
        return getReferenceLine();
      case CViewModelPackage.CONNECTION__SIZE:
        return getSize();
      case CViewModelPackage.CONNECTION__WEIGHT:
        return getWeight();
      case CViewModelPackage.CONNECTION__HIDE:
        return isHide();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CViewModelPackage.CONNECTION__SRC:
        setSrc((Component)newValue);
        return;
      case CViewModelPackage.CONNECTION__DST:
        setDst((Component)newValue);
        return;
      case CViewModelPackage.CONNECTION__LABEL:
        setLabel((String)newValue);
        return;
      case CViewModelPackage.CONNECTION__TYPE:
        setType((String)newValue);
        return;
      case CViewModelPackage.CONNECTION__COLOR:
        setColor((String)newValue);
        return;
      case CViewModelPackage.CONNECTION__TOOLTIP:
        setTooltip((String)newValue);
        return;
      case CViewModelPackage.CONNECTION__LOCATION:
        setLocation((String)newValue);
        return;
      case CViewModelPackage.CONNECTION__REFERENCE_LINE:
        setReferenceLine((Integer)newValue);
        return;
      case CViewModelPackage.CONNECTION__SIZE:
        setSize((Integer)newValue);
        return;
      case CViewModelPackage.CONNECTION__WEIGHT:
        setWeight((Integer)newValue);
        return;
      case CViewModelPackage.CONNECTION__HIDE:
        setHide((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CViewModelPackage.CONNECTION__SRC:
        setSrc((Component)null);
        return;
      case CViewModelPackage.CONNECTION__DST:
        setDst((Component)null);
        return;
      case CViewModelPackage.CONNECTION__LABEL:
        setLabel(LABEL_EDEFAULT);
        return;
      case CViewModelPackage.CONNECTION__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case CViewModelPackage.CONNECTION__COLOR:
        setColor(COLOR_EDEFAULT);
        return;
      case CViewModelPackage.CONNECTION__TOOLTIP:
        setTooltip(TOOLTIP_EDEFAULT);
        return;
      case CViewModelPackage.CONNECTION__LOCATION:
        setLocation(LOCATION_EDEFAULT);
        return;
      case CViewModelPackage.CONNECTION__REFERENCE_LINE:
        setReferenceLine(REFERENCE_LINE_EDEFAULT);
        return;
      case CViewModelPackage.CONNECTION__SIZE:
        setSize(SIZE_EDEFAULT);
        return;
      case CViewModelPackage.CONNECTION__WEIGHT:
        setWeight(WEIGHT_EDEFAULT);
        return;
      case CViewModelPackage.CONNECTION__HIDE:
        setHide(HIDE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CViewModelPackage.CONNECTION__SRC:
        return src != null;
      case CViewModelPackage.CONNECTION__DST:
        return dst != null;
      case CViewModelPackage.CONNECTION__LABEL:
        return LABEL_EDEFAULT == null ? label != null : !LABEL_EDEFAULT.equals(label);
      case CViewModelPackage.CONNECTION__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case CViewModelPackage.CONNECTION__COLOR:
        return COLOR_EDEFAULT == null ? color != null : !COLOR_EDEFAULT.equals(color);
      case CViewModelPackage.CONNECTION__TOOLTIP:
        return TOOLTIP_EDEFAULT == null ? tooltip != null : !TOOLTIP_EDEFAULT.equals(tooltip);
      case CViewModelPackage.CONNECTION__LOCATION:
        return LOCATION_EDEFAULT == null ? location != null : !LOCATION_EDEFAULT.equals(location);
      case CViewModelPackage.CONNECTION__REFERENCE_LINE:
        return referenceLine != REFERENCE_LINE_EDEFAULT;
      case CViewModelPackage.CONNECTION__SIZE:
        return size != SIZE_EDEFAULT;
      case CViewModelPackage.CONNECTION__WEIGHT:
        return weight != WEIGHT_EDEFAULT;
      case CViewModelPackage.CONNECTION__HIDE:
        return hide != HIDE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (label: ");
    result.append(label);
    result.append(", type: ");
    result.append(type);
    result.append(", color: ");
    result.append(color);
    result.append(", tooltip: ");
    result.append(tooltip);
    result.append(", location: ");
    result.append(location);
    result.append(", referenceLine: ");
    result.append(referenceLine);
    result.append(", size: ");
    result.append(size);
    result.append(", weight: ");
    result.append(weight);
    result.append(", hide: ");
    result.append(hide);
    result.append(')');
    return result.toString();
  }

} //ConnectionImpl
