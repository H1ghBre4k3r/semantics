/**
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.cview.model.cViewModel.impl;

import de.cau.cs.kieler.cview.model.cViewModel.CViewModel;
import de.cau.cs.kieler.cview.model.cViewModel.CViewModelPackage;
import de.cau.cs.kieler.cview.model.cViewModel.Component;
import de.cau.cs.kieler.cview.model.cViewModel.File;
import de.cau.cs.kieler.cview.model.cViewModel.Folder;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CView Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.CViewModelImpl#getFolders <em>Folders</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.CViewModelImpl#getFiles <em>Files</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.CViewModelImpl#getComponents <em>Components</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CViewModelImpl extends MinimalEObjectImpl.Container implements CViewModel
{
  /**
   * The cached value of the '{@link #getFolders() <em>Folders</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFolders()
   * @generated
   * @ordered
   */
  protected EList<Folder> folders;

  /**
   * The cached value of the '{@link #getFiles() <em>Files</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFiles()
   * @generated
   * @ordered
   */
  protected EList<File> files;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> components;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CViewModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CViewModelPackage.Literals.CVIEW_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Folder> getFolders()
  {
    if (folders == null)
    {
      folders = new EObjectContainmentEList<Folder>(Folder.class, this, CViewModelPackage.CVIEW_MODEL__FOLDERS);
    }
    return folders;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<File> getFiles()
  {
    if (files == null)
    {
      files = new EObjectContainmentEList<File>(File.class, this, CViewModelPackage.CVIEW_MODEL__FILES);
    }
    return files;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<Component>(Component.class, this, CViewModelPackage.CVIEW_MODEL__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CViewModelPackage.CVIEW_MODEL__FOLDERS:
        return ((InternalEList<?>)getFolders()).basicRemove(otherEnd, msgs);
      case CViewModelPackage.CVIEW_MODEL__FILES:
        return ((InternalEList<?>)getFiles()).basicRemove(otherEnd, msgs);
      case CViewModelPackage.CVIEW_MODEL__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CViewModelPackage.CVIEW_MODEL__FOLDERS:
        return getFolders();
      case CViewModelPackage.CVIEW_MODEL__FILES:
        return getFiles();
      case CViewModelPackage.CVIEW_MODEL__COMPONENTS:
        return getComponents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CViewModelPackage.CVIEW_MODEL__FOLDERS:
        getFolders().clear();
        getFolders().addAll((Collection<? extends Folder>)newValue);
        return;
      case CViewModelPackage.CVIEW_MODEL__FILES:
        getFiles().clear();
        getFiles().addAll((Collection<? extends File>)newValue);
        return;
      case CViewModelPackage.CVIEW_MODEL__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends Component>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CViewModelPackage.CVIEW_MODEL__FOLDERS:
        getFolders().clear();
        return;
      case CViewModelPackage.CVIEW_MODEL__FILES:
        getFiles().clear();
        return;
      case CViewModelPackage.CVIEW_MODEL__COMPONENTS:
        getComponents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CViewModelPackage.CVIEW_MODEL__FOLDERS:
        return folders != null && !folders.isEmpty();
      case CViewModelPackage.CVIEW_MODEL__FILES:
        return files != null && !files.isEmpty();
      case CViewModelPackage.CVIEW_MODEL__COMPONENTS:
        return components != null && !components.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CViewModelImpl
