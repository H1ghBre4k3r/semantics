/**
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.cview.model.cViewModel.impl;

import de.cau.cs.kieler.cview.model.cViewModel.CViewModelPackage;
import de.cau.cs.kieler.cview.model.cViewModel.FileOrFolder;
import de.cau.cs.kieler.cview.model.cViewModel.Folder;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Folder</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.FolderImpl#isProject <em>Project</em>}</li>
 *   <li>{@link de.cau.cs.kieler.cview.model.cViewModel.impl.FolderImpl#getChildren <em>Children</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FolderImpl extends FileOrFolderImpl implements Folder
{
  /**
   * The default value of the '{@link #isProject() <em>Project</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProject()
   * @generated
   * @ordered
   */
  protected static final boolean PROJECT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isProject() <em>Project</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProject()
   * @generated
   * @ordered
   */
  protected boolean project = PROJECT_EDEFAULT;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected EList<FileOrFolder> children;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FolderImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CViewModelPackage.Literals.FOLDER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isProject()
  {
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProject(boolean newProject)
  {
    boolean oldProject = project;
    project = newProject;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CViewModelPackage.FOLDER__PROJECT, oldProject, project));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FileOrFolder> getChildren()
  {
    if (children == null)
    {
      children = new EObjectResolvingEList<FileOrFolder>(FileOrFolder.class, this, CViewModelPackage.FOLDER__CHILDREN);
    }
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CViewModelPackage.FOLDER__PROJECT:
        return isProject();
      case CViewModelPackage.FOLDER__CHILDREN:
        return getChildren();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CViewModelPackage.FOLDER__PROJECT:
        setProject((Boolean)newValue);
        return;
      case CViewModelPackage.FOLDER__CHILDREN:
        getChildren().clear();
        getChildren().addAll((Collection<? extends FileOrFolder>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CViewModelPackage.FOLDER__PROJECT:
        setProject(PROJECT_EDEFAULT);
        return;
      case CViewModelPackage.FOLDER__CHILDREN:
        getChildren().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CViewModelPackage.FOLDER__PROJECT:
        return project != PROJECT_EDEFAULT;
      case CViewModelPackage.FOLDER__CHILDREN:
        return children != null && !children.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (project: ");
    result.append(project);
    result.append(')');
    return result.toString();
  }

} //FolderImpl
