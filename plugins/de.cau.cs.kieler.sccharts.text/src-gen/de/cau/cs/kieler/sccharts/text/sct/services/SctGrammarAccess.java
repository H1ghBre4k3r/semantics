/*
* generated by Xtext
*/
package de.cau.cs.kieler.sccharts.text.sct.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.sccharts.text.actions.services.ActionsGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.text.services.AnnotationsGrammarAccess;

@Singleton
public class SctGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsImportAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAnnotationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_0_0 = (RuleCall)cAnnotationsAssignment_2_0.eContents().get(0);
		private final Keyword cRegionKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_2_0 = (RuleCall)cIdAssignment_2_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cLabelAssignment_2_3.eContents().get(0);
		private final Keyword cColonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cValuedObjectsAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_2_5_0 = (RuleCall)cValuedObjectsAssignment_2_5.eContents().get(0);
		private final Assignment cBodyTextAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cBodyTextTextualCodeParserRuleCall_2_6_0 = (RuleCall)cBodyTextAssignment_2_6.eContents().get(0);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesSCChartParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//RootRegion returns sccharts::Region:
		//	{sccharts::Region} annotations+=ImportAnnotation* (annotations+=Annotation* "region" id=ID label=STRING? ":"
		//	valuedObjects+=ValuedObject* bodyText+=TextualCode*)? states+=SCChart*;
		public ParserRule getRule() { return rule; }

		//{sccharts::Region} annotations+=ImportAnnotation* (annotations+=Annotation* "region" id=ID label=STRING? ":"
		//valuedObjects+=ValuedObject* bodyText+=TextualCode*)? states+=SCChart*
		public Group getGroup() { return cGroup; }

		//{sccharts::Region}
		public Action getRegionAction_0() { return cRegionAction_0; }

		//annotations+=ImportAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//ImportAnnotation
		public RuleCall getAnnotationsImportAnnotationParserRuleCall_1_0() { return cAnnotationsImportAnnotationParserRuleCall_1_0; }

		//(annotations+=Annotation* "region" id=ID label=STRING? ":" valuedObjects+=ValuedObject* bodyText+=TextualCode*)?
		public Group getGroup_2() { return cGroup_2; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_2_0() { return cAnnotationsAssignment_2_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_0_0() { return cAnnotationsAnnotationParserRuleCall_2_0_0; }

		//"region"
		public Keyword getRegionKeyword_2_1() { return cRegionKeyword_2_1; }

		//id=ID
		public Assignment getIdAssignment_2_2() { return cIdAssignment_2_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_2_0() { return cIdIDTerminalRuleCall_2_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_2_3() { return cLabelAssignment_2_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_3_0() { return cLabelSTRINGTerminalRuleCall_2_3_0; }

		//":"
		public Keyword getColonKeyword_2_4() { return cColonKeyword_2_4; }

		//valuedObjects+=ValuedObject*
		public Assignment getValuedObjectsAssignment_2_5() { return cValuedObjectsAssignment_2_5; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_2_5_0() { return cValuedObjectsValuedObjectParserRuleCall_2_5_0; }

		//bodyText+=TextualCode*
		public Assignment getBodyTextAssignment_2_6() { return cBodyTextAssignment_2_6; }

		//TextualCode
		public RuleCall getBodyTextTextualCodeParserRuleCall_2_6_0() { return cBodyTextTextualCodeParserRuleCall_2_6_0; }

		//states+=SCChart*
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//SCChart
		public RuleCall getStatesSCChartParserRuleCall_3_0() { return cStatesSCChartParserRuleCall_3_0; }
	}

	public class SingleRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0_0 = (RuleCall)cAnnotationsAssignment_1_0.eContents().get(0);
		private final Keyword cRegionKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_1_2_0 = (RuleCall)cIdAssignment_1_2.eContents().get(0);
		private final Assignment cLabelAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cLabelAssignment_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cValuedObjectsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_1_5_0 = (RuleCall)cValuedObjectsAssignment_1_5.eContents().get(0);
		private final Assignment cBodyTextAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cBodyTextTextualCodeParserRuleCall_1_6_0 = (RuleCall)cBodyTextAssignment_1_6.eContents().get(0);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesStateParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//SingleRegion returns sccharts::Region:
		//	{sccharts::Region} (annotations+=Annotation* "region" id=ID? label=STRING? ":" valuedObjects+=ValuedObject*
		//	bodyText+=TextualCode*)? states+=State*;
		public ParserRule getRule() { return rule; }

		//{sccharts::Region} (annotations+=Annotation* "region" id=ID? label=STRING? ":" valuedObjects+=ValuedObject*
		//bodyText+=TextualCode*)? states+=State*
		public Group getGroup() { return cGroup; }

		//{sccharts::Region}
		public Action getRegionAction_0() { return cRegionAction_0; }

		//(annotations+=Annotation* "region" id=ID? label=STRING? ":" valuedObjects+=ValuedObject* bodyText+=TextualCode*)?
		public Group getGroup_1() { return cGroup_1; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_0() { return cAnnotationsAssignment_1_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0_0() { return cAnnotationsAnnotationParserRuleCall_1_0_0; }

		//"region"
		public Keyword getRegionKeyword_1_1() { return cRegionKeyword_1_1; }

		//id=ID?
		public Assignment getIdAssignment_1_2() { return cIdAssignment_1_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_2_0() { return cIdIDTerminalRuleCall_1_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_1_3() { return cLabelAssignment_1_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_3_0() { return cLabelSTRINGTerminalRuleCall_1_3_0; }

		//":"
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }

		//valuedObjects+=ValuedObject*
		public Assignment getValuedObjectsAssignment_1_5() { return cValuedObjectsAssignment_1_5; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_1_5_0() { return cValuedObjectsValuedObjectParserRuleCall_1_5_0; }

		//bodyText+=TextualCode*
		public Assignment getBodyTextAssignment_1_6() { return cBodyTextAssignment_1_6; }

		//TextualCode
		public RuleCall getBodyTextTextualCodeParserRuleCall_1_6_0() { return cBodyTextTextualCodeParserRuleCall_1_6_0; }

		//states+=State*
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//State
		public RuleCall getStatesStateParserRuleCall_2_0() { return cStatesStateParserRuleCall_2_0; }
	}

	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cRegionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValuedObjectsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_6_0 = (RuleCall)cValuedObjectsAssignment_6.eContents().get(0);
		private final Assignment cBodyTextAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyTextTextualCodeParserRuleCall_7_0 = (RuleCall)cBodyTextAssignment_7.eContents().get(0);
		private final Assignment cStatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatesStateParserRuleCall_8_0 = (RuleCall)cStatesAssignment_8.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Region returns sccharts::Region:
		//	{sccharts::Region} annotations+=Annotation* "region" id=ID? label=STRING? ":" valuedObjects+=ValuedObject*
		//	bodyText+=TextualCode* states+=State+;
		public ParserRule getRule() { return rule; }

		//{sccharts::Region} annotations+=Annotation* "region" id=ID? label=STRING? ":" valuedObjects+=ValuedObject*
		//bodyText+=TextualCode* states+=State+
		public Group getGroup() { return cGroup; }

		//{sccharts::Region}
		public Action getRegionAction_0() { return cRegionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"region"
		public Keyword getRegionKeyword_2() { return cRegionKeyword_2; }

		//id=ID?
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//valuedObjects+=ValuedObject*
		public Assignment getValuedObjectsAssignment_6() { return cValuedObjectsAssignment_6; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_6_0() { return cValuedObjectsValuedObjectParserRuleCall_6_0; }

		//bodyText+=TextualCode*
		public Assignment getBodyTextAssignment_7() { return cBodyTextAssignment_7; }

		//TextualCode
		public RuleCall getBodyTextTextualCodeParserRuleCall_7_0() { return cBodyTextTextualCodeParserRuleCall_7_0; }

		//states+=State+
		public Assignment getStatesAssignment_8() { return cStatesAssignment_8; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_0() { return cStatesStateParserRuleCall_8_0; }
	}

	public class SCChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCChart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeStateTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cScchartKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cCommercialAtKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cBodyReferenceAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final CrossReference cBodyReferenceStateCrossReference_5_0_1_0 = (CrossReference)cBodyReferenceAssignment_5_0_1.eContents().get(0);
		private final RuleCall cBodyReferenceStateIDTerminalRuleCall_5_0_1_0_1 = (RuleCall)cBodyReferenceStateCrossReference_5_0_1_0.eContents().get(1);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_5_0_2_0 = (Keyword)cGroup_5_0_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cRenamingsSubstitutionParserRuleCall_5_0_2_1_0 = (RuleCall)cRenamingsAssignment_5_0_2_1.eContents().get(0);
		private final Group cGroup_5_0_2_2 = (Group)cGroup_5_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_5_0_2_2_0 = (Keyword)cGroup_5_0_2_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_5_0_2_2_1 = (Assignment)cGroup_5_0_2_2.eContents().get(1);
		private final RuleCall cRenamingsSubstitutionParserRuleCall_5_0_2_2_1_0 = (RuleCall)cRenamingsAssignment_5_0_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_0_2_3 = (Keyword)cGroup_5_0_2.eContents().get(3);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Alternatives cAlternatives_5_1_1_0 = (Alternatives)cGroup_5_1_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_5_1_1_0_0 = (Assignment)cAlternatives_5_1_1_0.eContents().get(0);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_5_1_1_0_0_0 = (RuleCall)cValuedObjectsAssignment_5_1_1_0_0.eContents().get(0);
		private final Assignment cLocalActionsAssignment_5_1_1_0_1 = (Assignment)cAlternatives_5_1_1_0.eContents().get(1);
		private final RuleCall cLocalActionsLocalActionParserRuleCall_5_1_1_0_1_0 = (RuleCall)cLocalActionsAssignment_5_1_1_0_1.eContents().get(0);
		private final Assignment cBodyTextAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cBodyTextTextualCodeParserRuleCall_5_1_1_1_0 = (RuleCall)cBodyTextAssignment_5_1_1_1.eContents().get(0);
		private final Group cGroup_5_1_1_2 = (Group)cGroup_5_1_1.eContents().get(2);
		private final Assignment cRegionsAssignment_5_1_1_2_0 = (Assignment)cGroup_5_1_1_2.eContents().get(0);
		private final RuleCall cRegionsSingleRegionParserRuleCall_5_1_1_2_0_0 = (RuleCall)cRegionsAssignment_5_1_1_2_0.eContents().get(0);
		private final Assignment cRegionsAssignment_5_1_1_2_1 = (Assignment)cGroup_5_1_1_2.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_5_1_1_2_1_0 = (RuleCall)cRegionsAssignment_5_1_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		
		//// ---------------------------------------------------------------------------------------------------
		//SCChart returns sccharts::State:
		//	annotations+=Annotation* type=StateType? "scchart" id=ID label=STRING? ("@" bodyReference=[sccharts::State] ("["
		//	renamings+=Substitution ("," renamings+=Substitution)* "]")? | "{" ((valuedObjects+=ValuedObject |
		//	localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion regions+=Region*)?) "}")?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* type=StateType? "scchart" id=ID label=STRING? ("@" bodyReference=[sccharts::State] ("["
		//renamings+=Substitution ("," renamings+=Substitution)* "]")? | "{" ((valuedObjects+=ValuedObject |
		//localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion regions+=Region*)?) "}")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//type=StateType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_1_0() { return cTypeStateTypeEnumRuleCall_1_0; }

		//"scchart"
		public Keyword getScchartKeyword_2() { return cScchartKeyword_2; }

		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }

		//("@" bodyReference=[sccharts::State] ("[" renamings+=Substitution ("," renamings+=Substitution)* "]")? | "{"
		//((valuedObjects+=ValuedObject | localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion
		//regions+=Region*)?) "}")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"@" bodyReference=[sccharts::State] ("[" renamings+=Substitution ("," renamings+=Substitution)* "]")?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"@"
		public Keyword getCommercialAtKeyword_5_0_0() { return cCommercialAtKeyword_5_0_0; }

		//bodyReference=[sccharts::State]
		public Assignment getBodyReferenceAssignment_5_0_1() { return cBodyReferenceAssignment_5_0_1; }

		//[sccharts::State]
		public CrossReference getBodyReferenceStateCrossReference_5_0_1_0() { return cBodyReferenceStateCrossReference_5_0_1_0; }

		//ID
		public RuleCall getBodyReferenceStateIDTerminalRuleCall_5_0_1_0_1() { return cBodyReferenceStateIDTerminalRuleCall_5_0_1_0_1; }

		//("[" renamings+=Substitution ("," renamings+=Substitution)* "]")?
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0_2_0() { return cLeftSquareBracketKeyword_5_0_2_0; }

		//renamings+=Substitution
		public Assignment getRenamingsAssignment_5_0_2_1() { return cRenamingsAssignment_5_0_2_1; }

		//Substitution
		public RuleCall getRenamingsSubstitutionParserRuleCall_5_0_2_1_0() { return cRenamingsSubstitutionParserRuleCall_5_0_2_1_0; }

		//("," renamings+=Substitution)*
		public Group getGroup_5_0_2_2() { return cGroup_5_0_2_2; }

		//","
		public Keyword getCommaKeyword_5_0_2_2_0() { return cCommaKeyword_5_0_2_2_0; }

		//renamings+=Substitution
		public Assignment getRenamingsAssignment_5_0_2_2_1() { return cRenamingsAssignment_5_0_2_2_1; }

		//Substitution
		public RuleCall getRenamingsSubstitutionParserRuleCall_5_0_2_2_1_0() { return cRenamingsSubstitutionParserRuleCall_5_0_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_0_2_3() { return cRightSquareBracketKeyword_5_0_2_3; }

		//"{" ((valuedObjects+=ValuedObject | localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion
		//regions+=Region*)?) "}"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1_0() { return cLeftCurlyBracketKeyword_5_1_0; }

		//(valuedObjects+=ValuedObject | localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion
		//regions+=Region*)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//(valuedObjects+=ValuedObject | localActions+=LocalAction)*
		public Alternatives getAlternatives_5_1_1_0() { return cAlternatives_5_1_1_0; }

		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_5_1_1_0_0() { return cValuedObjectsAssignment_5_1_1_0_0; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_5_1_1_0_0_0() { return cValuedObjectsValuedObjectParserRuleCall_5_1_1_0_0_0; }

		//localActions+=LocalAction
		public Assignment getLocalActionsAssignment_5_1_1_0_1() { return cLocalActionsAssignment_5_1_1_0_1; }

		//LocalAction
		public RuleCall getLocalActionsLocalActionParserRuleCall_5_1_1_0_1_0() { return cLocalActionsLocalActionParserRuleCall_5_1_1_0_1_0; }

		//bodyText+=TextualCode*
		public Assignment getBodyTextAssignment_5_1_1_1() { return cBodyTextAssignment_5_1_1_1; }

		//TextualCode
		public RuleCall getBodyTextTextualCodeParserRuleCall_5_1_1_1_0() { return cBodyTextTextualCodeParserRuleCall_5_1_1_1_0; }

		//(regions+=SingleRegion regions+=Region*)?
		public Group getGroup_5_1_1_2() { return cGroup_5_1_1_2; }

		//regions+=SingleRegion
		public Assignment getRegionsAssignment_5_1_1_2_0() { return cRegionsAssignment_5_1_1_2_0; }

		//SingleRegion
		public RuleCall getRegionsSingleRegionParserRuleCall_5_1_1_2_0_0() { return cRegionsSingleRegionParserRuleCall_5_1_1_2_0_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_5_1_1_2_1() { return cRegionsAssignment_5_1_1_2_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_5_1_1_2_1_0() { return cRegionsRegionParserRuleCall_5_1_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_1_2() { return cRightCurlyBracketKeyword_5_1_2; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cInitialAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cInitialInitialKeyword_1_0_0_0 = (Keyword)cInitialAssignment_1_0_0.eContents().get(0);
		private final Assignment cFinalAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0_1_0 = (Keyword)cFinalAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cFinalAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cFinalFinalKeyword_1_1_0_0 = (Keyword)cFinalAssignment_1_1_0.eContents().get(0);
		private final Assignment cInitialAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cInitialInitialKeyword_1_1_1_0 = (Keyword)cInitialAssignment_1_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeStateTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cCommercialAtKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cBodyReferenceAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final CrossReference cBodyReferenceStateCrossReference_6_0_1_0 = (CrossReference)cBodyReferenceAssignment_6_0_1.eContents().get(0);
		private final RuleCall cBodyReferenceStateIDTerminalRuleCall_6_0_1_0_1 = (RuleCall)cBodyReferenceStateCrossReference_6_0_1_0.eContents().get(1);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cRenamingsSubstitutionParserRuleCall_6_0_2_1_0 = (RuleCall)cRenamingsAssignment_6_0_2_1.eContents().get(0);
		private final Group cGroup_6_0_2_2 = (Group)cGroup_6_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_6_0_2_2_0 = (Keyword)cGroup_6_0_2_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_6_0_2_2_1 = (Assignment)cGroup_6_0_2_2.eContents().get(1);
		private final RuleCall cRenamingsSubstitutionParserRuleCall_6_0_2_2_1_0 = (RuleCall)cRenamingsAssignment_6_0_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_0_2_3 = (Keyword)cGroup_6_0_2.eContents().get(3);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Alternatives cAlternatives_6_1_1_0 = (Alternatives)cGroup_6_1_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_6_1_1_0_0 = (Assignment)cAlternatives_6_1_1_0.eContents().get(0);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_6_1_1_0_0_0 = (RuleCall)cValuedObjectsAssignment_6_1_1_0_0.eContents().get(0);
		private final Assignment cLocalActionsAssignment_6_1_1_0_1 = (Assignment)cAlternatives_6_1_1_0.eContents().get(1);
		private final RuleCall cLocalActionsLocalActionParserRuleCall_6_1_1_0_1_0 = (RuleCall)cLocalActionsAssignment_6_1_1_0_1.eContents().get(0);
		private final Assignment cBodyTextAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cBodyTextTextualCodeParserRuleCall_6_1_1_1_0 = (RuleCall)cBodyTextAssignment_6_1_1_1.eContents().get(0);
		private final Group cGroup_6_1_1_2 = (Group)cGroup_6_1_1.eContents().get(2);
		private final Assignment cRegionsAssignment_6_1_1_2_0 = (Assignment)cGroup_6_1_1_2.eContents().get(0);
		private final RuleCall cRegionsSingleRegionParserRuleCall_6_1_1_2_0_0 = (RuleCall)cRegionsAssignment_6_1_1_2_0.eContents().get(0);
		private final Assignment cRegionsAssignment_6_1_1_2_1 = (Assignment)cGroup_6_1_1_2.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_6_1_1_2_1_0 = (RuleCall)cRegionsAssignment_6_1_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_1_2 = (Keyword)cGroup_6_1.eContents().get(2);
		private final Assignment cOutgoingTransitionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_7_0 = (RuleCall)cOutgoingTransitionsAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// ---------------------------------------------------------------------------------------------------
		//State returns sccharts::State:
		//	annotations+=Annotation* (initial?="initial" final?="final"? | final?="final" initial?="initial"?)? type=StateType?
		//	"state" id=ID label=STRING? ("@" bodyReference=[sccharts::State] ("[" renamings+=Substitution (","
		//	renamings+=Substitution)* "]")? | "{" ((valuedObjects+=ValuedObject | localActions+=LocalAction)*
		//	bodyText+=TextualCode* (regions+=SingleRegion regions+=Region*)?) "}")? outgoingTransitions+=Transition* ";";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (initial?="initial" final?="final"? | final?="final" initial?="initial"?)? type=StateType?
		//"state" id=ID label=STRING? ("@" bodyReference=[sccharts::State] ("[" renamings+=Substitution (","
		//renamings+=Substitution)* "]")? | "{" ((valuedObjects+=ValuedObject | localActions+=LocalAction)*
		//bodyText+=TextualCode* (regions+=SingleRegion regions+=Region*)?) "}")? outgoingTransitions+=Transition* ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//(initial?="initial" final?="final"? | final?="final" initial?="initial"?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//initial?="initial" final?="final"?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//initial?="initial"
		public Assignment getInitialAssignment_1_0_0() { return cInitialAssignment_1_0_0; }

		//"initial"
		public Keyword getInitialInitialKeyword_1_0_0_0() { return cInitialInitialKeyword_1_0_0_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1_0_1() { return cFinalAssignment_1_0_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_0_1_0() { return cFinalFinalKeyword_1_0_1_0; }

		//final?="final" initial?="initial"?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//final?="final"
		public Assignment getFinalAssignment_1_1_0() { return cFinalAssignment_1_1_0; }

		//"final"
		public Keyword getFinalFinalKeyword_1_1_0_0() { return cFinalFinalKeyword_1_1_0_0; }

		//initial?="initial"?
		public Assignment getInitialAssignment_1_1_1() { return cInitialAssignment_1_1_1; }

		//"initial"
		public Keyword getInitialInitialKeyword_1_1_1_0() { return cInitialInitialKeyword_1_1_1_0; }

		//type=StateType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_2_0() { return cTypeStateTypeEnumRuleCall_2_0; }

		//"state"
		public Keyword getStateKeyword_3() { return cStateKeyword_3; }

		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }

		//label=STRING?
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_0() { return cLabelSTRINGTerminalRuleCall_5_0; }

		//("@" bodyReference=[sccharts::State] ("[" renamings+=Substitution ("," renamings+=Substitution)* "]")? | "{"
		//((valuedObjects+=ValuedObject | localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion
		//regions+=Region*)?) "}")?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"@" bodyReference=[sccharts::State] ("[" renamings+=Substitution ("," renamings+=Substitution)* "]")?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"@"
		public Keyword getCommercialAtKeyword_6_0_0() { return cCommercialAtKeyword_6_0_0; }

		//bodyReference=[sccharts::State]
		public Assignment getBodyReferenceAssignment_6_0_1() { return cBodyReferenceAssignment_6_0_1; }

		//[sccharts::State]
		public CrossReference getBodyReferenceStateCrossReference_6_0_1_0() { return cBodyReferenceStateCrossReference_6_0_1_0; }

		//ID
		public RuleCall getBodyReferenceStateIDTerminalRuleCall_6_0_1_0_1() { return cBodyReferenceStateIDTerminalRuleCall_6_0_1_0_1; }

		//("[" renamings+=Substitution ("," renamings+=Substitution)* "]")?
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0_2_0() { return cLeftSquareBracketKeyword_6_0_2_0; }

		//renamings+=Substitution
		public Assignment getRenamingsAssignment_6_0_2_1() { return cRenamingsAssignment_6_0_2_1; }

		//Substitution
		public RuleCall getRenamingsSubstitutionParserRuleCall_6_0_2_1_0() { return cRenamingsSubstitutionParserRuleCall_6_0_2_1_0; }

		//("," renamings+=Substitution)*
		public Group getGroup_6_0_2_2() { return cGroup_6_0_2_2; }

		//","
		public Keyword getCommaKeyword_6_0_2_2_0() { return cCommaKeyword_6_0_2_2_0; }

		//renamings+=Substitution
		public Assignment getRenamingsAssignment_6_0_2_2_1() { return cRenamingsAssignment_6_0_2_2_1; }

		//Substitution
		public RuleCall getRenamingsSubstitutionParserRuleCall_6_0_2_2_1_0() { return cRenamingsSubstitutionParserRuleCall_6_0_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_0_2_3() { return cRightSquareBracketKeyword_6_0_2_3; }

		//"{" ((valuedObjects+=ValuedObject | localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion
		//regions+=Region*)?) "}"
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1_0() { return cLeftCurlyBracketKeyword_6_1_0; }

		//(valuedObjects+=ValuedObject | localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion
		//regions+=Region*)?
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//(valuedObjects+=ValuedObject | localActions+=LocalAction)*
		public Alternatives getAlternatives_6_1_1_0() { return cAlternatives_6_1_1_0; }

		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_6_1_1_0_0() { return cValuedObjectsAssignment_6_1_1_0_0; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_6_1_1_0_0_0() { return cValuedObjectsValuedObjectParserRuleCall_6_1_1_0_0_0; }

		//localActions+=LocalAction
		public Assignment getLocalActionsAssignment_6_1_1_0_1() { return cLocalActionsAssignment_6_1_1_0_1; }

		//LocalAction
		public RuleCall getLocalActionsLocalActionParserRuleCall_6_1_1_0_1_0() { return cLocalActionsLocalActionParserRuleCall_6_1_1_0_1_0; }

		//bodyText+=TextualCode*
		public Assignment getBodyTextAssignment_6_1_1_1() { return cBodyTextAssignment_6_1_1_1; }

		//TextualCode
		public RuleCall getBodyTextTextualCodeParserRuleCall_6_1_1_1_0() { return cBodyTextTextualCodeParserRuleCall_6_1_1_1_0; }

		//(regions+=SingleRegion regions+=Region*)?
		public Group getGroup_6_1_1_2() { return cGroup_6_1_1_2; }

		//regions+=SingleRegion
		public Assignment getRegionsAssignment_6_1_1_2_0() { return cRegionsAssignment_6_1_1_2_0; }

		//SingleRegion
		public RuleCall getRegionsSingleRegionParserRuleCall_6_1_1_2_0_0() { return cRegionsSingleRegionParserRuleCall_6_1_1_2_0_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_6_1_1_2_1() { return cRegionsAssignment_6_1_1_2_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_6_1_1_2_1_0() { return cRegionsRegionParserRuleCall_6_1_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_1_2() { return cRightCurlyBracketKeyword_6_1_2; }

		//outgoingTransitions+=Transition*
		public Assignment getOutgoingTransitionsAssignment_7() { return cOutgoingTransitionsAssignment_7; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_7_0() { return cOutgoingTransitionsTransitionParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class LocalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDuringActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSuspendActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// ---------------------------------------------------------------------------------------------------
		//LocalAction returns sccharts::LocalAction:
		//	EntryAction | DuringAction | ExitAction | SuspendAction;
		public ParserRule getRule() { return rule; }

		//EntryAction | DuringAction | ExitAction | SuspendAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryAction
		public RuleCall getEntryActionParserRuleCall_0() { return cEntryActionParserRuleCall_0; }

		//DuringAction
		public RuleCall getDuringActionParserRuleCall_1() { return cDuringActionParserRuleCall_1; }

		//ExitAction
		public RuleCall getExitActionParserRuleCall_2() { return cExitActionParserRuleCall_2; }

		//SuspendAction
		public RuleCall getSuspendActionParserRuleCall_3() { return cSuspendActionParserRuleCall_3; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTransitionTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		private final Assignment cTargetStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateStateCrossReference_3_0 = (CrossReference)cTargetStateAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateStateCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cImmediateAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cImmediateImmediateKeyword_4_0_0 = (Keyword)cImmediateAssignment_4_0.eContents().get(0);
		private final Assignment cDeferredAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cDeferredDeferredKeyword_4_1_0 = (Keyword)cDeferredAssignment_4_1.eContents().get(0);
		private final Assignment cHistoryAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cHistoryHistoryTypeEnumRuleCall_4_2_0 = (RuleCall)cHistoryAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cWithKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Alternatives cAlternatives_4_3_1 = (Alternatives)cGroup_4_3.eContents().get(1);
		private final Group cGroup_4_3_1_0 = (Group)cAlternatives_4_3_1.eContents().get(0);
		private final Assignment cDelayAssignment_4_3_1_0_0 = (Assignment)cGroup_4_3_1_0.eContents().get(0);
		private final RuleCall cDelayINTTerminalRuleCall_4_3_1_0_0_0 = (RuleCall)cDelayAssignment_4_3_1_0_0.eContents().get(0);
		private final Assignment cTriggerAssignment_4_3_1_0_1 = (Assignment)cGroup_4_3_1_0.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_4_3_1_0_1_0 = (RuleCall)cTriggerAssignment_4_3_1_0_1.eContents().get(0);
		private final Group cGroup_4_3_1_0_2 = (Group)cGroup_4_3_1_0.eContents().get(2);
		private final Keyword cSolidusKeyword_4_3_1_0_2_0 = (Keyword)cGroup_4_3_1_0_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_3_1_0_2_1 = (Assignment)cGroup_4_3_1_0_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_3_1_0_2_1_0 = (RuleCall)cEffectsAssignment_4_3_1_0_2_1.eContents().get(0);
		private final Group cGroup_4_3_1_0_2_2 = (Group)cGroup_4_3_1_0_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_3_1_0_2_2_0 = (Keyword)cGroup_4_3_1_0_2_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_3_1_0_2_2_1 = (Assignment)cGroup_4_3_1_0_2_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_3_1_0_2_2_1_0 = (RuleCall)cEffectsAssignment_4_3_1_0_2_2_1.eContents().get(0);
		private final Assignment cLabelAssignment_4_3_1_1 = (Assignment)cAlternatives_4_3_1.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_3_1_1_0 = (RuleCall)cLabelAssignment_4_3_1_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Transition returns sccharts::Transition:
		//	annotations+=Annotation* type=TransitionType priority=INT? targetState=[sccharts::State] (immediate?="immediate"?
		//	deferred?="deferred"? history=HistoryType? ("with" (delay=INT? trigger=BoolExpression? ("/" effects+=Effect (";"
		//	effects+=Effect)*)? | label=STRING))?)?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* type=TransitionType priority=INT? targetState=[sccharts::State] (immediate?="immediate"?
		//deferred?="deferred"? history=HistoryType? ("with" (delay=INT? trigger=BoolExpression? ("/" effects+=Effect (";"
		//effects+=Effect)*)? | label=STRING))?)?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//type=TransitionType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TransitionType
		public RuleCall getTypeTransitionTypeEnumRuleCall_1_0() { return cTypeTransitionTypeEnumRuleCall_1_0; }

		//priority=INT?
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_2_0() { return cPriorityINTTerminalRuleCall_2_0; }

		//targetState=[sccharts::State]
		public Assignment getTargetStateAssignment_3() { return cTargetStateAssignment_3; }

		//[sccharts::State]
		public CrossReference getTargetStateStateCrossReference_3_0() { return cTargetStateStateCrossReference_3_0; }

		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_3_0_1() { return cTargetStateStateIDTerminalRuleCall_3_0_1; }

		//(immediate?="immediate"? deferred?="deferred"? history=HistoryType? ("with" (delay=INT? trigger=BoolExpression? ("/"
		//effects+=Effect (";" effects+=Effect)*)? | label=STRING))?)?
		public Group getGroup_4() { return cGroup_4; }

		//immediate?="immediate"?
		public Assignment getImmediateAssignment_4_0() { return cImmediateAssignment_4_0; }

		//"immediate"
		public Keyword getImmediateImmediateKeyword_4_0_0() { return cImmediateImmediateKeyword_4_0_0; }

		//deferred?="deferred"?
		public Assignment getDeferredAssignment_4_1() { return cDeferredAssignment_4_1; }

		//"deferred"
		public Keyword getDeferredDeferredKeyword_4_1_0() { return cDeferredDeferredKeyword_4_1_0; }

		//history=HistoryType?
		public Assignment getHistoryAssignment_4_2() { return cHistoryAssignment_4_2; }

		//HistoryType
		public RuleCall getHistoryHistoryTypeEnumRuleCall_4_2_0() { return cHistoryHistoryTypeEnumRuleCall_4_2_0; }

		//("with" (delay=INT? trigger=BoolExpression? ("/" effects+=Effect (";" effects+=Effect)*)? | label=STRING))?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"with"
		public Keyword getWithKeyword_4_3_0() { return cWithKeyword_4_3_0; }

		//delay=INT? trigger=BoolExpression? ("/" effects+=Effect (";" effects+=Effect)*)? | label=STRING
		public Alternatives getAlternatives_4_3_1() { return cAlternatives_4_3_1; }

		//delay=INT? trigger=BoolExpression? ("/" effects+=Effect (";" effects+=Effect)*)?
		public Group getGroup_4_3_1_0() { return cGroup_4_3_1_0; }

		//delay=INT?
		public Assignment getDelayAssignment_4_3_1_0_0() { return cDelayAssignment_4_3_1_0_0; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_4_3_1_0_0_0() { return cDelayINTTerminalRuleCall_4_3_1_0_0_0; }

		//trigger=BoolExpression?
		public Assignment getTriggerAssignment_4_3_1_0_1() { return cTriggerAssignment_4_3_1_0_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_4_3_1_0_1_0() { return cTriggerBoolExpressionParserRuleCall_4_3_1_0_1_0; }

		//("/" effects+=Effect (";" effects+=Effect)*)?
		public Group getGroup_4_3_1_0_2() { return cGroup_4_3_1_0_2; }

		//"/"
		public Keyword getSolidusKeyword_4_3_1_0_2_0() { return cSolidusKeyword_4_3_1_0_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_3_1_0_2_1() { return cEffectsAssignment_4_3_1_0_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_3_1_0_2_1_0() { return cEffectsEffectParserRuleCall_4_3_1_0_2_1_0; }

		//(";" effects+=Effect)*
		public Group getGroup_4_3_1_0_2_2() { return cGroup_4_3_1_0_2_2; }

		//";"
		public Keyword getSemicolonKeyword_4_3_1_0_2_2_0() { return cSemicolonKeyword_4_3_1_0_2_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_3_1_0_2_2_1() { return cEffectsAssignment_4_3_1_0_2_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_3_1_0_2_2_1_0() { return cEffectsEffectParserRuleCall_4_3_1_0_2_2_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_4_3_1_1() { return cLabelAssignment_4_3_1_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_3_1_1_0() { return cLabelSTRINGTerminalRuleCall_4_3_1_1_0; }
	}

	public class ValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInputInputKeyword_1_0 = (Keyword)cInputAssignment_1.eContents().get(0);
		private final Assignment cOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOutputOutputKeyword_2_0 = (Keyword)cOutputAssignment_2.eContents().get(0);
		private final Assignment cStaticAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cStaticStaticKeyword_3_0 = (Keyword)cStaticAssignment_3.eContents().get(0);
		private final Assignment cSignalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cSignalSignalKeyword_4_0 = (Keyword)cSignalAssignment_4.eContents().get(0);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeValueTypeEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInitialValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_7_1_0 = (RuleCall)cInitialValueAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCombineKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cCombineOperatorAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_8_1_0 = (RuleCall)cCombineOperatorAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// ---------------------------------------------------------------------------------------------------
		//ValuedObject returns kexpressions::ValuedObject:
		//	annotations+=Annotation* input?="input"? output?="output"? static?="static"? signal?="signal"? type=ValueType?
		//	name=ID ("=" initialValue=Expression)? ("combine" combineOperator=CombineOperator)? ";";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* input?="input"? output?="output"? static?="static"? signal?="signal"? type=ValueType? name=ID
		//("=" initialValue=Expression)? ("combine" combineOperator=CombineOperator)? ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//input?="input"?
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }

		//"input"
		public Keyword getInputInputKeyword_1_0() { return cInputInputKeyword_1_0; }

		//output?="output"?
		public Assignment getOutputAssignment_2() { return cOutputAssignment_2; }

		//"output"
		public Keyword getOutputOutputKeyword_2_0() { return cOutputOutputKeyword_2_0; }

		//static?="static"?
		public Assignment getStaticAssignment_3() { return cStaticAssignment_3; }

		//"static"
		public Keyword getStaticStaticKeyword_3_0() { return cStaticStaticKeyword_3_0; }

		//signal?="signal"?
		public Assignment getSignalAssignment_4() { return cSignalAssignment_4; }

		//"signal"
		public Keyword getSignalSignalKeyword_4_0() { return cSignalSignalKeyword_4_0; }

		//type=ValueType?
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_5_0() { return cTypeValueTypeEnumRuleCall_5_0; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }

		//("=" initialValue=Expression)?
		public Group getGroup_7() { return cGroup_7; }

		//"="
		public Keyword getEqualsSignKeyword_7_0() { return cEqualsSignKeyword_7_0; }

		//initialValue=Expression
		public Assignment getInitialValueAssignment_7_1() { return cInitialValueAssignment_7_1; }

		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_7_1_0() { return cInitialValueExpressionParserRuleCall_7_1_0; }

		//("combine" combineOperator=CombineOperator)?
		public Group getGroup_8() { return cGroup_8; }

		//"combine"
		public Keyword getCombineKeyword_8_0() { return cCombineKeyword_8_0; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_8_1() { return cCombineOperatorAssignment_8_1; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_8_1_0() { return cCombineOperatorCombineOperatorEnumRuleCall_8_1_0; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class TextualCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextualCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTextHOSTCODETerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// ---------------------------------------------------------------------------------------------------
		//TextualCode returns kexpressions::TextExpression:
		//	text=HOSTCODE ";";
		public ParserRule getRule() { return rule; }

		//text=HOSTCODE ";"
		public Group getGroup() { return cGroup; }

		//text=HOSTCODE
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }

		//HOSTCODE
		public RuleCall getTextHOSTCODETerminalRuleCall_0_0() { return cTextHOSTCODETerminalRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class SubstitutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Substitution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActualAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActualIDTerminalRuleCall_0_0 = (RuleCall)cActualAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalIDTerminalRuleCall_2_0 = (RuleCall)cFormalAssignment_2.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//Substitution returns sccharts::Substitution:
		//	actual=ID "/" formal=ID;
		public ParserRule getRule() { return rule; }

		//actual=ID "/" formal=ID
		public Group getGroup() { return cGroup; }

		//actual=ID
		public Assignment getActualAssignment_0() { return cActualAssignment_0; }

		//ID
		public RuleCall getActualIDTerminalRuleCall_0_0() { return cActualIDTerminalRuleCall_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//formal=ID
		public Assignment getFormalAssignment_2() { return cFormalAssignment_2; }

		//ID
		public RuleCall getFormalIDTerminalRuleCall_2_0() { return cFormalIDTerminalRuleCall_2_0; }
	}
	
	
	public class StateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNormalKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONNECTOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONNECTORConnectorKeyword_1_0 = (Keyword)cCONNECTOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFERENCEReferenceKeyword_2_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTUALTextualKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------
		//enum StateType returns sccharts::StateType:
		//	NORMAL="normal" | CONNECTOR="connector" | REFERENCE="reference" | TEXTUAL="textual";
		public EnumRule getRule() { return rule; }

		//NORMAL="normal" | CONNECTOR="connector" | REFERENCE="reference" | TEXTUAL="textual"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORMAL="normal"
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }

		//"normal"
		public Keyword getNORMALNormalKeyword_0_0() { return cNORMALNormalKeyword_0_0; }

		//CONNECTOR="connector"
		public EnumLiteralDeclaration getCONNECTOREnumLiteralDeclaration_1() { return cCONNECTOREnumLiteralDeclaration_1; }

		//"connector"
		public Keyword getCONNECTORConnectorKeyword_1_0() { return cCONNECTORConnectorKeyword_1_0; }

		//REFERENCE="reference"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_2() { return cREFERENCEEnumLiteralDeclaration_2; }

		//"reference"
		public Keyword getREFERENCEReferenceKeyword_2_0() { return cREFERENCEReferenceKeyword_2_0; }

		//TEXTUAL="textual"
		public EnumLiteralDeclaration getTEXTUALEnumLiteralDeclaration_3() { return cTEXTUALEnumLiteralDeclaration_3; }

		//"textual"
		public Keyword getTEXTUALTextualKeyword_3_0() { return cTEXTUALTextualKeyword_3_0; }
	}

	public class TransitionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKABORTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cWEAKABORTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGABORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGABORTOKeyword_1_0 = (Keyword)cSTRONGABORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNORMALTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cNORMALTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TransitionType returns sccharts::TransitionType:
		//	WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->";
		public EnumRule getRule() { return rule; }

		//WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WEAKABORT="-->"
		public EnumLiteralDeclaration getWEAKABORTEnumLiteralDeclaration_0() { return cWEAKABORTEnumLiteralDeclaration_0; }

		//"-->"
		public Keyword getWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cWEAKABORTHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }

		//STRONGABORT="o->"
		public EnumLiteralDeclaration getSTRONGABORTEnumLiteralDeclaration_1() { return cSTRONGABORTEnumLiteralDeclaration_1; }

		//"o->"
		public Keyword getSTRONGABORTOKeyword_1_0() { return cSTRONGABORTOKeyword_1_0; }

		//NORMALTERMINATION=">->"
		public EnumLiteralDeclaration getNORMALTERMINATIONEnumLiteralDeclaration_2() { return cNORMALTERMINATIONEnumLiteralDeclaration_2; }

		//">->"
		public Keyword getNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0() { return cNORMALTERMINATIONGreaterThanSignHyphenMinusGreaterThanSignKeyword_2_0; }
	}
	
	private RootRegionElements pRootRegion;
	private SingleRegionElements pSingleRegion;
	private RegionElements pRegion;
	private SCChartElements pSCChart;
	private StateElements pState;
	private LocalActionElements pLocalAction;
	private TransitionElements pTransition;
	private ValuedObjectElements pValuedObject;
	private TextualCodeElements pTextualCode;
	private SubstitutionElements pSubstitution;
	private StateTypeElements unknownRuleStateType;
	private TransitionTypeElements unknownRuleTransitionType;
	
	private final Grammar grammar;

	private ActionsGrammarAccess gaActions;

	@Inject
	public SctGrammarAccess(GrammarProvider grammarProvider,
		ActionsGrammarAccess gaActions) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaActions = gaActions;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sccharts.text.sct.Sct".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ActionsGrammarAccess getActionsGrammarAccess() {
		return gaActions;
	}

	
	//// ---------------------------------------------------------------------------------------------------
	//RootRegion returns sccharts::Region:
	//	{sccharts::Region} annotations+=ImportAnnotation* (annotations+=Annotation* "region" id=ID label=STRING? ":"
	//	valuedObjects+=ValuedObject* bodyText+=TextualCode*)? states+=SCChart*;
	public RootRegionElements getRootRegionAccess() {
		return (pRootRegion != null) ? pRootRegion : (pRootRegion = new RootRegionElements());
	}
	
	public ParserRule getRootRegionRule() {
		return getRootRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//SingleRegion returns sccharts::Region:
	//	{sccharts::Region} (annotations+=Annotation* "region" id=ID? label=STRING? ":" valuedObjects+=ValuedObject*
	//	bodyText+=TextualCode*)? states+=State*;
	public SingleRegionElements getSingleRegionAccess() {
		return (pSingleRegion != null) ? pSingleRegion : (pSingleRegion = new SingleRegionElements());
	}
	
	public ParserRule getSingleRegionRule() {
		return getSingleRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Region returns sccharts::Region:
	//	{sccharts::Region} annotations+=Annotation* "region" id=ID? label=STRING? ":" valuedObjects+=ValuedObject*
	//	bodyText+=TextualCode* states+=State+;
	public RegionElements getRegionAccess() {
		return (pRegion != null) ? pRegion : (pRegion = new RegionElements());
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//SCChart returns sccharts::State:
	//	annotations+=Annotation* type=StateType? "scchart" id=ID label=STRING? ("@" bodyReference=[sccharts::State] ("["
	//	renamings+=Substitution ("," renamings+=Substitution)* "]")? | "{" ((valuedObjects+=ValuedObject |
	//	localActions+=LocalAction)* bodyText+=TextualCode* (regions+=SingleRegion regions+=Region*)?) "}")?;
	public SCChartElements getSCChartAccess() {
		return (pSCChart != null) ? pSCChart : (pSCChart = new SCChartElements());
	}
	
	public ParserRule getSCChartRule() {
		return getSCChartAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//State returns sccharts::State:
	//	annotations+=Annotation* (initial?="initial" final?="final"? | final?="final" initial?="initial"?)? type=StateType?
	//	"state" id=ID label=STRING? ("@" bodyReference=[sccharts::State] ("[" renamings+=Substitution (","
	//	renamings+=Substitution)* "]")? | "{" ((valuedObjects+=ValuedObject | localActions+=LocalAction)*
	//	bodyText+=TextualCode* (regions+=SingleRegion regions+=Region*)?) "}")? outgoingTransitions+=Transition* ";";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//LocalAction returns sccharts::LocalAction:
	//	EntryAction | DuringAction | ExitAction | SuspendAction;
	public LocalActionElements getLocalActionAccess() {
		return (pLocalAction != null) ? pLocalAction : (pLocalAction = new LocalActionElements());
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Transition returns sccharts::Transition:
	//	annotations+=Annotation* type=TransitionType priority=INT? targetState=[sccharts::State] (immediate?="immediate"?
	//	deferred?="deferred"? history=HistoryType? ("with" (delay=INT? trigger=BoolExpression? ("/" effects+=Effect (";"
	//	effects+=Effect)*)? | label=STRING))?)?;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//ValuedObject returns kexpressions::ValuedObject:
	//	annotations+=Annotation* input?="input"? output?="output"? static?="static"? signal?="signal"? type=ValueType?
	//	name=ID ("=" initialValue=Expression)? ("combine" combineOperator=CombineOperator)? ";";
	public ValuedObjectElements getValuedObjectAccess() {
		return (pValuedObject != null) ? pValuedObject : (pValuedObject = new ValuedObjectElements());
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//TextualCode returns kexpressions::TextExpression:
	//	text=HOSTCODE ";";
	public TextualCodeElements getTextualCodeAccess() {
		return (pTextualCode != null) ? pTextualCode : (pTextualCode = new TextualCodeElements());
	}
	
	public ParserRule getTextualCodeRule() {
		return getTextualCodeAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//Substitution returns sccharts::Substitution:
	//	actual=ID "/" formal=ID;
	public SubstitutionElements getSubstitutionAccess() {
		return (pSubstitution != null) ? pSubstitution : (pSubstitution = new SubstitutionElements());
	}
	
	public ParserRule getSubstitutionRule() {
		return getSubstitutionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//enum StateType returns sccharts::StateType:
	//	NORMAL="normal" | CONNECTOR="connector" | REFERENCE="reference" | TEXTUAL="textual";
	public StateTypeElements getStateTypeAccess() {
		return (unknownRuleStateType != null) ? unknownRuleStateType : (unknownRuleStateType = new StateTypeElements());
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//enum TransitionType returns sccharts::TransitionType:
	//	WEAKABORT="-->" | STRONGABORT="o->" | NORMALTERMINATION=">->";
	public TransitionTypeElements getTransitionTypeAccess() {
		return (unknownRuleTransitionType != null) ? unknownRuleTransitionType : (unknownRuleTransitionType = new TransitionTypeElements());
	}
	
	public EnumRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	////// chsch: The action rule is used in Kits.xtext for entry-, during-, exitActions, suspensionTrigger 
	////Action returns sccharts::Action:
	////    {sccharts::Action}
	//////    (annotations += Annotation)*
	////	(isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ("/" effects+=Effect ((';') effects+=Effect)*)?; 		
	//EntryAction returns sccharts::EntryAction:
	//	{sccharts::EntryAction} //    (annotations += Annotation)*
	//	"entry" trigger=BoolExpression? ("/" effects+=Effect (";" effects+=Effect)*)? ";";
	public ActionsGrammarAccess.EntryActionElements getEntryActionAccess() {
		return gaActions.getEntryActionAccess();
	}
	
	public ParserRule getEntryActionRule() {
		return getEntryActionAccess().getRule();
	}

	//DuringAction returns sccharts::DuringAction:
	//	{sccharts::DuringAction} //    (annotations += Annotation)*
	//	immediate?="immediate"? "during" trigger=BoolExpression? ("/" effects+=Effect (";" effects+=Effect)*)? ";";
	public ActionsGrammarAccess.DuringActionElements getDuringActionAccess() {
		return gaActions.getDuringActionAccess();
	}
	
	public ParserRule getDuringActionRule() {
		return getDuringActionAccess().getRule();
	}

	//ExitAction returns sccharts::ExitAction:
	//	{sccharts::ExitAction} //    (annotations += Annotation)*
	//	"exit" trigger=BoolExpression? ("/" effects+=Effect (";" effects+=Effect)*)? ";";
	public ActionsGrammarAccess.ExitActionElements getExitActionAccess() {
		return gaActions.getExitActionAccess();
	}
	
	public ParserRule getExitActionRule() {
		return getExitActionAccess().getRule();
	}

	//SuspendAction returns sccharts::SuspendAction:
	//	{sccharts::SuspendAction} //    (annotations += Annotation)*
	//	immediate?="immediate"? weak?="weak"? "suspend" trigger=BoolExpression? ";";
	public ActionsGrammarAccess.SuspendActionElements getSuspendActionAccess() {
		return gaActions.getSuspendActionAccess();
	}
	
	public ParserRule getSuspendActionRule() {
		return getSuspendActionAccess().getRule();
	}

	//Effect returns sccharts::Effect:
	//	Emission | Assignment | TextEffect;
	public ActionsGrammarAccess.EffectElements getEffectAccess() {
		return gaActions.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//Emission returns sccharts::Emission:
	//	valuedObject=[kexpressions::ValuedObject] ("(" newValue=Expression ")")?;
	public ActionsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaActions.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//Assignment returns sccharts::Assignment:
	//	valuedObject=[kexpressions::ValuedObject] "=" expression=Expression;
	public ActionsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaActions.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//TextEffect returns sccharts::TextEffect:
	//	text=HOSTCODE;
	public ActionsGrammarAccess.TextEffectElements getTextEffectAccess() {
		return gaActions.getTextEffectAccess();
	}
	
	public ParserRule getTextEffectRule() {
		return getTextEffectAccess().getRule();
	}

	//enum DivOperator returns kexpressions::OperatorType:
	//	DIV=":";
	public ActionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaActions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum HistoryType returns sccharts::HistoryType:
	//	RESET="reset" | SHALLOW="shallow history" | DEEP="history";
	public ActionsGrammarAccess.HistoryTypeElements getHistoryTypeAccess() {
		return gaActions.getHistoryTypeAccess();
	}
	
	public EnumRule getHistoryTypeRule() {
		return getHistoryTypeAccess().getRule();
	}

	//Root returns ecore::EObject:
	//	Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaActions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	////Variable returns annotations::Annotatable:
	////    (annotations += StringAnnotation)*;
	//// --------------------------
	////
	////   EXPRESSIONS
	////
	//// --------------------------
	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaActions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Example: not D and C or val(E) = 42 or not (A and (B or C))
	//BoolExpression returns Expression:
	//	OrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaActions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
	//OrExpression returns Expression:
	//	AndExpression ({OperatorExpression.subExpressions+=current} operator=OrOperator subExpressions+=AndExpression)*;
	public KExpressionsGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaActions.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//// Example: A and B, not C and 42 <= val(D)
	//AndExpression returns Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} operator=AndOperator
	//	subExpressions+=CompareOperation)*;
	public KExpressionsGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaActions.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression) | NotExpression;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaActions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// order IS IMPORTANT
	//NotOrValuedExpression returns Expression:
	//	ValuedExpression | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaActions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//NotExpression returns Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaActions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression returns Expression:
	//	AddExpression;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaActions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2
	//AddExpression returns Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=SubExpression)*;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaActions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Example: varA - ?B
	//SubExpression returns Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=MultExpression)*;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaActions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	////    ({OperatorExpression} subExpressions+=MultExpression (operator=SubOperator subExpressions+=MultExpression)+)
	////	| ({OperatorExpression} subExpressions+=MultExpression subExpressions+=NIntValue)
	////    | MultExpression;
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=DivExpression)*;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaActions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
	//DivExpression returns Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=ModExpression)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaActions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Example: varA mod ?B
	//ModExpression returns Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaActions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//NegExpression returns Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaActions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//AtomicExpression returns Expression:
	//	BoolValue | ValuedObjectTestExpression | "(" BoolExpression ")" | TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaActions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//AtomicValuedExpression returns Expression:
	//	IntValue //    | '(' DivExpression ')'
	//	| FloatValue | DoubleValue | "(" ValuedExpression ")" | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaActions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A), A varX
	//ValuedObjectTestExpression returns Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) "(" subExpressions+=ValuedObjectTestExpression ")" |
	//	ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaActions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Example: A, varB
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject];
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaActions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaActions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaActions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	////NIntValue returns IntValue:
	////	value=NINT;
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaActions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaActions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//DoubleValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.DoubleValueElements getDoubleValueAccess() {
		return gaActions.getDoubleValueAccess();
	}
	
	public ParserRule getDoubleValueRule() {
		return getDoubleValueAccess().getRule();
	}

	//// data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valuedObjects
	//// used in Kits.xtext 
	//AnyType returns ecore::EString:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaActions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//// --------------------------
	////
	////  Interface Declarations
	////
	//// --------------------------
	////ISignal returns ISignal:
	////	name=ID (channelDescr=ChannelDescription)?;
	////InterfaceDeclaration:
	////	(declarations+=ValuedObject ";")* ;
	////ChannelDescription:
	////	(":" type=TypeIdentifier)
	////	| ("(" type=TypeIdentifier ")")
	////	| (":=" expression=Expression ":" type=TypeIdentifier);
	//// Variables
	////InterfaceVariableDecl:
	////	"var" (varDecls+=VariableDecl) ("," varDecls+=VariableDecl)*;
	////VariableDecl:
	////	(variables+=IVariable) ("," variables+=IVariable)* ":" type=TypeIdentifier;
	////IVariable:
	////	 name=ID (":=" expression=Expression)?;
	//// transform ID to hostcode
	////TypeIdentifier:
	////	type=ValueType 
	////	| typeID=ID
	////	| ("combine" (type=ValueType | typeID=ID) "with" operator=CombineOperator);
	////InterfaceDeclaration:
	////  (declarations+= ValuedObjectDelaration ";")* ;
	////
	////
	////ValuedObjectDelaration:
	////    SignalDeclaration | SignalDeclaration
	////;
	////	
	////SignalDeclaration returns Signal:
	////    SignalDefinition
	////;
	////SignalDefinition:
	////    (isInput?='input')? (isOutput?='output')? 'signal'
	////    name=ID (':' (type=ValueType | typeID=ID)
	////    ('=' varInitialValue=Expression)?
	////    ('with' varCombineOperator=CombineOperator)?)? ';';
	/// ************************************************ / / *           Variable Definition                * /
	/// ************************************************ / // A dummy VariableDefinition declaration, which will be override by an other grammar 
	////VariableDefinition:
	////  {VariableDefinition} 'variable' name=ID ';';
	//// CMOT changes, want to use VariableDefinitions from SyncText
	////VariableDeclaration returns Variable:
	////    VariableDefinition
	////;
	////VariableDefinition:
	////    (isInput?='input')? (isOutput?='output')? (isStatic?='static')? (type=ValueType | typeID=ID) name=ID
	////    ('=' initialValue=Expression)? ('with' varCombineOperator=CombineOperator)? ';';    
	////	
	//// --------------------------
	////
	////  Terminals...
	////
	//// --------------------------
	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaActions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaActions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum OrOperator returns OperatorType:
	//	OR="|";
	public KExpressionsGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaActions.getOrOperatorAccess();
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//enum AndOperator returns OperatorType:
	//	AND="&";
	public KExpressionsGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaActions.getAndOperatorAccess();
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaActions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaActions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaActions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaActions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="mod";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaActions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaActions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	/// *
	//   the following declarations are re-used in Actions.xtext, Interface.xtext, Kits.xtext 
	// * / enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | DOUBLE="double" | STRING="string" |
	//	HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaActions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaActions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//// custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getHOSTCODERule() {
		return gaActions.getHOSTCODERule();
	} 

	//// --------------------------
	////
	////   ANNOTATIONS
	////
	//// --------------------------
	//Annotation:
	//	CommentAnnotation | TagAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyBooleanValueAnnotation | KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaActions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//ValuedAnnotation returns Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaActions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// e.g.: / ** semantic comment * /
	//CommentAnnotation returns StringAnnotation:
	//	value=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaActions.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// e.g.: @HVlayout
	//TagAnnotation returns Annotation:
	//	"@" name=ExtendedID ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaActions.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// e.g.: @layouter dot;   
	//KeyStringValueAnnotation returns StringAnnotation:
	//	"@" name=ExtendedID value=EString ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaActions.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//	"@" name=ExtendedID "[" type=ExtendedID "]" value=EString ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaActions.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// e.g.: @visible true;
	//KeyBooleanValueAnnotation returns BooleanAnnotation:
	//	"@" name=ExtendedID value=BOOLEAN ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaActions.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// e.g.: @minSpace 10;    
	//KeyIntValueAnnotation returns IntAnnotation:
	//	"@" name=ExtendedID value=INT ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaActions.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// e.g.: @minSpace 10.0;    
	//KeyFloatValueAnnotation returns FloatAnnotation:
	//	"@" name=ExtendedID value=FLOAT ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaActions.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// needed for importing other resources
	//ImportAnnotation:
	//	"import" importURI=STRING;
	public AnnotationsGrammarAccess.ImportAnnotationElements getImportAnnotationAccess() {
		return gaActions.getImportAnnotationAccess();
	}
	
	public ParserRule getImportAnnotationRule() {
		return getImportAnnotationAccess().getRule();
	}

	//// allow strings without quotes as they don'c contain spaces
	//EString returns ecore::EString:
	//	STRING | ID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaActions.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//ExtendedID returns ecore::EString:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaActions.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// --------------------------
	////
	////  Terminals...
	////
	//// --------------------------
	//// custom terminals
	//// custom terminal rule introducing semantic comments
	//terminal COMMENT_ANNOTATION:
	//	"/ **"->"* /";
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaActions.getCOMMENT_ANNOTATIONRule();
	} 

	//// modified version of Terminals.ML_COMMENT as
	//// COMMENT_ANNOTATION is not recognized correctly with original one 
	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaActions.getML_COMMENTRule();
	} 

	//// generic terminals
	//terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return gaActions.getNUMBERRule();
	} 

	//// redefine INT terminal to allow negative numbers
	//terminal INT returns ecore::EInt:
	//	"-"? NUMBER+;
	public TerminalRule getINTRule() {
		return gaActions.getINTRule();
	} 

	//// make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EFloatObject:
	//	"-"? NUMBER+ ("." NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? "f"? | "-"? NUMBER+ "f";
	public TerminalRule getFLOATRule() {
		return gaActions.getFLOATRule();
	} 

	//// introduce boolean values
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaActions.getBOOLEANRule();
	} 

	//// custom terminal rule for strings
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaActions.getSTRINGRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaActions.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaActions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaActions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaActions.getANY_OTHERRule();
	} 
}
