/*
* generated by Xtext
*/
grammar InternalSct;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.sccharts.text.sct.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.sccharts.text.sct.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.sccharts.text.sct.services.SctGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private SctGrammarAccess grammarAccess;
 	
    public InternalSctParser(TokenStream input, SctGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected SctGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRootAccess().getSCChartParserRuleCall()); 
    }
    this_SCChart_0=ruleSCChart
    { 
        $current = $this_SCChart_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSingleControlflowRegion
entryRuleSingleControlflowRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleControlflowRegionRule()); }
	 iv_ruleSingleControlflowRegion=ruleSingleControlflowRegion 
	 { $current=$iv_ruleSingleControlflowRegion.current; } 
	 EOF 
;

// Rule SingleControlflowRegion
ruleSingleControlflowRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleControlflowRegionAccess().getControlflowRegionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleControlflowRegionAccess().getAnnotationsAnnotationParserRuleCall_1_0_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleControlflowRegionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='region' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleControlflowRegionAccess().getRegionKeyword_1_1());
    }
(
(
		lv_id_3_0=RULE_ID
		{
			newLeafNode(lv_id_3_0, grammarAccess.getSingleControlflowRegionAccess().getIdIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleControlflowRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_4_0=RULE_STRING
		{
			newLeafNode(lv_label_4_0, grammarAccess.getSingleControlflowRegionAccess().getLabelSTRINGTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleControlflowRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"STRING");
	    }

)
)?(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSingleControlflowRegionAccess().getLeftSquareBracketKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleControlflowRegionAccess().getForForParserRuleCall_1_4_1_0()); 
	    }
		lv_for_6_0=ruleFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleControlflowRegionRule());
	        }
       		set(
       			$current, 
       			"for",
        		lv_for_6_0, 
        		"For");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSingleControlflowRegionAccess().getRightSquareBracketKeyword_1_4_2());
    }
)?	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSingleControlflowRegionAccess().getColonKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleControlflowRegionAccess().getDeclarationsDeclarationParserRuleCall_1_6_0()); 
	    }
		lv_declarations_9_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleControlflowRegionRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_9_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleControlflowRegionAccess().getStatesStateParserRuleCall_2_0()); 
	    }
		lv_states_10_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleControlflowRegionRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_10_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSingleDataflowRegion
entryRuleSingleDataflowRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleDataflowRegionRule()); }
	 iv_ruleSingleDataflowRegion=ruleSingleDataflowRegion 
	 { $current=$iv_ruleSingleDataflowRegion.current; } 
	 EOF 
;

// Rule SingleDataflowRegion
ruleSingleDataflowRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleDataflowRegionAccess().getDataflowRegionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleDataflowRegionAccess().getAnnotationsAnnotationParserRuleCall_1_0_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleDataflowRegionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='dataflow' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleDataflowRegionAccess().getDataflowKeyword_1_1());
    }
(
(
		lv_id_3_0=RULE_ID
		{
			newLeafNode(lv_id_3_0, grammarAccess.getSingleDataflowRegionAccess().getIdIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleDataflowRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_4_0=RULE_STRING
		{
			newLeafNode(lv_label_4_0, grammarAccess.getSingleDataflowRegionAccess().getLabelSTRINGTerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleDataflowRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"STRING");
	    }

)
)?(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSingleDataflowRegionAccess().getLeftSquareBracketKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleDataflowRegionAccess().getForForParserRuleCall_1_4_1_0()); 
	    }
		lv_for_6_0=ruleFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleDataflowRegionRule());
	        }
       		set(
       			$current, 
       			"for",
        		lv_for_6_0, 
        		"For");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSingleDataflowRegionAccess().getRightSquareBracketKeyword_1_4_2());
    }
)?	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSingleDataflowRegionAccess().getColonKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleDataflowRegionAccess().getDeclarationsDeclarationParserRuleCall_1_6_0()); 
	    }
		lv_declarations_9_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleDataflowRegionRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_9_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleDataflowRegionAccess().getEquationsEquationParserRuleCall_2_0_0()); 
	    }
		lv_equations_10_0=ruleEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleDataflowRegionRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_10_0, 
        		"Equation");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleDataflowRegionAccess().getNodesNodeParserRuleCall_2_1_0()); 
	    }
		lv_nodes_11_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleDataflowRegionRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_11_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForRule()); }
	 iv_ruleFor=ruleFor 
	 { $current=$iv_ruleFor.current; } 
	 EOF 
;

// Rule For
ruleFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getForAccess().getForAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getValuedObjectValuedObjectParserRuleCall_1_0()); 
	    }
		lv_valuedObject_1_0=ruleValuedObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"valuedObject",
        		lv_valuedObject_1_0, 
        		"ValuedObject");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_from_3_0=RULE_INT
		{
			newLeafNode(lv_from_3_0, grammarAccess.getForAccess().getFromINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"from",
        		lv_from_3_0, 
        		"INT");
	    }

)
)	otherlv_4='..' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForAccess().getFullStopFullStopKeyword_4());
    }
(
(
		lv_to_5_0=RULE_INT
		{
			newLeafNode(lv_to_5_0, grammarAccess.getForAccess().getToINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"to",
        		lv_to_5_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleControlflowRegion
entryRuleControlflowRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControlflowRegionRule()); }
	 iv_ruleControlflowRegion=ruleControlflowRegion 
	 { $current=$iv_ruleControlflowRegion.current; } 
	 EOF 
;

// Rule ControlflowRegion
ruleControlflowRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getControlflowRegionAccess().getControlflowRegionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getControlflowRegionAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlflowRegionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='region' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getControlflowRegionAccess().getRegionKeyword_2());
    }
(
(
		lv_id_3_0=RULE_ID
		{
			newLeafNode(lv_id_3_0, grammarAccess.getControlflowRegionAccess().getIdIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlflowRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_4_0=RULE_STRING
		{
			newLeafNode(lv_label_4_0, grammarAccess.getControlflowRegionAccess().getLabelSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControlflowRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"STRING");
	    }

)
)?(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getControlflowRegionAccess().getLeftSquareBracketKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlflowRegionAccess().getForForParserRuleCall_5_1_0()); 
	    }
		lv_for_6_0=ruleFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlflowRegionRule());
	        }
       		set(
       			$current, 
       			"for",
        		lv_for_6_0, 
        		"For");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getControlflowRegionAccess().getRightSquareBracketKeyword_5_2());
    }
)?	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getControlflowRegionAccess().getColonKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getControlflowRegionAccess().getDeclarationsDeclarationParserRuleCall_7_0()); 
	    }
		lv_declarations_9_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlflowRegionRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_9_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getControlflowRegionAccess().getStatesStateParserRuleCall_8_0()); 
	    }
		lv_states_10_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getControlflowRegionRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_10_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleDataflowRegion
entryRuleDataflowRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataflowRegionRule()); }
	 iv_ruleDataflowRegion=ruleDataflowRegion 
	 { $current=$iv_ruleDataflowRegion.current; } 
	 EOF 
;

// Rule DataflowRegion
ruleDataflowRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDataflowRegionAccess().getDataflowRegionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDataflowRegionAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataflowRegionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='dataflow' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataflowRegionAccess().getDataflowKeyword_2());
    }
(
(
		lv_id_3_0=RULE_ID
		{
			newLeafNode(lv_id_3_0, grammarAccess.getDataflowRegionAccess().getIdIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_4_0=RULE_STRING
		{
			newLeafNode(lv_label_4_0, grammarAccess.getDataflowRegionAccess().getLabelSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataflowRegionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"STRING");
	    }

)
)?(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDataflowRegionAccess().getLeftSquareBracketKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataflowRegionAccess().getForForParserRuleCall_5_1_0()); 
	    }
		lv_for_6_0=ruleFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataflowRegionRule());
	        }
       		set(
       			$current, 
       			"for",
        		lv_for_6_0, 
        		"For");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDataflowRegionAccess().getRightSquareBracketKeyword_5_2());
    }
)?	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDataflowRegionAccess().getColonKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataflowRegionAccess().getDeclarationsDeclarationParserRuleCall_7_0()); 
	    }
		lv_declarations_9_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataflowRegionRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_9_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getDataflowRegionAccess().getEquationsEquationParserRuleCall_8_0_0()); 
	    }
		lv_equations_10_0=ruleEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataflowRegionRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_10_0, 
        		"Equation");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDataflowRegionAccess().getNodesNodeParserRuleCall_8_1_0()); 
	    }
		lv_nodes_11_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataflowRegionRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_11_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	 iv_ruleEquation=ruleEquation 
	 { $current=$iv_ruleEquation.current; } 
	 EOF 
;

// Rule Equation
ruleEquation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEquationAccess().getEquationAction_0(),
            $current);
    }
)(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEquationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEquationAccess().getValuedObjectValuedObjectCrossReference_1_0_0_0()); 
	}

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEquationAccess().getEqualsSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getExpressionExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEquationAccess().getSemicolonKeyword_1_0_3());
    }
)
    |((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEquationRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getEquationAccess().getValuedObjectValuedObjectCrossReference_1_1_0_0()); 
	}

)
)	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEquationAccess().getEqualsSignKeyword_1_1_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEquationRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getEquationAccess().getNodeNodeCrossReference_1_1_2_0()); 
	}

)
)	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEquationAccess().getFullStopKeyword_1_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getExpressionValuedObjectReferenceParserRuleCall_1_1_4_0()); 
	    }
		lv_expression_9_0=ruleValuedObjectReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_9_0, 
        		"ValuedObjectReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getEquationAccess().getSemicolonKeyword_1_1_5());
    }
)))
;





// Entry rule entryRuleSCChart
entryRuleSCChart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSCChartRule()); }
	 iv_ruleSCChart=ruleSCChart 
	 { $current=$iv_ruleSCChart.current; } 
	 EOF 
;

// Rule SCChart
ruleSCChart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSCChartAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCChartRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='scchart' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSCChartAccess().getScchartKeyword_1());
    }
(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getSCChartAccess().getIdIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSCChartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ID");
	    }

)
)(
(
		lv_label_3_0=RULE_STRING
		{
			newLeafNode(lv_label_3_0, grammarAccess.getSCChartAccess().getLabelSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSCChartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_3_0, 
        		"STRING");
	    }

)
)?((	otherlv_4='references' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSCChartAccess().getReferencesKeyword_4_0_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSCChartRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getSCChartAccess().getReferencedScopeStateCrossReference_4_0_1_0()); 
	}

)
)(	otherlv_6='bind' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSCChartAccess().getBindKeyword_4_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSCChartAccess().getBindingsBindingParserRuleCall_4_0_2_1_0()); 
	    }
		lv_bindings_7_0=ruleBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCChartRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_7_0, 
        		"Binding");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSCChartAccess().getCommaKeyword_4_0_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSCChartAccess().getBindingsBindingParserRuleCall_4_0_2_2_1_0()); 
	    }
		lv_bindings_9_0=ruleBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCChartRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_9_0, 
        		"Binding");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
    |(	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSCChartAccess().getLeftCurlyBracketKeyword_4_1_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSCChartAccess().getDeclarationsDeclarationParserRuleCall_4_1_1_0_0_0()); 
	    }
		lv_declarations_11_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCChartRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_11_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCChartAccess().getLocalActionsLocalActionParserRuleCall_4_1_1_0_1_0()); 
	    }
		lv_localActions_12_0=ruleLocalAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCChartRule());
	        }
       		add(
       			$current, 
       			"localActions",
        		lv_localActions_12_0, 
        		"LocalAction");
	        afterParserOrEnumRuleCall();
	    }

)
))*(((
(
		{ 
	        newCompositeNode(grammarAccess.getSCChartAccess().getRegionsSingleControlflowRegionParserRuleCall_4_1_1_1_0_0_0()); 
	    }
		lv_regions_13_0=ruleSingleControlflowRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCChartRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_13_0, 
        		"SingleControlflowRegion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCChartAccess().getRegionsSingleDataflowRegionParserRuleCall_4_1_1_1_0_1_0()); 
	    }
		lv_regions_14_0=ruleSingleDataflowRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCChartRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_14_0, 
        		"SingleDataflowRegion");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getSCChartAccess().getRegionsRegionParserRuleCall_4_1_1_1_1_0()); 
	    }
		lv_regions_15_0=ruleRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCChartRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_15_0, 
        		"Region");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSCChartAccess().getRightCurlyBracketKeyword_4_1_2());
    }
))?)
;





// Entry rule entryRuleRegion
entryRuleRegion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegionRule()); }
	 iv_ruleRegion=ruleRegion 
	 { $current=$iv_ruleRegion.current; } 
	 EOF 
;

// Rule Region
ruleRegion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRegionAccess().getControlflowRegionParserRuleCall_0()); 
    }
    this_ControlflowRegion_0=ruleControlflowRegion
    { 
        $current = $this_ControlflowRegion_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRegionAccess().getDataflowRegionParserRuleCall_1()); 
    }
    this_DataflowRegion_1=ruleDataflowRegion
    { 
        $current = $this_DataflowRegion_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(((
(
		lv_initial_1_0=	'initial' 
    {
        newLeafNode(lv_initial_1_0, grammarAccess.getStateAccess().getInitialInitialKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "initial", true, "initial");
	    }

)
)(
(
		lv_final_2_0=	'final' 
    {
        newLeafNode(lv_final_2_0, grammarAccess.getStateAccess().getFinalFinalKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "final", true, "final");
	    }

)
)?)
    |((
(
		lv_final_3_0=	'final' 
    {
        newLeafNode(lv_final_3_0, grammarAccess.getStateAccess().getFinalFinalKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "final", true, "final");
	    }

)
)(
(
		lv_initial_4_0=	'initial' 
    {
        newLeafNode(lv_initial_4_0, grammarAccess.getStateAccess().getInitialInitialKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "initial", true, "initial");
	    }

)
)?))?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getTypeStateTypeEnumRuleCall_2_0()); 
	    }
		lv_type_5_0=ruleStateType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"StateType");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6='state' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStateAccess().getStateKeyword_3());
    }
(
(
		lv_id_7_0=RULE_ID
		{
			newLeafNode(lv_id_7_0, grammarAccess.getStateAccess().getIdIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_7_0, 
        		"ID");
	    }

)
)(
(
		lv_label_8_0=RULE_STRING
		{
			newLeafNode(lv_label_8_0, grammarAccess.getStateAccess().getLabelSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_8_0, 
        		"STRING");
	    }

)
)?((	otherlv_9='references' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStateAccess().getReferencesKeyword_6_0_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getStateAccess().getReferencedScopeStateCrossReference_6_0_1_0()); 
	}

)
)(	otherlv_11='bind' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStateAccess().getBindKeyword_6_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getBindingsBindingParserRuleCall_6_0_2_1_0()); 
	    }
		lv_bindings_12_0=ruleBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_12_0, 
        		"Binding");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getStateAccess().getCommaKeyword_6_0_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getBindingsBindingParserRuleCall_6_0_2_2_1_0()); 
	    }
		lv_bindings_14_0=ruleBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_14_0, 
        		"Binding");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
    |(	otherlv_15='{' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_6_1_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getDeclarationsDeclarationParserRuleCall_6_1_1_0_0_0()); 
	    }
		lv_declarations_16_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_16_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getLocalActionsLocalActionParserRuleCall_6_1_1_0_1_0()); 
	    }
		lv_localActions_17_0=ruleLocalAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"localActions",
        		lv_localActions_17_0, 
        		"LocalAction");
	        afterParserOrEnumRuleCall();
	    }

)
))*(((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getRegionsSingleControlflowRegionParserRuleCall_6_1_1_1_0_0_0()); 
	    }
		lv_regions_18_0=ruleSingleControlflowRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_18_0, 
        		"SingleControlflowRegion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getRegionsSingleDataflowRegionParserRuleCall_6_1_1_1_0_1_0()); 
	    }
		lv_regions_19_0=ruleSingleDataflowRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_19_0, 
        		"SingleDataflowRegion");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getRegionsRegionParserRuleCall_6_1_1_1_1_0()); 
	    }
		lv_regions_20_0=ruleRegion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"regions",
        		lv_regions_20_0, 
        		"Region");
	        afterParserOrEnumRuleCall();
	    }

)
)*))	otherlv_21='}' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_6_1_2());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getOutgoingTransitionsTransitionParserRuleCall_7_0()); 
	    }
		lv_outgoingTransitions_22_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"outgoingTransitions",
        		lv_outgoingTransitions_22_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStateAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getReferenceNodeParserRuleCall_0()); 
    }
    this_ReferenceNode_0=ruleReferenceNode
    { 
        $current = $this_ReferenceNode_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getCallNodeParserRuleCall_1()); 
    }
    this_CallNode_1=ruleCallNode
    { 
        $current = $this_CallNode_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getDefineNodeParserRuleCall_2()); 
    }
    this_DefineNode_2=ruleDefineNode
    { 
        $current = $this_DefineNode_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCallNode
entryRuleCallNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallNodeRule()); }
	 iv_ruleCallNode=ruleCallNode 
	 { $current=$iv_ruleCallNode.current; } 
	 EOF 
;

// Rule CallNode
ruleCallNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCallNodeAccess().getCallNodeAction_0(),
            $current);
    }
)(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getCallNodeAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCallNodeAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCallNodeRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getCallNodeAccess().getCallReferenceDefineNodeCrossReference_3_0()); 
	}

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCallNodeAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallNodeAccess().getParametersValuedObjectReferenceParserRuleCall_5_0()); 
	    }
		lv_parameters_5_0=ruleValuedObjectReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallNodeRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"ValuedObjectReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCallNodeAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallNodeAccess().getParametersValuedObjectReferenceParserRuleCall_6_1_0()); 
	    }
		lv_parameters_7_0=ruleValuedObjectReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallNodeRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_7_0, 
        		"ValuedObjectReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCallNodeAccess().getRightParenthesisKeyword_7());
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCallNodeAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleDefineNode
entryRuleDefineNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineNodeRule()); }
	 iv_ruleDefineNode=ruleDefineNode 
	 { $current=$iv_ruleDefineNode.current; } 
	 EOF 
;

// Rule DefineNode
ruleDefineNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefineNodeAccess().getDefineNodeAction_0(),
            $current);
    }
)	otherlv_1='node' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefineNodeAccess().getNodeKeyword_1());
    }
(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getDefineNodeAccess().getIdIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefineNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefineNodeAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineNodeAccess().getInputsDeclarationParserRuleCall_4_0()); 
	    }
		lv_inputs_4_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineNodeRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_4_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDefineNodeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='returns' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefineNodeAccess().getReturnsKeyword_6());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDefineNodeAccess().getLeftParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineNodeAccess().getOutputsDeclarationParserRuleCall_8_0()); 
	    }
		lv_outputs_8_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineNodeRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_8_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDefineNodeAccess().getRightParenthesisKeyword_9());
    }
	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDefineNodeAccess().getLeftCurlyBracketKeyword_10());
    }
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefineNodeRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getDefineNodeAccess().getValuedObjectsValuedObjectCrossReference_11_0_0_0()); 
	}

)
)	otherlv_12='=' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDefineNodeAccess().getEqualsSignKeyword_11_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineNodeAccess().getExpressionsExpressionParserRuleCall_11_0_2_0()); 
	    }
		lv_expressions_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineNodeRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_13_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDefineNodeAccess().getSemicolonKeyword_11_0_3());
    }
)*
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineNodeAccess().getStatesStateParserRuleCall_11_1_0()); 
	    }
		lv_states_15_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineNodeRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_15_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)*)	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDefineNodeAccess().getRightCurlyBracketKeyword_12());
    }
)
;





// Entry rule entryRuleReferenceNode
entryRuleReferenceNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceNodeRule()); }
	 iv_ruleReferenceNode=ruleReferenceNode 
	 { $current=$iv_ruleReferenceNode.current; } 
	 EOF 
;

// Rule ReferenceNode
ruleReferenceNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReferenceNodeAccess().getReferenceNodeAction_0(),
            $current);
    }
)(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getReferenceNodeAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getReferenceNodeAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceNodeAccess().getEqualsSignKeyword_3());
    }
	otherlv_4='ref' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReferenceNodeAccess().getRefKeyword_4());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceNodeRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getReferenceNodeAccess().getReferencedScopeStateCrossReference_5_0()); 
	}

)
)	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReferenceNodeAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceNodeAccess().getParametersValuedObjectReferenceParserRuleCall_7_0()); 
	    }
		lv_parameters_7_0=ruleValuedObjectReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceNodeRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_7_0, 
        		"ValuedObjectReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getReferenceNodeAccess().getCommaKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceNodeAccess().getParametersValuedObjectReferenceParserRuleCall_8_1_0()); 
	    }
		lv_parameters_9_0=ruleValuedObjectReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceNodeRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_9_0, 
        		"ValuedObjectReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getReferenceNodeAccess().getRightParenthesisKeyword_9());
    }
	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getReferenceNodeAccess().getSemicolonKeyword_10());
    }
)
;





// Entry rule entryRuleLocalAction
entryRuleLocalAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalActionRule()); }
	 iv_ruleLocalAction=ruleLocalAction 
	 { $current=$iv_ruleLocalAction.current; } 
	 EOF 
;

// Rule LocalAction
ruleLocalAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLocalActionAccess().getEntryActionParserRuleCall_0()); 
    }
    this_EntryAction_0=ruleEntryAction
    { 
        $current = $this_EntryAction_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLocalActionAccess().getDuringActionParserRuleCall_1()); 
    }
    this_DuringAction_1=ruleDuringAction
    { 
        $current = $this_DuringAction_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLocalActionAccess().getExitActionParserRuleCall_2()); 
    }
    this_ExitAction_2=ruleExitAction
    { 
        $current = $this_ExitAction_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLocalActionAccess().getSuspendActionParserRuleCall_3()); 
    }
    this_SuspendAction_3=ruleSuspendAction
    { 
        $current = $this_SuspendAction_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLocalActionAccess().getIterateActionParserRuleCall_4()); 
    }
    this_IterateAction_4=ruleIterateAction
    { 
        $current = $this_IterateAction_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTypeTransitionTypeLegacyEnumRuleCall_1_0_0()); 
	    }
		lv_type_1_0=ruleTransitionTypeLegacy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TransitionTypeLegacy");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTypeTransitionTypeEnumRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleTransitionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TransitionType");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getTargetStateStateCrossReference_2_0()); 
	}

)
)((
(
		lv_immediate_4_0=	'immediate' 
    {
        newLeafNode(lv_immediate_4_0, grammarAccess.getTransitionAccess().getImmediateImmediateKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed($current, "immediate", true, "immediate");
	    }

)
)?(
(
		lv_deferred_5_0=	'deferred' 
    {
        newLeafNode(lv_deferred_5_0, grammarAccess.getTransitionAccess().getDeferredDeferredKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed($current, "deferred", true, "deferred");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getHistoryHistoryTypeEnumRuleCall_3_2_0()); 
	    }
		lv_history_6_0=ruleHistoryType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"history",
        		lv_history_6_0, 
        		"HistoryType");
	        afterParserOrEnumRuleCall();
	    }

)
)?((((	otherlv_7='with' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getWithKeyword_3_3_0_0_0_0());
    }
(
(
		lv_delay_8_0=RULE_INT
		{
			newLeafNode(lv_delay_8_0, grammarAccess.getTransitionAccess().getDelayINTTerminalRuleCall_3_3_0_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"delay",
        		lv_delay_8_0, 
        		"INT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTriggerBoolExpressionParserRuleCall_3_3_0_0_0_2_0()); 
	    }
		lv_trigger_9_0=ruleBoolExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_9_0, 
        		"BoolExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |	otherlv_10='with' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransitionAccess().getWithKeyword_3_3_0_0_1());
    }
)?((	otherlv_11='/' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransitionAccess().getSolidusKeyword_3_3_0_1_0_0());
    }

    |	otherlv_12='do' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTransitionAccess().getDoKeyword_3_3_0_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getEffectsEffectParserRuleCall_3_3_0_1_1_0()); 
	    }
		lv_effects_13_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_13_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTransitionAccess().getSemicolonKeyword_3_3_0_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getEffectsEffectParserRuleCall_3_3_0_1_2_1_0()); 
	    }
		lv_effects_15_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_15_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
    |(	otherlv_16='with' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTransitionAccess().getWithKeyword_3_3_1_0());
    }
(
(
		lv_label_17_0=RULE_STRING
		{
			newLeafNode(lv_label_17_0, grammarAccess.getTransitionAccess().getLabelSTRINGTerminalRuleCall_3_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_17_0, 
        		"STRING");
	    }

)
)))?)?)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(((
(
		lv_extern_1_0=	'extern' 
    {
        newLeafNode(lv_extern_1_0, grammarAccess.getDeclarationAccess().getExternExternKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "extern", true, "extern");
	    }

)
)?(
(
		lv_static_2_0=	'static' 
    {
        newLeafNode(lv_static_2_0, grammarAccess.getDeclarationAccess().getStaticStaticKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)?(
(
		lv_const_3_0=	'const' 
    {
        newLeafNode(lv_const_3_0, grammarAccess.getDeclarationAccess().getConstConstKeyword_1_0_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
)?(
(
		lv_input_4_0=	'input' 
    {
        newLeafNode(lv_input_4_0, grammarAccess.getDeclarationAccess().getInputInputKeyword_1_0_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)?(
(
		lv_output_5_0=	'output' 
    {
        newLeafNode(lv_output_5_0, grammarAccess.getDeclarationAccess().getOutputOutputKeyword_1_0_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "output", true, "output");
	    }

)
)?(((
(
		lv_signal_6_0=	'signal' 
    {
        newLeafNode(lv_signal_6_0, grammarAccess.getDeclarationAccess().getSignalSignalKeyword_1_0_5_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "signal", true, "signal");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeValueTypeEnumRuleCall_1_0_5_0_1_0()); 
	    }
		lv_type_7_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_7_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_signal_8_0=	'signal' 
    {
        newLeafNode(lv_signal_8_0, grammarAccess.getDeclarationAccess().getSignalSignalKeyword_1_0_5_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "signal", true, "signal");
	    }

)
)))
    |((
(
		lv_extern_9_0=	'extern' 
    {
        newLeafNode(lv_extern_9_0, grammarAccess.getDeclarationAccess().getExternExternKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "extern", true, "extern");
	    }

)
)(
(
		lv_static_10_0=	'static' 
    {
        newLeafNode(lv_static_10_0, grammarAccess.getDeclarationAccess().getStaticStaticKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)?(
(
		lv_const_11_0=	'const' 
    {
        newLeafNode(lv_const_11_0, grammarAccess.getDeclarationAccess().getConstConstKeyword_1_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
)?(
(
		lv_input_12_0=	'input' 
    {
        newLeafNode(lv_input_12_0, grammarAccess.getDeclarationAccess().getInputInputKeyword_1_1_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)?(
(
		lv_output_13_0=	'output' 
    {
        newLeafNode(lv_output_13_0, grammarAccess.getDeclarationAccess().getOutputOutputKeyword_1_1_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "output", true, "output");
	    }

)
)?(
(
		lv_signal_14_0=	'signal' 
    {
        newLeafNode(lv_signal_14_0, grammarAccess.getDeclarationAccess().getSignalSignalKeyword_1_1_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "signal", true, "signal");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeValueTypeEnumRuleCall_1_1_6_0()); 
	    }
		lv_type_15_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_15_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)?))(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getValuedObjectsValuedObjectParserRuleCall_2_0()); 
	    }
		lv_valuedObjects_16_0=ruleValuedObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"valuedObjects",
        		lv_valuedObjects_16_0, 
        		"ValuedObject");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDeclarationAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getValuedObjectsValuedObjectParserRuleCall_3_1_0()); 
	    }
		lv_valuedObjects_18_0=ruleValuedObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"valuedObjects",
        		lv_valuedObjects_18_0, 
        		"ValuedObject");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_19=';' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getDeclarationAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleValuedObject
entryRuleValuedObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectRule()); }
	 iv_ruleValuedObject=ruleValuedObject 
	 { $current=$iv_ruleValuedObject.current; } 
	 EOF 
;

// Rule ValuedObject
ruleValuedObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getValuedObjectAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValuedObjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValuedObjectAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		lv_cardinalities_2_0=RULE_INT
		{
			newLeafNode(lv_cardinalities_2_0, grammarAccess.getValuedObjectAccess().getCardinalitiesINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValuedObjectRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"cardinalities",
        		lv_cardinalities_2_0, 
        		"INT");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getValuedObjectAccess().getRightSquareBracketKeyword_1_2());
    }
)*(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getValuedObjectAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectAccess().getInitialValueExpressionParserRuleCall_2_1_0()); 
	    }
		lv_initialValue_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='combine' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getValuedObjectAccess().getCombineKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectAccess().getCombineOperatorCombineOperatorEnumRuleCall_3_1_0()); 
	    }
		lv_combineOperator_7_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectRule());
	        }
       		set(
       			$current, 
       			"combineOperator",
        		lv_combineOperator_7_0, 
        		"CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;







// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	 iv_ruleBinding=ruleBinding 
	 { $current=$iv_ruleBinding.current; } 
	 EOF 
;

// Rule Binding
ruleBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBindingAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBindingRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBindingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getBindingAccess().getFormalValuedObjectCrossReference_1_0()); 
	}

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBindingAccess().getToKeyword_2());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBindingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getBindingAccess().getActualValuedObjectCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleEntryAction
entryRuleEntryAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntryActionRule()); }
	 iv_ruleEntryAction=ruleEntryAction 
	 { $current=$iv_ruleEntryAction.current; } 
	 EOF 
;

// Rule EntryAction
ruleEntryAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEntryActionAccess().getEntryActionAction_0(),
            $current);
    }
)	otherlv_1='entry' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEntryActionAccess().getEntryKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntryActionAccess().getTriggerBoolExpressionParserRuleCall_2_0()); 
	    }
		lv_trigger_2_0=ruleBoolExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntryActionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_2_0, 
        		"BoolExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEntryActionAccess().getSolidusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntryActionAccess().getEffectsEffectParserRuleCall_3_1_0()); 
	    }
		lv_effects_4_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntryActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_4_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEntryActionAccess().getSemicolonKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntryActionAccess().getEffectsEffectParserRuleCall_3_2_1_0()); 
	    }
		lv_effects_6_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntryActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_6_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEntryActionAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleDuringAction
entryRuleDuringAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDuringActionRule()); }
	 iv_ruleDuringAction=ruleDuringAction 
	 { $current=$iv_ruleDuringAction.current; } 
	 EOF 
;

// Rule DuringAction
ruleDuringAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDuringActionAccess().getDuringActionAction_0(),
            $current);
    }
)(
(
		lv_immediate_1_0=	'immediate' 
    {
        newLeafNode(lv_immediate_1_0, grammarAccess.getDuringActionAccess().getImmediateImmediateKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDuringActionRule());
	        }
       		setWithLastConsumed($current, "immediate", true, "immediate");
	    }

)
)?	otherlv_2='during' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDuringActionAccess().getDuringKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDuringActionAccess().getTriggerBoolExpressionParserRuleCall_3_0()); 
	    }
		lv_trigger_3_0=ruleBoolExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDuringActionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_3_0, 
        		"BoolExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDuringActionAccess().getSolidusKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDuringActionAccess().getEffectsEffectParserRuleCall_4_1_0()); 
	    }
		lv_effects_5_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDuringActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_5_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDuringActionAccess().getSemicolonKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDuringActionAccess().getEffectsEffectParserRuleCall_4_2_1_0()); 
	    }
		lv_effects_7_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDuringActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_7_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDuringActionAccess().getSemicolonKeyword_5());
    }
)?)
;





// Entry rule entryRuleExitAction
entryRuleExitAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitActionRule()); }
	 iv_ruleExitAction=ruleExitAction 
	 { $current=$iv_ruleExitAction.current; } 
	 EOF 
;

// Rule ExitAction
ruleExitAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExitActionAccess().getExitActionAction_0(),
            $current);
    }
)	otherlv_1='exit' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExitActionAccess().getExitKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExitActionAccess().getTriggerBoolExpressionParserRuleCall_2_0()); 
	    }
		lv_trigger_2_0=ruleBoolExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitActionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_2_0, 
        		"BoolExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='/' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExitActionAccess().getSolidusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExitActionAccess().getEffectsEffectParserRuleCall_3_1_0()); 
	    }
		lv_effects_4_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_4_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExitActionAccess().getSemicolonKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExitActionAccess().getEffectsEffectParserRuleCall_3_2_1_0()); 
	    }
		lv_effects_6_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_6_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExitActionAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleSuspendAction
entryRuleSuspendAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuspendActionRule()); }
	 iv_ruleSuspendAction=ruleSuspendAction 
	 { $current=$iv_ruleSuspendAction.current; } 
	 EOF 
;

// Rule SuspendAction
ruleSuspendAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSuspendActionAccess().getSuspendActionAction_0(),
            $current);
    }
)(
(
		lv_immediate_1_0=	'immediate' 
    {
        newLeafNode(lv_immediate_1_0, grammarAccess.getSuspendActionAccess().getImmediateImmediateKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuspendActionRule());
	        }
       		setWithLastConsumed($current, "immediate", true, "immediate");
	    }

)
)?(
(
		lv_weak_2_0=	'weak' 
    {
        newLeafNode(lv_weak_2_0, grammarAccess.getSuspendActionAccess().getWeakWeakKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuspendActionRule());
	        }
       		setWithLastConsumed($current, "weak", true, "weak");
	    }

)
)?	otherlv_3='suspend' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSuspendActionAccess().getSuspendKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuspendActionAccess().getTriggerBoolExpressionParserRuleCall_4_0()); 
	    }
		lv_trigger_4_0=ruleBoolExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuspendActionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_4_0, 
        		"BoolExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSuspendActionAccess().getSemicolonKeyword_5());
    }
)?)
;





// Entry rule entryRuleIterateAction
entryRuleIterateAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIterateActionRule()); }
	 iv_ruleIterateAction=ruleIterateAction 
	 { $current=$iv_ruleIterateAction.current; } 
	 EOF 
;

// Rule IterateAction
ruleIterateAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIterateActionAccess().getIterateActionAction_0(),
            $current);
    }
)(
(
		lv_immediate_1_0=	'immediate' 
    {
        newLeafNode(lv_immediate_1_0, grammarAccess.getIterateActionAccess().getImmediateImmediateKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIterateActionRule());
	        }
       		setWithLastConsumed($current, "immediate", true, "immediate");
	    }

)
)?	otherlv_2='iterate' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIterateActionAccess().getIterateKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterateActionAccess().getTriggerBoolExpressionParserRuleCall_3_0()); 
	    }
		lv_trigger_3_0=ruleBoolExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterateActionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_3_0, 
        		"BoolExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIterateActionAccess().getSolidusKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterateActionAccess().getEffectsEffectParserRuleCall_4_1_0()); 
	    }
		lv_effects_5_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterateActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_5_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIterateActionAccess().getSemicolonKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterateActionAccess().getEffectsEffectParserRuleCall_4_2_1_0()); 
	    }
		lv_effects_7_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterateActionRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_7_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIterateActionAccess().getSemicolonKeyword_5());
    }
)?)
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getEmissionParserRuleCall_0()); 
    }
    this_Emission_0=ruleEmission
    { 
        $current = $this_Emission_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_1()); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getTextEffectParserRuleCall_2()); 
    }
    this_TextEffect_2=ruleTextEffect
    { 
        $current = $this_TextEffect_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getFunctionCallEffectParserRuleCall_3()); 
    }
    this_FunctionCallEffect_3=ruleFunctionCallEffect
    { 
        $current = $this_FunctionCallEffect_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEmission
entryRuleEmission returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmissionRule()); }
	 iv_ruleEmission=ruleEmission 
	 { $current=$iv_ruleEmission.current; } 
	 EOF 
;

// Rule Emission
ruleEmission returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmissionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEmissionAccess().getValuedObjectValuedObjectCrossReference_0_0()); 
	}

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmissionAccess().getNewValueExpressionParserRuleCall_1_1_0()); 
	    }
		lv_newValue_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmissionRule());
	        }
       		set(
       			$current, 
       			"newValue",
        		lv_newValue_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEmissionAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getValuedObjectValuedObjectCrossReference_0_0()); 
	}

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getIndicesExpressionParserRuleCall_1_1_0()); 
	    }
		lv_indices_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getRightSquareBracketKeyword_1_2());
    }
)*	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTextEffect
entryRuleTextEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextEffectRule()); }
	 iv_ruleTextEffect=ruleTextEffect 
	 { $current=$iv_ruleTextEffect.current; } 
	 EOF 
;

// Rule TextEffect
ruleTextEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_text_0_0=RULE_HOSTCODE
		{
			newLeafNode(lv_text_0_0, grammarAccess.getTextEffectAccess().getTextHOSTCODETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextEffectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"HOSTCODE");
	    }

)
)
;





// Entry rule entryRuleFunctionCallEffect
entryRuleFunctionCallEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallEffectRule()); }
	 iv_ruleFunctionCallEffect=ruleFunctionCallEffect 
	 { $current=$iv_ruleFunctionCallEffect.current; } 
	 EOF 
;

// Rule FunctionCallEffect
ruleFunctionCallEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionCallEffectAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallEffectAccess().getFunctionNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_functionName_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallEffectRule());
	        }
       		set(
       			$current, 
       			"functionName",
        		lv_functionName_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionCallEffectAccess().getLeftParenthesisKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallEffectAccess().getParametersParameterParserRuleCall_2_0_1_0()); 
	    }
		lv_parameters_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallEffectRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionCallEffectAccess().getCommaKeyword_2_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallEffectAccess().getParametersParameterParserRuleCall_2_0_2_1_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallEffectRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionCallEffectAccess().getRightParenthesisKeyword_2_0_3());
    }
)
    |	otherlv_7='()' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionCallEffectAccess().getLeftParenthesisRightParenthesisKeyword_2_1());
    }
)?	otherlv_8='>' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionCallEffectAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_callByReference_0_0=	'&' 
    {
        newLeafNode(lv_callByReference_0_0, grammarAccess.getParameterAccess().getCallByReferenceAmpersandKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "callByReference", true, "&");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBoolExpressionParserRuleCall_0()); 
    }
    this_BoolExpression_0=ruleBoolExpression
    { 
        $current = $this_BoolExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1()); 
    }
    this_ValuedExpression_1=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBoolExpression
entryRuleBoolExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolExpressionRule()); }
	 iv_ruleBoolExpression=ruleBoolExpression 
	 { $current=$iv_ruleBoolExpression.current; } 
	 EOF 
;

// Rule BoolExpression
ruleBoolExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBoolExpressionAccess().getOrAndExpressionParserRuleCall()); 
    }
    this_OrAndExpression_0=ruleOrAndExpression
    { 
        $current = $this_OrAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrAndExpression
entryRuleOrAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrAndExpressionRule()); }
	 iv_ruleOrAndExpression=ruleOrAndExpression 
	 { $current=$iv_ruleOrAndExpression.current; } 
	 EOF 
;

// Rule OrAndExpression
ruleOrAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrAndExpressionAccess().getCompareOperationParserRuleCall_0()); 
    }
    this_CompareOperation_0=ruleCompareOperation
    { 
        $current = $this_CompareOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAndExpressionAccess().getOperatorOrOperatorEnumRuleCall_1_0_1_0_0()); 
	    }
		lv_operator_2_1=ruleOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"OrOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOrAndExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_0_1_0_1()); 
	    }
		lv_operator_2_2=ruleLogicalOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"LogicalOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_0_2_0()); 
	    }
		lv_subExpressions_3_0=ruleCompareOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"CompareOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_1_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAndExpressionAccess().getOperatorAndOperatorEnumRuleCall_1_1_1_0_0()); 
	    }
		lv_operator_5_1=ruleAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_5_1, 
        		"AndOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOrAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_1_0_1()); 
	    }
		lv_operator_5_2=ruleLogicalAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_5_2, 
        		"LogicalAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_1_2_0()); 
	    }
		lv_subExpressions_6_0=ruleCompareOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_6_0, 
        		"CompareOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOperationRule()); }
	 iv_ruleCompareOperation=ruleCompareOperation 
	 { $current=$iv_ruleCompareOperation.current; } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0()); 
    }
    this_NotOrValuedExpression_0=ruleNotOrValuedExpression
    { 
        $current = $this_NotOrValuedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_0_1_1_0()); 
	    }
		lv_operator_2_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleNotOrValuedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOperationRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"NotOrValuedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_4=ruleNotExpression
    { 
        $current = $this_NotExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotOrValuedExpressionRule()); }
	 iv_ruleNotOrValuedExpression=ruleNotOrValuedExpression 
	 { $current=$iv_ruleNotOrValuedExpression.current; } 
	 EOF 
;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); 
    }
    this_ValuedExpression_0=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_1=ruleNotExpression
    { 
        $current = $this_NotExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleNotOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"NotOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"NotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); 
    }
    this_AtomicExpression_3=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedExpression
entryRuleValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedExpressionRule()); }
	 iv_ruleValuedExpression=ruleValuedExpression 
	 { $current=$iv_ruleValuedExpression.current; } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); 
    }
    this_AddExpression_0=ruleAddExpression
    { 
        $current = $this_AddExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	 iv_ruleAddExpression=ruleAddExpression 
	 { $current=$iv_ruleAddExpression.current; } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); 
    }
    this_SubExpression_0=ruleSubExpression
    { 
        $current = $this_SubExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAddOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AddOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleSubExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"SubExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSubExpression
entryRuleSubExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubExpressionRule()); }
	 iv_ruleSubExpression=ruleSubExpression 
	 { $current=$iv_ruleSubExpression.current; } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); 
    }
    this_MultExpression_0=ruleMultExpression
    { 
        $current = $this_MultExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleSubOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"SubOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleMultExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"MultExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultExpression
entryRuleMultExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultExpressionRule()); }
	 iv_ruleMultExpression=ruleMultExpression 
	 { $current=$iv_ruleMultExpression.current; } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultExpressionAccess().getDivExpressionParserRuleCall_0()); 
    }
    this_DivExpression_0=ruleDivExpression
    { 
        $current = $this_DivExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleDivExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"DivExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDivExpression
entryRuleDivExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivExpressionRule()); }
	 iv_ruleDivExpression=ruleDivExpression 
	 { $current=$iv_ruleDivExpression.current; } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDivExpressionAccess().getModExpressionParserRuleCall_0()); 
    }
    this_ModExpression_0=ruleModExpression
    { 
        $current = $this_ModExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleDivOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"DivOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleModExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"ModExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleModExpression
entryRuleModExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModExpressionRule()); }
	 iv_ruleModExpression=ruleModExpression 
	 { $current=$iv_ruleModExpression.current; } 
	 EOF 
;

// Rule ModExpression
ruleModExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModExpressionAccess().getNegExpressionParserRuleCall_0()); 
    }
    this_NegExpression_0=ruleNegExpression
    { 
        $current = $this_NegExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleModOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ModOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleAtomicValuedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"AtomicValuedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNegExpression
entryRuleNegExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegExpressionRule()); }
	 iv_ruleNegExpression=ruleNegExpression 
	 { $current=$iv_ruleNegExpression.current; } 
	 EOF 
;

// Rule NegExpression
ruleNegExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExpressionAccess().getOperatorSubOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleSubOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"SubOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleNegExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"NegExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNegExpressionAccess().getAtomicValuedExpressionParserRuleCall_1()); 
    }
    this_AtomicValuedExpression_3=ruleAtomicValuedExpression
    { 
        $current = $this_AtomicValuedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	 iv_ruleAtomicExpression=ruleAtomicExpression 
	 { $current=$iv_ruleAtomicExpression.current; } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBoolValueParserRuleCall_0()); 
    }
    this_BoolValue_0=ruleBoolValue
    { 
        $current = $this_BoolValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1()); 
    }
    this_ValuedObjectTestExpression_1=ruleValuedObjectTestExpression
    { 
        $current = $this_ValuedObjectTestExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBoolExpressionParserRuleCall_2_1()); 
    }
    this_BoolExpression_3=ruleBoolExpression
    { 
        $current = $this_BoolExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getFunctionCallParserRuleCall_3()); 
    }
    this_FunctionCall_5=ruleFunctionCall
    { 
        $current = $this_FunctionCall_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_4()); 
    }
    this_TextExpression_6=ruleTextExpression
    { 
        $current = $this_TextExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicValuedExpressionRule()); }
	 iv_ruleAtomicValuedExpression=ruleAtomicValuedExpression 
	 { $current=$iv_ruleAtomicValuedExpression.current; } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); 
    }
    this_IntValue_0=ruleIntValue
    { 
        $current = $this_IntValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); 
    }
    this_FloatValue_1=ruleFloatValue
    { 
        $current = $this_FloatValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getStringValueParserRuleCall_2()); 
    }
    this_StringValue_2=ruleStringValue
    { 
        $current = $this_StringValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_3_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_3_1()); 
    }
    this_ValuedExpression_4=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_3_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_4()); 
    }
    this_AtomicExpression_6=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectTestExpressionRule()); }
	 iv_ruleValuedObjectTestExpression=ruleValuedObjectTestExpression 
	 { $current=$iv_ruleValuedObjectTestExpression.current; } 
	 EOF 
;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0_0()); 
	    }
		lv_operator_1_1=rulePreOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_1, 
        		"PreOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValOperatorEnumRuleCall_0_1_0_1()); 
	    }
		lv_operator_1_2=ruleValOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_2, 
        		"ValOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); 
	    }
		lv_subExpressions_3_0=ruleValuedObjectTestExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"ValuedObjectTestExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_1()); 
    }
    this_ValuedObjectReference_5=ruleValuedObjectReference
    { 
        $current = $this_ValuedObjectReference_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedObjectReference
entryRuleValuedObjectReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectReferenceRule()); }
	 iv_ruleValuedObjectReference=ruleValuedObjectReference 
	 { $current=$iv_ruleValuedObjectReference.current; } 
	 EOF 
;

// Rule ValuedObjectReference
ruleValuedObjectReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getValuedObjectReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0_0()); 
	}

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValuedObjectReferenceAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectReferenceAccess().getIndicesExpressionParserRuleCall_1_1_0()); 
	    }
		lv_indices_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectReferenceRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getValuedObjectReferenceAccess().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getFunctionNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_functionName_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		set(
       			$current, 
       			"functionName",
        		lv_functionName_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_2_0_1_0()); 
	    }
		lv_parameters_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_2_0_2_1_0()); 
	    }
		lv_parameters_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_2_0_3());
    }
)
    |	otherlv_7='()' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_2_1());
    }
)?	otherlv_8='>' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionCallAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleTextExpression
entryRuleTextExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextExpressionRule()); }
	 iv_ruleTextExpression=ruleTextExpression 
	 { $current=$iv_ruleTextExpression.current; } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_text_0_0=RULE_HOSTCODE
		{
			newLeafNode(lv_text_0_0, grammarAccess.getTextExpressionAccess().getTextHOSTCODETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"HOSTCODE");
	    }

)
)
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	 iv_ruleFloatValue=ruleFloatValue 
	 { $current=$iv_ruleFloatValue.current; } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"FLOAT");
	    }

)
)
;





// Entry rule entryRuleBoolValue
entryRuleBoolValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolValueRule()); }
	 iv_ruleBoolValue=ruleBoolValue 
	 { $current=$iv_ruleBoolValue.current; } 
	 EOF 
;

// Rule BoolValue
ruleBoolValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBoolValueAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	    }

)
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;







// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getCommentAnnotationParserRuleCall_0()); 
    }
    this_CommentAnnotation_0=ruleCommentAnnotation
    { 
        $current = $this_CommentAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getTagAnnotationParserRuleCall_1()); 
    }
    this_TagAnnotation_1=ruleTagAnnotation
    { 
        $current = $this_TagAnnotation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyStringValueAnnotationParserRuleCall_2()); 
    }
    this_KeyStringValueAnnotation_2=ruleKeyStringValueAnnotation
    { 
        $current = $this_KeyStringValueAnnotation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_3()); 
    }
    this_TypedKeyStringValueAnnotation_3=ruleTypedKeyStringValueAnnotation
    { 
        $current = $this_TypedKeyStringValueAnnotation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyBooleanValueAnnotationParserRuleCall_4()); 
    }
    this_KeyBooleanValueAnnotation_4=ruleKeyBooleanValueAnnotation
    { 
        $current = $this_KeyBooleanValueAnnotation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyIntValueAnnotationParserRuleCall_5()); 
    }
    this_KeyIntValueAnnotation_5=ruleKeyIntValueAnnotation
    { 
        $current = $this_KeyIntValueAnnotation_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyFloatValueAnnotationParserRuleCall_6()); 
    }
    this_KeyFloatValueAnnotation_6=ruleKeyFloatValueAnnotation
    { 
        $current = $this_KeyFloatValueAnnotation_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentAnnotationRule()); }
	 iv_ruleCommentAnnotation=ruleCommentAnnotation 
	 { $current=$iv_ruleCommentAnnotation.current; } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_COMMENT_ANNOTATION
		{
			newLeafNode(lv_value_0_0, grammarAccess.getCommentAnnotationAccess().getValueCOMMENT_ANNOTATIONTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"COMMENT_ANNOTATION");
	    }

)
)
;





// Entry rule entryRuleTagAnnotation
entryRuleTagAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTagAnnotationRule()); }
	 iv_ruleTagAnnotation=ruleTagAnnotation 
	 { $current=$iv_ruleTagAnnotation.current; } 
	 EOF 
;

// Rule TagAnnotation
ruleTagAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTagAnnotationAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAnnotationAccess().getAnnotationsAnnotationParserRuleCall_2_1_0()); 
	    }
		lv_annotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_3_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTagAnnotationAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleKeyStringValueAnnotation
entryRuleKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyStringValueAnnotationRule()); }
	 iv_ruleKeyStringValueAnnotation=ruleKeyStringValueAnnotation 
	 { $current=$iv_ruleKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule KeyStringValueAnnotation
ruleKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyStringValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleTypedKeyStringValueAnnotation
entryRuleTypedKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationRule()); }
	 iv_ruleTypedKeyStringValueAnnotation=ruleTypedKeyStringValueAnnotation 
	 { $current=$iv_ruleTypedKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule TypedKeyStringValueAnnotation
ruleTypedKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueEStringParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftParenthesisKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_6_1_0()); 
	    }
		lv_annotations_7_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_7_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightParenthesisKeyword_6_2());
    }
)?)
;





// Entry rule entryRuleKeyBooleanValueAnnotation
entryRuleKeyBooleanValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationRule()); }
	 iv_ruleKeyBooleanValueAnnotation=ruleKeyBooleanValueAnnotation 
	 { $current=$iv_ruleKeyBooleanValueAnnotation.current; } 
	 EOF 
;

// Rule KeyBooleanValueAnnotation
ruleKeyBooleanValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyBooleanValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyBooleanValueAnnotationAccess().getValueBOOLEANTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"BOOLEAN");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyBooleanValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyBooleanValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleKeyIntValueAnnotation
entryRuleKeyIntValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyIntValueAnnotationRule()); }
	 iv_ruleKeyIntValueAnnotation=ruleKeyIntValueAnnotation 
	 { $current=$iv_ruleKeyIntValueAnnotation.current; } 
	 EOF 
;

// Rule KeyIntValueAnnotation
ruleKeyIntValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyIntValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyIntValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyIntValueAnnotationAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyIntValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyIntValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleKeyFloatValueAnnotation
entryRuleKeyFloatValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyFloatValueAnnotationRule()); }
	 iv_ruleKeyFloatValueAnnotation=ruleKeyFloatValueAnnotation 
	 { $current=$iv_ruleKeyFloatValueAnnotation.current; } 
	 EOF 
;

// Rule KeyFloatValueAnnotation
ruleKeyFloatValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyFloatValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyFloatValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_FLOAT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyFloatValueAnnotationAccess().getValueFLOATTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"FLOAT");
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyFloatValueAnnotationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_4_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getKeyFloatValueAnnotationAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;







// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleExtendedID
entryRuleExtendedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); } 
	 iv_ruleExtendedID=ruleExtendedID 
	 { $current=$iv_ruleExtendedID.current.getText(); }  
	 EOF 
;

// Rule ExtendedID
ruleExtendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule StateType
ruleStateType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='normal' 
	{
        $current = grammarAccess.getStateTypeAccess().getNORMALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getStateTypeAccess().getNORMALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='connector' 
	{
        $current = grammarAccess.getStateTypeAccess().getCONNECTOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getStateTypeAccess().getCONNECTOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='reference' 
	{
        $current = grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getStateTypeAccess().getREFERENCEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='textual' 
	{
        $current = grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getStateTypeAccess().getTEXTUALEnumLiteralDeclaration_3()); 
    }
));



// Rule TransitionType
ruleTransitionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='goto' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getWEAKABORTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTransitionTypeAccess().getWEAKABORTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='abort to' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getSTRONGABORTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTransitionTypeAccess().getSTRONGABORTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='join to' 
	{
        $current = grammarAccess.getTransitionTypeAccess().getTERMINATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTransitionTypeAccess().getTERMINATIONEnumLiteralDeclaration_2()); 
    }
));



// Rule TransitionTypeLegacy
ruleTransitionTypeLegacy returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-->' 
	{
        $current = grammarAccess.getTransitionTypeLegacyAccess().getWEAKABORTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTransitionTypeLegacyAccess().getWEAKABORTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='o->' 
	{
        $current = grammarAccess.getTransitionTypeLegacyAccess().getSTRONGABORTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTransitionTypeLegacyAccess().getSTRONGABORTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>->' 
	{
        $current = grammarAccess.getTransitionTypeLegacyAccess().getTERMINATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTransitionTypeLegacyAccess().getTERMINATIONEnumLiteralDeclaration_2()); 
    }
));



// Rule DivOperator
ruleDivOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0=':' 
	{
        $current = grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); 
    }
);



// Rule HistoryType
ruleHistoryType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='reset' 
	{
        $current = grammarAccess.getHistoryTypeAccess().getRESETEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getHistoryTypeAccess().getRESETEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='shallow history' 
	{
        $current = grammarAccess.getHistoryTypeAccess().getSHALLOWEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getHistoryTypeAccess().getSHALLOWEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='history' 
	{
        $current = grammarAccess.getHistoryTypeAccess().getDEEPEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getHistoryTypeAccess().getDEEPEnumLiteralDeclaration_2()); 
    }
));



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); 
    }
));



// Rule PreOperator
rulePreOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='pre' 
	{
        $current = grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); 
    }
);



// Rule OrOperator
ruleOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='|' 
	{
        $current = grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule AndOperator
ruleAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&' 
	{
        $current = grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule NotOperator
ruleNotOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='!' 
	{
        $current = grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); 
    }
);



// Rule AddOperator
ruleAddOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); 
    }
);



// Rule SubOperator
ruleSubOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='-' 
	{
        $current = grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); 
    }
);



// Rule MultOperator
ruleMultOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); 
    }
);



// Rule ModOperator
ruleModOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='%' 
	{
        $current = grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); 
    }
);



// Rule ValOperator
ruleValOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='val' 
	{
        $current = grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); 
    }
);



// Rule LogicalOrOperator
ruleLogicalOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='||' 
	{
        $current = grammarAccess.getLogicalOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule LogicalAndOperator
ruleLogicalAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getLogicalAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule ValueType
ruleValueType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='pure' 
	{
        $current = grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bool' 
	{
        $current = grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='unsigned' 
	{
        $current = grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='int' 
	{
        $current = grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='float' 
	{
        $current = grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='string' 
	{
        $current = grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='host' 
	{
        $current = grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_6()); 
    }
));





// Rule CombineOperator
ruleCombineOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='max' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='min' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='|' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='&' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='host' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); 
    }
));



RULE_HOSTCODE : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

fragment RULE_NUMBER : '0'..'9';

RULE_INT : '-'? RULE_NUMBER+;

RULE_FLOAT : ('-'? RULE_NUMBER+ '.' RULE_NUMBER* (('e'|'E') ('+'|'-')? RULE_NUMBER+)? 'f'?|'-'? RULE_NUMBER+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


