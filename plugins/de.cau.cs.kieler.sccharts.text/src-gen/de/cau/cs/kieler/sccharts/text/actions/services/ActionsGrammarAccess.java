/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text.actions.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.core.kexpressions.text.services.KEXTGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.text.services.AnnotationsGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ActionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.actions.Actions.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cImmediateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cImmediateImmediateKeyword_2_0 = (Keyword)cImmediateAssignment_2.eContents().get(0);
		private final Assignment cDelayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDelayINTTerminalRuleCall_3_0 = (RuleCall)cDelayAssignment_3.eContents().get(0);
		private final Assignment cDeferredAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cDeferredDeferredKeyword_4_0 = (Keyword)cDeferredAssignment_4.eContents().get(0);
		private final Assignment cHistoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHistoryHistoryTypeEnumRuleCall_5_0 = (RuleCall)cHistoryAssignment_5.eContents().get(0);
		private final Assignment cTriggerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_6_0 = (RuleCall)cTriggerAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSolidusKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cEffectsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_7_1_0 = (RuleCall)cEffectsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cEffectsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_7_2_1_0 = (RuleCall)cEffectsAssignment_7_2_1.eContents().get(0);
		
		//// haf: We need a Rule for transitions in order to serialize them
		//// here we only want to have the features isImmediate, delay, trigger and effects
		//// the features type, targetState, priority, isHistory are ignored and set as transient
		//// you need to override the rule to support transitions properly
		//Transition sccharts::Transition:
		//	{sccharts::Transition} annotations+=Annotation*
		//	immediate?='immediate'? delay=INT? deferred?='deferred'? history=HistoryType? trigger=BoolExpression? ("/"
		//	effects+=Effect (';' effects+=Effect)*)?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::Transition} annotations+=Annotation* immediate?='immediate'? delay=INT? deferred?='deferred'?
		//history=HistoryType? trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup() { return cGroup; }

		//{sccharts::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//immediate?='immediate'?
		public Assignment getImmediateAssignment_2() { return cImmediateAssignment_2; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_2_0() { return cImmediateImmediateKeyword_2_0; }

		//delay=INT?
		public Assignment getDelayAssignment_3() { return cDelayAssignment_3; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_3_0() { return cDelayINTTerminalRuleCall_3_0; }

		//deferred?='deferred'?
		public Assignment getDeferredAssignment_4() { return cDeferredAssignment_4; }

		//'deferred'
		public Keyword getDeferredDeferredKeyword_4_0() { return cDeferredDeferredKeyword_4_0; }

		//history=HistoryType?
		public Assignment getHistoryAssignment_5() { return cHistoryAssignment_5; }

		//HistoryType
		public RuleCall getHistoryHistoryTypeEnumRuleCall_5_0() { return cHistoryHistoryTypeEnumRuleCall_5_0; }

		//trigger=BoolExpression?
		public Assignment getTriggerAssignment_6() { return cTriggerAssignment_6; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_6_0() { return cTriggerBoolExpressionParserRuleCall_6_0; }

		//("/" effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_7() { return cGroup_7; }

		//"/"
		public Keyword getSolidusKeyword_7_0() { return cSolidusKeyword_7_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_7_1() { return cEffectsAssignment_7_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_7_1_0() { return cEffectsEffectParserRuleCall_7_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//';'
		public Keyword getSemicolonKeyword_7_2_0() { return cSemicolonKeyword_7_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_7_2_1() { return cEffectsAssignment_7_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_7_2_1_0() { return cEffectsEffectParserRuleCall_7_2_1_0; }
	}

	public class EntryActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.actions.Actions.EntryAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTriggerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_2_0 = (RuleCall)cTriggerAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////// chsch: The action rule is used in Kits.xtext for entry-, during-, exitActions, suspensionTrigger 
		////Action returns sccharts::Action:
		////    {sccharts::Action}
		//////    (annotations += Annotation)*
		////	(isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ("/" effects+=Effect ((';') effects+=Effect)*)?; 		
		//EntryAction sccharts::EntryAction:
		//	{sccharts::EntryAction}
		//	//    (annotations += Annotation)*
		//	'entry' trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)? ';'?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::EntryAction} //    (annotations += Annotation)*
		//'entry' trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)? ';'?
		public Group getGroup() { return cGroup; }

		//{sccharts::EntryAction}
		public Action getEntryActionAction_0() { return cEntryActionAction_0; }

		////    (annotations += Annotation)*
		//'entry'
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }

		//trigger=BoolExpression?
		public Assignment getTriggerAssignment_2() { return cTriggerAssignment_2; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_2_0() { return cTriggerBoolExpressionParserRuleCall_2_0; }

		//("/" effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }

		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DuringActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.actions.Actions.DuringAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDuringActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImmediateImmediateKeyword_1_0 = (Keyword)cImmediateAssignment_1.eContents().get(0);
		private final Keyword cDuringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0 = (RuleCall)cEffectsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_2_1_0 = (RuleCall)cEffectsAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DuringAction sccharts::DuringAction:
		//	{sccharts::DuringAction} immediate?='immediate'? 'during' trigger=BoolExpression? ("/" effects+=Effect (';'
		//	effects+=Effect)*)? ';'?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DuringAction} immediate?='immediate'? 'during' trigger=BoolExpression? ("/" effects+=Effect (';'
		//effects+=Effect)*)? ';'?
		public Group getGroup() { return cGroup; }

		//{sccharts::DuringAction}
		public Action getDuringActionAction_0() { return cDuringActionAction_0; }

		////    (annotations += Annotation)*
		//immediate?='immediate'?
		public Assignment getImmediateAssignment_1() { return cImmediateAssignment_1; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_1_0() { return cImmediateImmediateKeyword_1_0; }

		//'during'
		public Keyword getDuringKeyword_2() { return cDuringKeyword_2; }

		//trigger=BoolExpression?
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_3_0() { return cTriggerBoolExpressionParserRuleCall_3_0; }

		//("/" effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_1() { return cEffectsAssignment_4_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0() { return cEffectsEffectParserRuleCall_4_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//';'
		public Keyword getSemicolonKeyword_4_2_0() { return cSemicolonKeyword_4_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_2_1() { return cEffectsAssignment_4_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_2_1_0() { return cEffectsEffectParserRuleCall_4_2_1_0; }

		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ExitActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.actions.Actions.ExitAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTriggerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_2_0 = (RuleCall)cTriggerAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExitAction sccharts::ExitAction:
		//	{sccharts::ExitAction}
		//	//    (annotations += Annotation)*
		//	'exit' trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)? ';'?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ExitAction} //    (annotations += Annotation)*
		//'exit' trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)? ';'?
		public Group getGroup() { return cGroup; }

		//{sccharts::ExitAction}
		public Action getExitActionAction_0() { return cExitActionAction_0; }

		////    (annotations += Annotation)*
		//'exit'
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }

		//trigger=BoolExpression?
		public Assignment getTriggerAssignment_2() { return cTriggerAssignment_2; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_2_0() { return cTriggerBoolExpressionParserRuleCall_2_0; }

		//("/" effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }

		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SuspendActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.actions.Actions.SuspendAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuspendActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImmediateImmediateKeyword_1_0 = (Keyword)cImmediateAssignment_1.eContents().get(0);
		private final Assignment cWeakAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cWeakWeakKeyword_2_0 = (Keyword)cWeakAssignment_2.eContents().get(0);
		private final Keyword cSuspendKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_4_0 = (RuleCall)cTriggerAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SuspendAction sccharts::SuspendAction:
		//	{sccharts::SuspendAction} immediate?='immediate'? weak?='weak'? 'suspend' trigger=BoolExpression? ';'?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::SuspendAction} immediate?='immediate'? weak?='weak'? 'suspend' trigger=BoolExpression? ';'?
		public Group getGroup() { return cGroup; }

		//{sccharts::SuspendAction}
		public Action getSuspendActionAction_0() { return cSuspendActionAction_0; }

		////    (annotations += Annotation)*
		//immediate?='immediate'?
		public Assignment getImmediateAssignment_1() { return cImmediateAssignment_1; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_1_0() { return cImmediateImmediateKeyword_1_0; }

		//weak?='weak'?
		public Assignment getWeakAssignment_2() { return cWeakAssignment_2; }

		//'weak'
		public Keyword getWeakWeakKeyword_2_0() { return cWeakWeakKeyword_2_0; }

		//'suspend'
		public Keyword getSuspendKeyword_3() { return cSuspendKeyword_3; }

		//trigger=BoolExpression?
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_4_0() { return cTriggerBoolExpressionParserRuleCall_4_0; }

		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class IterateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.actions.Actions.IterateAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIterateActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImmediateImmediateKeyword_1_0 = (Keyword)cImmediateAssignment_1.eContents().get(0);
		private final Keyword cIterateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0 = (RuleCall)cEffectsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_2_1_0 = (RuleCall)cEffectsAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IterateAction sccharts::IterateAction:
		//	{sccharts::IterateAction} immediate?='immediate'? 'iterate' trigger=BoolExpression? ("/" effects+=Effect (';'
		//	effects+=Effect)*)? ';'?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::IterateAction} immediate?='immediate'? 'iterate' trigger=BoolExpression? ("/" effects+=Effect (';'
		//effects+=Effect)*)? ';'?
		public Group getGroup() { return cGroup; }

		//{sccharts::IterateAction}
		public Action getIterateActionAction_0() { return cIterateActionAction_0; }

		//immediate?='immediate'?
		public Assignment getImmediateAssignment_1() { return cImmediateAssignment_1; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_1_0() { return cImmediateImmediateKeyword_1_0; }

		//'iterate'
		public Keyword getIterateKeyword_2() { return cIterateKeyword_2; }

		//trigger=BoolExpression?
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_3_0() { return cTriggerBoolExpressionParserRuleCall_3_0; }

		//("/" effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_1() { return cEffectsAssignment_4_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0() { return cEffectsEffectParserRuleCall_4_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//';'
		public Keyword getSemicolonKeyword_4_2_0() { return cSemicolonKeyword_4_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_2_1() { return cEffectsAssignment_4_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_2_1_0() { return cEffectsEffectParserRuleCall_4_2_1_0; }

		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	
	
	public class DivOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.actions.Actions.DivOperator");
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDIVColonKeyword_0 = (Keyword)cDIVEnumLiteralDeclaration.eContents().get(0);
		
		//enum DivOperator returns kexpressions::OperatorType:
		//	DIV=":";
		public EnumRule getRule() { return rule; }

		//DIV=":"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration() { return cDIVEnumLiteralDeclaration; }

		//":"
		public Keyword getDIVColonKeyword_0() { return cDIVColonKeyword_0; }
	}

	public class HistoryTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.actions.Actions.HistoryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRESETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRESETResetKeyword_0_0 = (Keyword)cRESETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHALLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHALLOWShallowHistoryKeyword_1_0 = (Keyword)cSHALLOWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDEEPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDEEPHistoryKeyword_2_0 = (Keyword)cDEEPEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum HistoryType returns sccharts::HistoryType:
		//	RESET='reset' | SHALLOW='shallow history' | DEEP='history';
		public EnumRule getRule() { return rule; }

		//RESET='reset' | SHALLOW='shallow history' | DEEP='history'
		public Alternatives getAlternatives() { return cAlternatives; }

		//RESET='reset'
		public EnumLiteralDeclaration getRESETEnumLiteralDeclaration_0() { return cRESETEnumLiteralDeclaration_0; }

		//'reset'
		public Keyword getRESETResetKeyword_0_0() { return cRESETResetKeyword_0_0; }

		//SHALLOW='shallow history'
		public EnumLiteralDeclaration getSHALLOWEnumLiteralDeclaration_1() { return cSHALLOWEnumLiteralDeclaration_1; }

		//'shallow history'
		public Keyword getSHALLOWShallowHistoryKeyword_1_0() { return cSHALLOWShallowHistoryKeyword_1_0; }

		//DEEP='history'
		public EnumLiteralDeclaration getDEEPEnumLiteralDeclaration_2() { return cDEEPEnumLiteralDeclaration_2; }

		//'history'
		public Keyword getDEEPHistoryKeyword_2_0() { return cDEEPHistoryKeyword_2_0; }
	}
	
	private final TransitionElements pTransition;
	private final EntryActionElements pEntryAction;
	private final DuringActionElements pDuringAction;
	private final ExitActionElements pExitAction;
	private final SuspendActionElements pSuspendAction;
	private final IterateActionElements pIterateAction;
	private final DivOperatorElements eDivOperator;
	private final HistoryTypeElements eHistoryType;
	
	private final Grammar grammar;

	private final KEXTGrammarAccess gaKEXT;

	private final KEffectsGrammarAccess gaKEffects;

	private final KExpressionsGrammarAccess gaKExpressions;

	private final AnnotationsGrammarAccess gaAnnotations;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ActionsGrammarAccess(GrammarProvider grammarProvider,
		KEXTGrammarAccess gaKEXT,
		KEffectsGrammarAccess gaKEffects,
		KExpressionsGrammarAccess gaKExpressions,
		AnnotationsGrammarAccess gaAnnotations,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKEXT = gaKEXT;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pTransition = new TransitionElements();
		this.pEntryAction = new EntryActionElements();
		this.pDuringAction = new DuringActionElements();
		this.pExitAction = new ExitActionElements();
		this.pSuspendAction = new SuspendActionElements();
		this.pIterateAction = new IterateActionElements();
		this.eDivOperator = new DivOperatorElements();
		this.eHistoryType = new HistoryTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sccharts.text.actions.Actions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public KEXTGrammarAccess getKEXTGrammarAccess() {
		return gaKEXT;
	}

	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// haf: We need a Rule for transitions in order to serialize them
	//// here we only want to have the features isImmediate, delay, trigger and effects
	//// the features type, targetState, priority, isHistory are ignored and set as transient
	//// you need to override the rule to support transitions properly
	//Transition sccharts::Transition:
	//	{sccharts::Transition} annotations+=Annotation*
	//	immediate?='immediate'? delay=INT? deferred?='deferred'? history=HistoryType? trigger=BoolExpression? ("/"
	//	effects+=Effect (';' effects+=Effect)*)?
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	////// chsch: The action rule is used in Kits.xtext for entry-, during-, exitActions, suspensionTrigger 
	////Action returns sccharts::Action:
	////    {sccharts::Action}
	//////    (annotations += Annotation)*
	////	(isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ("/" effects+=Effect ((';') effects+=Effect)*)?; 		
	//EntryAction sccharts::EntryAction:
	//	{sccharts::EntryAction}
	//	//    (annotations += Annotation)*
	//	'entry' trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)? ';'?
	public EntryActionElements getEntryActionAccess() {
		return pEntryAction;
	}
	
	public ParserRule getEntryActionRule() {
		return getEntryActionAccess().getRule();
	}

	//DuringAction sccharts::DuringAction:
	//	{sccharts::DuringAction} immediate?='immediate'? 'during' trigger=BoolExpression? ("/" effects+=Effect (';'
	//	effects+=Effect)*)? ';'?
	public DuringActionElements getDuringActionAccess() {
		return pDuringAction;
	}
	
	public ParserRule getDuringActionRule() {
		return getDuringActionAccess().getRule();
	}

	//ExitAction sccharts::ExitAction:
	//	{sccharts::ExitAction}
	//	//    (annotations += Annotation)*
	//	'exit' trigger=BoolExpression? ("/" effects+=Effect (';' effects+=Effect)*)? ';'?
	public ExitActionElements getExitActionAccess() {
		return pExitAction;
	}
	
	public ParserRule getExitActionRule() {
		return getExitActionAccess().getRule();
	}

	//SuspendAction sccharts::SuspendAction:
	//	{sccharts::SuspendAction} immediate?='immediate'? weak?='weak'? 'suspend' trigger=BoolExpression? ';'?
	public SuspendActionElements getSuspendActionAccess() {
		return pSuspendAction;
	}
	
	public ParserRule getSuspendActionRule() {
		return getSuspendActionAccess().getRule();
	}

	//IterateAction sccharts::IterateAction:
	//	{sccharts::IterateAction} immediate?='immediate'? 'iterate' trigger=BoolExpression? ("/" effects+=Effect (';'
	//	effects+=Effect)*)? ';'?
	public IterateActionElements getIterateActionAccess() {
		return pIterateAction;
	}
	
	public ParserRule getIterateActionRule() {
		return getIterateActionAccess().getRule();
	}

	//enum DivOperator returns kexpressions::OperatorType:
	//	DIV=":";
	public DivOperatorElements getDivOperatorAccess() {
		return eDivOperator;
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum HistoryType returns sccharts::HistoryType:
	//	RESET='reset' | SHALLOW='shallow history' | DEEP='history';
	public HistoryTypeElements getHistoryTypeAccess() {
		return eHistoryType;
	}
	
	public EnumRule getHistoryTypeRule() {
		return getHistoryTypeAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	declarations+=Declaration*
	//	entities+=TestEntity*
	public KEXTGrammarAccess.KextElements getKextAccess() {
		return gaKEXT.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect
	public KEXTGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKEXT.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=Expression
	public KEXTGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKEXT.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	extern?='extern'?
	//	volatile?='volatile'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	public KEXTGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKEXT.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	name=ID ('[' cardinalities+=INT ']')* ('=' initialValue=Expression)? ('combine'
	//	combineOperator=CombineOperator)?
	public KEXTGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKEXT.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect keffects::Effect:
	//	Assignment | PostfixEffect | Emission | HostcodeEffect | FunctionCallEffect
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission keffects::Emission:
	//	annotations+=RestrictedAnnotation*
	//	valuedObject=[kexpressions::ValuedObject] ("(" newValue=Expression ")")?
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaKEffects.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1     
	//Assignment keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	operator=AssignOperator expression=Expression
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	operator=PostfixOperator
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=HOSTCODE
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation*
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>'
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	/// * Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// * / // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	Expression
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression
	//	| ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression)+)?
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression)+)?
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseAndExpression)+)?
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation)+)?
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression Expression:
	//	ValuedExpression
	//	| NotExpression
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression Expression:
	//	AddExpression
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} (operator=AddOperator subExpressions+=SubExpression)+)?
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} (operator=SubOperator subExpressions+=MultExpression)+)?
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=DivExpression)+)?
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} (operator=super::DivOperator
	//	subExpressions+=ModExpression)+)?
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)+)?
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicExpression Expression:
	//	BoolValue
	//	| ValuedObjectTestExpression
	//	| '(' BoolExpression ')'
	//	| FunctionCall
	//	| TextExpression
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression Expression:
	//	IntValue
	//	| FloatValue
	//	| StringValue
	//	| '(' ValuedExpression ')'
	//	| AtomicExpression
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) '(' subExpressions+=ValuedObjectTestExpression ')'
	//	| ValuedObjectReference
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ('[' indices+=Expression ']')*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>';
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//// Int Value Rule
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//// Float Value Rule
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//// Bool Value Rule
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//// String Value Rule	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//terminal HOSTCODE:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	} 

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyBooleanValueAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restiricted Annotation Rule
	//// The restricted annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//RestrictedAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | KeyBooleanValueAnnotation
	//	| KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.RestrictedAnnotationElements getRestrictedAnnotationAccess() {
		return gaAnnotations.getRestrictedAnnotationAccess();
	}
	
	public ParserRule getRestrictedAnnotationRule() {
		return getRestrictedAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	//// e.g.: / ** semantic comment * /
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation Annotation:
	//	'@' name=ExtendedID
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EString (',' values+=EString)*
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// KeyBooleanValueAnnotation    
	//// e.g.: @visible true;
	//KeyBooleanValueAnnotation BooleanAnnotation:
	//	'@' name=ExtendedID value=BOOLEAN
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaAnnotations.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// KeyIntValueAnnotation
	//// e.g.: @minSpace 10;    
	//KeyIntValueAnnotation IntAnnotation:
	//	'@' name=ExtendedID value=Integer
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaAnnotations.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// KeyFloatValueAnnotation
	//// e.g.: @minSpace 10.0;    
	//KeyFloatValueAnnotation FloatAnnotation:
	//	'@' name=ExtendedID value=Floateger
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaAnnotations.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID ("." ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//terminal COMMENT_ANNOTATION:
	//	'/ **'->'* /';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *' !'*'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
