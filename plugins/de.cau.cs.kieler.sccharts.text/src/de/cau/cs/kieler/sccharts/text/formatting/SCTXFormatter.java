/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class SCTXFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		de.cau.cs.kieler.sccharts.text.services.SCTXGrammarAccess f = (de.cau.cs.kieler.sccharts.text.services.SCTXGrammarAccess) getGrammarAccess();
		for(Pair<Keyword, Keyword> pair: f.findKeywordPairs("{", "}")) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
			c.setLinewrap(1).after(pair.getFirst());
            c.setLinewrap(1).before(pair.getSecond());
			c.setLinewrap(1).after(pair.getSecond());
		}
		for(Keyword comma: f.findKeywords(",")) {
			c.setNoLinewrap().before(comma);
			c.setNoSpace().before(comma);
		}
		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
      
        c.setLinewrap(2).before(f.getStateRule());
        
        c.setLinewrap().after(f.getAnnotationRule());
        c.setNoSpace().after(f.getAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_2());
        c.setNoSpace().after(f.getAnnotationAccess().getTagAnnotationParserRuleCall_3());
        
        c.setLinewrap().before(f.getRegionAccess().getControlflowRegionParserRuleCall_0());
        c.setLinewrap().before(f.getRegionAccess().getDataflowRegionParserRuleCall_1());
        
        c.setLinewrap().before(f.getSCChartsAccess().getRootStatesRootStateParserRuleCall_1_0());
        
        c.setLinewrap().after(f.getDeclarationRule());
        
        c.setLinewrap().before(f.getTransitionRule());
	}
}
