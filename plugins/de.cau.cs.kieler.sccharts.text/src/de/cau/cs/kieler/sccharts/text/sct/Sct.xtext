grammar de.cau.cs.kieler.sccharts.text.sct.Sct with de.cau.cs.kieler.sccharts.text.actions.Actions

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions 
import "http://kieler.cs.cau.de/sccharts/0.1.0" as sccharts

generate sct "http://kieler.cs.cau.de/sccharts/textual/0.1.0"

// ---------------------------------------------------------------------------------------------------

Root returns sccharts::State:
    SCChart
;

// ---------------------------------------------------------------------------------------------------

SingleRegion returns sccharts::Region:
	{sccharts::Region}
    (
      (annotations += Annotation)*
      'region' (id=ID)? (label=STRING)? ':'
      (declarations+=Declaration)*
     )?
    (states+=State)*;

// ---------------------------------------------------------------------------------------------------

Region returns sccharts::Region:
	{sccharts::Region}
    (annotations += Annotation)*
    'region' (id=ID)? (label=STRING)? ':'
      (declarations+=Declaration)*
    (states+=State)+;

// ---------------------------------------------------------------------------------------------------

SCChart:
    ('package' name = QualifiedName)?
    imports += ImportDecl*
    
    (annotations += Annotation)*
    ('scchart') (id=ID) (label=STRING)?
  
    (
      ('references' referencedScope = [sccharts::State|ID]
        ('bind' bindings += Binding (',' bindings += Binding)*)?
       )
     | 
      ('{'
          (
            (declarations+=Declaration |
             localActions+=LocalAction)*
            (
             (regions+=SingleRegion)(regions+=Region)*
             )?
            )
          '}') 
     )?
;

ImportDecl: 
    'import' 
        (importedType=[sccharts::State|QualifiedName] 
        | importedNamespace=QualifiedNameWithWildcard)
;

QualifiedName:
  ID ('.' ID)*;

QualifiedNameWithWildcard :
    QualifiedName  '.' '*';

// ---------------------------------------------------------------------------------------------------

State returns sccharts::State:
    (annotations += Annotation)*
    (
      ((initial?='initial') (final?='final')?)
     |
      ((final?='final') (initial?='initial')?)
     )?
  
    (type=StateType)? ('state') (id=ID) (label=STRING)?
  
    (
      ('references' referencedScope = [sccharts::State|ID]
        ('bind' bindings += Binding (',' bindings += Binding)*)?
       )
     | 
      ('{'
          (
            (declarations+=Declaration |
             localActions+=LocalAction)*
            (
             (regions+=SingleRegion)(regions+=Region)*
             )?
            )
          '}') 
     )?
    (outgoingTransitions+=Transition)* ';'?;

    
// ---------------------------------------------------------------------------------------------------

LocalAction returns sccharts::LocalAction:
    EntryAction | DuringAction | ExitAction | SuspendAction
;    
    
// ---------------------------------------------------------------------------------------------------

Transition returns sccharts::Transition:
    (annotations += Annotation)*
    (type=TransitionTypeLegacy | type=TransitionType) 
    targetState=[sccharts::State|ID] 
//	type=TransitionType (priority=INT)? targetState=[sccharts::State|ID] 
	( (immediate?='immediate')? (deferred?='deferred')? (history=HistoryType)?  (
	 (
	   ((('with' (delay=INT)? trigger=BoolExpression)|'with')? (('/'|'do') effects+=Effect (';'effects+=Effect)*)? )
	  |
	   ( label=STRING )
	  )
	 )?)? 	
	;

// ---------------------------------------------------------------------------------------------------

Declaration returns kexpressions::Declaration:
    (annotations+=Annotation)*
	(const?='const')?
    (input?='input')?
    (output?='output')?
    (static?='static')?
    (signal?='signal')?
    type = ValueType valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'?
;

// ---------------------------------------------------------------------------------------------------

ValuedObject returns kexpressions::ValuedObject:
    name=ID
    ('[' cardinalities+=INT ']')* 
    ('=' initialValue=Expression)?
    ( 'combine'
      (combineOperator = CombineOperator)
    )?
;

// ---------------------------------------------------------------------------------------------------

TextualCode returns kexpressions::TextExpression:
    text = HOSTCODE ';';

// ---------------------------------------------------------------------------------------------------

Binding returns sccharts::Binding:
	formal = [kexpressions::ValuedObject|ID] 
	'to' 
	actual = [kexpressions::ValuedObject|ID]
;

// ---------------------------------------------------------------------------------------------------

enum StateType returns sccharts::StateType:
	NORMAL = 'normal' | CONNECTOR = 'connector' | REFERENCE = 'reference' | TEXTUAL = 'textual';

enum TransitionType returns sccharts::TransitionType:
	WEAKABORT = 'goto' | STRONGABORT = 'abort to' | TERMINATION = 'join to';
	
enum TransitionTypeLegacy returns sccharts::TransitionType:
    WEAKABORT = '-->' | STRONGABORT = 'o->' | TERMINATION = '>->';
	