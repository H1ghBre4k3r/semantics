grammar de.cau.cs.kieler.sccharts.text.sct.Sct with de.cau.cs.kieler.sccharts.text.actions.Actions
 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions 
import "http://kieler.cs.cau.de/keffects/0.1.0" as keffects
import "http://kieler.cs.cau.de/sccharts/0.1.0" as sccharts

//generate sct "http://kieler.cs.cau.de/sccharts/textual/0.1.0"

// ---------------------------------------------------------------------------------------------------

Root returns sccharts::State:
    SCChart
;

// ---------------------------------------------------------------------------------------------------

SingleControlflowRegion returns sccharts::ControlflowRegion:
	{sccharts::ControlflowRegion}
    (states+=State)+
;

// ---------------------------------------------------------------------------------------------------

SingleDataflowRegion returns sccharts::DataflowRegion:
    {sccharts::DataflowRegion}
    (
        (equations += Equation) 
        |
        (nodes += Node) // alt: + (nodes+=Node)+
    )+
;

// ---------------------------------------------------------------------------------------------------

ControlflowRegion returns sccharts::ControlflowRegion:
	{sccharts::ControlflowRegion}
    (annotations += Annotation)*
    'region' (id=ID)? (label=STRING)? ':'
    (declarations+=Declaration)*
    (states+=State)+
;

// ---------------------------------------------------------------------------------------------------

DataflowRegion returns sccharts::DataflowRegion:
    {sccharts::DataflowRegion}
    (annotations += Annotation)*
    'dataflow' (id=ID)? (label=STRING)? ':'
    (declarations+=Declaration)*
    (
        (equations += Equation) 
        |
        (nodes+=Node) // alt: + (nodes+=Node)+
    )*
;

Equation returns sccharts::Equation:
    {sccharts::Equation}
    (
        (valuedObject = [kexpressions::ValuedObject]) '=' (expression = Expression) ';'
        |
        (valuedObject = [kexpressions::ValuedObject]) '=' (node = [sccharts::Node|ID]) '.' (expression = ValuedObjectReference) ';'
    )
;


// ---------------------------------------------------------------------------------------------------

SCChart returns sccharts::State:
//    ('package' name = QualifiedName)?
//    imports += ImportDecl*
//    
    (annotations += Annotation)*
    ('scchart') (id=ID) (label=STRING)?
  
    (
      ('references' referencedScope = [sccharts::State|ID]
        ('bind' bindings += Binding (',' bindings += Binding)*)?
      )
     | 
      ('{'
            (declarations+=Declaration | localActions+=LocalAction)*
            (
// ssm: DEACTIVATED dataflow for Synchron Release
//                (regions+=SingleDataflowRegion | regions+=SingleControlflowRegion)? (regions+=Region)*
                (regions+=SingleControlflowRegion)? (regions+=Region)*
            )? // this rule only works correctly if it is optional
       '}')
    )?
;


Region returns sccharts::Region:
// ssm: DEACTIVATED dataflow for Synchron Release
//	ControlflowRegion | DataflowRegion	
    ControlflowRegion  
;

//ImportDecl: 
//    'import' 
//        (importedType=[sccharts::State|QualifiedName] 
//        | importedNamespace=QualifiedNameWithWildcard)
//;
//
//QualifiedName:
//  ID ('.' ID)*;
//
//QualifiedNameWithWildcard :
//    QualifiedName  '.' '*';

// ---------------------------------------------------------------------------------------------------

State returns sccharts::State:
    (annotations += Annotation)*
    (
      ((initial?='initial') (final?='final')?)
     |
      ((final?='final') (initial?='initial')?)
     )?
  
    (type=StateType)? ('state') (id=ID) (label=STRING)?
  
    (
      ('references' referencedScope = [sccharts::State|ID]
        ('bind' bindings += Binding (',' bindings += Binding)*)?
       )
     | 
      ('{'
            (declarations+=Declaration | localActions+=LocalAction)*
// ssm: DEACTIVATED dataflow for Synchron Release
		    ( (regions+=SingleControlflowRegion)? (regions+=Region)* )
            ( (regions+=SingleDataflowRegion|regions+=SingleControlflowRegion)? (regions+=Region)* )
      '}') 
    )?
     // The semicolon is mandatory for backtracking!
    (outgoingTransitions+=Transition)* ';'
;


Node returns sccharts::Node:
    ReferenceNode | CallNode | DefineNode
;

CallNode returns sccharts::CallNode:
    {sccharts::CallNode}
    (id=ID) '=' callReference = [sccharts::DefineNode|ID]
    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
    ';'
;

DefineNode returns sccharts::DefineNode:
    {sccharts::DefineNode}
    'node' (id=ID) '(' (inputs+=Declaration)* ')'
    'returns' '(' (outputs+=Declaration)* ')' '{'
    (
        ((valuedObjects += [kexpressions::ValuedObject]) '=' (expressions += Expression) ';')*
        | // keep that? yes, but do not allow to mix them
        (states+=State)*
    )
    '}'
;

ReferenceNode returns sccharts::ReferenceNode:
    {sccharts::ReferenceNode}
    (id=ID) (label=STRING)? '=' 'ref' referencedScope = [sccharts::State|ID]
    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
    ';'
;
    
// ---------------------------------------------------------------------------------------------------

LocalAction returns sccharts::LocalAction:
    EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction
;    
    
// ---------------------------------------------------------------------------------------------------

Transition returns sccharts::Transition:
    (annotations += Annotation)*
    (type=TransitionType) 
    targetState=[sccharts::State|ID] 
	(immediate?='immediate')?
	(deferred?='deferred')?
	(history=HistoryType)?
	(label=STRING)?
	('with'
	    ((delay=INT)? trigger=BoolExpression)?
        ('/' effects+=Effect (';' effects+=Effect)*)?
    )?
;

// ---------------------------------------------------------------------------------------------------

Binding returns sccharts::Binding:
    (annotations+=Annotation)*
	formal = [kexpressions::ValuedObject|ID] 
	'to' 
	(actual = [kexpressions::ValuedObject|ID] ('[' indices+=Expression ']')*
	    |
	 value = AnyValue
	)
;

// ---------------------------------------------------------------------------------------------------

enum StateType returns sccharts::StateType:
	NORMAL = 'normal' | CONNECTOR = 'connector' | REFERENCE = 'reference' | TEXTUAL = 'textual';

enum TransitionType returns sccharts::TransitionType:
    WEAKABORT = '-->' | STRONGABORT = 'o->' | TERMINATION = '>->';
	