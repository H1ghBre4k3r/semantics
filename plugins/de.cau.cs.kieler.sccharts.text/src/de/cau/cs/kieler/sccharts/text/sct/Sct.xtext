grammar de.cau.cs.kieler.sccharts.text.sct.Sct with de.cau.cs.kieler.sccharts.text.actions.Actions

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions 
import "http://kieler.cs.cau.de/sccharts/0.1.0" as sccharts

// ---------------------------------------------------------------------------------------------------

RootRegion returns sccharts::Region:
	{sccharts::Region}
    (annotations+=ImportAnnotation)*
    (
      (annotations += Annotation)*
      'region' id=ID (label=STRING)? ':'
      (valuedObjects+=ValuedObject)*
      (bodyText+=TextualCode)* 
     )?
    (states+=SCChart)*;

// ---------------------------------------------------------------------------------------------------

SingleRegion returns sccharts::Region:
	{sccharts::Region}
    (
      (annotations += Annotation)*
      'region' (id=ID)? (label=STRING)? ':'
      (valuedObjects+=ValuedObject)*
      (bodyText+=TextualCode)*
     )?
    (states+=State)*;

// ---------------------------------------------------------------------------------------------------

Region returns sccharts::Region:
	{sccharts::Region}
    (annotations += Annotation)*
    'region' (id=ID)? (label=STRING)? ':'
    (valuedObjects+=ValuedObject)*
    (bodyText+=TextualCode)* 
    (states+=State)+;

// ---------------------------------------------------------------------------------------------------

SCChart returns sccharts::State:
    (annotations += Annotation)*
    (type=StateType)? ('scchart') (id=ID) (label=STRING)?
  
    (
      ('@' bodyReference = [sccharts::State|ID]
        ('[' renamings+= Substitution (',' renamings+= Substitution)* ']')?
       )
     | 
      ('{'
          (
            (valuedObjects+=ValuedObject |
             localActions+=LocalAction)*
            (bodyText += TextualCode)*
            (
             (regions+=SingleRegion)(regions+=Region)*
             )?
            )
          '}') 
     )?
;

// ---------------------------------------------------------------------------------------------------

State returns sccharts::State:
    (annotations += Annotation)*
    (
      ((initial?='initial') (final?='final')?)
     |
      ((final?='final') (initial?='initial')?)
     )?
  
    (type=StateType)? ('state') (id=ID) (label=STRING)?
  
    (
      ('@' bodyReference = [sccharts::State|ID]
        ('[' renamings+= Substitution (',' renamings+= Substitution)* ']')?
       )
     | 
      ('{'
          (
            (valuedObjects+=ValuedObject |
             localActions+=LocalAction)*
            (bodyText += TextualCode)*
            (
             (regions+=SingleRegion)(regions+=Region)*
             )?
            )
          '}') 
     )?
    (outgoingTransitions+=Transition)* ';';

    
// ---------------------------------------------------------------------------------------------------

LocalAction returns sccharts::LocalAction:
    EntryAction | DuringAction | ExitAction | SuspendAction
;    
    
// ---------------------------------------------------------------------------------------------------

Transition returns sccharts::Transition:
    (annotations += Annotation)*
	type=TransitionType (priority=INT)? targetState=[sccharts::State|ID] 
	( (immediate?='immediate')? (deferred?='deferred')? (history=HistoryType)?  ('with'
	 (
	   ( (delay=INT)? (trigger=BoolExpression)? ('/' effects+=Effect (';'effects+=Effect)*)? )
	  |
	   ( label=STRING )
	  )
	 )?)? 	
	;

// ---------------------------------------------------------------------------------------------------

ValuedObject returns kexpressions::ValuedObject:
    (annotations+=Annotation)*
    (input?='input')?
    (output?='output')?
    (static?='static')?
    (signal?='signal')?
//    (type = ValueType)?
    (type2 = ArrayType)?
    name=ID ('=' initialValue=Expression)?
    ( 'combine'
      (combineOperator = CombineOperator)
    )? ';' ;

ArrayType returns kexpressions::Type:
    PrimitiveTypeReference ({kexpressions::ArrayType.elementType = current} '[' cardinality = INT ']')?
;

PrimitiveTypeReference returns kexpressions::Type:
    {kexpressions::PrimitiveTypeReference} primitiveType = [kexpressions::PrimitiveType|ValueTypeLiteral]
;

 ValueTypeLiteral :
    "pure" | "bool" | "unsigned" | "int" | "float" | "double" | "string" | "host";


// ---------------------------------------------------------------------------------------------------

TextualCode returns kexpressions::TextExpression:
    text = HOSTCODE ';';

// ---------------------------------------------------------------------------------------------------

Substitution returns sccharts::Substitution:
	actual = ID '/' formal = ID;

// ---------------------------------------------------------------------------------------------------

enum StateType returns sccharts::StateType:
	NORMAL = 'normal' | CONNECTOR = 'connector' | REFERENCE = 'reference' | TEXTUAL = 'textual';

enum TransitionType returns sccharts::TransitionType:
	WEAKABORT = '-->' | STRONGABORT = 'o->' | NORMALTERMINATION = '>->';


	