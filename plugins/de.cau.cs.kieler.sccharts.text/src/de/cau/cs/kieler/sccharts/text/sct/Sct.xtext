grammar de.cau.cs.kieler.sccharts.text.sct.Sct with de.cau.cs.kieler.sccharts.text.actions.Actions

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions 
import "http://kieler.cs.cau.de/sccharts/0.1.0" as sccharts


RootRegion returns sccharts::Region:
	{sccharts::Region}
    (annotations+=ImportAnnotation)*
    (
      (annotations += Annotation)*
      'region' (id=ID)? (label=STRING)? ':'
      (valuedObjects+=ValuedObject)*
      (bodyText+=TextualCode)* 
     )?
    (states+=State)*;

// ---------------------------------------------------------------------------------------------------

SingleRegion returns sccharts::Region:
	{sccharts::Region}
    (
      (annotations += Annotation)*
      'region' (id=ID)? (label=STRING)? ':'
      (valuedObjects+=ValuedObject)*
      (bodyText+=TextualCode)*
     )?
    (states+=State)*;

// ---------------------------------------------------------------------------------------------------

Region returns sccharts::Region:
	{sccharts::Region}
    (annotations += Annotation)*
    'region' (id=ID)? (label=STRING)? ':'
    (valuedObjects+=ValuedObject)*
    (bodyText+=TextualCode)* 
    (states+=State)+;

// ---------------------------------------------------------------------------------------------------

State returns sccharts::State:
    (annotations += Annotation)*
    (
      ((isInitial?='init') (isFinal?='final')?)
     |
      ((isFinal?='final') (isInitial?='init')?)
     )?
  
    (type=StateType)? ('state') (id=ID) (label=STRING)?
  
    (
      ('@' bodyReference = [sccharts::State|ID]
        ('[' renamings+= Substitution (',' renamings+= Substitution)* ']')?
       )
     | 
      ('{'
          (
            (valuedObjects+=ValuedObject    |
             'entry' entryActions+=Action |
             'during' duringActions+=Action |
             'exit'  exitActions+=Action  |
             'suspend' suspensionTrigger=Action)*
            (bodyText += TextualCode)*
            (
             (regions+=SingleRegion)(regions+=Region)*
             )?
            )
          '}') 
     )?
    (outgoingTransitions+=Transition)* ';';

// ---------------------------------------------------------------------------------------------------

Transition returns sccharts::Transition:
    (annotations += Annotation)*
	type=TransitionType (priority=INT)? targetState=[sccharts::State|ID] 
	( 'with'
	 (
	   ( (isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ('/' effects+=Effect (';'effects+=Effect)*)? )
	  |
	   ( label=STRING )
	  )
	 )? 	
	(isHistory?='history')?;

// ---------------------------------------------------------------------------------------------------

//Signal returns kexpressions::Signal:
//    aSignal
//    | ISignal;
//
//aSignal returns kexpressions::Signal:
//    (annotations+=Annotation)*
//    (isInput?='input')?
//	(isOutput?='output')?
//	'signal' name=ID (':=' initialValue=AnyType)?
//    ((':' (type = ValueType | hostType = STRING))
//      |
//     (':' 'combine' (type = ValueType | hostType = STRING) 'with'
//        (combineOperator = CombineOperator | hostCombineOperator = STRING))
//    )?;
//
//ISignal returns kexpressions::ISignal:
//    (annotations+=Annotation)*
//    (isInput?='input')?
//	(isOutput?='output')?
//	'signal' name=ID (':=' initialValue=AnyType)?
//    ((':' (type = ValueType | hostType = STRING))
//      |
//     (':' 'combine' (type = ValueType | hostType = STRING) 'with'
//        (combineOperator = CombineOperator | hostCombineOperator = STRING))
//    )?;



ValuedObject returns kexpressions::ValuedObject:
    (annotations+=Annotation)*
    (isInput?='input')?
    (isOutput?='output')?
    (isStatic?='static')?
    (isSignal?='signal')?
    name=ID (':=' initialValue=Expression)?
    ((':' (type = ValueType))
      |
     (':' 'combine' (type = ValueType) 'with'
        (combineOperator = CombineOperator))
    )?;


// ---------------------------------------------------------------------------------------------------

//Variable returns kexpressions::Variable:
//    aVariable
//    | IVariable;
//    
//aVariable returns kexpressions::Variable:
//    (annotations += Annotation)*
//    'var' name=ID (':=' initialValue=AnyType)? ':' (type = ValueType | hostType = STRING);
//
//IVariable returns kexpressions::IVariable:
//    (annotations += Annotation)*
//    'var' name=ID (':=' initialValue=AnyType)? ':' (type = ValueType | hostType = STRING);

// ---------------------------------------------------------------------------------------------------

TextualCode returns kexpressions::TextExpression:
    'textual' 'code' ':' text = STRING;

// ---------------------------------------------------------------------------------------------------

Substitution returns sccharts::Substitution:
	actual = ID '/' formal = ID;

// ---------------------------------------------------------------------------------------------------

enum StateType returns sccharts::StateType:
	NORMAL = 'normal' | CONDITIONAL = 'conditional' | REFERENCE = 'reference' | TEXTUAL = 'textual';

enum TransitionType returns sccharts::TransitionType:
	WEAKABORT = '-->' | STRONGABORT = 'o->' | NORMALTERMINATION = '>->';
