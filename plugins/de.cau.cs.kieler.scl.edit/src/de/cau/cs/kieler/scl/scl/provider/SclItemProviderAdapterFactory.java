/**
 */
package de.cau.cs.kieler.scl.scl.provider;

import de.cau.cs.kieler.scl.scl.util.SclAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SclItemProviderAdapterFactory extends SclAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public SclItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.SCLProgram} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected SCLProgramItemProvider sclProgramItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.SCLProgram}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createSCLProgramAdapter() {
		if (sclProgramItemProvider == null) {
			sclProgramItemProvider = new SCLProgramItemProvider(this);
		}

		return sclProgramItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.Statement} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected StatementItemProvider statementItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.Statement}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createStatementAdapter() {
		if (statementItemProvider == null) {
			statementItemProvider = new StatementItemProvider(this);
		}

		return statementItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.EmptyStatement} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected EmptyStatementItemProvider emptyStatementItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.EmptyStatement}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createEmptyStatementAdapter() {
		if (emptyStatementItemProvider == null) {
			emptyStatementItemProvider = new EmptyStatementItemProvider(this);
		}

		return emptyStatementItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.InstructionStatement} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected InstructionStatementItemProvider instructionStatementItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.InstructionStatement}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createInstructionStatementAdapter() {
		if (instructionStatementItemProvider == null) {
			instructionStatementItemProvider = new InstructionStatementItemProvider(this);
		}

		return instructionStatementItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.Instruction} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected InstructionItemProvider instructionItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.Instruction}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createInstructionAdapter() {
		if (instructionItemProvider == null) {
			instructionItemProvider = new InstructionItemProvider(this);
		}

		return instructionItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.Assignment} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected AssignmentItemProvider assignmentItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.Assignment}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createAssignmentAdapter() {
		if (assignmentItemProvider == null) {
			assignmentItemProvider = new AssignmentItemProvider(this);
		}

		return assignmentItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.Conditional} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ConditionalItemProvider conditionalItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.Conditional}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createConditionalAdapter() {
		if (conditionalItemProvider == null) {
			conditionalItemProvider = new ConditionalItemProvider(this);
		}

		return conditionalItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.Goto} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected GotoItemProvider gotoItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.Goto}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createGotoAdapter() {
		if (gotoItemProvider == null) {
			gotoItemProvider = new GotoItemProvider(this);
		}

		return gotoItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.StatementSequence} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected StatementSequenceItemProvider statementSequenceItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.StatementSequence}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createStatementSequenceAdapter() {
		if (statementSequenceItemProvider == null) {
			statementSequenceItemProvider = new StatementSequenceItemProvider(this);
		}

		return statementSequenceItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.Thread} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ThreadItemProvider threadItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.Thread}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createThreadAdapter() {
		if (threadItemProvider == null) {
			threadItemProvider = new ThreadItemProvider(this);
		}

		return threadItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.Parallel} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected ParallelItemProvider parallelItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.Parallel}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createParallelAdapter() {
		if (parallelItemProvider == null) {
			parallelItemProvider = new ParallelItemProvider(this);
		}

		return parallelItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.Pause} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected PauseItemProvider pauseItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.Pause}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createPauseAdapter() {
		if (pauseItemProvider == null) {
			pauseItemProvider = new PauseItemProvider(this);
		}

		return pauseItemProvider;
	}

    /**
	 * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.scl.scl.StatementScope} instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    protected StatementScopeItemProvider statementScopeItemProvider;

    /**
	 * This creates an adapter for a {@link de.cau.cs.kieler.scl.scl.StatementScope}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter createStatementScopeAdapter() {
		if (statementScopeItemProvider == null) {
			statementScopeItemProvider = new StatementScopeItemProvider(this);
		}

		return statementScopeItemProvider;
	}

    /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

    /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

    /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    @Override
    public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

    /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

    /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

    /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

    /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @generated
	 */
    public void dispose() {
		if (sclProgramItemProvider != null) sclProgramItemProvider.dispose();
		if (statementItemProvider != null) statementItemProvider.dispose();
		if (emptyStatementItemProvider != null) emptyStatementItemProvider.dispose();
		if (instructionStatementItemProvider != null) instructionStatementItemProvider.dispose();
		if (instructionItemProvider != null) instructionItemProvider.dispose();
		if (assignmentItemProvider != null) assignmentItemProvider.dispose();
		if (conditionalItemProvider != null) conditionalItemProvider.dispose();
		if (gotoItemProvider != null) gotoItemProvider.dispose();
		if (statementSequenceItemProvider != null) statementSequenceItemProvider.dispose();
		if (threadItemProvider != null) threadItemProvider.dispose();
		if (parallelItemProvider != null) parallelItemProvider.dispose();
		if (pauseItemProvider != null) pauseItemProvider.dispose();
		if (statementScopeItemProvider != null) statementScopeItemProvider.dispose();
	}

}
