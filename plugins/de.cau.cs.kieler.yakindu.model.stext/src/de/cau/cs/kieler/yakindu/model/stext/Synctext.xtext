grammar de.cau.cs.kieler.yakindu.model.stext.Synctext with org.yakindu.sct.model.stext.SText

generate synctext "http://kieler.cs.cau.de/yakindu/stext/"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.yakindu.org/sct/statechart/SText" as stext
import "http://www.yakindu.org/sct/sgraph/2.0.0" as sgraph
import "http://www.yakindu.org/base/types/2.0.0" as types

/*********************************** INTERFACE DECLARATION **************************************** */
////defines the possible scopes for a state
StateScope:
	{SimpleScope} declarations+=(VariableDeclaration | SignalDeclaration| OperationDeclaration | LocalReaction)*;

/************************************************/
/*			 Signal Definition				*/
/************************************************/
SignalDeclaration returns sgraph::Event:
	SignalDefinition;
SignalDefinition:
	{EventDefinition} (Input?='input')? (Output?='output')? 'signal'
	name=ID (':' type=[types::Type|FQN]
	('=' varInitialValue=Expression)?
	('with' varCombineOperator=CombineOperator)?)? ';';

/************************************************/
/*			 Variable Definition				*/
/************************************************/
// A dummy VariableDefinition declaration, which will be override by an other grammar 
//VariableDefinition:
//	{VariableDefinition} 'variable' name=ID ';';
// CMOT changes, want to use VariableDefinitions from SyncText
VariableDeclaration returns sgraph::Variable:VariableDefinition;
VariableDefinition:
    {VariableDefinition} (isInput?='input')? (isOutput?='output')? (isStatic?='static')? type=[types::Type|FQN] name=ID
    ('=' initialValue=Expression)? ('with' varCombineOperator=CombineOperator)? ';';	

	
OperationDefinition:
	{OperationDefinition} 'extern'  functionType=[types::Type|FQN] name=XID '(' paramType=[types::Type|FQN] ')' ';';
	

/************************************************/
/*			 	LocalReactionScope					*/
/************************************************/
LocalReaction:
	(trigger=(LocalReactionTrigger | ReactionTrigger))? ('/' effect=(ReactionEffect | SuspendEffect)) ';';

SuspendEffect returns sgraph::Effect:
	{SuspendEffect} 'Suspend';

LocalReactionTrigger returns sgraph::Trigger:
	{ReactionTrigger} stateReaction=StateReaction (':' reactionTrigger=ReactionTrigger?)?;

StateReaction:
	Entry | Inside | Exit;

Entry:
	{Entry} 'Entry';

Inside:
	{Inside} 'During';

Exit:
	{Exit} 'Exit';

/******************************************** TRANSITION ***************************************** */
// The ReactionTrigger is a Trigger and has an Expression, 
// an optional delay and isImmediate option represented with a '#'
// cmot change: Get rid of extra brackets
ReactionTrigger returns sgraph::Trigger:
	{ReactionTrigger} (labelPriority=INT':')? (delay=INT)? (expression=Expression)?;

    // Original code by wah
    //{ReactionTrigger} (labelPriority=INT':')? (delay=INT)? ((trigger=RegularEventSpec);
    //| ('(' guardExpression=Expression ')'))?;

	// The ReactionEffect is an Effect. 
ReactionEffect returns sgraph::Effect:
	{ReactionEffect} actions+=Expression (=> ',' actions+=Expression)*; // (';')?;



/***************************************** Expressions ******************************************* */
// Override the stext::NumericalMultiplyDivideExpression
// cmot addition: goal is to have some other divisor ":" instead of "/", because "/" is used to separate
// trigger / effect.
NumericalMultiplyDivideExpression returns stext::Expression:
    NumericalUnaryExpression
    ({NumericalMultiplyDivideExpression.leftOperand=current}
    operator=MultiplicativeOperator2
    rightOperand=NumericalUnaryExpression)*;
    
// New MultiplicativeOperator2 (replacing MultiplicativeOperator with ":" instead of "/")    
// cmot addition
enum MultiplicativeOperator2:
    mul='*' | div=':' | mod='%';
    
    
/***************************************** Expressions ******************************************* */
// Override the stext::EventValueReferenceExpression
// override 'valueof()' with 'val()', allow val(pre())    
// cmot change
EventValueReferenceExpression returns stext::Expression:
  {EventValueReferenceExpression} 'val'  '(' value=(FeatureCall|PreReferenceExpression) ')';
    
// Additional pre(), like val(), allow pre(val()) and allow pre(pre())    
// cmot addition
PreReferenceExpression returns stext::Expression:
  {EventValueReferenceExpression} 'pre'  '(' value=(FeatureCall|EventValueReferenceExpression|PreReferenceExpression) ')';
    


/***************************************** Expressions ******************************************* */
// Override the stext::PrimaryExpression
// remove the ActiveStateReferenceExpression and the EventValueReferenceExpression
// and add PreReferenceExpression that returns the previous tick instance of a variable. 
PrimaryExpression returns stext::Expression:
    PrimitiveValueExpression 
    | FeatureCall 
    | ActiveStateReferenceExpression 
    | EventValueReferenceExpression
    | PreReferenceExpression  
    | ParenthesizedExpression
; 



//todo: pre(x) should return the same type of x
PreValueExpression returns stext::Expression:
	{PreValueExpression} 'pre' '(' value=FeatureCall ')';

/***************************************** COMBINE OPERATORS ************************************* */
enum CombineOperator returns CombineOperator:
	NONE="'none'" | ADD="'+'" | MULT="'*'" | MAX="'max'" |
	MIN="'min'" | OR="'or'" | AND="'and'" | HOST="'host'";
