/**
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 * 
 * http://www.informatik.uni-kiel.de/rtsys/kieler/
 * 
 * Copyright 2013 by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 * See the file epl-v10.html for the license text.
 */
package de.cau.cs.kieler.sccharts.provider;

import de.cau.cs.kieler.sccharts.util.SCChartsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SCChartsItemProviderAdapterFactory extends SCChartsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public static final String copyright = "KIELER - Kiel Integrated Environment for Layout Eclipse RichClient\n\nhttp://www.informatik.uni-kiel.de/rtsys/kieler/\n\nCopyright 2013 by\n+ Kiel University\n  + Department of Computer Science\n    + Real-Time and Embedded Systems Group\n\nThis code is provided under the terms of the Eclipse Public License (EPL).\nSee the file epl-v10.html for the license text.";

    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public SCChartsItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.Action} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ActionItemProvider actionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.Action}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createActionAdapter() {
        if (actionItemProvider == null) {
            actionItemProvider = new ActionItemProvider(this);
        }

        return actionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.State} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StateItemProvider stateItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.State}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStateAdapter() {
        if (stateItemProvider == null) {
            stateItemProvider = new StateItemProvider(this);
        }

        return stateItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.Region} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RegionItemProvider regionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.Region}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRegionAdapter() {
        if (regionItemProvider == null) {
            regionItemProvider = new RegionItemProvider(this);
        }

        return regionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.ControlflowRegion} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ControlflowRegionItemProvider controlflowRegionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.ControlflowRegion}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createControlflowRegionAdapter() {
        if (controlflowRegionItemProvider == null) {
            controlflowRegionItemProvider = new ControlflowRegionItemProvider(this);
        }

        return controlflowRegionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.DataflowRegion} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DataflowRegionItemProvider dataflowRegionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.DataflowRegion}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDataflowRegionAdapter() {
        if (dataflowRegionItemProvider == null) {
            dataflowRegionItemProvider = new DataflowRegionItemProvider(this);
        }

        return dataflowRegionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.Node} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NodeItemProvider nodeItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.Node}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNodeAdapter() {
        if (nodeItemProvider == null) {
            nodeItemProvider = new NodeItemProvider(this);
        }

        return nodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.ReferenceNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ReferenceNodeItemProvider referenceNodeItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.ReferenceNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createReferenceNodeAdapter() {
        if (referenceNodeItemProvider == null) {
            referenceNodeItemProvider = new ReferenceNodeItemProvider(this);
        }

        return referenceNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.CallNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CallNodeItemProvider callNodeItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.CallNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCallNodeAdapter() {
        if (callNodeItemProvider == null) {
            callNodeItemProvider = new CallNodeItemProvider(this);
        }

        return callNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.DefineNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DefineNodeItemProvider defineNodeItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.DefineNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDefineNodeAdapter() {
        if (defineNodeItemProvider == null) {
            defineNodeItemProvider = new DefineNodeItemProvider(this);
        }

        return defineNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.Equation} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EquationItemProvider equationItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.Equation}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEquationAdapter() {
        if (equationItemProvider == null) {
            equationItemProvider = new EquationItemProvider(this);
        }

        return equationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.Binding} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BindingItemProvider bindingItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.Binding}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBindingAdapter() {
        if (bindingItemProvider == null) {
            bindingItemProvider = new BindingItemProvider(this);
        }

        return bindingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.Transition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TransitionItemProvider transitionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.Transition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTransitionAdapter() {
        if (transitionItemProvider == null) {
            transitionItemProvider = new TransitionItemProvider(this);
        }

        return transitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.EntryAction} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EntryActionItemProvider entryActionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.EntryAction}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEntryActionAdapter() {
        if (entryActionItemProvider == null) {
            entryActionItemProvider = new EntryActionItemProvider(this);
        }

        return entryActionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.DuringAction} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DuringActionItemProvider duringActionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.DuringAction}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDuringActionAdapter() {
        if (duringActionItemProvider == null) {
            duringActionItemProvider = new DuringActionItemProvider(this);
        }

        return duringActionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.ExitAction} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExitActionItemProvider exitActionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.ExitAction}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExitActionAdapter() {
        if (exitActionItemProvider == null) {
            exitActionItemProvider = new ExitActionItemProvider(this);
        }

        return exitActionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.SuspendAction} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SuspendActionItemProvider suspendActionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.SuspendAction}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSuspendActionAdapter() {
        if (suspendActionItemProvider == null) {
            suspendActionItemProvider = new SuspendActionItemProvider(this);
        }

        return suspendActionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link de.cau.cs.kieler.sccharts.IterateAction} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IterateActionItemProvider iterateActionItemProvider;

    /**
     * This creates an adapter for a {@link de.cau.cs.kieler.sccharts.IterateAction}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIterateActionAdapter() {
        if (iterateActionItemProvider == null) {
            iterateActionItemProvider = new IterateActionItemProvider(this);
        }

        return iterateActionItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (actionItemProvider != null) actionItemProvider.dispose();
        if (stateItemProvider != null) stateItemProvider.dispose();
        if (regionItemProvider != null) regionItemProvider.dispose();
        if (controlflowRegionItemProvider != null) controlflowRegionItemProvider.dispose();
        if (dataflowRegionItemProvider != null) dataflowRegionItemProvider.dispose();
        if (nodeItemProvider != null) nodeItemProvider.dispose();
        if (referenceNodeItemProvider != null) referenceNodeItemProvider.dispose();
        if (callNodeItemProvider != null) callNodeItemProvider.dispose();
        if (defineNodeItemProvider != null) defineNodeItemProvider.dispose();
        if (equationItemProvider != null) equationItemProvider.dispose();
        if (bindingItemProvider != null) bindingItemProvider.dispose();
        if (transitionItemProvider != null) transitionItemProvider.dispose();
        if (entryActionItemProvider != null) entryActionItemProvider.dispose();
        if (duringActionItemProvider != null) duringActionItemProvider.dispose();
        if (exitActionItemProvider != null) exitActionItemProvider.dispose();
        if (suspendActionItemProvider != null) suspendActionItemProvider.dispose();
        if (iterateActionItemProvider != null) iterateActionItemProvider.dispose();
    }

}
