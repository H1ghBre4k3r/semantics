/*
* generated by Xtext
*/
package de.cau.cs.kieler.scl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.cau.cs.kieler.scl.services.SCLGrammarAccess;

public class SCLParser extends AbstractContentAssistParser {
	
	@Inject
	private SCLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.cau.cs.kieler.scl.ui.contentassist.antlr.internal.InternalSCLParser createParser() {
		de.cau.cs.kieler.scl.ui.contentassist.antlr.internal.InternalSCLParser result = new de.cau.cs.kieler.scl.ui.contentassist.antlr.internal.InternalSCLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSCLProgramAccess().getAlternatives_5_0(), "rule__SCLProgram__Alternatives_5_0");
					put(grammarAccess.getDeclarationAccess().getAlternatives_6(), "rule__Declaration__Alternatives_6");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getInstructionStatementAccess().getInstructionAlternatives_1_0(), "rule__InstructionStatement__InstructionAlternatives_1_0");
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getConditionalAccess().getAlternatives_4_0(), "rule__Conditional__Alternatives_4_0");
					put(grammarAccess.getConditionalAccess().getAlternatives_5_2_0(), "rule__Conditional__Alternatives_5_2_0");
					put(grammarAccess.getStatementSequenceAccess().getAlternatives(), "rule__StatementSequence__Alternatives");
					put(grammarAccess.getThreadAccess().getAlternatives_1_0(), "rule__Thread__Alternatives_1_0");
					put(grammarAccess.getStatementScopeAccess().getAlternatives_3_0(), "rule__StatementScope__Alternatives_3_0");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getOrAndExpressionAccess().getAlternatives_1(), "rule__OrAndExpression__Alternatives_1");
					put(grammarAccess.getOrAndExpressionAccess().getOperatorAlternatives_1_0_1_0(), "rule__OrAndExpression__OperatorAlternatives_1_0_1_0");
					put(grammarAccess.getOrAndExpressionAccess().getOperatorAlternatives_1_1_1_0(), "rule__OrAndExpression__OperatorAlternatives_1_1_1_0");
					put(grammarAccess.getCompareOperationAccess().getAlternatives(), "rule__CompareOperation__Alternatives");
					put(grammarAccess.getNotOrValuedExpressionAccess().getAlternatives(), "rule__NotOrValuedExpression__Alternatives");
					put(grammarAccess.getNotExpressionAccess().getAlternatives(), "rule__NotExpression__Alternatives");
					put(grammarAccess.getNegExpressionAccess().getAlternatives(), "rule__NegExpression__Alternatives");
					put(grammarAccess.getAtomicExpressionAccess().getAlternatives(), "rule__AtomicExpression__Alternatives");
					put(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives(), "rule__AtomicValuedExpression__Alternatives");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getAlternatives(), "rule__ValuedObjectTestExpression__Alternatives");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAlternatives_0_1_0(), "rule__ValuedObjectTestExpression__OperatorAlternatives_0_1_0");
					put(grammarAccess.getFunctionCallAccess().getAlternatives_2(), "rule__FunctionCall__Alternatives_2");
					put(grammarAccess.getAnyTypeAccess().getAlternatives(), "rule__AnyType__Alternatives");
					put(grammarAccess.getAnnotationAccess().getAlternatives(), "rule__Annotation__Alternatives");
					put(grammarAccess.getValuedAnnotationAccess().getAlternatives(), "rule__ValuedAnnotation__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getValueTypeAccess().getAlternatives(), "rule__ValueType__Alternatives");
					put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
					put(grammarAccess.getCombineOperatorAccess().getAlternatives(), "rule__CombineOperator__Alternatives");
					put(grammarAccess.getSCLProgramAccess().getGroup(), "rule__SCLProgram__Group__0");
					put(grammarAccess.getSCLProgramAccess().getGroup_5(), "rule__SCLProgram__Group_5__0");
					put(grammarAccess.getSCLProgramAccess().getGroup_5_0_0(), "rule__SCLProgram__Group_5_0_0__0");
					put(grammarAccess.getSCLProgramAccess().getGroup_5_1(), "rule__SCLProgram__Group_5_1__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup_6_0(), "rule__Declaration__Group_6_0__0");
					put(grammarAccess.getDeclarationAccess().getGroup_6_0_3(), "rule__Declaration__Group_6_0_3__0");
					put(grammarAccess.getDeclarationAccess().getGroup_6_1(), "rule__Declaration__Group_6_1__0");
					put(grammarAccess.getDeclarationAccess().getGroup_6_1_2(), "rule__Declaration__Group_6_1_2__0");
					put(grammarAccess.getValuedObjectAccess().getGroup(), "rule__ValuedObject__Group__0");
					put(grammarAccess.getValuedObjectAccess().getGroup_1(), "rule__ValuedObject__Group_1__0");
					put(grammarAccess.getValuedObjectAccess().getGroup_2(), "rule__ValuedObject__Group_2__0");
					put(grammarAccess.getEmptyStatementAccess().getGroup(), "rule__EmptyStatement__Group__0");
					put(grammarAccess.getEmptyStatementAccess().getGroup_1(), "rule__EmptyStatement__Group_1__0");
					put(grammarAccess.getInstructionStatementAccess().getGroup(), "rule__InstructionStatement__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getConditionalAccess().getGroup(), "rule__Conditional__Group__0");
					put(grammarAccess.getConditionalAccess().getGroup_4(), "rule__Conditional__Group_4__0");
					put(grammarAccess.getConditionalAccess().getGroup_4_0_0(), "rule__Conditional__Group_4_0_0__0");
					put(grammarAccess.getConditionalAccess().getGroup_4_1(), "rule__Conditional__Group_4_1__0");
					put(grammarAccess.getConditionalAccess().getGroup_5(), "rule__Conditional__Group_5__0");
					put(grammarAccess.getConditionalAccess().getGroup_5_2(), "rule__Conditional__Group_5_2__0");
					put(grammarAccess.getConditionalAccess().getGroup_5_2_0_0(), "rule__Conditional__Group_5_2_0_0__0");
					put(grammarAccess.getConditionalAccess().getGroup_5_2_1(), "rule__Conditional__Group_5_2_1__0");
					put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
					put(grammarAccess.getThreadAccess().getGroup(), "rule__Thread__Group__0");
					put(grammarAccess.getThreadAccess().getGroup_1(), "rule__Thread__Group_1__0");
					put(grammarAccess.getThreadAccess().getGroup_1_0_0(), "rule__Thread__Group_1_0_0__0");
					put(grammarAccess.getThreadAccess().getGroup_1_1(), "rule__Thread__Group_1_1__0");
					put(grammarAccess.getParallelAccess().getGroup(), "rule__Parallel__Group__0");
					put(grammarAccess.getParallelAccess().getGroup_1(), "rule__Parallel__Group_1__0");
					put(grammarAccess.getParallelAccess().getGroup_1_1(), "rule__Parallel__Group_1_1__0");
					put(grammarAccess.getPauseAccess().getGroup(), "rule__Pause__Group__0");
					put(grammarAccess.getStatementScopeAccess().getGroup(), "rule__StatementScope__Group__0");
					put(grammarAccess.getStatementScopeAccess().getGroup_3(), "rule__StatementScope__Group_3__0");
					put(grammarAccess.getStatementScopeAccess().getGroup_3_0_0(), "rule__StatementScope__Group_3_0_0__0");
					put(grammarAccess.getStatementScopeAccess().getGroup_3_1(), "rule__StatementScope__Group_3_1__0");
					put(grammarAccess.getOrAndExpressionAccess().getGroup(), "rule__OrAndExpression__Group__0");
					put(grammarAccess.getOrAndExpressionAccess().getGroup_1_0(), "rule__OrAndExpression__Group_1_0__0");
					put(grammarAccess.getOrAndExpressionAccess().getGroup_1_1(), "rule__OrAndExpression__Group_1_1__0");
					put(grammarAccess.getCompareOperationAccess().getGroup_0(), "rule__CompareOperation__Group_0__0");
					put(grammarAccess.getCompareOperationAccess().getGroup_0_1(), "rule__CompareOperation__Group_0_1__0");
					put(grammarAccess.getNotExpressionAccess().getGroup_0(), "rule__NotExpression__Group_0__0");
					put(grammarAccess.getAddExpressionAccess().getGroup(), "rule__AddExpression__Group__0");
					put(grammarAccess.getAddExpressionAccess().getGroup_1(), "rule__AddExpression__Group_1__0");
					put(grammarAccess.getSubExpressionAccess().getGroup(), "rule__SubExpression__Group__0");
					put(grammarAccess.getSubExpressionAccess().getGroup_1(), "rule__SubExpression__Group_1__0");
					put(grammarAccess.getMultExpressionAccess().getGroup(), "rule__MultExpression__Group__0");
					put(grammarAccess.getMultExpressionAccess().getGroup_1(), "rule__MultExpression__Group_1__0");
					put(grammarAccess.getDivExpressionAccess().getGroup(), "rule__DivExpression__Group__0");
					put(grammarAccess.getDivExpressionAccess().getGroup_1(), "rule__DivExpression__Group_1__0");
					put(grammarAccess.getModExpressionAccess().getGroup(), "rule__ModExpression__Group__0");
					put(grammarAccess.getModExpressionAccess().getGroup_1(), "rule__ModExpression__Group_1__0");
					put(grammarAccess.getNegExpressionAccess().getGroup_0(), "rule__NegExpression__Group_0__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup_2(), "rule__AtomicExpression__Group_2__0");
					put(grammarAccess.getAtomicValuedExpressionAccess().getGroup_3(), "rule__AtomicValuedExpression__Group_3__0");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_0(), "rule__ValuedObjectTestExpression__Group_0__0");
					put(grammarAccess.getValuedObjectReferenceAccess().getGroup(), "rule__ValuedObjectReference__Group__0");
					put(grammarAccess.getValuedObjectReferenceAccess().getGroup_1(), "rule__ValuedObjectReference__Group_1__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_2_0(), "rule__FunctionCall__Group_2_0__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_2_0_2(), "rule__FunctionCall__Group_2_0_2__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getTagAnnotationAccess().getGroup(), "rule__TagAnnotation__Group__0");
					put(grammarAccess.getTagAnnotationAccess().getGroup_2(), "rule__TagAnnotation__Group_2__0");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getGroup(), "rule__KeyStringValueAnnotation__Group__0");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getGroup_3(), "rule__KeyStringValueAnnotation__Group_3__0");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup(), "rule__TypedKeyStringValueAnnotation__Group__0");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup_6(), "rule__TypedKeyStringValueAnnotation__Group_6__0");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getGroup(), "rule__KeyBooleanValueAnnotation__Group__0");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getGroup_3(), "rule__KeyBooleanValueAnnotation__Group_3__0");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getGroup(), "rule__KeyIntValueAnnotation__Group__0");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getGroup_3(), "rule__KeyIntValueAnnotation__Group_3__0");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getGroup(), "rule__KeyFloatValueAnnotation__Group__0");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getGroup_3(), "rule__KeyFloatValueAnnotation__Group_3__0");
					put(grammarAccess.getImportAnnotationAccess().getGroup(), "rule__ImportAnnotation__Group__0");
					put(grammarAccess.getExtendedIDAccess().getGroup(), "rule__ExtendedID__Group__0");
					put(grammarAccess.getExtendedIDAccess().getGroup_1(), "rule__ExtendedID__Group_1__0");
					put(grammarAccess.getSCLProgramAccess().getAnnotationsAssignment_0(), "rule__SCLProgram__AnnotationsAssignment_0");
					put(grammarAccess.getSCLProgramAccess().getNameAssignment_2(), "rule__SCLProgram__NameAssignment_2");
					put(grammarAccess.getSCLProgramAccess().getDeclarationsAssignment_3(), "rule__SCLProgram__DeclarationsAssignment_3");
					put(grammarAccess.getSCLProgramAccess().getStatementsAssignment_5_0_0_0(), "rule__SCLProgram__StatementsAssignment_5_0_0_0");
					put(grammarAccess.getSCLProgramAccess().getStatementsAssignment_5_0_1(), "rule__SCLProgram__StatementsAssignment_5_0_1");
					put(grammarAccess.getSCLProgramAccess().getStatementsAssignment_5_1_0(), "rule__SCLProgram__StatementsAssignment_5_1_0");
					put(grammarAccess.getSCLProgramAccess().getStatementsAssignment_5_1_1(), "rule__SCLProgram__StatementsAssignment_5_1_1");
					put(grammarAccess.getDeclarationAccess().getAnnotationsAssignment_0(), "rule__Declaration__AnnotationsAssignment_0");
					put(grammarAccess.getDeclarationAccess().getConstAssignment_1(), "rule__Declaration__ConstAssignment_1");
					put(grammarAccess.getDeclarationAccess().getInputAssignment_2(), "rule__Declaration__InputAssignment_2");
					put(grammarAccess.getDeclarationAccess().getOutputAssignment_3(), "rule__Declaration__OutputAssignment_3");
					put(grammarAccess.getDeclarationAccess().getStaticAssignment_4(), "rule__Declaration__StaticAssignment_4");
					put(grammarAccess.getDeclarationAccess().getSignalAssignment_5(), "rule__Declaration__SignalAssignment_5");
					put(grammarAccess.getDeclarationAccess().getTypeAssignment_6_0_0(), "rule__Declaration__TypeAssignment_6_0_0");
					put(grammarAccess.getDeclarationAccess().getHostTypeAssignment_6_0_1(), "rule__Declaration__HostTypeAssignment_6_0_1");
					put(grammarAccess.getDeclarationAccess().getValuedObjectsAssignment_6_0_2(), "rule__Declaration__ValuedObjectsAssignment_6_0_2");
					put(grammarAccess.getDeclarationAccess().getValuedObjectsAssignment_6_0_3_1(), "rule__Declaration__ValuedObjectsAssignment_6_0_3_1");
					put(grammarAccess.getDeclarationAccess().getTypeAssignment_6_1_0(), "rule__Declaration__TypeAssignment_6_1_0");
					put(grammarAccess.getDeclarationAccess().getValuedObjectsAssignment_6_1_1(), "rule__Declaration__ValuedObjectsAssignment_6_1_1");
					put(grammarAccess.getDeclarationAccess().getValuedObjectsAssignment_6_1_2_1(), "rule__Declaration__ValuedObjectsAssignment_6_1_2_1");
					put(grammarAccess.getValuedObjectAccess().getNameAssignment_0(), "rule__ValuedObject__NameAssignment_0");
					put(grammarAccess.getValuedObjectAccess().getInitialValueAssignment_1_1(), "rule__ValuedObject__InitialValueAssignment_1_1");
					put(grammarAccess.getValuedObjectAccess().getCombineOperatorAssignment_2_1(), "rule__ValuedObject__CombineOperatorAssignment_2_1");
					put(grammarAccess.getEmptyStatementAccess().getAnnotationsAssignment_0(), "rule__EmptyStatement__AnnotationsAssignment_0");
					put(grammarAccess.getEmptyStatementAccess().getLabelAssignment_1_0(), "rule__EmptyStatement__LabelAssignment_1_0");
					put(grammarAccess.getInstructionStatementAccess().getAnnotationsAssignment_0(), "rule__InstructionStatement__AnnotationsAssignment_0");
					put(grammarAccess.getInstructionStatementAccess().getInstructionAssignment_1(), "rule__InstructionStatement__InstructionAssignment_1");
					put(grammarAccess.getAssignmentAccess().getValuedObjectAssignment_0(), "rule__Assignment__ValuedObjectAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getConditionalAccess().getExpressionAssignment_1(), "rule__Conditional__ExpressionAssignment_1");
					put(grammarAccess.getConditionalAccess().getDeclarationsAssignment_3(), "rule__Conditional__DeclarationsAssignment_3");
					put(grammarAccess.getConditionalAccess().getStatementsAssignment_4_0_0_0(), "rule__Conditional__StatementsAssignment_4_0_0_0");
					put(grammarAccess.getConditionalAccess().getStatementsAssignment_4_0_1(), "rule__Conditional__StatementsAssignment_4_0_1");
					put(grammarAccess.getConditionalAccess().getStatementsAssignment_4_1_0(), "rule__Conditional__StatementsAssignment_4_1_0");
					put(grammarAccess.getConditionalAccess().getStatementsAssignment_4_1_1(), "rule__Conditional__StatementsAssignment_4_1_1");
					put(grammarAccess.getConditionalAccess().getDeclarationsAssignment_5_1(), "rule__Conditional__DeclarationsAssignment_5_1");
					put(grammarAccess.getConditionalAccess().getElseStatementsAssignment_5_2_0_0_0(), "rule__Conditional__ElseStatementsAssignment_5_2_0_0_0");
					put(grammarAccess.getConditionalAccess().getElseStatementsAssignment_5_2_0_1(), "rule__Conditional__ElseStatementsAssignment_5_2_0_1");
					put(grammarAccess.getConditionalAccess().getElseStatementsAssignment_5_2_1_0(), "rule__Conditional__ElseStatementsAssignment_5_2_1_0");
					put(grammarAccess.getConditionalAccess().getElseStatementsAssignment_5_2_1_1(), "rule__Conditional__ElseStatementsAssignment_5_2_1_1");
					put(grammarAccess.getGotoAccess().getTargetLabelAssignment_1(), "rule__Goto__TargetLabelAssignment_1");
					put(grammarAccess.getThreadAccess().getStatementsAssignment_1_0_0_0(), "rule__Thread__StatementsAssignment_1_0_0_0");
					put(grammarAccess.getThreadAccess().getStatementsAssignment_1_0_1(), "rule__Thread__StatementsAssignment_1_0_1");
					put(grammarAccess.getThreadAccess().getStatementsAssignment_1_1_0(), "rule__Thread__StatementsAssignment_1_1_0");
					put(grammarAccess.getThreadAccess().getStatementsAssignment_1_1_1(), "rule__Thread__StatementsAssignment_1_1_1");
					put(grammarAccess.getParallelAccess().getThreadsAssignment_1_0(), "rule__Parallel__ThreadsAssignment_1_0");
					put(grammarAccess.getParallelAccess().getThreadsAssignment_1_1_1(), "rule__Parallel__ThreadsAssignment_1_1_1");
					put(grammarAccess.getStatementScopeAccess().getDeclarationsAssignment_2(), "rule__StatementScope__DeclarationsAssignment_2");
					put(grammarAccess.getStatementScopeAccess().getStatementsAssignment_3_0_0_0(), "rule__StatementScope__StatementsAssignment_3_0_0_0");
					put(grammarAccess.getStatementScopeAccess().getStatementsAssignment_3_0_1(), "rule__StatementScope__StatementsAssignment_3_0_1");
					put(grammarAccess.getStatementScopeAccess().getStatementsAssignment_3_1_0(), "rule__StatementScope__StatementsAssignment_3_1_0");
					put(grammarAccess.getStatementScopeAccess().getStatementsAssignment_3_1_1(), "rule__StatementScope__StatementsAssignment_3_1_1");
					put(grammarAccess.getOrAndExpressionAccess().getOperatorAssignment_1_0_1(), "rule__OrAndExpression__OperatorAssignment_1_0_1");
					put(grammarAccess.getOrAndExpressionAccess().getSubExpressionsAssignment_1_0_2(), "rule__OrAndExpression__SubExpressionsAssignment_1_0_2");
					put(grammarAccess.getOrAndExpressionAccess().getOperatorAssignment_1_1_1(), "rule__OrAndExpression__OperatorAssignment_1_1_1");
					put(grammarAccess.getOrAndExpressionAccess().getSubExpressionsAssignment_1_1_2(), "rule__OrAndExpression__SubExpressionsAssignment_1_1_2");
					put(grammarAccess.getCompareOperationAccess().getOperatorAssignment_0_1_1(), "rule__CompareOperation__OperatorAssignment_0_1_1");
					put(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_0_1_2(), "rule__CompareOperation__SubExpressionsAssignment_0_1_2");
					put(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1(), "rule__NotExpression__OperatorAssignment_0_1");
					put(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_0_2(), "rule__NotExpression__SubExpressionsAssignment_0_2");
					put(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1(), "rule__AddExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__AddExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1(), "rule__SubExpression__OperatorAssignment_1_1");
					put(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__SubExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1(), "rule__MultExpression__OperatorAssignment_1_1");
					put(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__MultExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getDivExpressionAccess().getOperatorAssignment_1_1(), "rule__DivExpression__OperatorAssignment_1_1");
					put(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__DivExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1(), "rule__ModExpression__OperatorAssignment_1_1");
					put(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2(), "rule__ModExpression__SubExpressionsAssignment_1_2");
					put(grammarAccess.getNegExpressionAccess().getOperatorAssignment_0_1(), "rule__NegExpression__OperatorAssignment_0_1");
					put(grammarAccess.getNegExpressionAccess().getSubExpressionsAssignment_0_2(), "rule__NegExpression__SubExpressionsAssignment_0_2");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_0_1(), "rule__ValuedObjectTestExpression__OperatorAssignment_0_1");
					put(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_0_3(), "rule__ValuedObjectTestExpression__SubExpressionsAssignment_0_3");
					put(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectAssignment_0(), "rule__ValuedObjectReference__ValuedObjectAssignment_0");
					put(grammarAccess.getValuedObjectReferenceAccess().getIndicesAssignment_1_1(), "rule__ValuedObjectReference__IndicesAssignment_1_1");
					put(grammarAccess.getFunctionCallAccess().getFunctionNameAssignment_1(), "rule__FunctionCall__FunctionNameAssignment_1");
					put(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0_1(), "rule__FunctionCall__ParametersAssignment_2_0_1");
					put(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0_2_1(), "rule__FunctionCall__ParametersAssignment_2_0_2_1");
					put(grammarAccess.getParameterAccess().getCallByReferenceAssignment_0(), "rule__Parameter__CallByReferenceAssignment_0");
					put(grammarAccess.getParameterAccess().getExpressionAssignment_1(), "rule__Parameter__ExpressionAssignment_1");
					put(grammarAccess.getTextExpressionAccess().getTextAssignment(), "rule__TextExpression__TextAssignment");
					put(grammarAccess.getIntValueAccess().getValueAssignment(), "rule__IntValue__ValueAssignment");
					put(grammarAccess.getFloatValueAccess().getValueAssignment(), "rule__FloatValue__ValueAssignment");
					put(grammarAccess.getBoolValueAccess().getValueAssignment(), "rule__BoolValue__ValueAssignment");
					put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
					put(grammarAccess.getCommentAnnotationAccess().getValueAssignment(), "rule__CommentAnnotation__ValueAssignment");
					put(grammarAccess.getTagAnnotationAccess().getNameAssignment_1(), "rule__TagAnnotation__NameAssignment_1");
					put(grammarAccess.getTagAnnotationAccess().getAnnotationsAssignment_2_1(), "rule__TagAnnotation__AnnotationsAssignment_2_1");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getNameAssignment_1(), "rule__KeyStringValueAnnotation__NameAssignment_1");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getValueAssignment_2(), "rule__KeyStringValueAnnotation__ValueAssignment_2");
					put(grammarAccess.getKeyStringValueAnnotationAccess().getAnnotationsAssignment_3_1(), "rule__KeyStringValueAnnotation__AnnotationsAssignment_3_1");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameAssignment_1(), "rule__TypedKeyStringValueAnnotation__NameAssignment_1");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeAssignment_3(), "rule__TypedKeyStringValueAnnotation__TypeAssignment_3");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValueAssignment_5(), "rule__TypedKeyStringValueAnnotation__ValueAssignment_5");
					put(grammarAccess.getTypedKeyStringValueAnnotationAccess().getAnnotationsAssignment_6_1(), "rule__TypedKeyStringValueAnnotation__AnnotationsAssignment_6_1");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameAssignment_1(), "rule__KeyBooleanValueAnnotation__NameAssignment_1");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getValueAssignment_2(), "rule__KeyBooleanValueAnnotation__ValueAssignment_2");
					put(grammarAccess.getKeyBooleanValueAnnotationAccess().getAnnotationsAssignment_3_1(), "rule__KeyBooleanValueAnnotation__AnnotationsAssignment_3_1");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getNameAssignment_1(), "rule__KeyIntValueAnnotation__NameAssignment_1");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getValueAssignment_2(), "rule__KeyIntValueAnnotation__ValueAssignment_2");
					put(grammarAccess.getKeyIntValueAnnotationAccess().getAnnotationsAssignment_3_1(), "rule__KeyIntValueAnnotation__AnnotationsAssignment_3_1");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getNameAssignment_1(), "rule__KeyFloatValueAnnotation__NameAssignment_1");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getValueAssignment_2(), "rule__KeyFloatValueAnnotation__ValueAssignment_2");
					put(grammarAccess.getKeyFloatValueAnnotationAccess().getAnnotationsAssignment_3_1(), "rule__KeyFloatValueAnnotation__AnnotationsAssignment_3_1");
					put(grammarAccess.getImportAnnotationAccess().getImportURIAssignment_1(), "rule__ImportAnnotation__ImportURIAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.cau.cs.kieler.scl.ui.contentassist.antlr.internal.InternalSCLParser typedParser = (de.cau.cs.kieler.scl.ui.contentassist.antlr.internal.InternalSCLParser) parser;
			typedParser.entryRuleSCLProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SCLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SCLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
