/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.ui;

import java.util.Collections;
import java.util.Map;

import org.apache.log4j.Logger;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.ui.shared.SharedStateModule;
import org.osgi.framework.BundleContext;

import com.google.common.collect.Maps;
import com.google.inject.Injector;
import com.google.inject.Module;

import de.cau.cs.kieler.scl.SCLRuntimeModule;
import de.cau.cs.kieler.scl.ui.internal.SCLActivator;
import de.cau.cs.kieler.scl.ui.internal.SCOLActivator;
import de.cau.cs.kieler.scol.SCOLRuntimeModule;
import de.cau.cs.kieler.ui.scol.SCOLUiModule;

/**
 * Delegate Activator for SCL and SCOL.
 */
public class DelegateActivator extends AbstractUIPlugin {
	
	private static final Logger logger = Logger.getLogger(DelegateActivator.class);
	
	private static DelegateActivator INSTANCE;
	
	private Map<String, Injector> injectors = Collections.synchronizedMap(Maps.<String, Injector> newHashMapWithExpectedSize(1));
	
	
	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		INSTANCE = this;
		new SCLActivator().start(context);
		new SCOLActivator().start(context);
	}
	
	@Override
	public void stop(BundleContext context) throws Exception {
	    SCLActivator.getInstance().stop(context);
	    SCOLActivator.getInstance().stop(context);
		injectors.clear();
		INSTANCE = null;
		super.stop(context);
	}
	
	public static DelegateActivator getInstance() {
		return INSTANCE;
	}
	
	public Injector getInjector(String language) {
        if (SCLActivator.DE_CAU_CS_KIELER_SCL_SCL.equals(language)) {
            return SCLActivator.getInstance().getInjector(language);
        }
        if (SCOLActivator.DE_CAU_CS_KIELER_SCOL_SCOL.equals(language)) {
            return SCOLActivator.getInstance().getInjector(language);
        }
        
        throw new IllegalArgumentException(language); 
	}

	protected Module getRuntimeModule(String grammar) {
		if (SCLActivator.DE_CAU_CS_KIELER_SCL_SCL.equals(grammar)) {
			return new SCLRuntimeModule();
		}
		if (SCOLActivator.DE_CAU_CS_KIELER_SCOL_SCOL.equals(grammar)) {
            return new SCOLRuntimeModule();
        }
		
		throw new IllegalArgumentException(grammar);
	}
	
	protected Module getUiModule(String grammar) {
		if (SCLActivator.DE_CAU_CS_KIELER_SCL_SCL.equals(grammar)) {
			return new SCLUiModule(this);
		}
		if (SCOLActivator.DE_CAU_CS_KIELER_SCOL_SCOL.equals(grammar)) {
            return new SCOLUiModule(this);
        }
		
		throw new IllegalArgumentException(grammar);
	}
	
	protected Module getSharedStateModule() {
		return new SharedStateModule();
	}
	
}
