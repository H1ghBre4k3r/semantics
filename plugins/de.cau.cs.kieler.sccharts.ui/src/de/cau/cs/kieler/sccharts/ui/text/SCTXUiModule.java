/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.ui.text;

import org.eclipse.ui.plugin.AbstractUIPlugin;

import de.cau.cs.kieler.sccharts.ui.text.quickfix.SCTXQuickfixProvider;

/**
 * Use this class to register components to be used within the IDE.
 */
public class SCTXUiModule extends de.cau.cs.kieler.sccharts.ui.text.AbstractSCTXUiModule {
	public SCTXUiModule(AbstractUIPlugin plugin) {
		super(plugin);
	}
	
    public Class<? extends  org.eclipse.xtext.ui.editor.quickfix.IssueResolutionProvider> bindIssueResolutionProvider() {
        return SCTXQuickfixProvider.class;
    }
    
    /* introduces new highlighting profiles (e.g. annotationKey) */
    public Class<? extends org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultHighlightingConfiguration> bindIHighlightingConfiguration() {
        return SCTHighlightingConfiguration.class;
    }

    /* provides a few additional highlighting rules */
    public Class<? extends org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator> bindISemanticHighlightingCalculator() {
        return SCTSemanticHighlightingCalculator.class;
    } 
    
    /* IMPORTANT!
     * This prevents the NatureAddingEditorCallback from being added to the editor.
     * No 'do you 'Do you want to convert to an Xtext project?' dialog will be shown.
     * At the same time the new callback handles the correct update of imported resources when saved.
     * IMPORTANT!
     */
    public Class<? extends org.eclipse.xtext.ui.editor.IXtextEditorCallback> bindIXtextEditorCallback() {
        return SCTXEditorCallback.class;
    }
    public Class<? extends org.eclipse.xtext.ui.editor.DirtyStateEditorSupport> bindDirtyStateEditorSupport() {
        return SCTXDirtyStateEditorSupport.class;
    }
}
