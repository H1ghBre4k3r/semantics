/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.ui;

import org.eclipse.debug.core.DebugPlugin;
import org.osgi.framework.BundleContext;

import de.cau.cs.kieler.sccharts.ide.simulation.SCChartsDiagramHighlighter;
import de.cau.cs.kieler.sccharts.ide.simulation.SCChartsDiagramLiveValues;
import de.cau.cs.kieler.sccharts.processors.scg.SCChartsAnnotationModelCreatorForUnschedulableNodes;
import de.cau.cs.kieler.sccharts.ui.debug.breakpoints.BreakpointUtility;
import de.cau.cs.kieler.sccharts.ui.debug.breakpoints.JavaBreakpointListener;
import de.cau.cs.kieler.sccharts.ui.debug.breakpoints.SCTXBreakpointListener;
import de.cau.cs.kieler.sccharts.ui.internal.SCTXActivator;
import de.cau.cs.kieler.scg.processors.SimpleGuardScheduler;
import de.cau.cs.kieler.simulation.ui.visualization.KlighdPiccoloDiagramHighlightingHandler;

/**
 * Use this class to register components to be used within the IDE.
 */
public class SCChartsUiModule extends SCTXActivator {
    
    public static final String PLUGIN_ID = "de.cau.cs.kieler.sccharts.ui";

    /**
     * {@inheritDoc}
     */
    @Override
    public void start(BundleContext context) throws Exception {
        super.start(context);
        
        // FIXME magic registration
        KlighdPiccoloDiagramHighlightingHandler.createAndStartHighlighter(SCChartsDiagramHighlighter.class);
        KlighdPiccoloDiagramHighlightingHandler.createAndStartHighlighter(SCChartsDiagramLiveValues.class).setEnabled(false);
        SCTXBreakpointListener.create();
        // TODO properly use the correct instance here
        DebugPlugin.getDefault().addDebugEventListener(new JavaBreakpointListener());
        BreakpointUtility.create();
        
        // Some reverse-dependency injection magic for ssm
        SimpleGuardScheduler.annotationModelCreatorDelegate = getInjector(DE_CAU_CS_KIELER_SCCHARTS_TEXT_SCTX)
                .getInstance(SCChartsAnnotationModelCreatorForUnschedulableNodes.class);

    } //$NON-NLS-1$
    
    
}
