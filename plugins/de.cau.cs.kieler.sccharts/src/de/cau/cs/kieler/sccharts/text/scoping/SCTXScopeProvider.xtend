/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text.scoping

import com.google.inject.Inject
import de.cau.cs.kieler.annotations.NamedObject
import de.cau.cs.kieler.annotations.extensions.AnnotationsExtensions
import de.cau.cs.kieler.kexpressions.AccessModifier
import de.cau.cs.kieler.kexpressions.GenericParameterDeclaration
import de.cau.cs.kieler.kexpressions.GenericTypeReference
import de.cau.cs.kieler.kexpressions.KExpressionsPackage
import de.cau.cs.kieler.kexpressions.MethodDeclaration
import de.cau.cs.kieler.kexpressions.Parameter
import de.cau.cs.kieler.kexpressions.ReferenceDeclaration
import de.cau.cs.kieler.kexpressions.ValuedObject
import de.cau.cs.kieler.kexpressions.ValuedObjectReference
import de.cau.cs.kieler.kexpressions.VariableDeclaration
import de.cau.cs.kieler.kexpressions.extensions.KExpressionsDeclarationExtensions
import de.cau.cs.kieler.kexpressions.extensions.KExpressionsGenericParameterExtensions
import de.cau.cs.kieler.kexpressions.kext.scoping.KExtScopeProvider
import de.cau.cs.kieler.sccharts.ControlflowRegion
import de.cau.cs.kieler.sccharts.DataflowRegion
import de.cau.cs.kieler.sccharts.Region
import de.cau.cs.kieler.sccharts.SCCharts
import de.cau.cs.kieler.sccharts.SCChartsPackage
import de.cau.cs.kieler.sccharts.Scope
import de.cau.cs.kieler.sccharts.ScopeCall
import de.cau.cs.kieler.sccharts.State
import de.cau.cs.kieler.sccharts.Transition
import de.cau.cs.kieler.sccharts.extensions.SCChartsCoreExtensions
import de.cau.cs.kieler.sccharts.extensions.SCChartsInheritanceExtensions
import de.cau.cs.kieler.sccharts.extensions.SCChartsScopeExtensions
import de.cau.cs.kieler.scl.Loop
import de.cau.cs.kieler.scl.MethodImplementationDeclaration
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.xbase.lib.Functions.Function1

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class SCTXScopeProvider extends KExtScopeProvider {
    
    @Inject extension SCChartsCoreExtensions
    @Inject extension SCChartsScopeExtensions
    @Inject extension SCChartsInheritanceExtensions
    @Inject extension AnnotationsExtensions
    @Inject extension KExpressionsDeclarationExtensions
    @Inject extension KExpressionsGenericParameterExtensions
    
    @Inject SCTXQualifiedNameProvider nameProvider

    override getScope(EObject context, EReference reference) {
        switch(context) {
            Transition: return getScopeForTransition(context, reference)
            State: return getScopeForState(context, reference)
            Region: return getScopeForRegion(context, reference)
            ScopeCall: return getScopeForScopeCall(context, reference)
            GenericTypeReference: return getScopeForGenericTypeReference(context, reference)
            GenericParameterDeclaration: return getScopeForGenericParameterDeclaration(context, reference)
        }
        
        return super.getScope(context, reference);
    }
    
    protected def IScope getScopeForTransition(Transition transition, EReference reference) {
        val states = <State> newArrayList
        val parentState = transition.eContainer as State
        val parentRegion = parentState.eContainer as ControlflowRegion
        
        parentRegion.states.forEach[ 
            states += it 
        ]
        
        return SCTXScopes.scopeFor(states)
    }
    
    protected def IScope getScopeForState(State state, EReference reference) {
        if (reference == SCChartsPackage.Literals.STATE__BASE_STATES) {
            return SCTXScopes.scopeFor(state.eResource.allAvailableRootStates)
        }
        
        return super.getScope(state, reference)
    }
    
    protected def IScope getScopeForRegion(Region region, EReference reference) {
        if (reference == SCChartsPackage.Literals.SCOPE_CALL__TARGET) {
            return SCTXScopes.scopeFor(region.nextSuperStateWithBaseStates.allVisibleInheritedRegions)
        }
        
        return super.getScope(region, reference)
    }
    
    protected def IScope getScopeForScopeCall(ScopeCall scopeCall, EReference reference) {
        if (reference == SCChartsPackage.Literals.SCOPE_CALL__TARGET) {
            if (scopeCall.eContainer instanceof State) {
                val candidates = <NamedObject>newLinkedList
                var rootState = scopeCall.eContainer?.asScope.rootState
                if (rootState instanceof State && !(rootState as State).genericParameterDeclarations.nullOrEmpty) {
                    candidates += (rootState as State).genericTypeParameters
                }
                candidates += scopeCall.eResource.allAvailableRootStates
                return SCTXScopes.scopeFor(candidates)
            } else if (scopeCall.eContainer instanceof Region) {
                return SCTXScopes.scopeFor((scopeCall.eContainer as Scope).nextSuperStateWithBaseStates.getAllVisibleInheritedRegions(!scopeCall.super))
            }
            
            return IScope.NULLSCOPE
        }
        
        return super.getScope(scopeCall as EObject, reference)
    }
        
    override IScope getScopeForParameter(Parameter parameter, EReference reference) {        
        if (reference == KExpressionsPackage.Literals.PARAMETER__EXPLICIT_BINDING) {
            val voCandidates = <ValuedObject> newArrayList
            
            val scopeCall = parameter.eContainer as ScopeCall
            if (scopeCall !== null && scopeCall.target !== null) {
                var target = scopeCall.target
                if (target instanceof Scope) {
                    for (declaration : target.variableDeclarations.filter[ input || output ]) {
                        voCandidates += declaration.valuedObjects
                    }
                } else if (target instanceof ValuedObject) {
                    if (target.isGenericParamter) {
                        val type = target.genericParameterDeclaration?.type
                        if (type instanceof Scope) {
                            for (declaration : type.variableDeclarations.filter[ input || output ]) {
                                voCandidates += declaration.valuedObjects
                            }
                        }
                    }
                }
                // Inherited Decls
                if (target instanceof State) {
                    for (declaration : target.allVisibleInheritedDeclarations.filter(VariableDeclaration).filter[ input || output ]) {
                        voCandidates += declaration.valuedObjects
                    }
                }
            }
            
            return SCTXScopes.scopeFor(voCandidates)
        }
        
        return super.getScopeForParameter(parameter, reference)
    }
    
    override IScope getScopeForReferenceDeclaration(EObject context, EReference reference) {
        if (reference == KExpressionsPackage.Literals.REFERENCE_DECLARATION__REFERENCE) {
            val declaration = context
            if (declaration instanceof ReferenceDeclaration) {
                val candidates = <NamedObject>newLinkedList
                var rootState = declaration.nextScope?.rootState
                if (rootState !== null && !rootState.genericParameterDeclarations.nullOrEmpty) {
                    candidates += (rootState as State).genericTypeParameters
                }
                candidates += declaration.eResource.allAvailableRootStates
                return SCTXScopes.scopeFor(candidates)
            }
        } 
        return context.getScopeHierarchical(reference)
    }
    
    def IScope getScopeForGenericTypeReference(GenericTypeReference context, EReference reference) {
        val declaration = context.getGenericParameterDeclaration
        val candidates = <NamedObject>newLinkedList
        
        // States
        var states = context.eResource.allAvailableRootStates.toList
        if (declaration !== null && !states.empty) {
            val type = declaration.type
            if (type instanceof Scope) {
                states = states.filter[
                    it === type || it.baseStates.contains(type)
                ].toList
            }
        }
        candidates += states
        
        // Special case for parser ambiguity => also match ValuedObjects for later transformation into VOReference
        if (context.genericParameters.nullOrEmpty) {
            var rootState = context.nextScope?.rootState
            if (rootState !== null && !rootState.genericParameterDeclarations.nullOrEmpty) {
                candidates += (rootState as State).genericTypeParameters
            }
            return SCTXScopes.scopeFor(candidates, context.getScopeForValuedObjectReference(reference))
        }
        return SCTXScopes.scopeFor(candidates)
    }
    
    def IScope getScopeForGenericParameterDeclaration(GenericParameterDeclaration context, EReference reference) {
        if (reference == KExpressionsPackage.Literals.GENERIC_PARAMETER_DECLARATION__TYPE) {
            return SCTXScopes.scopeFor(context.eResource.allAvailableRootStates)
        }
        return IScope.NULLSCOPE
    }

    override IScope getScopeHierarchical(EObject context, EReference reference) {
        val candidates = <ValuedObject> newArrayList
        var declarationScope = context.nextDeclarationScope
        while (declarationScope !== null) {
            for(declaration : declarationScope.declarations) {
                for(VO : declaration.valuedObjects) {
                    candidates += VO
                }
            }
            
            // Add for regions counter variable            
            if (declarationScope instanceof Region) {
                if (declarationScope.counterVariable !== null) {
                    candidates += declarationScope.counterVariable
                }
            }
            
            // Add for loop counter variable            
            if (declarationScope instanceof Loop) {
                if (declarationScope.initializationDeclaration !== null) {
                    candidates += declarationScope.initializationDeclaration.valuedObjects
                }
            }
            
            // Add method parameters           
            if (declarationScope instanceof MethodImplementationDeclaration) {
                candidates += declarationScope.parameterDeclarations.map[valuedObjects].flatten
            }
            
            if (declarationScope instanceof State) {
                // Inherited VOs
                if (!declarationScope.baseStates.nullOrEmpty) {
                    for (decl : declarationScope.allVisibleInheritedDeclarations) {
                        for(VO : decl.valuedObjects) {
                            candidates += VO
                        }
                    }
                }
                // Generic Parameters
                candidates += declarationScope.genericValuedObjectParameters
            }
            
            declarationScope = declarationScope.nextDeclarationScope
        }
        return Scopes.scopeFor(candidates)
    }
    
    protected def getAllAvailableRootStates(Resource eResource) {
        if (eResource !== null) {
            val scchartsInScope = newHashSet(eResource.contents.head as SCCharts)
            val eResourceSet = eResource.resourceSet
            if (eResourceSet !== null) {
                eResourceSet.resources.filter[!contents.empty].map[contents.head].filter(SCCharts).forEach[ 
                    scchartsInScope += it
                ]
            }
            return scchartsInScope.map[rootStates].flatten
        }
        return emptyList
    }
    
    override IScope getScopeForReferencedType(EObject reference, ValuedObjectReference context,
        Function1<? super VariableDeclaration, Boolean> predicate) {
        var EObject region = context
        while (region !== null && !(region instanceof Region)) {
            region = region.eContainer
        }
        
        val adjustedPredicate = if (region instanceof DataflowRegion) predicate else [VariableDeclaration vd | vd.access == AccessModifier.PUBLIC]
        
        if (reference instanceof State) {
            val additionalCandidates = newArrayList
            additionalCandidates += reference.declarations.filter(MethodDeclaration).map[valuedObjects.head]
            if (!reference.baseStates.nullOrEmpty) {
                for (decl : reference.allVisibleInheritedDeclarations) {
                    for(VO : decl.valuedObjects) {
                        additionalCandidates += VO
                    }
                }
            }
            return Scopes.scopeFor(additionalCandidates, super.getScopeForReferencedType(reference, context, adjustedPredicate))
        } else {
            return super.getScopeForReferencedType(reference, context, adjustedPredicate)
        }
    }

}
