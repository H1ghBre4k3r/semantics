/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SCTXGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SCChartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.SCCharts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPragmasAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0_0 = (RuleCall)cPragmasAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cImportKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cImportsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cImportsEStringParserRuleCall_0_1_1_0 = (RuleCall)cImportsAssignment_0_1_1.eContents().get(0);
		private final Assignment cRootStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootStatesRootStateParserRuleCall_1_0 = (RuleCall)cRootStatesAssignment_1.eContents().get(0);
		
		////generate sct3 "http://kieler.cs.cau.de/sccharts/textual3/0.1.0"
		//// ---------------- //
		////  SCCharts Rules  // 
		//// ---------------- //
		//SCCharts sccharts::SCCharts:
		//	(pragmas+=Pragma
		//	|
		//	'import' imports+=EString)*
		//	rootStates+=RootState*;
		@Override public ParserRule getRule() { return rule; }
		
		//(pragmas+=Pragma | 'import' imports+=EString)* rootStates+=RootState*
		public Group getGroup() { return cGroup; }
		
		//(pragmas+=Pragma | 'import' imports+=EString)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//pragmas+=Pragma
		public Assignment getPragmasAssignment_0_0() { return cPragmasAssignment_0_0; }
		
		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0_0() { return cPragmasPragmaParserRuleCall_0_0_0; }
		
		//'import' imports+=EString
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'import'
		public Keyword getImportKeyword_0_1_0() { return cImportKeyword_0_1_0; }
		
		//imports+=EString
		public Assignment getImportsAssignment_0_1_1() { return cImportsAssignment_0_1_1; }
		
		//EString
		public RuleCall getImportsEStringParserRuleCall_0_1_1_0() { return cImportsEStringParserRuleCall_0_1_1_0; }
		
		//rootStates+=RootState*
		public Assignment getRootStatesAssignment_1() { return cRootStatesAssignment_1; }
		
		//RootState
		public RuleCall getRootStatesRootStateParserRuleCall_1_0() { return cRootStatesRootStateParserRuleCall_1_0; }
	}
	public class RootStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.RootState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cScchartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameExtendedIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBaseStatesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cBaseStatesStateCrossReference_4_1_0 = (CrossReference)cBaseStatesAssignment_4_1.eContents().get(0);
		private final RuleCall cBaseStatesStateIDTerminalRuleCall_4_1_0_1 = (RuleCall)cBaseStatesStateCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cBaseStatesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cBaseStatesStateCrossReference_4_2_1_0 = (CrossReference)cBaseStatesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cBaseStatesStateIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cBaseStatesStateCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Assignment cActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionsLocalActionParserRuleCall_7_0 = (RuleCall)cActionsAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cRegionsAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cRegionsImplicitControlflowRegionParserRuleCall_8_0_0 = (RuleCall)cRegionsAssignment_8_0.eContents().get(0);
		private final Assignment cRegionsAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_8_1_0 = (RuleCall)cRegionsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// ------------- //
		////  State Rules  // 
		//// ------------- //
		//RootState sccharts::State:
		//	annotations+=Annotation*
		//	'scchart' name=ExtendedID label=STRING? ('extends' baseStates+=[sccharts::State] (','
		//	baseStates+=[sccharts::State])*)?
		//	'{'
		//	declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//	actions+=LocalAction* (regions+=ImplicitControlflowRegion | regions+=Region*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'scchart' name=ExtendedID label=STRING? ('extends' baseStates+=[sccharts::State] (','
		//baseStates+=[sccharts::State])*)? '{' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction*
		//(regions+=ImplicitControlflowRegion | regions+=Region*) '}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'scchart'
		public Keyword getScchartKeyword_1() { return cScchartKeyword_1; }
		
		//name=ExtendedID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_2_0() { return cNameExtendedIDParserRuleCall_2_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }
		
		//('extends' baseStates+=[sccharts::State] (',' baseStates+=[sccharts::State])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//baseStates+=[sccharts::State]
		public Assignment getBaseStatesAssignment_4_1() { return cBaseStatesAssignment_4_1; }
		
		//[sccharts::State]
		public CrossReference getBaseStatesStateCrossReference_4_1_0() { return cBaseStatesStateCrossReference_4_1_0; }
		
		//ID
		public RuleCall getBaseStatesStateIDTerminalRuleCall_4_1_0_1() { return cBaseStatesStateIDTerminalRuleCall_4_1_0_1; }
		
		//(',' baseStates+=[sccharts::State])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//baseStates+=[sccharts::State]
		public Assignment getBaseStatesAssignment_4_2_1() { return cBaseStatesAssignment_4_2_1; }
		
		//[sccharts::State]
		public CrossReference getBaseStatesStateCrossReference_4_2_1_0() { return cBaseStatesStateCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getBaseStatesStateIDTerminalRuleCall_4_2_1_0_1() { return cBaseStatesStateIDTerminalRuleCall_4_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }
		
		//DeclarationOrMethodWithKeywordWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_0() { return cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_6_0; }
		
		//actions+=LocalAction*
		public Assignment getActionsAssignment_7() { return cActionsAssignment_7; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_7_0() { return cActionsLocalActionParserRuleCall_7_0; }
		
		//(regions+=ImplicitControlflowRegion | regions+=Region*)
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//regions+=ImplicitControlflowRegion
		public Assignment getRegionsAssignment_8_0() { return cRegionsAssignment_8_0; }
		
		//ImplicitControlflowRegion
		public RuleCall getRegionsImplicitControlflowRegionParserRuleCall_8_0_0() { return cRegionsImplicitControlflowRegionParserRuleCall_8_0_0; }
		
		//regions+=Region*
		public Assignment getRegionsAssignment_8_1() { return cRegionsAssignment_8_1; }
		
		//Region
		public RuleCall getRegionsRegionParserRuleCall_8_1_0() { return cRegionsRegionParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInitialInitialKeyword_1_0 = (Keyword)cInitialAssignment_1.eContents().get(0);
		private final Assignment cFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFinalFinalKeyword_2_0 = (Keyword)cFinalAssignment_2.eContents().get(0);
		private final Assignment cViolationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cViolationViolationKeyword_3_0 = (Keyword)cViolationAssignment_3.eContents().get(0);
		private final Assignment cConnectorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cConnectorConnectorKeyword_4_0 = (Keyword)cConnectorAssignment_4.eContents().get(0);
		private final Keyword cStateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Assignment cLabelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLabelSTRINGTerminalRuleCall_7_0 = (RuleCall)cLabelAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cIsKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cReferenceAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cReferenceScopeCallParserRuleCall_8_0_1_0 = (RuleCall)cReferenceAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_0_2 = (Group)cGroup_8_0.eContents().get(2);
		private final Keyword cScheduleKeyword_8_0_2_0 = (Keyword)cGroup_8_0_2.eContents().get(0);
		private final Assignment cScheduleAssignment_8_0_2_1 = (Assignment)cGroup_8_0_2.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_8_0_2_1_0 = (RuleCall)cScheduleAssignment_8_0_2_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Group cGroup_8_1_0 = (Group)cGroup_8_1.eContents().get(0);
		private final Keyword cExtendsKeyword_8_1_0_0 = (Keyword)cGroup_8_1_0.eContents().get(0);
		private final Assignment cBaseStatesAssignment_8_1_0_1 = (Assignment)cGroup_8_1_0.eContents().get(1);
		private final CrossReference cBaseStatesStateCrossReference_8_1_0_1_0 = (CrossReference)cBaseStatesAssignment_8_1_0_1.eContents().get(0);
		private final RuleCall cBaseStatesStateIDTerminalRuleCall_8_1_0_1_0_1 = (RuleCall)cBaseStatesStateCrossReference_8_1_0_1_0.eContents().get(1);
		private final Group cGroup_8_1_0_2 = (Group)cGroup_8_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_8_1_0_2_0 = (Keyword)cGroup_8_1_0_2.eContents().get(0);
		private final Assignment cBaseStatesAssignment_8_1_0_2_1 = (Assignment)cGroup_8_1_0_2.eContents().get(1);
		private final CrossReference cBaseStatesStateCrossReference_8_1_0_2_1_0 = (CrossReference)cBaseStatesAssignment_8_1_0_2_1.eContents().get(0);
		private final RuleCall cBaseStatesStateIDTerminalRuleCall_8_1_0_2_1_0_1 = (RuleCall)cBaseStatesStateCrossReference_8_1_0_2_1_0.eContents().get(1);
		private final Group cGroup_8_1_1 = (Group)cGroup_8_1.eContents().get(1);
		private final Keyword cScheduleKeyword_8_1_1_0 = (Keyword)cGroup_8_1_1.eContents().get(0);
		private final Assignment cScheduleAssignment_8_1_1_1 = (Assignment)cGroup_8_1_1.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_8_1_1_1_0 = (RuleCall)cScheduleAssignment_8_1_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1_2 = (Keyword)cGroup_8_1.eContents().get(2);
		private final Assignment cDeclarationsAssignment_8_1_3 = (Assignment)cGroup_8_1.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_8_1_3_0 = (RuleCall)cDeclarationsAssignment_8_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_8_1_4 = (Assignment)cGroup_8_1.eContents().get(4);
		private final RuleCall cActionsLocalActionParserRuleCall_8_1_4_0 = (RuleCall)cActionsAssignment_8_1_4.eContents().get(0);
		private final Alternatives cAlternatives_8_1_5 = (Alternatives)cGroup_8_1.eContents().get(5);
		private final Assignment cRegionsAssignment_8_1_5_0 = (Assignment)cAlternatives_8_1_5.eContents().get(0);
		private final RuleCall cRegionsImplicitControlflowRegionParserRuleCall_8_1_5_0_0 = (RuleCall)cRegionsAssignment_8_1_5_0.eContents().get(0);
		private final Assignment cRegionsAssignment_8_1_5_1 = (Assignment)cAlternatives_8_1_5.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_8_1_5_1_0 = (RuleCall)cRegionsAssignment_8_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_1_6 = (Keyword)cGroup_8_1.eContents().get(6);
		private final Assignment cOutgoingTransitionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_9_0 = (RuleCall)cOutgoingTransitionsAssignment_9.eContents().get(0);
		
		//State sccharts::State:
		//	annotations+=Annotation*
		//	initial?='initial'?
		//	final?='final'?
		//	violation?='violation'?
		//	connector?='connector'?
		//	=> 'state' name=ID label=STRING? ('is' reference=ScopeCall ('schedule' schedule+=ScheduleObjectReference+)?
		//	| ('extends' baseStates+=[sccharts::State] (',' baseStates+=[sccharts::State])*)? ('schedule'
		//	schedule+=ScheduleObjectReference+)?
		//	'{'
		//	declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//	actions+=LocalAction* (regions+=ImplicitControlflowRegion | regions+=Region*)
		//	'}')?
		//	outgoingTransitions+=Transition*;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* initial?='initial'? final?='final'? violation?='violation'? connector?='connector'? => 'state'
		//name=ID label=STRING? ('is' reference=ScopeCall ('schedule' schedule+=ScheduleObjectReference+)? | ('extends'
		//baseStates+=[sccharts::State] (',' baseStates+=[sccharts::State])*)? ('schedule' schedule+=ScheduleObjectReference+)?
		//'{' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* (regions+=ImplicitControlflowRegion
		//| regions+=Region*) '}')? outgoingTransitions+=Transition*
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_1_0() { return cInitialInitialKeyword_1_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_2() { return cFinalAssignment_2; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_0() { return cFinalFinalKeyword_2_0; }
		
		//violation?='violation'?
		public Assignment getViolationAssignment_3() { return cViolationAssignment_3; }
		
		//'violation'
		public Keyword getViolationViolationKeyword_3_0() { return cViolationViolationKeyword_3_0; }
		
		//connector?='connector'?
		public Assignment getConnectorAssignment_4() { return cConnectorAssignment_4; }
		
		//'connector'
		public Keyword getConnectorConnectorKeyword_4_0() { return cConnectorConnectorKeyword_4_0; }
		
		//=> 'state'
		public Keyword getStateKeyword_5() { return cStateKeyword_5; }
		
		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_7() { return cLabelAssignment_7; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_7_0() { return cLabelSTRINGTerminalRuleCall_7_0; }
		
		//('is' reference=ScopeCall ('schedule' schedule+=ScheduleObjectReference+)? | ('extends' baseStates+=[sccharts::State]
		//(',' baseStates+=[sccharts::State])*)? ('schedule' schedule+=ScheduleObjectReference+)? '{'
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* (regions+=ImplicitControlflowRegion |
		//regions+=Region*) '}')?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'is' reference=ScopeCall ('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'is'
		public Keyword getIsKeyword_8_0_0() { return cIsKeyword_8_0_0; }
		
		//reference=ScopeCall
		public Assignment getReferenceAssignment_8_0_1() { return cReferenceAssignment_8_0_1; }
		
		//ScopeCall
		public RuleCall getReferenceScopeCallParserRuleCall_8_0_1_0() { return cReferenceScopeCallParserRuleCall_8_0_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_8_0_2() { return cGroup_8_0_2; }
		
		//'schedule'
		public Keyword getScheduleKeyword_8_0_2_0() { return cScheduleKeyword_8_0_2_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_8_0_2_1() { return cScheduleAssignment_8_0_2_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_8_0_2_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_8_0_2_1_0; }
		
		//('extends' baseStates+=[sccharts::State] (',' baseStates+=[sccharts::State])*)? ('schedule'
		//schedule+=ScheduleObjectReference+)? '{' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction*
		//(regions+=ImplicitControlflowRegion | regions+=Region*) '}'
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//('extends' baseStates+=[sccharts::State] (',' baseStates+=[sccharts::State])*)?
		public Group getGroup_8_1_0() { return cGroup_8_1_0; }
		
		//'extends'
		public Keyword getExtendsKeyword_8_1_0_0() { return cExtendsKeyword_8_1_0_0; }
		
		//baseStates+=[sccharts::State]
		public Assignment getBaseStatesAssignment_8_1_0_1() { return cBaseStatesAssignment_8_1_0_1; }
		
		//[sccharts::State]
		public CrossReference getBaseStatesStateCrossReference_8_1_0_1_0() { return cBaseStatesStateCrossReference_8_1_0_1_0; }
		
		//ID
		public RuleCall getBaseStatesStateIDTerminalRuleCall_8_1_0_1_0_1() { return cBaseStatesStateIDTerminalRuleCall_8_1_0_1_0_1; }
		
		//(',' baseStates+=[sccharts::State])*
		public Group getGroup_8_1_0_2() { return cGroup_8_1_0_2; }
		
		//','
		public Keyword getCommaKeyword_8_1_0_2_0() { return cCommaKeyword_8_1_0_2_0; }
		
		//baseStates+=[sccharts::State]
		public Assignment getBaseStatesAssignment_8_1_0_2_1() { return cBaseStatesAssignment_8_1_0_2_1; }
		
		//[sccharts::State]
		public CrossReference getBaseStatesStateCrossReference_8_1_0_2_1_0() { return cBaseStatesStateCrossReference_8_1_0_2_1_0; }
		
		//ID
		public RuleCall getBaseStatesStateIDTerminalRuleCall_8_1_0_2_1_0_1() { return cBaseStatesStateIDTerminalRuleCall_8_1_0_2_1_0_1; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_8_1_1() { return cGroup_8_1_1; }
		
		//'schedule'
		public Keyword getScheduleKeyword_8_1_1_0() { return cScheduleKeyword_8_1_1_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_8_1_1_1() { return cScheduleAssignment_8_1_1_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_8_1_1_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_8_1_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1_2() { return cLeftCurlyBracketKeyword_8_1_2; }
		
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		public Assignment getDeclarationsAssignment_8_1_3() { return cDeclarationsAssignment_8_1_3; }
		
		//DeclarationOrMethodWithKeywordWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_8_1_3_0() { return cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_8_1_3_0; }
		
		//actions+=LocalAction*
		public Assignment getActionsAssignment_8_1_4() { return cActionsAssignment_8_1_4; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_8_1_4_0() { return cActionsLocalActionParserRuleCall_8_1_4_0; }
		
		//(regions+=ImplicitControlflowRegion | regions+=Region*)
		public Alternatives getAlternatives_8_1_5() { return cAlternatives_8_1_5; }
		
		//regions+=ImplicitControlflowRegion
		public Assignment getRegionsAssignment_8_1_5_0() { return cRegionsAssignment_8_1_5_0; }
		
		//ImplicitControlflowRegion
		public RuleCall getRegionsImplicitControlflowRegionParserRuleCall_8_1_5_0_0() { return cRegionsImplicitControlflowRegionParserRuleCall_8_1_5_0_0; }
		
		//regions+=Region*
		public Assignment getRegionsAssignment_8_1_5_1() { return cRegionsAssignment_8_1_5_1; }
		
		//Region
		public RuleCall getRegionsRegionParserRuleCall_8_1_5_1_0() { return cRegionsRegionParserRuleCall_8_1_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_1_6() { return cRightCurlyBracketKeyword_8_1_6; }
		
		//outgoingTransitions+=Transition*
		public Assignment getOutgoingTransitionsAssignment_9() { return cOutgoingTransitionsAssignment_9; }
		
		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_9_0() { return cOutgoingTransitionsTransitionParserRuleCall_9_0; }
	}
	public class ImplicitStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ImplicitState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRegionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_1_0 = (RuleCall)cRegionsAssignment_1.eContents().get(0);
		
		//ImplicitState sccharts::State:
		//	{sccharts::State} regions+=Region+;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::State} regions+=Region+
		public Group getGroup() { return cGroup; }
		
		//{sccharts::State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//regions+=Region+
		public Assignment getRegionsAssignment_1() { return cRegionsAssignment_1; }
		
		//Region
		public RuleCall getRegionsRegionParserRuleCall_1_0() { return cRegionsRegionParserRuleCall_1_0; }
	}
	public class ScopeCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ScopeCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSuperSuperKeyword_0_0 = (Keyword)cSuperAssignment_0.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScopeScopeCrossReference_1_0 = (CrossReference)cScopeAssignment_1.eContents().get(0);
		private final RuleCall cScopeScopeIDTerminalRuleCall_1_0_1 = (RuleCall)cScopeScopeCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cParametersScopeParameterParserRuleCall_2_0_2_1_0 = (RuleCall)cParametersAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//ScopeCall sccharts::ScopeCall:
		//	super?='super.'?
		//	scope=[sccharts::Scope] ('(' parameters+=ScopeParameter (',' parameters+=ScopeParameter)* ')' | '(' ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//super?='super.'? scope=[sccharts::Scope] ('(' parameters+=ScopeParameter (',' parameters+=ScopeParameter)* ')' | '('
		//')')?
		public Group getGroup() { return cGroup; }
		
		//super?='super.'?
		public Assignment getSuperAssignment_0() { return cSuperAssignment_0; }
		
		//'super.'
		public Keyword getSuperSuperKeyword_0_0() { return cSuperSuperKeyword_0_0; }
		
		//scope=[sccharts::Scope]
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }
		
		//[sccharts::Scope]
		public CrossReference getScopeScopeCrossReference_1_0() { return cScopeScopeCrossReference_1_0; }
		
		//ID
		public RuleCall getScopeScopeIDTerminalRuleCall_1_0_1() { return cScopeScopeIDTerminalRuleCall_1_0_1; }
		
		//('(' parameters+=ScopeParameter (',' parameters+=ScopeParameter)* ')' | '(' ')')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'(' parameters+=ScopeParameter (',' parameters+=ScopeParameter)* ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//parameters+=ScopeParameter
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_2_0_1_0() { return cParametersScopeParameterParserRuleCall_2_0_1_0; }
		
		//(',' parameters+=ScopeParameter)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_0() { return cCommaKeyword_2_0_2_0; }
		
		//parameters+=ScopeParameter
		public Assignment getParametersAssignment_2_0_2_1() { return cParametersAssignment_2_0_2_1; }
		
		//ScopeParameter
		public RuleCall getParametersScopeParameterParserRuleCall_2_0_2_1_0() { return cParametersScopeParameterParserRuleCall_2_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }
		
		//'(' ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_1() { return cRightParenthesisKeyword_2_1_1; }
	}
	public class ScopeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ScopeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPureOutputAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPureOutputExclamationMarkKeyword_0_0_0 = (Keyword)cPureOutputAssignment_0_0.eContents().get(0);
		private final Assignment cCallByReferenceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cCallByReferenceAmpersandKeyword_0_1_0 = (Keyword)cCallByReferenceAssignment_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExplicitBindingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExplicitBindingValuedObjectCrossReference_2_1_0 = (CrossReference)cExplicitBindingAssignment_2_1.eContents().get(0);
		private final RuleCall cExplicitBindingValuedObjectIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExplicitBindingValuedObjectCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cExplicitBindingIndicesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cExplicitBindingIndicesExpressionParserRuleCall_2_2_1_0 = (RuleCall)cExplicitBindingIndicesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		
		//ScopeParameter kexpressions::Parameter:
		//	(pureOutput?='!'? callByReference?='&')?
		//	expression=Expression ('to' explicitBinding=[kexpressions::ValuedObject] ('[' explicitBindingIndices+=Expression
		//	']')*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(pureOutput?='!'? callByReference?='&')? expression=Expression ('to' explicitBinding=[kexpressions::ValuedObject] ('['
		//explicitBindingIndices+=Expression ']')*)?
		public Group getGroup() { return cGroup; }
		
		//(pureOutput?='!'? callByReference?='&')?
		public Group getGroup_0() { return cGroup_0; }
		
		//pureOutput?='!'?
		public Assignment getPureOutputAssignment_0_0() { return cPureOutputAssignment_0_0; }
		
		//'!'
		public Keyword getPureOutputExclamationMarkKeyword_0_0_0() { return cPureOutputExclamationMarkKeyword_0_0_0; }
		
		//callByReference?='&'
		public Assignment getCallByReferenceAssignment_0_1() { return cCallByReferenceAssignment_0_1; }
		
		//'&'
		public Keyword getCallByReferenceAmpersandKeyword_0_1_0() { return cCallByReferenceAmpersandKeyword_0_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//('to' explicitBinding=[kexpressions::ValuedObject] ('[' explicitBindingIndices+=Expression ']')*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'to'
		public Keyword getToKeyword_2_0() { return cToKeyword_2_0; }
		
		//explicitBinding=[kexpressions::ValuedObject]
		public Assignment getExplicitBindingAssignment_2_1() { return cExplicitBindingAssignment_2_1; }
		
		//[kexpressions::ValuedObject]
		public CrossReference getExplicitBindingValuedObjectCrossReference_2_1_0() { return cExplicitBindingValuedObjectCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExplicitBindingValuedObjectIDTerminalRuleCall_2_1_0_1() { return cExplicitBindingValuedObjectIDTerminalRuleCall_2_1_0_1; }
		
		//('[' explicitBindingIndices+=Expression ']')*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_2_0() { return cLeftSquareBracketKeyword_2_2_0; }
		
		//explicitBindingIndices+=Expression
		public Assignment getExplicitBindingIndicesAssignment_2_2_1() { return cExplicitBindingIndicesAssignment_2_2_1; }
		
		//Expression
		public RuleCall getExplicitBindingIndicesExpressionParserRuleCall_2_2_1_0() { return cExplicitBindingIndicesExpressionParserRuleCall_2_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2_2() { return cRightSquareBracketKeyword_2_2_2; }
	}
	public class BoolScheduleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.BoolScheduleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cScheduleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cScheduleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_1_1_0 = (RuleCall)cScheduleAssignment_1_1.eContents().get(0);
		
		//// ------------------ //
		////  Transition Rules  // 
		//// ------------------ //
		//BoolScheduleExpression kexpressions::Expression:
		//	LogicalOrExpression ('schedule' schedule+=ScheduleObjectReference)?;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression ('schedule' schedule+=ScheduleObjectReference)?
		public Group getGroup() { return cGroup; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }
		
		//('schedule' schedule+=ScheduleObjectReference)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'schedule'
		public Keyword getScheduleKeyword_1_0() { return cScheduleKeyword_1_0; }
		
		//schedule+=ScheduleObjectReference
		public Assignment getScheduleAssignment_1_1() { return cScheduleAssignment_1_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_1_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_1_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayTypeEnumRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTriggerDelayAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTriggerDelayINTTerminalRuleCall_3_1_0 = (RuleCall)cTriggerDelayAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cTriggerAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_3_2_0_0 = (RuleCall)cTriggerAssignment_3_2_0.eContents().get(0);
		private final Assignment cTriggerAssignment_3_2_1 = (Assignment)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cTriggerAtomicExpressionParserRuleCall_3_2_1_0 = (RuleCall)cTriggerAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cPrKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0 = (RuleCall)cTriggerProbabilityAssignment_3_3_1.eContents().get(0);
		private final Assignment cNondeterministicAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final Keyword cNondeterministicNondeterministicKeyword_3_4_0 = (Keyword)cNondeterministicAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0 = (RuleCall)cEffectsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_2_1_0 = (RuleCall)cEffectsAssignment_4_2_1.eContents().get(0);
		private final Assignment cPreemptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPreemptionPreemptionTypeEnumRuleCall_5_0 = (RuleCall)cPreemptionAssignment_5.eContents().get(0);
		private final Assignment cTargetStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetStateStateCrossReference_6_0 = (CrossReference)cTargetStateAssignment_6.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetStateStateCrossReference_6_0.eContents().get(1);
		private final Assignment cDeferredAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDeferredDeferredTypeEnumRuleCall_7_0 = (RuleCall)cDeferredAssignment_7.eContents().get(0);
		private final Assignment cHistoryAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHistoryHistoryTypeEnumRuleCall_8_0 = (RuleCall)cHistoryAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLabelKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cLabelAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_9_1_0 = (RuleCall)cLabelAssignment_9_1.eContents().get(0);
		
		//Transition sccharts::Transition:
		//	{sccharts::Transition} annotations+=RestrictedTypeAnnotation*
		//	/*
		//     * Order is: target last. Both options with target first or last would results in the following ambguity (KISEMA-1399):
		//     * go to A
		//     *  if I
		//     *  do O
		//     * go to B 
		//     */
		//	delay=DelayType? ('if' triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression) ('Pr='
		//	triggerProbability=FLOAT)? nondeterministic?='nondeterministic'?)? ('do' effects+=Effect (';' effects+=Effect)*)?
		//	preemption=PreemptionType
		//	targetState=[sccharts::State] deferred=DeferredType?
		//	history=HistoryType? ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::Transition} annotations+=RestrictedTypeAnnotation* /*
		//     * Order is: target last. Both options with target first or last would results in the following ambguity (KISEMA-1399):
		//     * go to A
		//     *  if I
		//     *  do O
		//     * go to B 
		//     */ delay=DelayType? ('if' triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression) ('Pr='
		//triggerProbability=FLOAT)? nondeterministic?='nondeterministic'?)? ('do' effects+=Effect (';' effects+=Effect)*)?
		//preemption=PreemptionType targetState=[sccharts::State] deferred=DeferredType? history=HistoryType? ('label'
		//label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		///*
		//     * Order is: target last. Both options with target first or last would results in the following ambguity (KISEMA-1399):
		//     * go to A
		//     *  if I
		//     *  do O
		//     * go to B 
		//     */ delay=DelayType?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }
		
		//DelayType
		public RuleCall getDelayDelayTypeEnumRuleCall_2_0() { return cDelayDelayTypeEnumRuleCall_2_0; }
		
		//('if' triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression) ('Pr=' triggerProbability=FLOAT)?
		//nondeterministic?='nondeterministic'?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }
		
		//triggerDelay=INT?
		public Assignment getTriggerDelayAssignment_3_1() { return cTriggerDelayAssignment_3_1; }
		
		//INT
		public RuleCall getTriggerDelayINTTerminalRuleCall_3_1_0() { return cTriggerDelayINTTerminalRuleCall_3_1_0; }
		
		//(trigger=BoolScheduleExpression | trigger=AtomicExpression)
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_3_2_0() { return cTriggerAssignment_3_2_0; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_3_2_0_0() { return cTriggerBoolScheduleExpressionParserRuleCall_3_2_0_0; }
		
		//trigger=AtomicExpression
		public Assignment getTriggerAssignment_3_2_1() { return cTriggerAssignment_3_2_1; }
		
		//AtomicExpression
		public RuleCall getTriggerAtomicExpressionParserRuleCall_3_2_1_0() { return cTriggerAtomicExpressionParserRuleCall_3_2_1_0; }
		
		//('Pr=' triggerProbability=FLOAT)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'Pr='
		public Keyword getPrKeyword_3_3_0() { return cPrKeyword_3_3_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_3_3_1() { return cTriggerProbabilityAssignment_3_3_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0; }
		
		//nondeterministic?='nondeterministic'?
		public Assignment getNondeterministicAssignment_3_4() { return cNondeterministicAssignment_3_4; }
		
		//'nondeterministic'
		public Keyword getNondeterministicNondeterministicKeyword_3_4_0() { return cNondeterministicNondeterministicKeyword_3_4_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'do'
		public Keyword getDoKeyword_4_0() { return cDoKeyword_4_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_4_1() { return cEffectsAssignment_4_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0() { return cEffectsEffectParserRuleCall_4_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2_0() { return cSemicolonKeyword_4_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_4_2_1() { return cEffectsAssignment_4_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_2_1_0() { return cEffectsEffectParserRuleCall_4_2_1_0; }
		
		//preemption=PreemptionType
		public Assignment getPreemptionAssignment_5() { return cPreemptionAssignment_5; }
		
		//PreemptionType
		public RuleCall getPreemptionPreemptionTypeEnumRuleCall_5_0() { return cPreemptionPreemptionTypeEnumRuleCall_5_0; }
		
		//targetState=[sccharts::State]
		public Assignment getTargetStateAssignment_6() { return cTargetStateAssignment_6; }
		
		//[sccharts::State]
		public CrossReference getTargetStateStateCrossReference_6_0() { return cTargetStateStateCrossReference_6_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_6_0_1() { return cTargetStateStateIDTerminalRuleCall_6_0_1; }
		
		//deferred=DeferredType?
		public Assignment getDeferredAssignment_7() { return cDeferredAssignment_7; }
		
		//DeferredType
		public RuleCall getDeferredDeferredTypeEnumRuleCall_7_0() { return cDeferredDeferredTypeEnumRuleCall_7_0; }
		
		//history=HistoryType?
		public Assignment getHistoryAssignment_8() { return cHistoryAssignment_8; }
		
		//HistoryType
		public RuleCall getHistoryHistoryTypeEnumRuleCall_8_0() { return cHistoryHistoryTypeEnumRuleCall_8_0; }
		
		//('label' label=STRING)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'label'
		public Keyword getLabelKeyword_9_0() { return cLabelKeyword_9_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_9_1() { return cLabelAssignment_9_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_9_1_0() { return cLabelSTRINGTerminalRuleCall_9_1_0; }
	}
	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Region");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cControlflowRegionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataflowRegionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// -------------- //
		////  Region Rules  // 
		//// -------------- //
		//Region sccharts::Region:
		//	ControlflowRegion | DataflowRegion;
		@Override public ParserRule getRule() { return rule; }
		
		//ControlflowRegion | DataflowRegion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ControlflowRegion
		public RuleCall getControlflowRegionParserRuleCall_0() { return cControlflowRegionParserRuleCall_0; }
		
		//DataflowRegion
		public RuleCall getDataflowRegionParserRuleCall_1() { return cDataflowRegionParserRuleCall_1; }
	}
	public class ImplicitControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ImplicitControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		
		//ImplicitControlflowRegion sccharts::ControlflowRegion:
		//	{sccharts::ControlflowRegion} states+=State+;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::ControlflowRegion} states+=State+
		public Group getGroup() { return cGroup; }
		
		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }
		
		//states+=State+
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_1_0() { return cStatesStateParserRuleCall_1_0; }
	}
	public class ControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cOverrideAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOverrideOverrideKeyword_2_0 = (Keyword)cOverrideAssignment_2.eContents().get(0);
		private final Assignment cFinalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cFinalFinalKeyword_3_0 = (Keyword)cFinalAssignment_3.eContents().get(0);
		private final Keyword cRegionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameExtendedIDParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cLabelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_0 = (RuleCall)cLabelAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cIsKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cReferenceAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cReferenceScopeCallParserRuleCall_7_0_1_0 = (RuleCall)cReferenceAssignment_7_0_1.eContents().get(0);
		private final Group cGroup_7_0_2 = (Group)cGroup_7_0.eContents().get(2);
		private final Keyword cForKeyword_7_0_2_0 = (Keyword)cGroup_7_0_2.eContents().get(0);
		private final Assignment cCounterVariableAssignment_7_0_2_1 = (Assignment)cGroup_7_0_2.eContents().get(1);
		private final RuleCall cCounterVariableCounterVariableParserRuleCall_7_0_2_1_0 = (RuleCall)cCounterVariableAssignment_7_0_2_1.eContents().get(0);
		private final Keyword cColonKeyword_7_0_2_2 = (Keyword)cGroup_7_0_2.eContents().get(2);
		private final Assignment cForStartAssignment_7_0_2_3 = (Assignment)cGroup_7_0_2.eContents().get(3);
		private final RuleCall cForStartIntOrReferenceParserRuleCall_7_0_2_3_0 = (RuleCall)cForStartAssignment_7_0_2_3.eContents().get(0);
		private final Group cGroup_7_0_2_4 = (Group)cGroup_7_0_2.eContents().get(4);
		private final Keyword cToKeyword_7_0_2_4_0 = (Keyword)cGroup_7_0_2_4.eContents().get(0);
		private final Assignment cForEndAssignment_7_0_2_4_1 = (Assignment)cGroup_7_0_2_4.eContents().get(1);
		private final RuleCall cForEndIntOrReferenceParserRuleCall_7_0_2_4_1_0 = (RuleCall)cForEndAssignment_7_0_2_4_1.eContents().get(0);
		private final Group cGroup_7_0_3 = (Group)cGroup_7_0.eContents().get(3);
		private final Keyword cScheduleKeyword_7_0_3_0 = (Keyword)cGroup_7_0_3.eContents().get(0);
		private final Assignment cScheduleAssignment_7_0_3_1 = (Assignment)cGroup_7_0_3.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_7_0_3_1_0 = (RuleCall)cScheduleAssignment_7_0_3_1.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Group cGroup_7_1_0 = (Group)cGroup_7_1.eContents().get(0);
		private final Keyword cForKeyword_7_1_0_0 = (Keyword)cGroup_7_1_0.eContents().get(0);
		private final Assignment cCounterVariableAssignment_7_1_0_1 = (Assignment)cGroup_7_1_0.eContents().get(1);
		private final RuleCall cCounterVariableCounterVariableParserRuleCall_7_1_0_1_0 = (RuleCall)cCounterVariableAssignment_7_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_7_1_0_2 = (Keyword)cGroup_7_1_0.eContents().get(2);
		private final Assignment cForStartAssignment_7_1_0_3 = (Assignment)cGroup_7_1_0.eContents().get(3);
		private final RuleCall cForStartIntOrReferenceParserRuleCall_7_1_0_3_0 = (RuleCall)cForStartAssignment_7_1_0_3.eContents().get(0);
		private final Group cGroup_7_1_0_4 = (Group)cGroup_7_1_0.eContents().get(4);
		private final Keyword cToKeyword_7_1_0_4_0 = (Keyword)cGroup_7_1_0_4.eContents().get(0);
		private final Assignment cForEndAssignment_7_1_0_4_1 = (Assignment)cGroup_7_1_0_4.eContents().get(1);
		private final RuleCall cForEndIntOrReferenceParserRuleCall_7_1_0_4_1_0 = (RuleCall)cForEndAssignment_7_1_0_4_1.eContents().get(0);
		private final Group cGroup_7_1_1 = (Group)cGroup_7_1.eContents().get(1);
		private final Keyword cScheduleKeyword_7_1_1_0 = (Keyword)cGroup_7_1_1.eContents().get(0);
		private final Assignment cScheduleAssignment_7_1_1_1 = (Assignment)cGroup_7_1_1.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_7_1_1_1_0 = (RuleCall)cScheduleAssignment_7_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_7_1_2 = (Alternatives)cGroup_7_1.eContents().get(2);
		private final Group cGroup_7_1_2_0 = (Group)cAlternatives_7_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1_2_0_0 = (Keyword)cGroup_7_1_2_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_7_1_2_0_1 = (Assignment)cGroup_7_1_2_0.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_1_2_0_1_0 = (RuleCall)cDeclarationsAssignment_7_1_2_0_1.eContents().get(0);
		private final Assignment cActionsAssignment_7_1_2_0_2 = (Assignment)cGroup_7_1_2_0.eContents().get(2);
		private final RuleCall cActionsLocalActionParserRuleCall_7_1_2_0_2_0 = (RuleCall)cActionsAssignment_7_1_2_0_2.eContents().get(0);
		private final Alternatives cAlternatives_7_1_2_0_3 = (Alternatives)cGroup_7_1_2_0.eContents().get(3);
		private final Assignment cStatesAssignment_7_1_2_0_3_0 = (Assignment)cAlternatives_7_1_2_0_3.eContents().get(0);
		private final RuleCall cStatesImplicitStateParserRuleCall_7_1_2_0_3_0_0 = (RuleCall)cStatesAssignment_7_1_2_0_3_0.eContents().get(0);
		private final Assignment cStatesAssignment_7_1_2_0_3_1 = (Assignment)cAlternatives_7_1_2_0_3.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_7_1_2_0_3_1_0 = (RuleCall)cStatesAssignment_7_1_2_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_1_2_0_4 = (Keyword)cGroup_7_1_2_0.eContents().get(4);
		private final Group cGroup_7_1_2_1 = (Group)cAlternatives_7_1_2.eContents().get(1);
		private final Keyword cColonKeyword_7_1_2_1_0 = (Keyword)cGroup_7_1_2_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_7_1_2_1_1 = (Assignment)cGroup_7_1_2_1.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_1_2_1_1_0 = (RuleCall)cDeclarationsAssignment_7_1_2_1_1.eContents().get(0);
		private final Assignment cActionsAssignment_7_1_2_1_2 = (Assignment)cGroup_7_1_2_1.eContents().get(2);
		private final RuleCall cActionsLocalActionParserRuleCall_7_1_2_1_2_0 = (RuleCall)cActionsAssignment_7_1_2_1_2.eContents().get(0);
		private final Assignment cStatesAssignment_7_1_2_1_3 = (Assignment)cGroup_7_1_2_1.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_7_1_2_1_3_0 = (RuleCall)cStatesAssignment_7_1_2_1_3.eContents().get(0);
		
		//ControlflowRegion sccharts::ControlflowRegion:
		//	{sccharts::ControlflowRegion} annotations+=Annotation*
		//	override?='override'?
		//	final?='final'?
		//	'region' name=ExtendedID? label=STRING? ('is'
		//	reference=ScopeCall ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		//	('schedule' schedule+=ScheduleObjectReference+)?
		//	| ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)? ('schedule'
		//	schedule+=ScheduleObjectReference+)? ('{'
		//	declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//	actions+=LocalAction* (states+=ImplicitState | states+=State+)
		//	'}'
		//	|
		//	':'
		//	declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//	actions+=LocalAction*
		//	states+=State*));
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::ControlflowRegion} annotations+=Annotation* override?='override'? final?='final'? 'region' name=ExtendedID?
		//label=STRING? ('is' reference=ScopeCall ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to'
		//forEnd=IntOrReference)?)? ('schedule' schedule+=ScheduleObjectReference+)? | ('for' counterVariable=CounterVariable ':'
		//forStart=IntOrReference ('to' forEnd=IntOrReference)?)? ('schedule' schedule+=ScheduleObjectReference+)? ('{'
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* (states+=ImplicitState | states+=State+)
		//'}' | ':' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* states+=State*))
		public Group getGroup() { return cGroup; }
		
		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//override?='override'?
		public Assignment getOverrideAssignment_2() { return cOverrideAssignment_2; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_2_0() { return cOverrideOverrideKeyword_2_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_3() { return cFinalAssignment_3; }
		
		//'final'
		public Keyword getFinalFinalKeyword_3_0() { return cFinalFinalKeyword_3_0; }
		
		//'region'
		public Keyword getRegionKeyword_4() { return cRegionKeyword_4; }
		
		//name=ExtendedID?
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_5_0() { return cNameExtendedIDParserRuleCall_5_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_6() { return cLabelAssignment_6; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_0() { return cLabelSTRINGTerminalRuleCall_6_0; }
		
		//('is' reference=ScopeCall ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to'
		//forEnd=IntOrReference)?)? ('schedule' schedule+=ScheduleObjectReference+)? | ('for' counterVariable=CounterVariable ':'
		//forStart=IntOrReference ('to' forEnd=IntOrReference)?)? ('schedule' schedule+=ScheduleObjectReference+)? ('{'
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* (states+=ImplicitState | states+=State+)
		//'}' | ':' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* states+=State*))
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'is' reference=ScopeCall ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to'
		//forEnd=IntOrReference)?)? ('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//'is'
		public Keyword getIsKeyword_7_0_0() { return cIsKeyword_7_0_0; }
		
		//reference=ScopeCall
		public Assignment getReferenceAssignment_7_0_1() { return cReferenceAssignment_7_0_1; }
		
		//ScopeCall
		public RuleCall getReferenceScopeCallParserRuleCall_7_0_1_0() { return cReferenceScopeCallParserRuleCall_7_0_1_0; }
		
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		public Group getGroup_7_0_2() { return cGroup_7_0_2; }
		
		//'for'
		public Keyword getForKeyword_7_0_2_0() { return cForKeyword_7_0_2_0; }
		
		//counterVariable=CounterVariable
		public Assignment getCounterVariableAssignment_7_0_2_1() { return cCounterVariableAssignment_7_0_2_1; }
		
		//CounterVariable
		public RuleCall getCounterVariableCounterVariableParserRuleCall_7_0_2_1_0() { return cCounterVariableCounterVariableParserRuleCall_7_0_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_7_0_2_2() { return cColonKeyword_7_0_2_2; }
		
		//forStart=IntOrReference
		public Assignment getForStartAssignment_7_0_2_3() { return cForStartAssignment_7_0_2_3; }
		
		//IntOrReference
		public RuleCall getForStartIntOrReferenceParserRuleCall_7_0_2_3_0() { return cForStartIntOrReferenceParserRuleCall_7_0_2_3_0; }
		
		//('to' forEnd=IntOrReference)?
		public Group getGroup_7_0_2_4() { return cGroup_7_0_2_4; }
		
		//'to'
		public Keyword getToKeyword_7_0_2_4_0() { return cToKeyword_7_0_2_4_0; }
		
		//forEnd=IntOrReference
		public Assignment getForEndAssignment_7_0_2_4_1() { return cForEndAssignment_7_0_2_4_1; }
		
		//IntOrReference
		public RuleCall getForEndIntOrReferenceParserRuleCall_7_0_2_4_1_0() { return cForEndIntOrReferenceParserRuleCall_7_0_2_4_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_7_0_3() { return cGroup_7_0_3; }
		
		//'schedule'
		public Keyword getScheduleKeyword_7_0_3_0() { return cScheduleKeyword_7_0_3_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_7_0_3_1() { return cScheduleAssignment_7_0_3_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_7_0_3_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_7_0_3_1_0; }
		
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)? ('schedule'
		//schedule+=ScheduleObjectReference+)? ('{' declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		//actions+=LocalAction* (states+=ImplicitState | states+=State+) '}' | ':'
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* states+=State*)
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		public Group getGroup_7_1_0() { return cGroup_7_1_0; }
		
		//'for'
		public Keyword getForKeyword_7_1_0_0() { return cForKeyword_7_1_0_0; }
		
		//counterVariable=CounterVariable
		public Assignment getCounterVariableAssignment_7_1_0_1() { return cCounterVariableAssignment_7_1_0_1; }
		
		//CounterVariable
		public RuleCall getCounterVariableCounterVariableParserRuleCall_7_1_0_1_0() { return cCounterVariableCounterVariableParserRuleCall_7_1_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_7_1_0_2() { return cColonKeyword_7_1_0_2; }
		
		//forStart=IntOrReference
		public Assignment getForStartAssignment_7_1_0_3() { return cForStartAssignment_7_1_0_3; }
		
		//IntOrReference
		public RuleCall getForStartIntOrReferenceParserRuleCall_7_1_0_3_0() { return cForStartIntOrReferenceParserRuleCall_7_1_0_3_0; }
		
		//('to' forEnd=IntOrReference)?
		public Group getGroup_7_1_0_4() { return cGroup_7_1_0_4; }
		
		//'to'
		public Keyword getToKeyword_7_1_0_4_0() { return cToKeyword_7_1_0_4_0; }
		
		//forEnd=IntOrReference
		public Assignment getForEndAssignment_7_1_0_4_1() { return cForEndAssignment_7_1_0_4_1; }
		
		//IntOrReference
		public RuleCall getForEndIntOrReferenceParserRuleCall_7_1_0_4_1_0() { return cForEndIntOrReferenceParserRuleCall_7_1_0_4_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_7_1_1() { return cGroup_7_1_1; }
		
		//'schedule'
		public Keyword getScheduleKeyword_7_1_1_0() { return cScheduleKeyword_7_1_1_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_7_1_1_1() { return cScheduleAssignment_7_1_1_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_7_1_1_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_7_1_1_1_0; }
		
		//('{' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* (states+=ImplicitState |
		//states+=State+) '}' | ':' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction*
		//states+=State*)
		public Alternatives getAlternatives_7_1_2() { return cAlternatives_7_1_2; }
		
		//'{' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* (states+=ImplicitState |
		//states+=State+) '}'
		public Group getGroup_7_1_2_0() { return cGroup_7_1_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1_2_0_0() { return cLeftCurlyBracketKeyword_7_1_2_0_0; }
		
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		public Assignment getDeclarationsAssignment_7_1_2_0_1() { return cDeclarationsAssignment_7_1_2_0_1; }
		
		//DeclarationOrMethodWithKeywordWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_1_2_0_1_0() { return cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_1_2_0_1_0; }
		
		//actions+=LocalAction*
		public Assignment getActionsAssignment_7_1_2_0_2() { return cActionsAssignment_7_1_2_0_2; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_7_1_2_0_2_0() { return cActionsLocalActionParserRuleCall_7_1_2_0_2_0; }
		
		//(states+=ImplicitState | states+=State+)
		public Alternatives getAlternatives_7_1_2_0_3() { return cAlternatives_7_1_2_0_3; }
		
		//states+=ImplicitState
		public Assignment getStatesAssignment_7_1_2_0_3_0() { return cStatesAssignment_7_1_2_0_3_0; }
		
		//ImplicitState
		public RuleCall getStatesImplicitStateParserRuleCall_7_1_2_0_3_0_0() { return cStatesImplicitStateParserRuleCall_7_1_2_0_3_0_0; }
		
		//states+=State+
		public Assignment getStatesAssignment_7_1_2_0_3_1() { return cStatesAssignment_7_1_2_0_3_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_1_2_0_3_1_0() { return cStatesStateParserRuleCall_7_1_2_0_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_1_2_0_4() { return cRightCurlyBracketKeyword_7_1_2_0_4; }
		
		//':' declarations+=DeclarationOrMethodWithKeywordWOSemicolon* actions+=LocalAction* states+=State*
		public Group getGroup_7_1_2_1() { return cGroup_7_1_2_1; }
		
		//':'
		public Keyword getColonKeyword_7_1_2_1_0() { return cColonKeyword_7_1_2_1_0; }
		
		//declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
		public Assignment getDeclarationsAssignment_7_1_2_1_1() { return cDeclarationsAssignment_7_1_2_1_1; }
		
		//DeclarationOrMethodWithKeywordWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_1_2_1_1_0() { return cDeclarationsDeclarationOrMethodWithKeywordWOSemicolonParserRuleCall_7_1_2_1_1_0; }
		
		//actions+=LocalAction*
		public Assignment getActionsAssignment_7_1_2_1_2() { return cActionsAssignment_7_1_2_1_2; }
		
		//LocalAction
		public RuleCall getActionsLocalActionParserRuleCall_7_1_2_1_2_0() { return cActionsLocalActionParserRuleCall_7_1_2_1_2_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_7_1_2_1_3() { return cStatesAssignment_7_1_2_1_3; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_1_2_1_3_0() { return cStatesStateParserRuleCall_7_1_2_1_3_0; }
	}
	public class DataflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DataflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cOverrideAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOverrideOverrideKeyword_2_0 = (Keyword)cOverrideAssignment_2.eContents().get(0);
		private final Keyword cDataflowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameExtendedIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cForKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCounterVariableAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCounterVariableCounterVariableParserRuleCall_6_1_0 = (RuleCall)cCounterVariableAssignment_6_1.eContents().get(0);
		private final Keyword cColonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cForStartAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cForStartIntOrReferenceParserRuleCall_6_3_0 = (RuleCall)cForStartAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cToKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cForEndAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cForEndIntOrReferenceParserRuleCall_6_4_1_0 = (RuleCall)cForEndAssignment_6_4_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cScheduleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cScheduleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_7_1_0 = (RuleCall)cScheduleAssignment_7_1.eContents().get(0);
		private final Assignment cOnceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cOnceOnceKeyword_8_0 = (Keyword)cOnceAssignment_8.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_0_0 = (Keyword)cGroup_9_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_9_0_1 = (Assignment)cGroup_9_0.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_9_0_1_0 = (RuleCall)cDeclarationsAssignment_9_0_1.eContents().get(0);
		private final Assignment cEquationsAssignment_9_0_2 = (Assignment)cGroup_9_0.eContents().get(2);
		private final RuleCall cEquationsAssignmentParserRuleCall_9_0_2_0 = (RuleCall)cEquationsAssignment_9_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_0_3 = (Keyword)cGroup_9_0.eContents().get(3);
		private final Group cGroup_9_1 = (Group)cAlternatives_9.eContents().get(1);
		private final Keyword cColonKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_1_0 = (RuleCall)cDeclarationsAssignment_9_1_1.eContents().get(0);
		private final Assignment cEquationsAssignment_9_1_2 = (Assignment)cGroup_9_1.eContents().get(2);
		private final RuleCall cEquationsAssignmentParserRuleCall_9_1_2_0 = (RuleCall)cEquationsAssignment_9_1_2.eContents().get(0);
		
		//DataflowRegion sccharts::DataflowRegion:
		//	{sccharts::DataflowRegion} annotations+=Annotation*
		//	override?='override'?
		//	'dataflow' name=ExtendedID? label=STRING? ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to'
		//	forEnd=IntOrReference)?)? ('schedule' schedule+=ScheduleObjectReference+)?
		//	once?='once'? ('{'
		//	declarations+=DeclarationWOSemicolon*
		//	equations+=Assignment*
		//	'}'
		//	|
		//	':'
		//	declarations+=DeclarationWOSemicolon*
		//	equations+=Assignment*);
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::DataflowRegion} annotations+=Annotation* override?='override'? 'dataflow' name=ExtendedID? label=STRING?
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)? ('schedule'
		//schedule+=ScheduleObjectReference+)? once?='once'? ('{' declarations+=DeclarationWOSemicolon* equations+=Assignment*
		//'}' | ':' declarations+=DeclarationWOSemicolon* equations+=Assignment*)
		public Group getGroup() { return cGroup; }
		
		//{sccharts::DataflowRegion}
		public Action getDataflowRegionAction_0() { return cDataflowRegionAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//override?='override'?
		public Assignment getOverrideAssignment_2() { return cOverrideAssignment_2; }
		
		//'override'
		public Keyword getOverrideOverrideKeyword_2_0() { return cOverrideOverrideKeyword_2_0; }
		
		//'dataflow'
		public Keyword getDataflowKeyword_3() { return cDataflowKeyword_3; }
		
		//name=ExtendedID?
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ExtendedID
		public RuleCall getNameExtendedIDParserRuleCall_4_0() { return cNameExtendedIDParserRuleCall_4_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_0() { return cLabelSTRINGTerminalRuleCall_5_0; }
		
		//('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'for'
		public Keyword getForKeyword_6_0() { return cForKeyword_6_0; }
		
		//counterVariable=CounterVariable
		public Assignment getCounterVariableAssignment_6_1() { return cCounterVariableAssignment_6_1; }
		
		//CounterVariable
		public RuleCall getCounterVariableCounterVariableParserRuleCall_6_1_0() { return cCounterVariableCounterVariableParserRuleCall_6_1_0; }
		
		//':'
		public Keyword getColonKeyword_6_2() { return cColonKeyword_6_2; }
		
		//forStart=IntOrReference
		public Assignment getForStartAssignment_6_3() { return cForStartAssignment_6_3; }
		
		//IntOrReference
		public RuleCall getForStartIntOrReferenceParserRuleCall_6_3_0() { return cForStartIntOrReferenceParserRuleCall_6_3_0; }
		
		//('to' forEnd=IntOrReference)?
		public Group getGroup_6_4() { return cGroup_6_4; }
		
		//'to'
		public Keyword getToKeyword_6_4_0() { return cToKeyword_6_4_0; }
		
		//forEnd=IntOrReference
		public Assignment getForEndAssignment_6_4_1() { return cForEndAssignment_6_4_1; }
		
		//IntOrReference
		public RuleCall getForEndIntOrReferenceParserRuleCall_6_4_1_0() { return cForEndIntOrReferenceParserRuleCall_6_4_1_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'schedule'
		public Keyword getScheduleKeyword_7_0() { return cScheduleKeyword_7_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_7_1() { return cScheduleAssignment_7_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_7_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_7_1_0; }
		
		//once?='once'?
		public Assignment getOnceAssignment_8() { return cOnceAssignment_8; }
		
		//'once'
		public Keyword getOnceOnceKeyword_8_0() { return cOnceOnceKeyword_8_0; }
		
		//('{' declarations+=DeclarationWOSemicolon* equations+=Assignment* '}' | ':' declarations+=DeclarationWOSemicolon*
		//equations+=Assignment*)
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//'{' declarations+=DeclarationWOSemicolon* equations+=Assignment* '}'
		public Group getGroup_9_0() { return cGroup_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_0_0() { return cLeftCurlyBracketKeyword_9_0_0; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_9_0_1() { return cDeclarationsAssignment_9_0_1; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_9_0_1_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_9_0_1_0; }
		
		//equations+=Assignment*
		public Assignment getEquationsAssignment_9_0_2() { return cEquationsAssignment_9_0_2; }
		
		//Assignment
		public RuleCall getEquationsAssignmentParserRuleCall_9_0_2_0() { return cEquationsAssignmentParserRuleCall_9_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_0_3() { return cRightCurlyBracketKeyword_9_0_3; }
		
		//':' declarations+=DeclarationWOSemicolon* equations+=Assignment*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//':'
		public Keyword getColonKeyword_9_1_0() { return cColonKeyword_9_1_0; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_9_1_1() { return cDeclarationsAssignment_9_1_1; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_1_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_1_0; }
		
		//equations+=Assignment*
		public Assignment getEquationsAssignment_9_1_2() { return cEquationsAssignment_9_1_2; }
		
		//Assignment
		public RuleCall getEquationsAssignmentParserRuleCall_9_1_2_0() { return cEquationsAssignmentParserRuleCall_9_1_2_0; }
	}
	public class IntOrReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.IntOrReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedObjectReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntOrReference kexpressions::Expression:
		//	IntValue | ValuedObjectReference;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue | ValuedObjectReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }
		
		//ValuedObjectReference
		public RuleCall getValuedObjectReferenceParserRuleCall_1() { return cValuedObjectReferenceParserRuleCall_1; }
	}
	public class CounterVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.CounterVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePrimeIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CounterVariable kexpressions::ValuedObject:
		//	name=PrimeID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=PrimeID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//PrimeID
		public RuleCall getNamePrimeIDParserRuleCall_0() { return cNamePrimeIDParserRuleCall_0; }
	}
	public class LocalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.LocalAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDuringActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSuspendActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrecedingActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSucceedingActionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPeriodActionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// -------------- //
		////  Action Rules  // 
		//// -------------- //
		//LocalAction sccharts::LocalAction:
		//	EntryAction | DuringAction | ExitAction | SuspendAction | PrecedingAction | SucceedingAction | PeriodAction;
		@Override public ParserRule getRule() { return rule; }
		
		//EntryAction | DuringAction | ExitAction | SuspendAction | PrecedingAction | SucceedingAction | PeriodAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntryAction
		public RuleCall getEntryActionParserRuleCall_0() { return cEntryActionParserRuleCall_0; }
		
		//DuringAction
		public RuleCall getDuringActionParserRuleCall_1() { return cDuringActionParserRuleCall_1; }
		
		//ExitAction
		public RuleCall getExitActionParserRuleCall_2() { return cExitActionParserRuleCall_2; }
		
		//SuspendAction
		public RuleCall getSuspendActionParserRuleCall_3() { return cSuspendActionParserRuleCall_3; }
		
		//PrecedingAction
		public RuleCall getPrecedingActionParserRuleCall_4() { return cPrecedingActionParserRuleCall_4; }
		
		//SucceedingAction
		public RuleCall getSucceedingActionParserRuleCall_5() { return cSucceedingActionParserRuleCall_5; }
		
		//PeriodAction
		public RuleCall getPeriodActionParserRuleCall_6() { return cPeriodActionParserRuleCall_6; }
	}
	public class EntryActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.EntryAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cPrKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0 = (RuleCall)cTriggerProbabilityAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLabelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLabelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cLabelAssignment_4_1.eContents().get(0);
		
		//EntryAction sccharts::EntryAction:
		//	{sccharts::EntryAction}
		//	'entry' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';'
		//	effects+=Effect)*)? ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::EntryAction} 'entry' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do'
		//effects+=Effect (';' effects+=Effect)*)? ('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::EntryAction}
		public Action getEntryActionAction_0() { return cEntryActionAction_0; }
		
		//'entry'
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }
		
		//('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_2_1_0() { return cTriggerBoolScheduleExpressionParserRuleCall_2_1_0; }
		
		//('Pr' triggerProbability=FLOAT)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'Pr'
		public Keyword getPrKeyword_2_2_0() { return cPrKeyword_2_2_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_2_2_1() { return cTriggerProbabilityAssignment_2_2_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'do'
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'label'
		public Keyword getLabelKeyword_4_0() { return cLabelKeyword_4_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_4_1() { return cLabelAssignment_4_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_1_0() { return cLabelSTRINGTerminalRuleCall_4_1_0; }
	}
	public class DuringActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DuringAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDuringActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelayDelayTypeEnumRuleCall_1_0 = (RuleCall)cDelayAssignment_1.eContents().get(0);
		private final Keyword cDuringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTriggerDelayAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTriggerDelayINTTerminalRuleCall_3_1_0 = (RuleCall)cTriggerDelayAssignment_3_1.eContents().get(0);
		private final Assignment cTriggerAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_3_2_0 = (RuleCall)cTriggerAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cPrKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0 = (RuleCall)cTriggerProbabilityAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0 = (RuleCall)cEffectsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_2_1_0 = (RuleCall)cEffectsAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		
		//DuringAction sccharts::DuringAction:
		//	{sccharts::DuringAction} delay=DelayType? 'during' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr='
		//	triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)? ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::DuringAction} delay=DelayType? 'during' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr='
		//triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)? ('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::DuringAction}
		public Action getDuringActionAction_0() { return cDuringActionAction_0; }
		
		//delay=DelayType?
		public Assignment getDelayAssignment_1() { return cDelayAssignment_1; }
		
		//DelayType
		public RuleCall getDelayDelayTypeEnumRuleCall_1_0() { return cDelayDelayTypeEnumRuleCall_1_0; }
		
		//'during'
		public Keyword getDuringKeyword_2() { return cDuringKeyword_2; }
		
		//('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }
		
		//triggerDelay=INT?
		public Assignment getTriggerDelayAssignment_3_1() { return cTriggerDelayAssignment_3_1; }
		
		//INT
		public RuleCall getTriggerDelayINTTerminalRuleCall_3_1_0() { return cTriggerDelayINTTerminalRuleCall_3_1_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_3_2() { return cTriggerAssignment_3_2; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_3_2_0() { return cTriggerBoolScheduleExpressionParserRuleCall_3_2_0; }
		
		//('Pr=' triggerProbability=FLOAT)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'Pr='
		public Keyword getPrKeyword_3_3_0() { return cPrKeyword_3_3_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_3_3_1() { return cTriggerProbabilityAssignment_3_3_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_3_3_1_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'do'
		public Keyword getDoKeyword_4_0() { return cDoKeyword_4_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_4_1() { return cEffectsAssignment_4_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0() { return cEffectsEffectParserRuleCall_4_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2_0() { return cSemicolonKeyword_4_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_4_2_1() { return cEffectsAssignment_4_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_2_1_0() { return cEffectsEffectParserRuleCall_4_2_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_1_0() { return cLabelSTRINGTerminalRuleCall_5_1_0; }
	}
	public class ExitActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ExitAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cPrKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0 = (RuleCall)cTriggerProbabilityAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLabelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLabelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cLabelAssignment_4_1.eContents().get(0);
		
		//ExitAction sccharts::ExitAction:
		//	{sccharts::ExitAction}
		//	'exit' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';'
		//	effects+=Effect)*)? ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::ExitAction} 'exit' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do'
		//effects+=Effect (';' effects+=Effect)*)? ('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::ExitAction}
		public Action getExitActionAction_0() { return cExitActionAction_0; }
		
		//'exit'
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }
		
		//('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_2_1_0() { return cTriggerBoolScheduleExpressionParserRuleCall_2_1_0; }
		
		//('Pr' triggerProbability=FLOAT)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'Pr'
		public Keyword getPrKeyword_2_2_0() { return cPrKeyword_2_2_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_2_2_1() { return cTriggerProbabilityAssignment_2_2_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'do'
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'label'
		public Keyword getLabelKeyword_4_0() { return cLabelKeyword_4_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_4_1() { return cLabelAssignment_4_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_1_0() { return cLabelSTRINGTerminalRuleCall_4_1_0; }
	}
	public class SuspendActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.SuspendAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuspendActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelayDelayTypeEnumRuleCall_1_0 = (RuleCall)cDelayAssignment_1.eContents().get(0);
		private final Assignment cWeakAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cWeakWeakKeyword_2_0 = (Keyword)cWeakAssignment_2.eContents().get(0);
		private final Keyword cSuspendKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriggerDelayAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTriggerDelayINTTerminalRuleCall_4_1_0 = (RuleCall)cTriggerDelayAssignment_4_1.eContents().get(0);
		private final Assignment cTriggerAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_4_2_0 = (RuleCall)cTriggerAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cPrKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_4_3_1_0 = (RuleCall)cTriggerProbabilityAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		
		//SuspendAction sccharts::SuspendAction:
		//	{sccharts::SuspendAction} delay=DelayType? weak?='weak'? 'suspend' ('if' triggerDelay=INT?
		//	trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)? ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::SuspendAction} delay=DelayType? weak?='weak'? 'suspend' ('if' triggerDelay=INT?
		//trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)? ('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::SuspendAction}
		public Action getSuspendActionAction_0() { return cSuspendActionAction_0; }
		
		//delay=DelayType?
		public Assignment getDelayAssignment_1() { return cDelayAssignment_1; }
		
		//DelayType
		public RuleCall getDelayDelayTypeEnumRuleCall_1_0() { return cDelayDelayTypeEnumRuleCall_1_0; }
		
		//weak?='weak'?
		public Assignment getWeakAssignment_2() { return cWeakAssignment_2; }
		
		//'weak'
		public Keyword getWeakWeakKeyword_2_0() { return cWeakWeakKeyword_2_0; }
		
		//'suspend'
		public Keyword getSuspendKeyword_3() { return cSuspendKeyword_3; }
		
		//('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'if'
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }
		
		//triggerDelay=INT?
		public Assignment getTriggerDelayAssignment_4_1() { return cTriggerDelayAssignment_4_1; }
		
		//INT
		public RuleCall getTriggerDelayINTTerminalRuleCall_4_1_0() { return cTriggerDelayINTTerminalRuleCall_4_1_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_4_2() { return cTriggerAssignment_4_2; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_4_2_0() { return cTriggerBoolScheduleExpressionParserRuleCall_4_2_0; }
		
		//('Pr=' triggerProbability=FLOAT)?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'Pr='
		public Keyword getPrKeyword_4_3_0() { return cPrKeyword_4_3_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_4_3_1() { return cTriggerProbabilityAssignment_4_3_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_4_3_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_4_3_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_1_0() { return cLabelSTRINGTerminalRuleCall_5_1_0; }
	}
	public class PrecedingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PrecedingAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrecedingActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrecedingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cPrKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0 = (RuleCall)cTriggerProbabilityAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLabelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLabelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cLabelAssignment_4_1.eContents().get(0);
		
		//PrecedingAction sccharts::PrecedingAction:
		//	{sccharts::PrecedingAction}
		//	'preceding' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';'
		//	effects+=Effect)*)? ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::PrecedingAction} 'preceding' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do'
		//effects+=Effect (';' effects+=Effect)*)? ('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::PrecedingAction}
		public Action getPrecedingActionAction_0() { return cPrecedingActionAction_0; }
		
		//'preceding'
		public Keyword getPrecedingKeyword_1() { return cPrecedingKeyword_1; }
		
		//('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_2_1_0() { return cTriggerBoolScheduleExpressionParserRuleCall_2_1_0; }
		
		//('Pr' triggerProbability=FLOAT)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'Pr'
		public Keyword getPrKeyword_2_2_0() { return cPrKeyword_2_2_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_2_2_1() { return cTriggerProbabilityAssignment_2_2_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'do'
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'label'
		public Keyword getLabelKeyword_4_0() { return cLabelKeyword_4_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_4_1() { return cLabelAssignment_4_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_1_0() { return cLabelSTRINGTerminalRuleCall_4_1_0; }
	}
	public class SucceedingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.SucceedingAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSucceedingActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSucceedingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerBoolScheduleExpressionParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cPrKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTriggerProbabilityAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0 = (RuleCall)cTriggerProbabilityAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLabelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLabelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cLabelAssignment_4_1.eContents().get(0);
		
		//SucceedingAction sccharts::SucceedingAction:
		//	{sccharts::SucceedingAction}
		//	'succeeding' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';'
		//	effects+=Effect)*)? ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::SucceedingAction} 'succeeding' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do'
		//effects+=Effect (';' effects+=Effect)*)? ('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::SucceedingAction}
		public Action getSucceedingActionAction_0() { return cSucceedingActionAction_0; }
		
		//'succeeding'
		public Keyword getSucceedingKeyword_1() { return cSucceedingKeyword_1; }
		
		//('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//trigger=BoolScheduleExpression
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }
		
		//BoolScheduleExpression
		public RuleCall getTriggerBoolScheduleExpressionParserRuleCall_2_1_0() { return cTriggerBoolScheduleExpressionParserRuleCall_2_1_0; }
		
		//('Pr' triggerProbability=FLOAT)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'Pr'
		public Keyword getPrKeyword_2_2_0() { return cPrKeyword_2_2_0; }
		
		//triggerProbability=FLOAT
		public Assignment getTriggerProbabilityAssignment_2_2_1() { return cTriggerProbabilityAssignment_2_2_1; }
		
		//FLOAT
		public RuleCall getTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0() { return cTriggerProbabilityFLOATTerminalRuleCall_2_2_1_0; }
		
		//('do' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'do'
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }
		
		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }
		
		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }
		
		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }
		
		//('label' label=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'label'
		public Keyword getLabelKeyword_4_0() { return cLabelKeyword_4_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_4_1() { return cLabelAssignment_4_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_1_0() { return cLabelSTRINGTerminalRuleCall_4_1_0; }
	}
	public class PeriodActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PeriodAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPeriodActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayTypeEnumRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Keyword cPeriodKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerValuedExpressionParserRuleCall_4_0 = (RuleCall)cTriggerAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		
		//PeriodAction sccharts::PeriodAction:
		//	{sccharts::PeriodAction} annotations+=RestrictedTypeAnnotation*
		//	delay=DelayType? 'period' trigger=ValuedExpression ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::PeriodAction} annotations+=RestrictedTypeAnnotation* delay=DelayType? 'period' trigger=ValuedExpression
		//('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::PeriodAction}
		public Action getPeriodActionAction_0() { return cPeriodActionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//delay=DelayType?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }
		
		//DelayType
		public RuleCall getDelayDelayTypeEnumRuleCall_2_0() { return cDelayDelayTypeEnumRuleCall_2_0; }
		
		//'period'
		public Keyword getPeriodKeyword_3() { return cPeriodKeyword_3; }
		
		//trigger=ValuedExpression
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }
		
		//ValuedExpression
		public RuleCall getTriggerValuedExpressionParserRuleCall_4_0() { return cTriggerValuedExpressionParserRuleCall_4_0; }
		
		//('label' label=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_1_0() { return cLabelSTRINGTerminalRuleCall_5_1_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationWOSemicolonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//Declaration kexpressions::Declaration:
		//	super | DeclarationWOSemicolon;
		@Override public ParserRule getRule() { return rule; }
		
		//super | DeclarationWOSemicolon
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationWOSemicolonParserRuleCall_1() { return cDeclarationWOSemicolonParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSclAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSclPostfixAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGotoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cScopeStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReturnParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cForLoopParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cWhileLoopParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//@Override
		//Statement scl::Statement:
		//	SclAssignment | SclPostfixAssignment | Label | Conditional | Goto | ScopeStatement | Return | ForLoop | WhileLoop;
		@Override public ParserRule getRule() { return rule; }
		
		//// Only allow restricted set of SCL statements
		//SclAssignment | SclPostfixAssignment | Label | Conditional | Goto | ScopeStatement | Return | ForLoop | WhileLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// Only allow restricted set of SCL statements
		//SclAssignment
		public RuleCall getSclAssignmentParserRuleCall_0() { return cSclAssignmentParserRuleCall_0; }
		
		//SclPostfixAssignment
		public RuleCall getSclPostfixAssignmentParserRuleCall_1() { return cSclPostfixAssignmentParserRuleCall_1; }
		
		//Label
		public RuleCall getLabelParserRuleCall_2() { return cLabelParserRuleCall_2; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_3() { return cConditionalParserRuleCall_3; }
		
		//Goto
		public RuleCall getGotoParserRuleCall_4() { return cGotoParserRuleCall_4; }
		
		//ScopeStatement
		public RuleCall getScopeStatementParserRuleCall_5() { return cScopeStatementParserRuleCall_5; }
		
		//Return
		public RuleCall getReturnParserRuleCall_6() { return cReturnParserRuleCall_6; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_7() { return cForLoopParserRuleCall_7; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_8() { return cWhileLoopParserRuleCall_8; }
	}
	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCodeEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//Effect keffects::Effect:
		//	super | CodeEffect;
		@Override public ParserRule getRule() { return rule; }
		
		//super | CodeEffect
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//super
		public RuleCall getEffectParserRuleCall_0() { return cEffectParserRuleCall_0; }
		
		//CodeEffect
		public RuleCall getCodeEffectParserRuleCall_1() { return cCodeEffectParserRuleCall_1; }
	}
	public class CodeEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.CodeEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodeEffectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CodeEffect sccharts::CodeEffect:
		//	{sccharts::CodeEffect} annotations+=Annotation*
		//	'{'
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::CodeEffect} annotations+=Annotation* '{' declarations+=Declaration* statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{sccharts::CodeEffect}
		public Action getCodeEffectAction_0() { return cCodeEffectAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ClassDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ClassDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPolicyClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cConstAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cConstConstKeyword_3_0 = (Keyword)cConstAssignment_3.eContents().get(0);
		private final Assignment cInputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cInputInputKeyword_4_0 = (Keyword)cInputAssignment_4.eContents().get(0);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cOutputOutputKeyword_5_0 = (Keyword)cOutputAssignment_5.eContents().get(0);
		private final Assignment cGlobalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cGlobalGlobalKeyword_6_0 = (Keyword)cGlobalAssignment_6.eContents().get(0);
		private final Assignment cStaticAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cStaticStaticKeyword_7_0 = (Keyword)cStaticAssignment_7.eContents().get(0);
		private final Assignment cHostAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cHostHostKeyword_8_0 = (Keyword)cHostAssignment_8.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cAlternatives_9.eContents().get(0);
		private final Assignment cTypeAssignment_9_0_0 = (Assignment)cGroup_9_0.eContents().get(0);
		private final RuleCall cTypeClassTypeEnumRuleCall_9_0_0_0 = (RuleCall)cTypeAssignment_9_0_0.eContents().get(0);
		private final Assignment cNameAssignment_9_0_1 = (Assignment)cGroup_9_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_9_0_1_0 = (RuleCall)cNameAssignment_9_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_0_2 = (Keyword)cGroup_9_0.eContents().get(2);
		private final Assignment cPolicyAssignment_9_0_3 = (Assignment)cGroup_9_0.eContents().get(3);
		private final RuleCall cPolicyPolicyRegionParserRuleCall_9_0_3_0 = (RuleCall)cPolicyAssignment_9_0_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_9_0_4 = (Assignment)cGroup_9_0.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_9_0_4_0 = (RuleCall)cDeclarationsAssignment_9_0_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_0_5 = (Keyword)cGroup_9_0.eContents().get(5);
		private final Group cGroup_9_1 = (Group)cAlternatives_9.eContents().get(1);
		private final Assignment cTypeAssignment_9_1_0 = (Assignment)cGroup_9_1.eContents().get(0);
		private final RuleCall cTypeStructTypeEnumRuleCall_9_1_0_0 = (RuleCall)cTypeAssignment_9_1_0.eContents().get(0);
		private final Assignment cNameAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_9_1_1_0 = (RuleCall)cNameAssignment_9_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1_2 = (Keyword)cGroup_9_1.eContents().get(2);
		private final Assignment cDeclarationsAssignment_9_1_3 = (Assignment)cGroup_9_1.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_3_0 = (RuleCall)cDeclarationsAssignment_9_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_1_4 = (Keyword)cGroup_9_1.eContents().get(4);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cValuedObjectsAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_10_0_0 = (RuleCall)cValuedObjectsAssignment_10_0.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cCommaKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_10_1_1_0 = (RuleCall)cValuedObjectsAssignment_10_1_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_11_0 = (RuleCall)cAnnotationsAssignment_11.eContents().get(0);
		
		//@Override
		//ClassDeclarationWOSemicolon kext::ClassDeclaration:
		//	{sccharts::PolicyClassDeclaration} annotations+=Annotation*
		//	access=AccessModifier?
		//	const?='const'?
		//	input?='input'?
		//	output?='output'?
		//	global?='global'?
		//	static?='static'?
		//	host?='host'? (type=ClassType
		//	name=EString?
		//	'{'
		//	policy=PolicyRegion?
		//	declarations+=DeclarationOrMethodWOSemicolon*
		//	'}'
		//	| type=StructType
		//	name=EString?
		//	'{'
		//	declarations+=DeclarationWOSemicolon*
		//	'}') (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		//	annotations+=CommentAnnotatonSL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::PolicyClassDeclaration} annotations+=Annotation* access=AccessModifier? const?='const'? input?='input'?
		//output?='output'? global?='global'? static?='static'? host?='host'? (type=ClassType name=EString? '{'
		//policy=PolicyRegion? declarations+=DeclarationOrMethodWOSemicolon* '}' | type=StructType name=EString? '{'
		//declarations+=DeclarationWOSemicolon* '}') (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::PolicyClassDeclaration}
		public Action getPolicyClassDeclarationAction_0() { return cPolicyClassDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//const?='const'?
		public Assignment getConstAssignment_3() { return cConstAssignment_3; }
		
		//'const'
		public Keyword getConstConstKeyword_3_0() { return cConstConstKeyword_3_0; }
		
		//input?='input'?
		public Assignment getInputAssignment_4() { return cInputAssignment_4; }
		
		//'input'
		public Keyword getInputInputKeyword_4_0() { return cInputInputKeyword_4_0; }
		
		//output?='output'?
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }
		
		//'output'
		public Keyword getOutputOutputKeyword_5_0() { return cOutputOutputKeyword_5_0; }
		
		//global?='global'?
		public Assignment getGlobalAssignment_6() { return cGlobalAssignment_6; }
		
		//'global'
		public Keyword getGlobalGlobalKeyword_6_0() { return cGlobalGlobalKeyword_6_0; }
		
		//static?='static'?
		public Assignment getStaticAssignment_7() { return cStaticAssignment_7; }
		
		//'static'
		public Keyword getStaticStaticKeyword_7_0() { return cStaticStaticKeyword_7_0; }
		
		//host?='host'?
		public Assignment getHostAssignment_8() { return cHostAssignment_8; }
		
		//'host'
		public Keyword getHostHostKeyword_8_0() { return cHostHostKeyword_8_0; }
		
		//(type=ClassType name=EString? '{' policy=PolicyRegion? declarations+=DeclarationOrMethodWOSemicolon* '}' |
		//type=StructType name=EString? '{' declarations+=DeclarationWOSemicolon* '}')
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//type=ClassType name=EString? '{' policy=PolicyRegion? declarations+=DeclarationOrMethodWOSemicolon* '}'
		public Group getGroup_9_0() { return cGroup_9_0; }
		
		//type=ClassType
		public Assignment getTypeAssignment_9_0_0() { return cTypeAssignment_9_0_0; }
		
		//ClassType
		public RuleCall getTypeClassTypeEnumRuleCall_9_0_0_0() { return cTypeClassTypeEnumRuleCall_9_0_0_0; }
		
		//name=EString?
		public Assignment getNameAssignment_9_0_1() { return cNameAssignment_9_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_9_0_1_0() { return cNameEStringParserRuleCall_9_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_0_2() { return cLeftCurlyBracketKeyword_9_0_2; }
		
		//policy=PolicyRegion?
		public Assignment getPolicyAssignment_9_0_3() { return cPolicyAssignment_9_0_3; }
		
		//PolicyRegion
		public RuleCall getPolicyPolicyRegionParserRuleCall_9_0_3_0() { return cPolicyPolicyRegionParserRuleCall_9_0_3_0; }
		
		//declarations+=DeclarationOrMethodWOSemicolon*
		public Assignment getDeclarationsAssignment_9_0_4() { return cDeclarationsAssignment_9_0_4; }
		
		//DeclarationOrMethodWOSemicolon
		public RuleCall getDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_9_0_4_0() { return cDeclarationsDeclarationOrMethodWOSemicolonParserRuleCall_9_0_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_0_5() { return cRightCurlyBracketKeyword_9_0_5; }
		
		//type=StructType name=EString? '{' declarations+=DeclarationWOSemicolon* '}'
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//type=StructType
		public Assignment getTypeAssignment_9_1_0() { return cTypeAssignment_9_1_0; }
		
		//StructType
		public RuleCall getTypeStructTypeEnumRuleCall_9_1_0_0() { return cTypeStructTypeEnumRuleCall_9_1_0_0; }
		
		//name=EString?
		public Assignment getNameAssignment_9_1_1() { return cNameAssignment_9_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_9_1_1_0() { return cNameEStringParserRuleCall_9_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_1_2() { return cLeftCurlyBracketKeyword_9_1_2; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_9_1_3() { return cDeclarationsAssignment_9_1_3; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_3_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_9_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_1_4() { return cRightCurlyBracketKeyword_9_1_4; }
		
		//(valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
		public Group getGroup_10() { return cGroup_10; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_10_0() { return cValuedObjectsAssignment_10_0; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_10_0_0() { return cValuedObjectsValuedObjectParserRuleCall_10_0_0; }
		
		//(',' valuedObjects+=ValuedObject)*
		public Group getGroup_10_1() { return cGroup_10_1; }
		
		//','
		public Keyword getCommaKeyword_10_1_0() { return cCommaKeyword_10_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_10_1_1() { return cValuedObjectsAssignment_10_1_1; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_10_1_1_0() { return cValuedObjectsValuedObjectParserRuleCall_10_1_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_11() { return cAnnotationsAssignment_11; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_11_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_11_0; }
	}
	public class PolicyRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PolicyRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesPolicyStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PolicyRegion sccharts::PolicyRegion:
		//	'policy' name=ID label=STRING?
		//	'{'
		//	declarations+=DeclarationWOSemicolon*
		//	states+=PolicyState+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'policy' name=ID label=STRING? '{' declarations+=DeclarationWOSemicolon* states+=PolicyState+ '}'
		public Group getGroup() { return cGroup; }
		
		//'policy'
		public Keyword getPolicyKeyword_0() { return cPolicyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_4_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_4_0; }
		
		//states+=PolicyState+
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }
		
		//PolicyState
		public RuleCall getStatesPolicyStateParserRuleCall_5_0() { return cStatesPolicyStateParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PolicyStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PolicyState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInitialInitialKeyword_1_0 = (Keyword)cInitialAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Assignment cOutgoingTransitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutgoingTransitionsPolicyTransitionParserRuleCall_5_0 = (RuleCall)cOutgoingTransitionsAssignment_5.eContents().get(0);
		
		//PolicyState sccharts::State:
		//	annotations+=Annotation*
		//	initial?='initial'?
		//	'state' name=ID label=STRING?
		//	outgoingTransitions+=PolicyTransition*;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* initial?='initial'? 'state' name=ID label=STRING? outgoingTransitions+=PolicyTransition*
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_1_0() { return cInitialInitialKeyword_1_0; }
		
		//'state'
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }
		
		//outgoingTransitions+=PolicyTransition*
		public Assignment getOutgoingTransitionsAssignment_5() { return cOutgoingTransitionsAssignment_5; }
		
		//PolicyTransition
		public RuleCall getOutgoingTransitionsPolicyTransitionParserRuleCall_5_0() { return cOutgoingTransitionsPolicyTransitionParserRuleCall_5_0; }
	}
	public class PolicyTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PolicyTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cTriggerAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cTriggerLogicalOrExpressionParserRuleCall_2_1_0_0 = (RuleCall)cTriggerAssignment_2_1_0.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cTriggerValuedObjectReferenceParserRuleCall_2_1_1_0 = (RuleCall)cTriggerAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cEffectsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cEffectsPureEmissionParserRuleCall_2_2_1_0 = (RuleCall)cEffectsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cEffectsAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cEffectsPureEmissionParserRuleCall_2_2_2_1_0 = (RuleCall)cEffectsAssignment_2_2_2_1.eContents().get(0);
		private final Keyword cGoToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateStateCrossReference_4_0 = (CrossReference)cTargetStateAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateStateCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLabelKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cLabelAssignment_5_1.eContents().get(0);
		
		//PolicyTransition sccharts::Transition:
		//	{sccharts::Transition} annotations+=RestrictedTypeAnnotation* ('if' (trigger=LogicalOrExpression |
		//	trigger=ValuedObjectReference) (':' effects+=PureEmission (',' effects+=PureEmission)*)?)?
		//	'go to'
		//	targetState=[sccharts::State] ('label' label=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{sccharts::Transition} annotations+=RestrictedTypeAnnotation* ('if' (trigger=LogicalOrExpression |
		//trigger=ValuedObjectReference) (':' effects+=PureEmission (',' effects+=PureEmission)*)?)? 'go to'
		//targetState=[sccharts::State] ('label' label=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{sccharts::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_1_0; }
		
		//('if' (trigger=LogicalOrExpression | trigger=ValuedObjectReference) (':' effects+=PureEmission (','
		//effects+=PureEmission)*)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//(trigger=LogicalOrExpression | trigger=ValuedObjectReference)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//trigger=LogicalOrExpression
		public Assignment getTriggerAssignment_2_1_0() { return cTriggerAssignment_2_1_0; }
		
		//LogicalOrExpression
		public RuleCall getTriggerLogicalOrExpressionParserRuleCall_2_1_0_0() { return cTriggerLogicalOrExpressionParserRuleCall_2_1_0_0; }
		
		//trigger=ValuedObjectReference
		public Assignment getTriggerAssignment_2_1_1() { return cTriggerAssignment_2_1_1; }
		
		//ValuedObjectReference
		public RuleCall getTriggerValuedObjectReferenceParserRuleCall_2_1_1_0() { return cTriggerValuedObjectReferenceParserRuleCall_2_1_1_0; }
		
		//(':' effects+=PureEmission (',' effects+=PureEmission)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//':'
		public Keyword getColonKeyword_2_2_0() { return cColonKeyword_2_2_0; }
		
		//effects+=PureEmission
		public Assignment getEffectsAssignment_2_2_1() { return cEffectsAssignment_2_2_1; }
		
		//PureEmission
		public RuleCall getEffectsPureEmissionParserRuleCall_2_2_1_0() { return cEffectsPureEmissionParserRuleCall_2_2_1_0; }
		
		//(',' effects+=PureEmission)*
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_2_0() { return cCommaKeyword_2_2_2_0; }
		
		//effects+=PureEmission
		public Assignment getEffectsAssignment_2_2_2_1() { return cEffectsAssignment_2_2_2_1; }
		
		//PureEmission
		public RuleCall getEffectsPureEmissionParserRuleCall_2_2_2_1_0() { return cEffectsPureEmissionParserRuleCall_2_2_2_1_0; }
		
		//'go to'
		public Keyword getGoToKeyword_3() { return cGoToKeyword_3; }
		
		//targetState=[sccharts::State]
		public Assignment getTargetStateAssignment_4() { return cTargetStateAssignment_4; }
		
		//[sccharts::State]
		public CrossReference getTargetStateStateCrossReference_4_0() { return cTargetStateStateCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_4_0_1() { return cTargetStateStateIDTerminalRuleCall_4_0_1; }
		
		//('label' label=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'label'
		public Keyword getLabelKeyword_5_0() { return cLabelKeyword_5_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_5_1() { return cLabelAssignment_5_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_1_0() { return cLabelSTRINGTerminalRuleCall_5_1_0; }
	}
	public class DeclarationOrMethodWithKeywordWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DeclarationOrMethodWithKeywordWOSemicolon");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationWOSemicolonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordMethodDeclarationWOSemicolonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeclarationOrMethodWithKeywordWOSemicolon kexpressions::Declaration:
		//	DeclarationWOSemicolon | KeywordMethodDeclarationWOSemicolon;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclarationWOSemicolon | KeywordMethodDeclarationWOSemicolon
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclarationWOSemicolon
		public RuleCall getDeclarationWOSemicolonParserRuleCall_0() { return cDeclarationWOSemicolonParserRuleCall_0; }
		
		//KeywordMethodDeclarationWOSemicolon
		public RuleCall getKeywordMethodDeclarationWOSemicolonParserRuleCall_1() { return cKeywordMethodDeclarationWOSemicolonParserRuleCall_1; }
	}
	public class KeywordMethodDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.KeywordMethodDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodImplementationDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Keyword cMethodKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeMethodReturnTypeEnumRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_5_0 = (RuleCall)cValuedObjectsAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_1_0 = (RuleCall)cParameterDeclarationsAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cCommaKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_2_1_0 = (RuleCall)cParameterDeclarationsAssignment_6_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_0_3 = (Keyword)cGroup_6_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cScheduleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cScheduleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_7_1_0 = (RuleCall)cScheduleAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cAnnotationsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_8_1_0 = (RuleCall)cAnnotationsAssignment_8_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_8_2_0 = (RuleCall)cDeclarationsAssignment_8_2.eContents().get(0);
		private final Assignment cStatementsAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_8_3_0 = (RuleCall)cStatementsAssignment_8_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		//KeywordMethodDeclarationWOSemicolon kexpressions::MethodDeclaration:
		//	{scl::MethodImplementationDeclaration} annotations+=Annotation*
		//	access=AccessModifier?
		//	'method'
		//	returnType=MethodReturnType?
		//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
		//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
		//	('{'
		//	annotations+=CommentAnnotatonSL?
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{scl::MethodImplementationDeclaration} annotations+=Annotation* access=AccessModifier? 'method'
		//returnType=MethodReturnType? valuedObjects+=SimpleValuedObject ('('
		//parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)* ')'
		//| '()') ('schedule' schedule+=ScheduleObjectReference+)? ('{' annotations+=CommentAnnotatonSL?
		//declarations+=Declaration* statements+=Statement* '}')?
		public Group getGroup() { return cGroup; }
		
		//{scl::MethodImplementationDeclaration}
		public Action getMethodImplementationDeclarationAction_0() { return cMethodImplementationDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//'method'
		public Keyword getMethodKeyword_3() { return cMethodKeyword_3; }
		
		//returnType=MethodReturnType?
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }
		
		//MethodReturnType
		public RuleCall getReturnTypeMethodReturnTypeEnumRuleCall_4_0() { return cReturnTypeMethodReturnTypeEnumRuleCall_4_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_5() { return cValuedObjectsAssignment_5; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_5_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_5_0; }
		
		//('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		//')' | '()')
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		//')'
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0_0() { return cLeftParenthesisKeyword_6_0_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_6_0_1() { return cParameterDeclarationsAssignment_6_0_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_1_0; }
		
		//(',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }
		
		//','
		public Keyword getCommaKeyword_6_0_2_0() { return cCommaKeyword_6_0_2_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_6_0_2_1() { return cParameterDeclarationsAssignment_6_0_2_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_2_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_6_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_0_3() { return cRightParenthesisKeyword_6_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_6_1() { return cLeftParenthesisRightParenthesisKeyword_6_1; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'schedule'
		public Keyword getScheduleKeyword_7_0() { return cScheduleKeyword_7_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_7_1() { return cScheduleAssignment_7_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_7_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_7_1_0; }
		
		//('{' annotations+=CommentAnnotatonSL? declarations+=Declaration* statements+=Statement* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_8_1() { return cAnnotationsAssignment_8_1; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_8_1_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_8_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_8_2() { return cDeclarationsAssignment_8_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_8_2_0() { return cDeclarationsDeclarationParserRuleCall_8_2_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_8_3() { return cStatementsAssignment_8_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_3_0() { return cStatementsStatementParserRuleCall_8_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
	}
	public class HiddenKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.HiddenKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAbortKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJoinKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShallowKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//// als: added clock for timed automata
		//// -------------- //
		////  Helper Rules  // 
		//// -------------- //
		//// These are implicit keywords due to rules such as 'go to'
		//HiddenKeywords:
		//	'go' | 'abort' | 'join' | 'shallow';
		@Override public ParserRule getRule() { return rule; }
		
		//'go' | 'abort' | 'join' | 'shallow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//'abort'
		public Keyword getAbortKeyword_1() { return cAbortKeyword_1; }
		
		//'join'
		public Keyword getJoinKeyword_2() { return cJoinKeyword_2; }
		
		//'shallow'
		public Keyword getShallowKeyword_3() { return cShallowKeyword_3; }
	}
	
	public class PreemptionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.PreemptionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKABORTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKABORTGoToKeyword_0_0 = (Keyword)cWEAKABORTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGABORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGABORTAbortToKeyword_1_0 = (Keyword)cSTRONGABORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTERMINATIONJoinToKeyword_2_0 = (Keyword)cTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PreemptionType returns sccharts::PreemptionType:
		//	WEAKABORT='go to' | STRONGABORT='abort to' | TERMINATION='join to';
		public EnumRule getRule() { return rule; }
		
		//WEAKABORT='go to' | STRONGABORT='abort to' | TERMINATION='join to'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WEAKABORT='go to'
		public EnumLiteralDeclaration getWEAKABORTEnumLiteralDeclaration_0() { return cWEAKABORTEnumLiteralDeclaration_0; }
		
		//'go to'
		public Keyword getWEAKABORTGoToKeyword_0_0() { return cWEAKABORTGoToKeyword_0_0; }
		
		//STRONGABORT='abort to'
		public EnumLiteralDeclaration getSTRONGABORTEnumLiteralDeclaration_1() { return cSTRONGABORTEnumLiteralDeclaration_1; }
		
		//'abort to'
		public Keyword getSTRONGABORTAbortToKeyword_1_0() { return cSTRONGABORTAbortToKeyword_1_0; }
		
		//TERMINATION='join to'
		public EnumLiteralDeclaration getTERMINATIONEnumLiteralDeclaration_2() { return cTERMINATIONEnumLiteralDeclaration_2; }
		
		//'join to'
		public Keyword getTERMINATIONJoinToKeyword_2_0() { return cTERMINATIONJoinToKeyword_2_0; }
	}
	public class DelayTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DelayType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNDEFINEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNDEFINEDUndefinedKeyword_0_0 = (Keyword)cUNDEFINEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDELAYEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDELAYEDDelayedKeyword_1_0 = (Keyword)cDELAYEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIMMEDIATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIMMEDIATEImmediateKeyword_2_0 = (Keyword)cIMMEDIATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAUTOMATICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAUTOMATICAutoKeyword_3_0 = (Keyword)cAUTOMATICEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DelayType returns sccharts::DelayType:
		//	UNDEFINED='undefined' | DELAYED='delayed' | IMMEDIATE='immediate' | AUTOMATIC='auto';
		public EnumRule getRule() { return rule; }
		
		//UNDEFINED='undefined' | DELAYED='delayed' | IMMEDIATE='immediate' | AUTOMATIC='auto'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNDEFINED='undefined'
		public EnumLiteralDeclaration getUNDEFINEDEnumLiteralDeclaration_0() { return cUNDEFINEDEnumLiteralDeclaration_0; }
		
		//'undefined'
		public Keyword getUNDEFINEDUndefinedKeyword_0_0() { return cUNDEFINEDUndefinedKeyword_0_0; }
		
		//DELAYED='delayed'
		public EnumLiteralDeclaration getDELAYEDEnumLiteralDeclaration_1() { return cDELAYEDEnumLiteralDeclaration_1; }
		
		//'delayed'
		public Keyword getDELAYEDDelayedKeyword_1_0() { return cDELAYEDDelayedKeyword_1_0; }
		
		//IMMEDIATE='immediate'
		public EnumLiteralDeclaration getIMMEDIATEEnumLiteralDeclaration_2() { return cIMMEDIATEEnumLiteralDeclaration_2; }
		
		//'immediate'
		public Keyword getIMMEDIATEImmediateKeyword_2_0() { return cIMMEDIATEImmediateKeyword_2_0; }
		
		//AUTOMATIC='auto'
		public EnumLiteralDeclaration getAUTOMATICEnumLiteralDeclaration_3() { return cAUTOMATICEnumLiteralDeclaration_3; }
		
		//'auto'
		public Keyword getAUTOMATICAutoKeyword_3_0() { return cAUTOMATICAutoKeyword_3_0; }
	}
	public class HistoryTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.HistoryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRESETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRESETResetKeyword_0_0 = (Keyword)cRESETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHALLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHALLOWShallowHistoryKeyword_1_0 = (Keyword)cSHALLOWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDEEPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDEEPHistoryKeyword_2_0 = (Keyword)cDEEPEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum HistoryType returns sccharts::HistoryType:
		//	RESET='reset' | SHALLOW='shallow history' | DEEP='history';
		public EnumRule getRule() { return rule; }
		
		//RESET='reset' | SHALLOW='shallow history' | DEEP='history'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RESET='reset'
		public EnumLiteralDeclaration getRESETEnumLiteralDeclaration_0() { return cRESETEnumLiteralDeclaration_0; }
		
		//'reset'
		public Keyword getRESETResetKeyword_0_0() { return cRESETResetKeyword_0_0; }
		
		//SHALLOW='shallow history'
		public EnumLiteralDeclaration getSHALLOWEnumLiteralDeclaration_1() { return cSHALLOWEnumLiteralDeclaration_1; }
		
		//'shallow history'
		public Keyword getSHALLOWShallowHistoryKeyword_1_0() { return cSHALLOWShallowHistoryKeyword_1_0; }
		
		//DEEP='history'
		public EnumLiteralDeclaration getDEEPEnumLiteralDeclaration_2() { return cDEEPEnumLiteralDeclaration_2; }
		
		//'history'
		public Keyword getDEEPHistoryKeyword_2_0() { return cDEEPHistoryKeyword_2_0; }
	}
	public class DeferredTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.DeferredType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSHALLOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSHALLOWDeferredKeyword_0_0 = (Keyword)cSHALLOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEEPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEEPDeepDeferredKeyword_1_0 = (Keyword)cDEEPEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DeferredType returns sccharts::DeferredType:
		//	SHALLOW='deferred' | DEEP='deep deferred';
		public EnumRule getRule() { return rule; }
		
		//SHALLOW='deferred' | DEEP='deep deferred'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SHALLOW='deferred'
		public EnumLiteralDeclaration getSHALLOWEnumLiteralDeclaration_0() { return cSHALLOWEnumLiteralDeclaration_0; }
		
		//'deferred'
		public Keyword getSHALLOWDeferredKeyword_0_0() { return cSHALLOWDeferredKeyword_0_0; }
		
		//DEEP='deep deferred'
		public EnumLiteralDeclaration getDEEPEnumLiteralDeclaration_1() { return cDEEPEnumLiteralDeclaration_1; }
		
		//'deep deferred'
		public Keyword getDEEPDeepDeferredKeyword_1_0() { return cDEEPDeepDeferredKeyword_1_0; }
	}
	public class ValueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCTX.ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPureKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBoolKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTIntKeyword_2_0 = (Keyword)cINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFLOATFloatKeyword_3_0 = (Keyword)cFLOATEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTRINGStringKeyword_4_0 = (Keyword)cSTRINGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCLOCKEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCLOCKClockKeyword_5_0 = (Keyword)cCLOCKEnumLiteralDeclaration_5.eContents().get(0);
		
		//@Override
		//enum ValueType returns kexpressions::ValueType:
		//	PURE="pure" | BOOL="bool" |
		//	INT="int" | FLOAT="float" |
		//	STRING="string" |
		//	CLOCK="clock";
		public EnumRule getRule() { return rule; }
		
		//PURE="pure" | BOOL="bool" | INT="int" | FLOAT="float" | STRING="string" | CLOCK="clock"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PURE="pure"
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }
		
		//"pure"
		public Keyword getPUREPureKeyword_0_0() { return cPUREPureKeyword_0_0; }
		
		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }
		
		//"bool"
		public Keyword getBOOLBoolKeyword_1_0() { return cBOOLBoolKeyword_1_0; }
		
		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_2() { return cINTEnumLiteralDeclaration_2; }
		
		//"int"
		public Keyword getINTIntKeyword_2_0() { return cINTIntKeyword_2_0; }
		
		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_3() { return cFLOATEnumLiteralDeclaration_3; }
		
		//"float"
		public Keyword getFLOATFloatKeyword_3_0() { return cFLOATFloatKeyword_3_0; }
		
		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_4() { return cSTRINGEnumLiteralDeclaration_4; }
		
		//"string"
		public Keyword getSTRINGStringKeyword_4_0() { return cSTRINGStringKeyword_4_0; }
		
		//CLOCK="clock"
		public EnumLiteralDeclaration getCLOCKEnumLiteralDeclaration_5() { return cCLOCKEnumLiteralDeclaration_5; }
		
		//"clock"
		public Keyword getCLOCKClockKeyword_5_0() { return cCLOCKClockKeyword_5_0; }
	}
	
	private final SCChartsElements pSCCharts;
	private final RootStateElements pRootState;
	private final StateElements pState;
	private final ImplicitStateElements pImplicitState;
	private final ScopeCallElements pScopeCall;
	private final ScopeParameterElements pScopeParameter;
	private final BoolScheduleExpressionElements pBoolScheduleExpression;
	private final TransitionElements pTransition;
	private final RegionElements pRegion;
	private final ImplicitControlflowRegionElements pImplicitControlflowRegion;
	private final ControlflowRegionElements pControlflowRegion;
	private final DataflowRegionElements pDataflowRegion;
	private final IntOrReferenceElements pIntOrReference;
	private final CounterVariableElements pCounterVariable;
	private final LocalActionElements pLocalAction;
	private final EntryActionElements pEntryAction;
	private final DuringActionElements pDuringAction;
	private final ExitActionElements pExitAction;
	private final SuspendActionElements pSuspendAction;
	private final PrecedingActionElements pPrecedingAction;
	private final SucceedingActionElements pSucceedingAction;
	private final PeriodActionElements pPeriodAction;
	private final DeclarationElements pDeclaration;
	private final StatementElements pStatement;
	private final EffectElements pEffect;
	private final CodeEffectElements pCodeEffect;
	private final ClassDeclarationWOSemicolonElements pClassDeclarationWOSemicolon;
	private final PolicyRegionElements pPolicyRegion;
	private final PolicyStateElements pPolicyState;
	private final PolicyTransitionElements pPolicyTransition;
	private final DeclarationOrMethodWithKeywordWOSemicolonElements pDeclarationOrMethodWithKeywordWOSemicolon;
	private final KeywordMethodDeclarationWOSemicolonElements pKeywordMethodDeclarationWOSemicolon;
	private final PreemptionTypeElements ePreemptionType;
	private final DelayTypeElements eDelayType;
	private final HistoryTypeElements eHistoryType;
	private final DeferredTypeElements eDeferredType;
	private final ValueTypeElements eValueType;
	private final HiddenKeywordsElements pHiddenKeywords;
	
	private final Grammar grammar;
	
	private final SCLGrammarAccess gaSCL;
	
	private final KExtGrammarAccess gaKExt;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCTXGrammarAccess(GrammarProvider grammarProvider,
			SCLGrammarAccess gaSCL,
			KExtGrammarAccess gaKExt,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSCL = gaSCL;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pSCCharts = new SCChartsElements();
		this.pRootState = new RootStateElements();
		this.pState = new StateElements();
		this.pImplicitState = new ImplicitStateElements();
		this.pScopeCall = new ScopeCallElements();
		this.pScopeParameter = new ScopeParameterElements();
		this.pBoolScheduleExpression = new BoolScheduleExpressionElements();
		this.pTransition = new TransitionElements();
		this.pRegion = new RegionElements();
		this.pImplicitControlflowRegion = new ImplicitControlflowRegionElements();
		this.pControlflowRegion = new ControlflowRegionElements();
		this.pDataflowRegion = new DataflowRegionElements();
		this.pIntOrReference = new IntOrReferenceElements();
		this.pCounterVariable = new CounterVariableElements();
		this.pLocalAction = new LocalActionElements();
		this.pEntryAction = new EntryActionElements();
		this.pDuringAction = new DuringActionElements();
		this.pExitAction = new ExitActionElements();
		this.pSuspendAction = new SuspendActionElements();
		this.pPrecedingAction = new PrecedingActionElements();
		this.pSucceedingAction = new SucceedingActionElements();
		this.pPeriodAction = new PeriodActionElements();
		this.pDeclaration = new DeclarationElements();
		this.pStatement = new StatementElements();
		this.pEffect = new EffectElements();
		this.pCodeEffect = new CodeEffectElements();
		this.pClassDeclarationWOSemicolon = new ClassDeclarationWOSemicolonElements();
		this.pPolicyRegion = new PolicyRegionElements();
		this.pPolicyState = new PolicyStateElements();
		this.pPolicyTransition = new PolicyTransitionElements();
		this.pDeclarationOrMethodWithKeywordWOSemicolon = new DeclarationOrMethodWithKeywordWOSemicolonElements();
		this.pKeywordMethodDeclarationWOSemicolon = new KeywordMethodDeclarationWOSemicolonElements();
		this.ePreemptionType = new PreemptionTypeElements();
		this.eDelayType = new DelayTypeElements();
		this.eHistoryType = new HistoryTypeElements();
		this.eDeferredType = new DeferredTypeElements();
		this.eValueType = new ValueTypeElements();
		this.pHiddenKeywords = new HiddenKeywordsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sccharts.text.SCTX".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}
	
	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////generate sct3 "http://kieler.cs.cau.de/sccharts/textual3/0.1.0"
	//// ---------------- //
	////  SCCharts Rules  // 
	//// ---------------- //
	//SCCharts sccharts::SCCharts:
	//	(pragmas+=Pragma
	//	|
	//	'import' imports+=EString)*
	//	rootStates+=RootState*;
	public SCChartsElements getSCChartsAccess() {
		return pSCCharts;
	}
	
	public ParserRule getSCChartsRule() {
		return getSCChartsAccess().getRule();
	}
	
	//// ------------- //
	////  State Rules  // 
	//// ------------- //
	//RootState sccharts::State:
	//	annotations+=Annotation*
	//	'scchart' name=ExtendedID label=STRING? ('extends' baseStates+=[sccharts::State] (','
	//	baseStates+=[sccharts::State])*)?
	//	'{'
	//	declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
	//	actions+=LocalAction* (regions+=ImplicitControlflowRegion | regions+=Region*)
	//	'}';
	public RootStateElements getRootStateAccess() {
		return pRootState;
	}
	
	public ParserRule getRootStateRule() {
		return getRootStateAccess().getRule();
	}
	
	//State sccharts::State:
	//	annotations+=Annotation*
	//	initial?='initial'?
	//	final?='final'?
	//	violation?='violation'?
	//	connector?='connector'?
	//	=> 'state' name=ID label=STRING? ('is' reference=ScopeCall ('schedule' schedule+=ScheduleObjectReference+)?
	//	| ('extends' baseStates+=[sccharts::State] (',' baseStates+=[sccharts::State])*)? ('schedule'
	//	schedule+=ScheduleObjectReference+)?
	//	'{'
	//	declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
	//	actions+=LocalAction* (regions+=ImplicitControlflowRegion | regions+=Region*)
	//	'}')?
	//	outgoingTransitions+=Transition*;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//ImplicitState sccharts::State:
	//	{sccharts::State} regions+=Region+;
	public ImplicitStateElements getImplicitStateAccess() {
		return pImplicitState;
	}
	
	public ParserRule getImplicitStateRule() {
		return getImplicitStateAccess().getRule();
	}
	
	//ScopeCall sccharts::ScopeCall:
	//	super?='super.'?
	//	scope=[sccharts::Scope] ('(' parameters+=ScopeParameter (',' parameters+=ScopeParameter)* ')' | '(' ')')?;
	public ScopeCallElements getScopeCallAccess() {
		return pScopeCall;
	}
	
	public ParserRule getScopeCallRule() {
		return getScopeCallAccess().getRule();
	}
	
	//ScopeParameter kexpressions::Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=Expression ('to' explicitBinding=[kexpressions::ValuedObject] ('[' explicitBindingIndices+=Expression
	//	']')*)?;
	public ScopeParameterElements getScopeParameterAccess() {
		return pScopeParameter;
	}
	
	public ParserRule getScopeParameterRule() {
		return getScopeParameterAccess().getRule();
	}
	
	//// ------------------ //
	////  Transition Rules  // 
	//// ------------------ //
	//BoolScheduleExpression kexpressions::Expression:
	//	LogicalOrExpression ('schedule' schedule+=ScheduleObjectReference)?;
	public BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return pBoolScheduleExpression;
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//Transition sccharts::Transition:
	//	{sccharts::Transition} annotations+=RestrictedTypeAnnotation*
	//	/*
	//     * Order is: target last. Both options with target first or last would results in the following ambguity (KISEMA-1399):
	//     * go to A
	//     *  if I
	//     *  do O
	//     * go to B 
	//     */
	//	delay=DelayType? ('if' triggerDelay=INT? (trigger=BoolScheduleExpression | trigger=AtomicExpression) ('Pr='
	//	triggerProbability=FLOAT)? nondeterministic?='nondeterministic'?)? ('do' effects+=Effect (';' effects+=Effect)*)?
	//	preemption=PreemptionType
	//	targetState=[sccharts::State] deferred=DeferredType?
	//	history=HistoryType? ('label' label=STRING)?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//// -------------- //
	////  Region Rules  // 
	//// -------------- //
	//Region sccharts::Region:
	//	ControlflowRegion | DataflowRegion;
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}
	
	//ImplicitControlflowRegion sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} states+=State+;
	public ImplicitControlflowRegionElements getImplicitControlflowRegionAccess() {
		return pImplicitControlflowRegion;
	}
	
	public ParserRule getImplicitControlflowRegionRule() {
		return getImplicitControlflowRegionAccess().getRule();
	}
	
	//ControlflowRegion sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} annotations+=Annotation*
	//	override?='override'?
	//	final?='final'?
	//	'region' name=ExtendedID? label=STRING? ('is'
	//	reference=ScopeCall ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)?
	//	('schedule' schedule+=ScheduleObjectReference+)?
	//	| ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to' forEnd=IntOrReference)?)? ('schedule'
	//	schedule+=ScheduleObjectReference+)? ('{'
	//	declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
	//	actions+=LocalAction* (states+=ImplicitState | states+=State+)
	//	'}'
	//	|
	//	':'
	//	declarations+=DeclarationOrMethodWithKeywordWOSemicolon*
	//	actions+=LocalAction*
	//	states+=State*));
	public ControlflowRegionElements getControlflowRegionAccess() {
		return pControlflowRegion;
	}
	
	public ParserRule getControlflowRegionRule() {
		return getControlflowRegionAccess().getRule();
	}
	
	//DataflowRegion sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} annotations+=Annotation*
	//	override?='override'?
	//	'dataflow' name=ExtendedID? label=STRING? ('for' counterVariable=CounterVariable ':' forStart=IntOrReference ('to'
	//	forEnd=IntOrReference)?)? ('schedule' schedule+=ScheduleObjectReference+)?
	//	once?='once'? ('{'
	//	declarations+=DeclarationWOSemicolon*
	//	equations+=Assignment*
	//	'}'
	//	|
	//	':'
	//	declarations+=DeclarationWOSemicolon*
	//	equations+=Assignment*);
	public DataflowRegionElements getDataflowRegionAccess() {
		return pDataflowRegion;
	}
	
	public ParserRule getDataflowRegionRule() {
		return getDataflowRegionAccess().getRule();
	}
	
	//IntOrReference kexpressions::Expression:
	//	IntValue | ValuedObjectReference;
	public IntOrReferenceElements getIntOrReferenceAccess() {
		return pIntOrReference;
	}
	
	public ParserRule getIntOrReferenceRule() {
		return getIntOrReferenceAccess().getRule();
	}
	
	//CounterVariable kexpressions::ValuedObject:
	//	name=PrimeID;
	public CounterVariableElements getCounterVariableAccess() {
		return pCounterVariable;
	}
	
	public ParserRule getCounterVariableRule() {
		return getCounterVariableAccess().getRule();
	}
	
	//// -------------- //
	////  Action Rules  // 
	//// -------------- //
	//LocalAction sccharts::LocalAction:
	//	EntryAction | DuringAction | ExitAction | SuspendAction | PrecedingAction | SucceedingAction | PeriodAction;
	public LocalActionElements getLocalActionAccess() {
		return pLocalAction;
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}
	
	//EntryAction sccharts::EntryAction:
	//	{sccharts::EntryAction}
	//	'entry' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';'
	//	effects+=Effect)*)? ('label' label=STRING)?;
	public EntryActionElements getEntryActionAccess() {
		return pEntryAction;
	}
	
	public ParserRule getEntryActionRule() {
		return getEntryActionAccess().getRule();
	}
	
	//DuringAction sccharts::DuringAction:
	//	{sccharts::DuringAction} delay=DelayType? 'during' ('if' triggerDelay=INT? trigger=BoolScheduleExpression ('Pr='
	//	triggerProbability=FLOAT)?)? ('do' effects+=Effect (';' effects+=Effect)*)? ('label' label=STRING)?;
	public DuringActionElements getDuringActionAccess() {
		return pDuringAction;
	}
	
	public ParserRule getDuringActionRule() {
		return getDuringActionAccess().getRule();
	}
	
	//ExitAction sccharts::ExitAction:
	//	{sccharts::ExitAction}
	//	'exit' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';'
	//	effects+=Effect)*)? ('label' label=STRING)?;
	public ExitActionElements getExitActionAccess() {
		return pExitAction;
	}
	
	public ParserRule getExitActionRule() {
		return getExitActionAccess().getRule();
	}
	
	//SuspendAction sccharts::SuspendAction:
	//	{sccharts::SuspendAction} delay=DelayType? weak?='weak'? 'suspend' ('if' triggerDelay=INT?
	//	trigger=BoolScheduleExpression ('Pr=' triggerProbability=FLOAT)?)? ('label' label=STRING)?;
	public SuspendActionElements getSuspendActionAccess() {
		return pSuspendAction;
	}
	
	public ParserRule getSuspendActionRule() {
		return getSuspendActionAccess().getRule();
	}
	
	//PrecedingAction sccharts::PrecedingAction:
	//	{sccharts::PrecedingAction}
	//	'preceding' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';'
	//	effects+=Effect)*)? ('label' label=STRING)?;
	public PrecedingActionElements getPrecedingActionAccess() {
		return pPrecedingAction;
	}
	
	public ParserRule getPrecedingActionRule() {
		return getPrecedingActionAccess().getRule();
	}
	
	//SucceedingAction sccharts::SucceedingAction:
	//	{sccharts::SucceedingAction}
	//	'succeeding' ('if' trigger=BoolScheduleExpression ('Pr' triggerProbability=FLOAT)?)? ('do' effects+=Effect (';'
	//	effects+=Effect)*)? ('label' label=STRING)?;
	public SucceedingActionElements getSucceedingActionAccess() {
		return pSucceedingAction;
	}
	
	public ParserRule getSucceedingActionRule() {
		return getSucceedingActionAccess().getRule();
	}
	
	//PeriodAction sccharts::PeriodAction:
	//	{sccharts::PeriodAction} annotations+=RestrictedTypeAnnotation*
	//	delay=DelayType? 'period' trigger=ValuedExpression ('label' label=STRING)?;
	public PeriodActionElements getPeriodActionAccess() {
		return pPeriodAction;
	}
	
	public ParserRule getPeriodActionRule() {
		return getPeriodActionAccess().getRule();
	}
	
	//@Override
	//Declaration kexpressions::Declaration:
	//	super | DeclarationWOSemicolon;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//@Override
	//Statement scl::Statement:
	//	SclAssignment | SclPostfixAssignment | Label | Conditional | Goto | ScopeStatement | Return | ForLoop | WhileLoop;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//@Override
	//Effect keffects::Effect:
	//	super | CodeEffect;
	public EffectElements getEffectAccess() {
		return pEffect;
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//CodeEffect sccharts::CodeEffect:
	//	{sccharts::CodeEffect} annotations+=Annotation*
	//	'{'
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}';
	public CodeEffectElements getCodeEffectAccess() {
		return pCodeEffect;
	}
	
	public ParserRule getCodeEffectRule() {
		return getCodeEffectAccess().getRule();
	}
	
	//@Override
	//ClassDeclarationWOSemicolon kext::ClassDeclaration:
	//	{sccharts::PolicyClassDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'?
	//	host?='host'? (type=ClassType
	//	name=EString?
	//	'{'
	//	policy=PolicyRegion?
	//	declarations+=DeclarationOrMethodWOSemicolon*
	//	'}'
	//	| type=StructType
	//	name=EString?
	//	'{'
	//	declarations+=DeclarationWOSemicolon*
	//	'}') (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//	annotations+=CommentAnnotatonSL?;
	public ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return pClassDeclarationWOSemicolon;
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//PolicyRegion sccharts::PolicyRegion:
	//	'policy' name=ID label=STRING?
	//	'{'
	//	declarations+=DeclarationWOSemicolon*
	//	states+=PolicyState+
	//	'}';
	public PolicyRegionElements getPolicyRegionAccess() {
		return pPolicyRegion;
	}
	
	public ParserRule getPolicyRegionRule() {
		return getPolicyRegionAccess().getRule();
	}
	
	//PolicyState sccharts::State:
	//	annotations+=Annotation*
	//	initial?='initial'?
	//	'state' name=ID label=STRING?
	//	outgoingTransitions+=PolicyTransition*;
	public PolicyStateElements getPolicyStateAccess() {
		return pPolicyState;
	}
	
	public ParserRule getPolicyStateRule() {
		return getPolicyStateAccess().getRule();
	}
	
	//PolicyTransition sccharts::Transition:
	//	{sccharts::Transition} annotations+=RestrictedTypeAnnotation* ('if' (trigger=LogicalOrExpression |
	//	trigger=ValuedObjectReference) (':' effects+=PureEmission (',' effects+=PureEmission)*)?)?
	//	'go to'
	//	targetState=[sccharts::State] ('label' label=STRING)?;
	public PolicyTransitionElements getPolicyTransitionAccess() {
		return pPolicyTransition;
	}
	
	public ParserRule getPolicyTransitionRule() {
		return getPolicyTransitionAccess().getRule();
	}
	
	//DeclarationOrMethodWithKeywordWOSemicolon kexpressions::Declaration:
	//	DeclarationWOSemicolon | KeywordMethodDeclarationWOSemicolon;
	public DeclarationOrMethodWithKeywordWOSemicolonElements getDeclarationOrMethodWithKeywordWOSemicolonAccess() {
		return pDeclarationOrMethodWithKeywordWOSemicolon;
	}
	
	public ParserRule getDeclarationOrMethodWithKeywordWOSemicolonRule() {
		return getDeclarationOrMethodWithKeywordWOSemicolonAccess().getRule();
	}
	
	//KeywordMethodDeclarationWOSemicolon kexpressions::MethodDeclaration:
	//	{scl::MethodImplementationDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	'method'
	//	returnType=MethodReturnType?
	//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
	//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
	//	('{'
	//	annotations+=CommentAnnotatonSL?
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}')?;
	public KeywordMethodDeclarationWOSemicolonElements getKeywordMethodDeclarationWOSemicolonAccess() {
		return pKeywordMethodDeclarationWOSemicolon;
	}
	
	public ParserRule getKeywordMethodDeclarationWOSemicolonRule() {
		return getKeywordMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PreemptionType returns sccharts::PreemptionType:
	//	WEAKABORT='go to' | STRONGABORT='abort to' | TERMINATION='join to';
	public PreemptionTypeElements getPreemptionTypeAccess() {
		return ePreemptionType;
	}
	
	public EnumRule getPreemptionTypeRule() {
		return getPreemptionTypeAccess().getRule();
	}
	
	//enum DelayType returns sccharts::DelayType:
	//	UNDEFINED='undefined' | DELAYED='delayed' | IMMEDIATE='immediate' | AUTOMATIC='auto';
	public DelayTypeElements getDelayTypeAccess() {
		return eDelayType;
	}
	
	public EnumRule getDelayTypeRule() {
		return getDelayTypeAccess().getRule();
	}
	
	//enum HistoryType returns sccharts::HistoryType:
	//	RESET='reset' | SHALLOW='shallow history' | DEEP='history';
	public HistoryTypeElements getHistoryTypeAccess() {
		return eHistoryType;
	}
	
	public EnumRule getHistoryTypeRule() {
		return getHistoryTypeAccess().getRule();
	}
	
	//enum DeferredType returns sccharts::DeferredType:
	//	SHALLOW='deferred' | DEEP='deep deferred';
	public DeferredTypeElements getDeferredTypeAccess() {
		return eDeferredType;
	}
	
	public EnumRule getDeferredTypeRule() {
		return getDeferredTypeAccess().getRule();
	}
	
	//@Override
	//enum ValueType returns kexpressions::ValueType:
	//	PURE="pure" | BOOL="bool" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string" |
	//	CLOCK="clock";
	public ValueTypeElements getValueTypeAccess() {
		return eValueType;
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//// als: added clock for timed automata
	//// -------------- //
	////  Helper Rules  // 
	//// -------------- //
	//// These are implicit keywords due to rules such as 'go to'
	//HiddenKeywords:
	//	'go' | 'abort' | 'join' | 'shallow';
	public HiddenKeywordsElements getHiddenKeywordsAccess() {
		return pHiddenKeywords;
	}
	
	public ParserRule getHiddenKeywordsRule() {
		return getHiddenKeywordsAccess().getRule();
	}
	
	//SCLProgram:
	//	pragmas+=Pragma*
	//	modules+=Module*;
	public SCLGrammarAccess.SCLProgramElements getSCLProgramAccess() {
		return gaSCL.getSCLProgramAccess();
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}
	
	//Module:
	//	annotations+=Annotation*
	//	'module' name=ID ':'?
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*;
	public SCLGrammarAccess.ModuleElements getModuleAccess() {
		return gaSCL.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Pause:
	//	{Pause} annotations+=Annotation*
	//	'pause'
	//	semicolon?=';'?;
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//Label:
	//	annotations+=Annotation*
	//	name=ID ':';
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Goto:
	//	annotations+=Annotation*
	//	'goto' target=[Label] semicolon?=';'?;
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//SclAssignment Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=AssignOperator
	//	expression=Expression ('schedule' schedule+=ScheduleObjectReference+)?
	//	semicolon?=';'?;
	public SCLGrammarAccess.SclAssignmentElements getSclAssignmentAccess() {
		return gaSCL.getSclAssignmentAccess();
	}
	
	public ParserRule getSclAssignmentRule() {
		return getSclAssignmentAccess().getRule();
	}
	
	//SclPostfixAssignment Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=PostfixOperator ('schedule' schedule+=ScheduleObjectReference+)?
	//	semicolon?=';'?;
	public SCLGrammarAccess.SclPostfixAssignmentElements getSclPostfixAssignmentAccess() {
		return gaSCL.getSclPostfixAssignmentAccess();
	}
	
	public ParserRule getSclPostfixAssignmentRule() {
		return getSclPostfixAssignmentAccess().getRule();
	}
	
	//Return:
	//	annotations+=Annotation*
	//	'return'
	//	expression=Expression;
	public SCLGrammarAccess.ReturnElements getReturnAccess() {
		return gaSCL.getReturnAccess();
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Conditional:
	//	annotations+=Annotation*
	//	'if' expression=AtomicExpression
	//	'{'
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*
	//	'}' (else=ElseScope | semicolon?=';')?;
	public SCLGrammarAccess.ConditionalElements getConditionalAccess() {
		return gaSCL.getConditionalAccess();
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//ElseScope:
	//	{ElseScope} annotations+=Annotation*
	//	'else' '{'
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*
	//	'}'
	//	semicolon?=';'?;
	public SCLGrammarAccess.ElseScopeElements getElseScopeAccess() {
		return gaSCL.getElseScopeAccess();
	}
	
	public ParserRule getElseScopeRule() {
		return getElseScopeAccess().getRule();
	}
	
	//LegacyConditional Conditional:
	//	annotations+=Annotation*
	//	'if' expression=BoolExpression
	//	'then'
	//	statements+=super::Statement*
	//	else=LegacyElseScope?
	//	'end'
	//	semicolon?=';'?;
	public SCLGrammarAccess.LegacyConditionalElements getLegacyConditionalAccess() {
		return gaSCL.getLegacyConditionalAccess();
	}
	
	public ParserRule getLegacyConditionalRule() {
		return getLegacyConditionalAccess().getRule();
	}
	
	//LegacyElseScope ElseScope:
	//	{ElseScope} annotations+=Annotation*
	//	'else'
	//	statements+=super::Statement*;
	public SCLGrammarAccess.LegacyElseScopeElements getLegacyElseScopeAccess() {
		return gaSCL.getLegacyElseScopeAccess();
	}
	
	public ParserRule getLegacyElseScopeRule() {
		return getLegacyElseScopeAccess().getRule();
	}
	
	//Thread:
	//	{Thread} (annotations+=Annotation*
	//	'{'
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*
	//	'}'
	//	| statements+=super::Statement*);
	public SCLGrammarAccess.ThreadElements getThreadAccess() {
		return gaSCL.getThreadAccess();
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}
	
	//Parallel:
	//	'fork' (threads+=Thread ('par'
	//	threads+=Thread)*)
	//	'join'
	//	semicolon?=';'?;
	public SCLGrammarAccess.ParallelElements getParallelAccess() {
		return gaSCL.getParallelAccess();
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	//ScopeStatement:
	//	{ScopeStatement} annotations+=Annotation*
	//	'{'
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*
	//	'}';
	public SCLGrammarAccess.ScopeStatementElements getScopeStatementAccess() {
		return gaSCL.getScopeStatementAccess();
	}
	
	public ParserRule getScopeStatementRule() {
		return getScopeStatementAccess().getRule();
	}
	
	//ForLoop Loop:
	//	'for' '(' (initializationDeclaration=LoopDeclaration | initialization=EffectOrAssignment)?
	//	';'
	//	condition=BoolExpression
	//	';'
	//	afterthought=EffectOrAssignment?
	//	')' '{'
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*
	//	'}'
	//	semicolon?=';'?;
	public SCLGrammarAccess.ForLoopElements getForLoopAccess() {
		return gaSCL.getForLoopAccess();
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//LoopDeclaration kexpressions::VariableDeclaration:
	//	annotations+=Annotation* (type=super::ValueType | type=HostType hostType=STRING) valuedObjects+=ValuedObject;
	public SCLGrammarAccess.LoopDeclarationElements getLoopDeclarationAccess() {
		return gaSCL.getLoopDeclarationAccess();
	}
	
	public ParserRule getLoopDeclarationRule() {
		return getLoopDeclarationAccess().getRule();
	}
	
	//EffectOrAssignment keffects::Assignment:
	//	annotations+=Annotation* (reference=ValuedObjectReference
	//	operator=PostfixOperator
	//	| reference=ValuedObjectReference
	//	operator=AssignOperator
	//	expression=Expression
	//	| expression=Expression);
	public SCLGrammarAccess.EffectOrAssignmentElements getEffectOrAssignmentAccess() {
		return gaSCL.getEffectOrAssignmentAccess();
	}
	
	public ParserRule getEffectOrAssignmentRule() {
		return getEffectOrAssignmentAccess().getRule();
	}
	
	//WhileLoop Loop:
	//	'while' '('
	//	condition=BoolExpression
	//	')' '{'
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*
	//	'}'
	//	semicolon?=';'?;
	public SCLGrammarAccess.WhileLoopElements getWhileLoopAccess() {
		return gaSCL.getWhileLoopAccess();
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ModuleCall:
	//	annotations+=Annotation*
	//	'run'
	//	module=[Module] ('(' parameters+=ModuleCallParameter (',' parameters+=ModuleCallParameter)* ')' | '()')?
	//	semicolon?=';'?;
	public SCLGrammarAccess.ModuleCallElements getModuleCallAccess() {
		return gaSCL.getModuleCallAccess();
	}
	
	public ParserRule getModuleCallRule() {
		return getModuleCallAccess().getRule();
	}
	
	//ModuleCallParameter kexpressions::Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=Expression ('to' explicitBinding=[kexpressions::ValuedObject] ('[' explicitBindingIndices+=Expression
	//	']')*)?;
	public SCLGrammarAccess.ModuleCallParameterElements getModuleCallParameterAccess() {
		return gaSCL.getModuleCallParameterAccess();
	}
	
	public ParserRule getModuleCallParameterRule() {
		return getModuleCallParameterAccess().getRule();
	}
	
	//@Override
	//MethodDeclaration kexpressions::MethodDeclaration:
	//	{MethodImplementationDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	returnType=MethodReturnType?
	//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
	//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
	//	(';'
	//	|
	//	'{'
	//	annotations+=CommentAnnotatonSL?
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*
	//	'}') annotations+=CommentAnnotatonSL?;
	public SCLGrammarAccess.MethodDeclarationElements getMethodDeclarationAccess() {
		return gaSCL.getMethodDeclarationAccess();
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//@Override
	//MethodDeclarationWOSemicolon kexpressions::MethodDeclaration:
	//	{MethodImplementationDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	returnType=MethodReturnType?
	//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
	//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
	//	('{'
	//	annotations+=CommentAnnotatonSL?
	//	declarations+=super::Declaration*
	//	statements+=super::Statement*
	//	'}')?;
	public SCLGrammarAccess.MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return gaSCL.getMethodDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// */ /*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// */ // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	scopes+=RootScope;
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope kext::KExtScope:
	//	{kext::KExtScope} declarations+=super::Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)*;
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope kext::KExtScope:
	//	{kext::KExtScope} name=ID? '{'
	//	declarations+=super::Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)* '}';
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=super::Effect;
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=Expression;
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'json'
	//	expression=JsonObjectValue;
	public KExtGrammarAccess.AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return gaKExt.getAnnotatedJsonExpressionAccess();
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public KExtGrammarAccess.DeclarationElements getKExtDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getKExtDeclarationRule() {
		return getKExtDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon kexpressions::Declaration:
	//	VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon |
	//	super::ClassDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'? (signal?='signal'? type=super::ValueType | signal?='signal' | type=HostType hostType=STRING)
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'? (signal?='signal'? type=super::ValueType | signal?='signal' | type=HostType hostType=STRING)
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration kext::ClassDeclaration:
	//	{kext::ClassDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'?
	//	host?='host'? (type=ClassType
	//	name=EString?
	//	'{'
	//	declarations+=DeclarationOrMethod*
	//	'}'
	//	| type=StructType
	//	name=EString?
	//	'{'
	//	declarations+=super::Declaration*
	//	'}') (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//	';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ClassDeclarationElements getClassDeclarationAccess() {
		return gaKExt.getClassDeclarationAccess();
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod kexpressions::Declaration:
	//	super::Declaration | super::MethodDeclaration;
	public KExtGrammarAccess.DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return gaKExt.getDeclarationOrMethodAccess();
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon kexpressions::Declaration:
	//	DeclarationWOSemicolon | super::MethodDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return gaKExt.getDeclarationOrMethodWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//NamespaceID:
	//	ExtendedID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	//ReferenceDeclaration kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier? ('ref' reference=[annotations::NamedObject|NamespaceID] |
	//	'extern' extern+=ExternString (',' extern+=ExternString)*) valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier? ('ref' reference=[annotations::NamedObject|NamespaceID] |
	//	'extern' extern+=ExternString (',' extern+=ExternString)*) valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString kexpressions::ExternString:
	//	annotations+=TagAnnotation*
	//	code=STRING;
	public KExtGrammarAccess.ExternStringElements getExternStringAccess() {
		return gaKExt.getExternStringAccess();
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//ScheduleDeclaration kexpressions::ScheduleDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	'schedule' name=STRING? ('global' global=PriorityProtocol)? ('{' priorities+=PriorityProtocol (','
	//	priorities+=PriorityProtocol)* '}')?
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon kexpressions::ScheduleDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	'schedule' name=STRING? ('global' global=PriorityProtocol)? ('{' priorities+=PriorityProtocol (','
	//	priorities+=PriorityProtocol)* '}')?
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//	CONFLICT="conflicting" | CONFLUENT="commuting";
	public KExtGrammarAccess.PriorityProtocolElements getPriorityProtocolAccess() {
		return gaKExt.getPriorityProtocolAccess();
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	annotations+=QuotedStringAnnotation*
	//	name=PrimeID ('[' cardinalities+=Expression ']')* ('=' initialValue=Expression)? ('combine'
	//	combineOperator=CombineOperator)? ('label' label=STRING)?;
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject kexpressions::ValuedObject:
	//	annotations+=QuotedStringAnnotation*
	//	name=PrimeID;
	public KExtGrammarAccess.SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return gaKExt.getSimpleValuedObjectAccess();
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// */ /*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */ // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect keffects::Effect:
	//	Assignment | PostfixEffect | ValuedEmission | HostcodeEffect | ReferenceCallEffect | FunctionCallEffect |
	//	PrintCallEffect | RandomizeCallEffect | PureEmission;
	public KEffectsGrammarAccess.EffectElements getKEffectsEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getKEffectsEffectRule() {
		return getKEffectsEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//PureEmission keffects::Emission:
	//	annotations+=QuotedStringAnnotation*
	//	reference=ValuedObjectReference ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission keffects::Emission:
	//	annotations+=QuotedStringAnnotation*
	//	reference=ValuedObjectReference
	//	"(" newValue=Expression ")" ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission keffects::Emission:
	//	ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1     
	//Assignment keffects::Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=AssignOperator expression=Expression ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*    
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;	 
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=PostfixOperator ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect keffects::ReferenceCallEffect:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.'
	//	subReference=ValuedObjectReference)? ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()') ('schedule'
	//	schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation* ('extern' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()'));
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.    
	//PrintCallEffect keffects::PrintCallEffect:
	//	annotations+=Annotation*
	//	'print' ('(' parameters+=Parameter (',' parameters+=Parameter)* ')') ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect keffects::RandomizeCallEffect:
	//	{keffects::RandomizeCallEffect} annotations+=Annotation*
	//	'randomize' ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//	ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
	//	ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
	//	ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// */ // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */ // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression) ('||' subExpressions+=LogicalAndExpression)*)?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression) ('&&' subExpressions+=BitwiseOrExpression)*)?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseXOrExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseXOrExpression) ('|' subExpressions+=BitwiseXOrExpression)*)?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseXOrOperator
	//	subExpressions+=BitwiseAndExpression) ('^' subExpressions+=BitwiseAndExpression)*)?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation) ('&' subExpressions+=CompareOperation)*)?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression Expression:
	//	ValuedExpression
	//	| NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression Expression:
	//	{OperatorExpression} operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | BitwiseNotExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression Expression:
	//	ShiftExpressions;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//ShiftExpressions Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression
	//	('<<' subExpressions+=SumExpression)* | {OperatorExpression.subExpressions+=current} operator=ShiftRightOperator
	//	subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)* | {OperatorExpression.subExpressions+=current}
	//	operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)*;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftLeftOperator
	//	subExpressions+=ShiftRightExpression) ('<<' subExpressions+=ShiftRightExpression)*)?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightOperator
	//	subExpressions+=ShiftRightUnsignedExpression) ('>>' subExpressions+=ShiftRightUnsignedExpression)*)?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightUnsignedOperator
	//	subExpressions+=SumExpression) ('>>>' subExpressions+=SumExpression)*)?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression
	//	('+' subExpressions+=ProductExpression)* | {OperatorExpression.subExpressions+=current} operator=SubOperator
	//	subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)*;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator
	//	subExpressions+=ProductExpression)*;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=SubOperator
	//	subExpressions+=ProductExpression)*;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//ProductExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*'
	//	subExpressions+=NegExpression)* | {OperatorExpression.subExpressions+=current} operator=DivOperator
	//	subExpressions+=NegExpression ('/' subExpressions+=NegExpression)* | {OperatorExpression.subExpressions+=current}
	//	operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)*;
	public KExpressionsGrammarAccess.ProductExpressionElements getProductExpressionAccess() {
		return gaKExpressions.getProductExpressionAccess();
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=NegExpression) ('*'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=DivOperator subExpressions+=NegExpression) ('/'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator subExpressions+=NegExpression) ('%'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | TernaryOperation;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//TernaryOperation Expression:
	//	{OperatorExpression} subExpressions+=AtomicValuedExpression operator=ConditionalOperator
	//	subExpressions+=AtomicValuedExpression (':' subExpressions+=AtomicValuedExpression)?
	//	| InitExpression;
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//InitExpression Expression:
	//	FbyExpression ({OperatorExpression.subExpressions+=current} (operator=InitOperator subExpressions+=FbyExpression)
	//	('->' subExpressions+=FbyExpression)*)?;
	public KExpressionsGrammarAccess.InitExpressionElements getInitExpressionAccess() {
		return gaKExpressions.getInitExpressionAccess();
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//FbyExpression Expression:
	//	SfbyExpression ({OperatorExpression.subExpressions+=current} (operator=FbyOperator subExpressions+=SfbyExpression)
	//	('fby' subExpressions+=SfbyExpression)*)?;
	public KExpressionsGrammarAccess.FbyExpressionElements getFbyExpressionAccess() {
		return gaKExpressions.getFbyExpressionAccess();
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//SfbyExpression Expression:
	//	AtomicValuedExpression ({OperatorExpression.subExpressions+=current} (operator=SfbyOperator
	//	subExpressions+=AtomicValuedExpression) ('sfby' subExpressions+=AtomicValuedExpression)*)?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicExpression Expression:
	//	BoolValue
	//	| '(' BoolExpression ')'
	//	| ReferenceCall
	//	| FunctionCall
	//	| RandomCall
	//	| RandomizeCall
	//	| ValuedObjectTestExpression // Last to allow detection of calls
	//	| TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression Expression:
	//	IntValue
	//	| FloatValue
	//	| StringValue
	//	| VectorValue
	//	| '(' ValuedExpression ')'
	//	| AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) '(' subExpressions+=ValuedObjectTestExpression (','
	//	subExpressions+=ValuedObjectReference)? ')'
	//	| ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID:
	//	ID "'"*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list. 
	//ReferenceCall:
	//	valuedObject=[ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.' subReference=ValuedObjectReference)? ('('
	//	parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function. 
	//RandomCall:
	//	{RandomCall}
	//	'random' '()'?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function. 
	//RandomizeCall:
	//	{RandomizeCall}
	//	'randomize' '()'?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'extern' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	annotations+=Annotation*
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue:
	//	'{' values+=VectorValueMember (',' values+=VectorValueMember)* '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember Expression:
	//	BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue:
	//	{IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue Value:
	//	IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//	BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//	BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//	SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//	SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//	SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//	CONDITIONAL="?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum InitOperator returns OperatorType:
	//	INIT="->";
	public KExpressionsGrammarAccess.InitOperatorElements getInitOperatorAccess() {
		return gaKExpressions.getInitOperatorAccess();
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum FbyOperator returns OperatorType:
	//	FBY="fby";
	public KExpressionsGrammarAccess.FbyOperatorElements getFbyOperatorAccess() {
		return gaKExpressions.getFbyOperatorAccess();
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//	SFBY="sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//	STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//	CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier:
	//	PUBLIC='public' | PROTECTED='protected' | PRIVATE='private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//	VOID="void" |
	//	BOOL="bool" | INT="int" | FLOAT="float" |
	//	STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                // 
	//// -------------------- //
	//JsonObjectValue:
	//	{JsonObjectValue}
	//	'{' (members+=JsonObjectMember (',' members+=JsonObjectMember)*)?
	//	'}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember:
	//	key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue:
	//	{JsonArrayValue}
	//	'[' (elements+=JsonValue (',' elements+=JsonValue)*)?
	//	']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue Value:
	//	JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue:
	//	{NullValue}
	//	'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma:
	//	'#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation:
	//	'@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma annotations::Pragma:
	//	super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//Annotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//terminal HOSTCODE:
	//	"`" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "`"))* "`";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// */ // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationsAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationsAnnotationRule() {
		return getAnnotationsAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.    
	//Pragma:
	//	StringPragma | PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations. 
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	//RestrictedTypeAnnotation Annotation:
	//	CommentAnnotation | RestrictedKeyStringValueAnnotation | RestrictedTypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//QuotedStringAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL CommentAnnotation:
	//	values+=SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation:
	//	'@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag Pragma:
	//	'#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringBoolean (',' values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma:
	//	'#' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes:
	//	STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID (('.' | '-') ID)* ('#' INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EDouble:
	//	'-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//terminal COMMENT_ANNOTATION:
	//	'/**'->'*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal ML_COMMENT:
	//	'/*' !'*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION:
	//	'//*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'//' !'*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotations.getSL_COMMENTRule();
	}
	
	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//terminal FLOAT returns ecore::EDouble:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? (('_'? 'a'..'z' | '_'? 'A'..'Z') | '_' '0'..'9' | '__') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
