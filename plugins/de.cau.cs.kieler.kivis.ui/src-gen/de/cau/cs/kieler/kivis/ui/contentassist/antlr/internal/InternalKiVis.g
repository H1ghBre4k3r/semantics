/*
 * generated by Xtext
 */
grammar InternalKiVis;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.kivis.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.kivis.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.kivis.services.KiVisGrammarAccess;

}

@parser::members {
 
 	private KiVisGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(KiVisGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleVisualizationConfiguration
entryRuleVisualizationConfiguration 
:
{ before(grammarAccess.getVisualizationConfigurationRule()); }
	 ruleVisualizationConfiguration
{ after(grammarAccess.getVisualizationConfigurationRule()); } 
	 EOF 
;

// Rule VisualizationConfiguration
ruleVisualizationConfiguration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getGroup()); }
(rule__VisualizationConfiguration__Group__0)
{ after(grammarAccess.getVisualizationConfigurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getGroup()); }
(rule__Element__Group__0)
{ after(grammarAccess.getElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteraction
entryRuleInteraction 
:
{ before(grammarAccess.getInteractionRule()); }
	 ruleInteraction
{ after(grammarAccess.getInteractionRule()); } 
	 EOF 
;

// Rule Interaction
ruleInteraction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInteractionAccess().getGroup()); }
(rule__Interaction__Group__0)
{ after(grammarAccess.getInteractionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment 
:
{ before(grammarAccess.getVariableAssignmentRule()); }
	 ruleVariableAssignment
{ after(grammarAccess.getVariableAssignmentRule()); } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAssignmentAccess().getGroup()); }
(rule__VariableAssignment__Group__0)
{ after(grammarAccess.getVariableAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimulationAction
entryRuleSimulationAction 
:
{ before(grammarAccess.getSimulationActionRule()); }
	 ruleSimulationAction
{ after(grammarAccess.getSimulationActionRule()); } 
	 EOF 
;

// Rule SimulationAction
ruleSimulationAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimulationActionAccess().getGroup()); }
(rule__SimulationAction__Group__0)
{ after(grammarAccess.getSimulationActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnimation
entryRuleAnimation 
:
{ before(grammarAccess.getAnimationRule()); }
	 ruleAnimation
{ after(grammarAccess.getAnimationRule()); } 
	 EOF 
;

// Rule Animation
ruleAnimation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnimationAccess().getGroup()); }
(rule__Animation__Group__0)
{ after(grammarAccess.getAnimationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeMapping
entryRuleAttributeMapping 
:
{ before(grammarAccess.getAttributeMappingRule()); }
	 ruleAttributeMapping
{ after(grammarAccess.getAttributeMappingRule()); } 
	 EOF 
;

// Rule AttributeMapping
ruleAttributeMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeMappingAccess().getGroup()); }
(rule__AttributeMapping__Group__0)
{ after(grammarAccess.getAttributeMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapping
entryRuleMapping 
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingAccess().getGroup()); }
(rule__Mapping__Group__0)
{ after(grammarAccess.getMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDomain
entryRuleVariableDomain 
:
{ before(grammarAccess.getVariableDomainRule()); }
	 ruleVariableDomain
{ after(grammarAccess.getVariableDomainRule()); } 
	 EOF 
;

// Rule VariableDomain
ruleVariableDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDomainAccess().getAlternatives()); }
(rule__VariableDomain__Alternatives)
{ after(grammarAccess.getVariableDomainAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterval
entryRuleInterval 
:
{ before(grammarAccess.getIntervalRule()); }
	 ruleInterval
{ after(grammarAccess.getIntervalRule()); } 
	 EOF 
;

// Rule Interval
ruleInterval
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntervalAccess().getGroup()); }
(rule__Interval__Group__0)
{ after(grammarAccess.getIntervalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeDomain
entryRuleAttributeDomain 
:
{ before(grammarAccess.getAttributeDomainRule()); }
	 ruleAttributeDomain
{ after(grammarAccess.getAttributeDomainRule()); } 
	 EOF 
;

// Rule AttributeDomain
ruleAttributeDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeDomainAccess().getVariableDomainParserRuleCall()); }
	ruleVariableDomain
{ after(grammarAccess.getAttributeDomainAccess().getVariableDomainParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup()); }
(rule__VariableReference__Group__0)
{ after(grammarAccess.getVariableReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModelReference
entryRuleModelReference 
:
{ before(grammarAccess.getModelReferenceRule()); }
	 ruleModelReference
{ after(grammarAccess.getModelReferenceRule()); } 
	 EOF 
;

// Rule ModelReference
ruleModelReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelReferenceAccess().getGroup()); }
(rule__ModelReference__Group__0)
{ after(grammarAccess.getModelReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleRange
entryRuleRange 
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeAccess().getHyphenMinusKeyword()); }

	'-' 

{ after(grammarAccess.getRangeAccess().getHyphenMinusKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleModelCompiler
entryRuleModelCompiler 
:
{ before(grammarAccess.getModelCompilerRule()); }
	 ruleModelCompiler
{ after(grammarAccess.getModelCompilerRule()); } 
	 EOF 
;

// Rule ModelCompiler
ruleModelCompiler
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelCompilerAccess().getGroup()); }
(rule__ModelCompiler__Group__0)
{ after(grammarAccess.getModelCompilerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimulationCompiler
entryRuleSimulationCompiler 
:
{ before(grammarAccess.getSimulationCompilerRule()); }
	 ruleSimulationCompiler
{ after(grammarAccess.getSimulationCompilerRule()); } 
	 EOF 
;

// Rule SimulationCompiler
ruleSimulationCompiler
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimulationCompilerAccess().getGroup()); }
(rule__SimulationCompiler__Group__0)
{ after(grammarAccess.getSimulationCompilerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateProcessor
entryRuleTemplateProcessor 
:
{ before(grammarAccess.getTemplateProcessorRule()); }
	 ruleTemplateProcessor
{ after(grammarAccess.getTemplateProcessorRule()); } 
	 EOF 
;

// Rule TemplateProcessor
ruleTemplateProcessor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateProcessorAccess().getAlternatives()); }
(rule__TemplateProcessor__Alternatives)
{ after(grammarAccess.getTemplateProcessorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNormalTemplateProcessor
entryRuleNormalTemplateProcessor 
:
{ before(grammarAccess.getNormalTemplateProcessorRule()); }
	 ruleNormalTemplateProcessor
{ after(grammarAccess.getNormalTemplateProcessorRule()); } 
	 EOF 
;

// Rule NormalTemplateProcessor
ruleNormalTemplateProcessor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalTemplateProcessorAccess().getGroup()); }
(rule__NormalTemplateProcessor__Group__0)
{ after(grammarAccess.getNormalTemplateProcessorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimulationTemplateProcessor
entryRuleSimulationTemplateProcessor 
:
{ before(grammarAccess.getSimulationTemplateProcessorRule()); }
	 ruleSimulationTemplateProcessor
{ after(grammarAccess.getSimulationTemplateProcessorRule()); } 
	 EOF 
;

// Rule SimulationTemplateProcessor
ruleSimulationTemplateProcessor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getGroup()); }
(rule__SimulationTemplateProcessor__Group__0)
{ after(grammarAccess.getSimulationTemplateProcessorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWrapperCodeTemplateProcessor
entryRuleWrapperCodeTemplateProcessor 
:
{ before(grammarAccess.getWrapperCodeTemplateProcessorRule()); }
	 ruleWrapperCodeTemplateProcessor
{ after(grammarAccess.getWrapperCodeTemplateProcessorRule()); } 
	 EOF 
;

// Rule WrapperCodeTemplateProcessor
ruleWrapperCodeTemplateProcessor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getGroup()); }
(rule__WrapperCodeTemplateProcessor__Group__0)
{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedFloat
entryRuleSignedFloat 
:
{ before(grammarAccess.getSignedFloatRule()); }
	 ruleSignedFloat
{ after(grammarAccess.getSignedFloatRule()); } 
	 EOF 
;

// Rule SignedFloat
ruleSignedFloat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedFloatAccess().getGroup()); }
(rule__SignedFloat__Group__0)
{ after(grammarAccess.getSignedFloatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedInt
entryRuleSignedInt 
:
{ before(grammarAccess.getSignedIntRule()); }
	 ruleSignedInt
{ after(grammarAccess.getSignedIntRule()); } 
	 EOF 
;

// Rule SignedInt
ruleSignedInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedIntAccess().getGroup()); }
(rule__SignedInt__Group__0)
{ after(grammarAccess.getSignedIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextValue
entryRuleTextValue 
:
{ before(grammarAccess.getTextValueRule()); }
	 ruleTextValue
{ after(grammarAccess.getTextValueRule()); } 
	 EOF 
;

// Rule TextValue
ruleTextValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextValueAccess().getValueAssignment()); }
(rule__TextValue__ValueAssignment)
{ after(grammarAccess.getTextValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolExpression
entryRuleBoolExpression 
:
{ before(grammarAccess.getBoolExpressionRule()); }
	 ruleBoolExpression
{ after(grammarAccess.getBoolExpressionRule()); } 
	 EOF 
;

// Rule BoolExpression
ruleBoolExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getBoolExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression 
:
{ before(grammarAccess.getBitwiseOrExpressionRule()); }
	 ruleBitwiseOrExpression
{ after(grammarAccess.getBitwiseOrExpressionRule()); } 
	 EOF 
;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getGroup()); }
(rule__BitwiseOrExpression__Group__0)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseXOrExpression
entryRuleBitwiseXOrExpression 
:
{ before(grammarAccess.getBitwiseXOrExpressionRule()); }
	 ruleBitwiseXOrExpression
{ after(grammarAccess.getBitwiseXOrExpressionRule()); } 
	 EOF 
;

// Rule BitwiseXOrExpression
ruleBitwiseXOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getGroup()); }
(rule__BitwiseXOrExpression__Group__0)
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression 
:
{ before(grammarAccess.getBitwiseAndExpressionRule()); }
	 ruleBitwiseAndExpression
{ after(grammarAccess.getBitwiseAndExpressionRule()); } 
	 EOF 
;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getGroup()); }
(rule__BitwiseAndExpression__Group__0)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompareOperation
entryRuleCompareOperation 
:
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup()); }
(rule__CompareOperation__Group__0)
{ after(grammarAccess.getCompareOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression 
:
{ before(grammarAccess.getNotOrValuedExpressionRule()); }
	 ruleNotOrValuedExpression
{ after(grammarAccess.getNotOrValuedExpressionRule()); } 
	 EOF 
;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getAlternatives()); }
(rule__NotOrValuedExpression__Alternatives)
{ after(grammarAccess.getNotOrValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseNotExpression
entryRuleBitwiseNotExpression 
:
{ before(grammarAccess.getBitwiseNotExpressionRule()); }
	 ruleBitwiseNotExpression
{ after(grammarAccess.getBitwiseNotExpressionRule()); } 
	 EOF 
;

// Rule BitwiseNotExpression
ruleBitwiseNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitwiseNotExpressionAccess().getAlternatives()); }
(rule__BitwiseNotExpression__Alternatives)
{ after(grammarAccess.getBitwiseNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getAlternatives()); }
(rule__NotExpression__Alternatives)
{ after(grammarAccess.getNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedExpression
entryRuleValuedExpression 
:
{ before(grammarAccess.getValuedExpressionRule()); }
	 ruleValuedExpression
{ after(grammarAccess.getValuedExpressionRule()); } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedExpressionAccess().getShiftLeftExpressionParserRuleCall()); }
	ruleShiftLeftExpression
{ after(grammarAccess.getValuedExpressionAccess().getShiftLeftExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftLeftExpression
entryRuleShiftLeftExpression 
:
{ before(grammarAccess.getShiftLeftExpressionRule()); }
	 ruleShiftLeftExpression
{ after(grammarAccess.getShiftLeftExpressionRule()); } 
	 EOF 
;

// Rule ShiftLeftExpression
ruleShiftLeftExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getGroup()); }
(rule__ShiftLeftExpression__Group__0)
{ after(grammarAccess.getShiftLeftExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftRightExpression
entryRuleShiftRightExpression 
:
{ before(grammarAccess.getShiftRightExpressionRule()); }
	 ruleShiftRightExpression
{ after(grammarAccess.getShiftRightExpressionRule()); } 
	 EOF 
;

// Rule ShiftRightExpression
ruleShiftRightExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getGroup()); }
(rule__ShiftRightExpression__Group__0)
{ after(grammarAccess.getShiftRightExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftRightUnsignedExpression
entryRuleShiftRightUnsignedExpression 
:
{ before(grammarAccess.getShiftRightUnsignedExpressionRule()); }
	 ruleShiftRightUnsignedExpression
{ after(grammarAccess.getShiftRightUnsignedExpressionRule()); } 
	 EOF 
;

// Rule ShiftRightUnsignedExpression
ruleShiftRightUnsignedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getGroup()); }
(rule__ShiftRightUnsignedExpression__Group__0)
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddExpression
entryRuleAddExpression 
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
(rule__AddExpression__Group__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubExpression
entryRuleSubExpression 
:
{ before(grammarAccess.getSubExpressionRule()); }
	 ruleSubExpression
{ after(grammarAccess.getSubExpressionRule()); } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup()); }
(rule__SubExpression__Group__0)
{ after(grammarAccess.getSubExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultExpression
entryRuleMultExpression 
:
{ before(grammarAccess.getMultExpressionRule()); }
	 ruleMultExpression
{ after(grammarAccess.getMultExpressionRule()); } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup()); }
(rule__MultExpression__Group__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivExpression
entryRuleDivExpression 
:
{ before(grammarAccess.getDivExpressionRule()); }
	 ruleDivExpression
{ after(grammarAccess.getDivExpressionRule()); } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivExpressionAccess().getGroup()); }
(rule__DivExpression__Group__0)
{ after(grammarAccess.getDivExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModExpression
entryRuleModExpression 
:
{ before(grammarAccess.getModExpressionRule()); }
	 ruleModExpression
{ after(grammarAccess.getModExpressionRule()); } 
	 EOF 
;

// Rule ModExpression
ruleModExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModExpressionAccess().getGroup()); }
(rule__ModExpression__Group__0)
{ after(grammarAccess.getModExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegExpression
entryRuleNegExpression 
:
{ before(grammarAccess.getNegExpressionRule()); }
	 ruleNegExpression
{ after(grammarAccess.getNegExpressionRule()); } 
	 EOF 
;

// Rule NegExpression
ruleNegExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegExpressionAccess().getAlternatives()); }
(rule__NegExpression__Alternatives)
{ after(grammarAccess.getNegExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTernaryOperation
entryRuleTernaryOperation 
:
{ before(grammarAccess.getTernaryOperationRule()); }
	 ruleTernaryOperation
{ after(grammarAccess.getTernaryOperationRule()); } 
	 EOF 
;

// Rule TernaryOperation
ruleTernaryOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTernaryOperationAccess().getAlternatives()); }
(rule__TernaryOperation__Alternatives)
{ after(grammarAccess.getTernaryOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression 
:
{ before(grammarAccess.getAtomicExpressionRule()); }
	 ruleAtomicExpression
{ after(grammarAccess.getAtomicExpressionRule()); } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
(rule__AtomicExpression__Alternatives)
{ after(grammarAccess.getAtomicExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression 
:
{ before(grammarAccess.getAtomicValuedExpressionRule()); }
	 ruleAtomicValuedExpression
{ after(grammarAccess.getAtomicValuedExpressionRule()); } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives()); }
(rule__AtomicValuedExpression__Alternatives)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression 
:
{ before(grammarAccess.getValuedObjectTestExpressionRule()); }
	 ruleValuedObjectTestExpression
{ after(grammarAccess.getValuedObjectTestExpressionRule()); } 
	 EOF 
;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getAlternatives()); }
(rule__ValuedObjectTestExpression__Alternatives)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimeID
entryRulePrimeID 
:
{ before(grammarAccess.getPrimeIDRule()); }
	 rulePrimeID
{ after(grammarAccess.getPrimeIDRule()); } 
	 EOF 
;

// Rule PrimeID
rulePrimeID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimeIDAccess().getGroup()); }
(rule__PrimeID__Group__0)
{ after(grammarAccess.getPrimeIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValuedObjectReference
entryRuleValuedObjectReference 
:
{ before(grammarAccess.getValuedObjectReferenceRule()); }
	 ruleValuedObjectReference
{ after(grammarAccess.getValuedObjectReferenceRule()); } 
	 EOF 
;

// Rule ValuedObjectReference
ruleValuedObjectReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getGroup()); }
(rule__ValuedObjectReference__Group__0)
{ after(grammarAccess.getValuedObjectReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScheduleObjectReference
entryRuleScheduleObjectReference 
:
{ before(grammarAccess.getScheduleObjectReferenceRule()); }
	 ruleScheduleObjectReference
{ after(grammarAccess.getScheduleObjectReferenceRule()); } 
	 EOF 
;

// Rule ScheduleObjectReference
ruleScheduleObjectReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScheduleObjectReferenceAccess().getGroup()); }
(rule__ScheduleObjectReference__Group__0)
{ after(grammarAccess.getScheduleObjectReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReferenceCall
entryRuleReferenceCall 
:
{ before(grammarAccess.getReferenceCallRule()); }
	 ruleReferenceCall
{ after(grammarAccess.getReferenceCallRule()); } 
	 EOF 
;

// Rule ReferenceCall
ruleReferenceCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceCallAccess().getGroup()); }
(rule__ReferenceCall__Group__0)
{ after(grammarAccess.getReferenceCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextExpression
entryRuleTextExpression 
:
{ before(grammarAccess.getTextExpressionRule()); }
	 ruleTextExpression
{ after(grammarAccess.getTextExpressionRule()); } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextExpressionAccess().getTextAssignment()); }
(rule__TextExpression__TextAssignment)
{ after(grammarAccess.getTextExpressionAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntValue
entryRuleIntValue 
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntValueAccess().getValueAssignment()); }
(rule__IntValue__ValueAssignment)
{ after(grammarAccess.getIntValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatValue
entryRuleFloatValue 
:
{ before(grammarAccess.getFloatValueRule()); }
	 ruleFloatValue
{ after(grammarAccess.getFloatValueRule()); } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatValueAccess().getValueAssignment()); }
(rule__FloatValue__ValueAssignment)
{ after(grammarAccess.getFloatValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolValue
entryRuleBoolValue 
:
{ before(grammarAccess.getBoolValueRule()); }
	 ruleBoolValue
{ after(grammarAccess.getBoolValueRule()); } 
	 EOF 
;

// Rule BoolValue
ruleBoolValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolValueAccess().getValueAssignment()); }
(rule__BoolValue__ValueAssignment)
{ after(grammarAccess.getBoolValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
(rule__StringValue__ValueAssignment)
{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVectorValue
entryRuleVectorValue 
:
{ before(grammarAccess.getVectorValueRule()); }
	 ruleVectorValue
{ after(grammarAccess.getVectorValueRule()); } 
	 EOF 
;

// Rule VectorValue
ruleVectorValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorValueAccess().getGroup()); }
(rule__VectorValue__Group__0)
{ after(grammarAccess.getVectorValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVectorValueMember
entryRuleVectorValueMember 
:
{ before(grammarAccess.getVectorValueMemberRule()); }
	 ruleVectorValueMember
{ after(grammarAccess.getVectorValueMemberRule()); } 
	 EOF 
;

// Rule VectorValueMember
ruleVectorValueMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorValueMemberAccess().getAlternatives()); }
(rule__VectorValueMember__Alternatives)
{ after(grammarAccess.getVectorValueMemberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIgnoreValue
entryRuleIgnoreValue 
:
{ before(grammarAccess.getIgnoreValueRule()); }
	 ruleIgnoreValue
{ after(grammarAccess.getIgnoreValueRule()); } 
	 EOF 
;

// Rule IgnoreValue
ruleIgnoreValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIgnoreValueAccess().getGroup()); }
(rule__IgnoreValue__Group__0)
{ after(grammarAccess.getIgnoreValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleAnyValue
entryRuleAnyValue 
:
{ before(grammarAccess.getAnyValueRule()); }
	 ruleAnyValue
{ after(grammarAccess.getAnyValueRule()); } 
	 EOF 
;

// Rule AnyValue
ruleAnyValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnyValueAccess().getAlternatives()); }
(rule__AnyValue__Alternatives)
{ after(grammarAccess.getAnyValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}













// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation 
:
{ before(grammarAccess.getCommentAnnotationRule()); }
	 ruleCommentAnnotation
{ after(grammarAccess.getCommentAnnotationRule()); } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommentAnnotationAccess().getValuesAssignment()); }
(rule__CommentAnnotation__ValuesAssignment)
{ after(grammarAccess.getCommentAnnotationAccess().getValuesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTagAnnotation
entryRuleTagAnnotation 
:
{ before(grammarAccess.getTagAnnotationRule()); }
	 ruleTagAnnotation
{ after(grammarAccess.getTagAnnotationRule()); } 
	 EOF 
;

// Rule TagAnnotation
ruleTagAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTagAnnotationAccess().getGroup()); }
(rule__TagAnnotation__Group__0)
{ after(grammarAccess.getTagAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePragmaTag
entryRulePragmaTag 
:
{ before(grammarAccess.getPragmaTagRule()); }
	 rulePragmaTag
{ after(grammarAccess.getPragmaTagRule()); } 
	 EOF 
;

// Rule PragmaTag
rulePragmaTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPragmaTagAccess().getGroup()); }
(rule__PragmaTag__Group__0)
{ after(grammarAccess.getPragmaTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyStringValueAnnotation
entryRuleKeyStringValueAnnotation 
:
{ before(grammarAccess.getKeyStringValueAnnotationRule()); }
	 ruleKeyStringValueAnnotation
{ after(grammarAccess.getKeyStringValueAnnotationRule()); } 
	 EOF 
;

// Rule KeyStringValueAnnotation
ruleKeyStringValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getGroup()); }
(rule__KeyStringValueAnnotation__Group__0)
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRestrictedKeyStringValueAnnotation
entryRuleRestrictedKeyStringValueAnnotation 
:
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationRule()); }
	 ruleRestrictedKeyStringValueAnnotation
{ after(grammarAccess.getRestrictedKeyStringValueAnnotationRule()); } 
	 EOF 
;

// Rule RestrictedKeyStringValueAnnotation
ruleRestrictedKeyStringValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getGroup()); }
(rule__RestrictedKeyStringValueAnnotation__Group__0)
{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringPragma
entryRuleStringPragma 
:
{ before(grammarAccess.getStringPragmaRule()); }
	 ruleStringPragma
{ after(grammarAccess.getStringPragmaRule()); } 
	 EOF 
;

// Rule StringPragma
ruleStringPragma
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringPragmaAccess().getGroup()); }
(rule__StringPragma__Group__0)
{ after(grammarAccess.getStringPragmaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypedKeyStringValueAnnotation
entryRuleTypedKeyStringValueAnnotation 
:
{ before(grammarAccess.getTypedKeyStringValueAnnotationRule()); }
	 ruleTypedKeyStringValueAnnotation
{ after(grammarAccess.getTypedKeyStringValueAnnotationRule()); } 
	 EOF 
;

// Rule TypedKeyStringValueAnnotation
ruleTypedKeyStringValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup()); }
(rule__TypedKeyStringValueAnnotation__Group__0)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRestrictedTypedKeyStringValueAnnotation
entryRuleRestrictedTypedKeyStringValueAnnotation 
:
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()); }
	 ruleRestrictedTypedKeyStringValueAnnotation
{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()); } 
	 EOF 
;

// Rule RestrictedTypedKeyStringValueAnnotation
ruleRestrictedTypedKeyStringValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getGroup()); }
(rule__RestrictedTypedKeyStringValueAnnotation__Group__0)
{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuotedKeyStringValueAnnotation
entryRuleQuotedKeyStringValueAnnotation 
:
{ before(grammarAccess.getQuotedKeyStringValueAnnotationRule()); }
	 ruleQuotedKeyStringValueAnnotation
{ after(grammarAccess.getQuotedKeyStringValueAnnotationRule()); } 
	 EOF 
;

// Rule QuotedKeyStringValueAnnotation
ruleQuotedKeyStringValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getGroup()); }
(rule__QuotedKeyStringValueAnnotation__Group__0)
{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuotedTypedKeyStringValueAnnotation
entryRuleQuotedTypedKeyStringValueAnnotation 
:
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()); }
	 ruleQuotedTypedKeyStringValueAnnotation
{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()); } 
	 EOF 
;

// Rule QuotedTypedKeyStringValueAnnotation
ruleQuotedTypedKeyStringValueAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getGroup()); }
(rule__QuotedTypedKeyStringValueAnnotation__Group__0)
{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEStringBoolean
entryRuleEStringBoolean 
:
{ before(grammarAccess.getEStringBooleanRule()); }
	 ruleEStringBoolean
{ after(grammarAccess.getEStringBooleanRule()); } 
	 EOF 
;

// Rule EStringBoolean
ruleEStringBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringBooleanAccess().getAlternatives()); }
(rule__EStringBoolean__Alternatives)
{ after(grammarAccess.getEStringBooleanAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEStringAllTypes
entryRuleEStringAllTypes 
:
{ before(grammarAccess.getEStringAllTypesRule()); }
	 ruleEStringAllTypes
{ after(grammarAccess.getEStringAllTypesRule()); } 
	 EOF 
;

// Rule EStringAllTypes
ruleEStringAllTypes
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAllTypesAccess().getAlternatives()); }
(rule__EStringAllTypes__Alternatives)
{ after(grammarAccess.getEStringAllTypesAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExtendedID
entryRuleExtendedID 
:
{ before(grammarAccess.getExtendedIDRule()); }
	 ruleExtendedID
{ after(grammarAccess.getExtendedIDRule()); } 
	 EOF 
;

// Rule ExtendedID
ruleExtendedID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup()); }
(rule__ExtendedID__Group__0)
{ after(grammarAccess.getExtendedIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getGroup()); }
(rule__Integer__Group__0)
{ after(grammarAccess.getIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloateger
entryRuleFloateger 
:
{ before(grammarAccess.getFloategerRule()); }
	 ruleFloateger
{ after(grammarAccess.getFloategerRule()); } 
	 EOF 
;

// Rule Floateger
ruleFloateger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloategerAccess().getGroup()); }
(rule__Floateger__Group__0)
{ after(grammarAccess.getFloategerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule DOMEvent
ruleDOMEvent
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDOMEventAccess().getAlternatives()); }
(rule__DOMEvent__Alternatives)
{ after(grammarAccess.getDOMEventAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SimulationOperation
ruleSimulationOperation
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationOperationAccess().getAlternatives()); }
(rule__SimulationOperation__Alternatives)
{ after(grammarAccess.getSimulationOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Sign
ruleSign
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignAccess().getAlternatives()); }
(rule__Sign__Alternatives)
{ after(grammarAccess.getSignAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PreOperator
rulePreOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); }
(	'pre' 
)
{ after(grammarAccess.getPreOperatorAccess().getPREEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BitwiseNotOperator
ruleBitwiseNotOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseNotOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration()); }
(	'~' 
)
{ after(grammarAccess.getBitwiseNotOperatorAccess().getBITWISE_NOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BitwiseXOrOperator
ruleBitwiseXOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrOperatorAccess().getBITWISE_XOREnumLiteralDeclaration()); }
(	'^' 
)
{ after(grammarAccess.getBitwiseXOrOperatorAccess().getBITWISE_XOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BitwiseOrOperator
ruleBitwiseOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrOperatorAccess().getBITWISE_OREnumLiteralDeclaration()); }
(	'|' 
)
{ after(grammarAccess.getBitwiseOrOperatorAccess().getBITWISE_OREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BitwiseAndOperator
ruleBitwiseAndOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration()); }
(	'&' 
)
{ after(grammarAccess.getBitwiseAndOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NotOperator
ruleNotOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
(	'!' 
)
{ after(grammarAccess.getNotOperatorAccess().getNOTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AddOperator
ruleAddOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); }
(	'+' 
)
{ after(grammarAccess.getAddOperatorAccess().getADDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SubOperator
ruleSubOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); }
(	'-' 
)
{ after(grammarAccess.getSubOperatorAccess().getSUBEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultOperator
ruleMultOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); }
(	'*' 
)
{ after(grammarAccess.getMultOperatorAccess().getMULTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ModOperator
ruleModOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); }
(	'%' 
)
{ after(grammarAccess.getModOperatorAccess().getMODEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule DivOperator
ruleDivOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
(	'/' 
)
{ after(grammarAccess.getDivOperatorAccess().getDIVEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValOperator
ruleValOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); }
(	'val' 
)
{ after(grammarAccess.getValOperatorAccess().getVALEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicalOrOperator
ruleLogicalOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrOperatorAccess().getLOGICAL_OREnumLiteralDeclaration()); }
(	'||' 
)
{ after(grammarAccess.getLogicalOrOperatorAccess().getLOGICAL_OREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicalAndOperator
ruleLogicalAndOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration()); }
(	'&&' 
)
{ after(grammarAccess.getLogicalAndOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ShiftLeftOperator
ruleShiftLeftOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftOperatorAccess().getSHIFT_LEFTEnumLiteralDeclaration()); }
(	'<<' 
)
{ after(grammarAccess.getShiftLeftOperatorAccess().getSHIFT_LEFTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ShiftRightOperator
ruleShiftRightOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightOperatorAccess().getSHIFT_RIGHTEnumLiteralDeclaration()); }
(	'>>' 
)
{ after(grammarAccess.getShiftRightOperatorAccess().getSHIFT_RIGHTEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ShiftRightUnsignedOperator
ruleShiftRightUnsignedOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedOperatorAccess().getSHIFT_RIGHT_UNSIGNEDEnumLiteralDeclaration()); }
(	'>>>' 
)
{ after(grammarAccess.getShiftRightUnsignedOperatorAccess().getSHIFT_RIGHT_UNSIGNEDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Rule ConditionalOperator
ruleConditionalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOperatorAccess().getCONDITIONALEnumLiteralDeclaration()); }
(	'?' 
)
{ after(grammarAccess.getConditionalOperatorAccess().getCONDITIONALEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__VisualizationConfiguration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getElementsAssignment_1_0()); }
(rule__VisualizationConfiguration__ElementsAssignment_1_0)
{ after(grammarAccess.getVisualizationConfigurationAccess().getElementsAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getVisualizationConfigurationAccess().getInteractionsAssignment_1_1()); }
(rule__VisualizationConfiguration__InteractionsAssignment_1_1)
{ after(grammarAccess.getVisualizationConfigurationAccess().getInteractionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getVariableAssignmentParserRuleCall_0()); }
	ruleVariableAssignment
{ after(grammarAccess.getActionAccess().getVariableAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getSimulationActionParserRuleCall_1()); }
	ruleSimulationAction
{ after(grammarAccess.getActionAccess().getSimulationActionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getLiteralAssignment_2_0()); }
(rule__AttributeMapping__LiteralAssignment_2_0)
{ after(grammarAccess.getAttributeMappingAccess().getLiteralAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getAttributeMappingAccess().getGroup_2_1()); }
(rule__AttributeMapping__Group_2_1__0)
{ after(grammarAccess.getAttributeMappingAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_2_0()); }
(rule__Comparison__RightAssignment_2_0)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_2_1()); }
(rule__Comparison__RightAssignment_2_1)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDomain__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDomainAccess().getValueAssignment_0()); }
(rule__VariableDomain__ValueAssignment_0)
{ after(grammarAccess.getVariableDomainAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getVariableDomainAccess().getRangeAssignment_1()); }
(rule__VariableDomain__RangeAssignment_1)
{ after(grammarAccess.getVariableDomainAccess().getRangeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getFromAssignment_0_0()); }
(rule__Interval__FromAssignment_0_0)
{ after(grammarAccess.getIntervalAccess().getFromAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getIntervalAccess().getFromAssignment_0_1()); }
(rule__Interval__FromAssignment_0_1)
{ after(grammarAccess.getIntervalAccess().getFromAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getToAssignment_2_0()); }
(rule__Interval__ToAssignment_2_0)
{ after(grammarAccess.getIntervalAccess().getToAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getIntervalAccess().getToAssignment_2_1()); }
(rule__Interval__ToAssignment_2_1)
{ after(grammarAccess.getIntervalAccess().getToAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateProcessor__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateProcessorAccess().getNormalTemplateProcessorParserRuleCall_0()); }
	ruleNormalTemplateProcessor
{ after(grammarAccess.getTemplateProcessorAccess().getNormalTemplateProcessorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTemplateProcessorAccess().getSimulationTemplateProcessorParserRuleCall_1()); }
	ruleSimulationTemplateProcessor
{ after(grammarAccess.getTemplateProcessorAccess().getSimulationTemplateProcessorParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTemplateProcessorAccess().getWrapperCodeTemplateProcessorParserRuleCall_2()); }
	ruleWrapperCodeTemplateProcessor
{ after(grammarAccess.getTemplateProcessorAccess().getWrapperCodeTemplateProcessorParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueAssignment_0()); }
(rule__Literal__ValueAssignment_0)
{ after(grammarAccess.getLiteralAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getValueAssignment_1()); }
(rule__Literal__ValueAssignment_1)
{ after(grammarAccess.getLiteralAccess().getValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getValueAssignment_2()); }
(rule__Literal__ValueAssignment_2)
{ after(grammarAccess.getLiteralAccess().getValueAssignment_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getValueAssignment_3()); }
(rule__Literal__ValueAssignment_3)
{ after(grammarAccess.getLiteralAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getBoolExpressionParserRuleCall_0_0()); }
	ruleBoolExpression
{ after(grammarAccess.getExpressionAccess().getBoolExpressionParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_0_1()); }
	ruleValuedExpression
{ after(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOrValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); }
	ruleValuedExpression
{ after(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); }
	ruleNotExpression
{ after(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseNotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseNotExpressionAccess().getGroup_0()); }
(rule__BitwiseNotExpression__Group_0__0)
{ after(grammarAccess.getBitwiseNotExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBitwiseNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); }
	ruleAtomicExpression
{ after(grammarAccess.getBitwiseNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup_0()); }
(rule__NotExpression__Group_0__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNotExpressionAccess().getBitwiseNotExpressionParserRuleCall_1()); }
	ruleBitwiseNotExpression
{ after(grammarAccess.getNotExpressionAccess().getBitwiseNotExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getGroup_0()); }
(rule__NegExpression__Group_0__0)
{ after(grammarAccess.getNegExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNegExpressionAccess().getTernaryOperationParserRuleCall_1()); }
	ruleTernaryOperation
{ after(grammarAccess.getNegExpressionAccess().getTernaryOperationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getGroup_0()); }
(rule__TernaryOperation__Group_0__0)
{ after(grammarAccess.getTernaryOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTernaryOperationAccess().getAtomicValuedExpressionParserRuleCall_1()); }
	ruleAtomicValuedExpression
{ after(grammarAccess.getTernaryOperationAccess().getAtomicValuedExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getBoolValueParserRuleCall_0()); }
	ruleBoolValue
{ after(grammarAccess.getAtomicExpressionAccess().getBoolValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1()); }
	ruleValuedObjectTestExpression
{ after(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
(rule__AtomicExpression__Group_2__0)
{ after(grammarAccess.getAtomicExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getReferenceCallParserRuleCall_3()); }
	ruleReferenceCall
{ after(grammarAccess.getAtomicExpressionAccess().getReferenceCallParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getFunctionCallParserRuleCall_4()); }
	ruleFunctionCall
{ after(grammarAccess.getAtomicExpressionAccess().getFunctionCallParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_5()); }
	ruleTextExpression
{ after(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
	ruleFloatValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getStringValueParserRuleCall_2()); }
	ruleStringValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getStringValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getVectorValueParserRuleCall_3()); }
	ruleVectorValue
{ after(grammarAccess.getAtomicValuedExpressionAccess().getVectorValueParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getGroup_4()); }
(rule__AtomicValuedExpression__Group_4__0)
{ after(grammarAccess.getAtomicValuedExpressionAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_5()); }
	ruleAtomicExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_0()); }
(rule__ValuedObjectTestExpression__Group_0__0)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_1()); }
	ruleValuedObjectReference
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getValuedObjectReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__OperatorAlternatives_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0_0()); }
	rulePreOperator
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorPreOperatorEnumRuleCall_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValOperatorEnumRuleCall_0_1_0_1()); }
	ruleValOperator
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorValOperatorEnumRuleCall_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getGroup_1_0()); }
(rule__ReferenceCall__Group_1_0__0)
{ after(grammarAccess.getReferenceCallAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getReferenceCallAccess().getLeftParenthesisRightParenthesisKeyword_1_1()); }

	'()' 

{ after(grammarAccess.getReferenceCallAccess().getLeftParenthesisRightParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2_0()); }
(rule__FunctionCall__Group_2_0__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_2_1()); }

	'()' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisRightParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValueMember__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueMemberAccess().getBoolExpressionParserRuleCall_0()); }
	ruleBoolExpression
{ after(grammarAccess.getVectorValueMemberAccess().getBoolExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVectorValueMemberAccess().getValuedExpressionParserRuleCall_1()); }
	ruleValuedExpression
{ after(grammarAccess.getVectorValueMemberAccess().getValuedExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVectorValueMemberAccess().getIgnoreValueParserRuleCall_2()); }
	ruleIgnoreValue
{ after(grammarAccess.getVectorValueMemberAccess().getIgnoreValueParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AnyValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyValueAccess().getIntValueParserRuleCall_0()); }
	ruleIntValue
{ after(grammarAccess.getAnyValueAccess().getIntValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAnyValueAccess().getFloatValueParserRuleCall_1()); }
	ruleFloatValue
{ after(grammarAccess.getAnyValueAccess().getFloatValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAnyValueAccess().getBoolValueParserRuleCall_2()); }
	ruleBoolValue
{ after(grammarAccess.getAnyValueAccess().getBoolValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAnyValueAccess().getStringValueParserRuleCall_3()); }
	ruleStringValue
{ after(grammarAccess.getAnyValueAccess().getStringValueParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__EStringBoolean__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringBooleanAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringBooleanAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringBooleanAccess().getExtendedIDParserRuleCall_1()); }
	ruleExtendedID
{ after(grammarAccess.getEStringBooleanAccess().getExtendedIDParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEStringBooleanAccess().getBOOLEANTerminalRuleCall_2()); }
	RULE_BOOLEAN
{ after(grammarAccess.getEStringBooleanAccess().getBOOLEANTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EStringAllTypes__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAllTypesAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAllTypesAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAllTypesAccess().getExtendedIDParserRuleCall_1()); }
	ruleExtendedID
{ after(grammarAccess.getEStringAllTypesAccess().getExtendedIDParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEStringAllTypesAccess().getBOOLEANTerminalRuleCall_2()); }
	RULE_BOOLEAN
{ after(grammarAccess.getEStringAllTypesAccess().getBOOLEANTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getEStringAllTypesAccess().getIntegerParserRuleCall_3()); }
	ruleInteger
{ after(grammarAccess.getEStringAllTypesAccess().getIntegerParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getEStringAllTypesAccess().getFloategerParserRuleCall_4()); }
	ruleFloateger
{ after(grammarAccess.getEStringAllTypesAccess().getFloategerParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0_0()); }

	'.' 

{ after(grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getExtendedIDAccess().getHyphenMinusKeyword_1_0_1()); }

	'-' 

{ after(grammarAccess.getExtendedIDAccess().getHyphenMinusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DOMEvent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDOMEventAccess().getCLICKEnumLiteralDeclaration_0()); }
(	'click' 
)
{ after(grammarAccess.getDOMEventAccess().getCLICKEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDOMEventAccess().getMOUSEDOWNEnumLiteralDeclaration_1()); }
(	'mousedown' 
)
{ after(grammarAccess.getDOMEventAccess().getMOUSEDOWNEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getDOMEventAccess().getMOUSEUPEnumLiteralDeclaration_2()); }
(	'mouseup' 
)
{ after(grammarAccess.getDOMEventAccess().getMOUSEUPEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getDOMEventAccess().getMOUSEMOVEEnumLiteralDeclaration_3()); }
(	'mousemove' 
)
{ after(grammarAccess.getDOMEventAccess().getMOUSEMOVEEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationOperationAccess().getSTEPEnumLiteralDeclaration_0()); }
(	'step' 
)
{ after(grammarAccess.getSimulationOperationAccess().getSTEPEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSimulationOperationAccess().getSTOPEnumLiteralDeclaration_1()); }
(	'stop' 
)
{ after(grammarAccess.getSimulationOperationAccess().getSTOPEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getSimulationOperationAccess().getPAUSEEnumLiteralDeclaration_2()); }
(	'pause' 
)
{ after(grammarAccess.getSimulationOperationAccess().getPAUSEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getSimulationOperationAccess().getPLAYEnumLiteralDeclaration_3()); }
(	'play' 
)
{ after(grammarAccess.getSimulationOperationAccess().getPLAYEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sign__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignAccess().getPOSITIVEEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getSignAccess().getPOSITIVEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSignAccess().getNEGATIVEEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getSignAccess().getNEGATIVEEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__VisualizationConfiguration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VisualizationConfiguration__Group__0__Impl
	rule__VisualizationConfiguration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VisualizationConfiguration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getGroup_0()); }
(rule__VisualizationConfiguration__Group_0__0)?
{ after(grammarAccess.getVisualizationConfigurationAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VisualizationConfiguration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VisualizationConfiguration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VisualizationConfiguration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getAlternatives_1()); }
(rule__VisualizationConfiguration__Alternatives_1)*
{ after(grammarAccess.getVisualizationConfigurationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VisualizationConfiguration__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VisualizationConfiguration__Group_0__0__Impl
	rule__VisualizationConfiguration__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VisualizationConfiguration__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getImageKeyword_0_0()); }

	'image' 

{ after(grammarAccess.getVisualizationConfigurationAccess().getImageKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VisualizationConfiguration__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VisualizationConfiguration__Group_0__1__Impl
	rule__VisualizationConfiguration__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VisualizationConfiguration__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getColonKeyword_0_1()); }

	':' 

{ after(grammarAccess.getVisualizationConfigurationAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VisualizationConfiguration__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VisualizationConfiguration__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VisualizationConfiguration__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getImageAssignment_0_2()); }
(rule__VisualizationConfiguration__ImageAssignment_0_2)
{ after(grammarAccess.getVisualizationConfigurationAccess().getImageAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Element__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__0__Impl
	rule__Element__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getAnimateKeyword_0()); }

	'animate' 

{ after(grammarAccess.getElementAccess().getAnimateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__1__Impl
	rule__Element__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameAssignment_1()); }
(rule__Element__NameAssignment_1)
{ after(grammarAccess.getElementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__2__Impl
	rule__Element__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getElementAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__3__Impl
	rule__Element__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getElementAccess().getAnimationsAssignment_3()); }
(rule__Element__AnimationsAssignment_3)
{ after(grammarAccess.getElementAccess().getAnimationsAssignment_3()); }
)
(
{ before(grammarAccess.getElementAccess().getAnimationsAssignment_3()); }
(rule__Element__AnimationsAssignment_3)*
{ after(grammarAccess.getElementAccess().getAnimationsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getElementAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Interaction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__0__Impl
	rule__Interaction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getInteractionAction_0()); }
(

)
{ after(grammarAccess.getInteractionAccess().getInteractionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__1__Impl
	rule__Interaction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getPerformKeyword_1()); }

	'perform' 

{ after(grammarAccess.getInteractionAccess().getPerformKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__2__Impl
	rule__Interaction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getGroup_2()); }
(rule__Interaction__Group_2__0)?
{ after(grammarAccess.getInteractionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__3__Impl
	rule__Interaction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getInteractionAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__4__Impl
	rule__Interaction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getActionsAssignment_4()); }
(rule__Interaction__ActionsAssignment_4)*
{ after(grammarAccess.getInteractionAccess().getActionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__5__Impl
	rule__Interaction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getInteractionAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getGroup_6()); }
(rule__Interaction__Group_6__0)?
{ after(grammarAccess.getInteractionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Interaction__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group_2__0__Impl
	rule__Interaction__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getOnKeyword_2_0()); }

	'on' 

{ after(grammarAccess.getInteractionAccess().getOnKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getEventAssignment_2_1()); }
(rule__Interaction__EventAssignment_2_1)
{ after(grammarAccess.getInteractionAccess().getEventAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Interaction__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group_6__0__Impl
	rule__Interaction__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getWhenKeyword_6_0()); }

	'when' 

{ after(grammarAccess.getInteractionAccess().getWhenKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interaction__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interaction__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getConditionAssignment_6_1()); }
(rule__Interaction__ConditionAssignment_6_1)
{ after(grammarAccess.getInteractionAccess().getConditionAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventAssignment_0()); }
(rule__Event__EventAssignment_0)
{ after(grammarAccess.getEventAccess().getEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getFromKeyword_1()); }

	'from' 

{ after(grammarAccess.getEventAccess().getFromKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getElementAssignment_2()); }
(rule__Event__ElementAssignment_2)
{ after(grammarAccess.getEventAccess().getElementAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableAssignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignment__Group__0__Impl
	rule__VariableAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getVariableAssignment_0()); }
(rule__VariableAssignment__VariableAssignment_0)
{ after(grammarAccess.getVariableAssignmentAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignment__Group__1__Impl
	rule__VariableAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getValueAssignment_2()); }
(rule__VariableAssignment__ValueAssignment_2)
{ after(grammarAccess.getVariableAssignmentAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimulationAction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationAction__Group__0__Impl
	rule__SimulationAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationAction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationActionAccess().getOperationAssignment_0()); }
(rule__SimulationAction__OperationAssignment_0)
{ after(grammarAccess.getSimulationActionAccess().getOperationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationAction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationAction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationActionAccess().getSimulationKeyword_1()); }

	'simulation' 

{ after(grammarAccess.getSimulationActionAccess().getSimulationKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Animation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__0__Impl
	rule__Animation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getApplyKeyword_0()); }

	'apply' 

{ after(grammarAccess.getAnimationAccess().getApplyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__1__Impl
	rule__Animation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getTypeAssignment_1()); }
(rule__Animation__TypeAssignment_1)
{ after(grammarAccess.getAnimationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__2__Impl
	rule__Animation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getGroup_2()); }
(rule__Animation__Group_2__0)?
{ after(grammarAccess.getAnimationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__3__Impl
	rule__Animation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getAnimationAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__4__Impl
	rule__Animation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getAttributeMappingsAssignment_4()); }
(rule__Animation__AttributeMappingsAssignment_4)*
{ after(grammarAccess.getAnimationAccess().getAttributeMappingsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__5__Impl
	rule__Animation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getAnimationAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getGroup_6()); }
(rule__Animation__Group_6__0)?
{ after(grammarAccess.getAnimationAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Animation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group_2__0__Impl
	rule__Animation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getUsingKeyword_2_0()); }

	'using' 

{ after(grammarAccess.getAnimationAccess().getUsingKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getVariableAssignment_2_1()); }
(rule__Animation__VariableAssignment_2_1)
{ after(grammarAccess.getAnimationAccess().getVariableAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Animation__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group_6__0__Impl
	rule__Animation__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getWhenKeyword_6_0()); }

	'when' 

{ after(grammarAccess.getAnimationAccess().getWhenKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getConditionAssignment_6_1()); }
(rule__Animation__ConditionAssignment_6_1)
{ after(grammarAccess.getAnimationAccess().getConditionAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeMapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group__0__Impl
	rule__AttributeMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getAttributeAssignment_0()); }
(rule__AttributeMapping__AttributeAssignment_0)
{ after(grammarAccess.getAttributeMappingAccess().getAttributeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group__1__Impl
	rule__AttributeMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getAttributeMappingAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getAlternatives_2()); }
(rule__AttributeMapping__Alternatives_2)
{ after(grammarAccess.getAttributeMappingAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AttributeMapping__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group_2_1__0__Impl
	rule__AttributeMapping__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getMappingsAssignment_2_1_0()); }
(rule__AttributeMapping__MappingsAssignment_2_1_0)
{ after(grammarAccess.getAttributeMappingAccess().getMappingsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMapping__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getGroup_2_1_1()); }
(rule__AttributeMapping__Group_2_1_1__0)*
{ after(grammarAccess.getAttributeMappingAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeMapping__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group_2_1_1__0__Impl
	rule__AttributeMapping__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getCommaKeyword_2_1_1_0()); }

	',' 

{ after(grammarAccess.getAttributeMappingAccess().getCommaKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMapping__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getMappingsAssignment_2_1_1_1()); }
(rule__AttributeMapping__MappingsAssignment_2_1_1_1)
{ after(grammarAccess.getAttributeMappingAccess().getMappingsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getVariableDomainAssignment_0()); }
(rule__Mapping__VariableDomainAssignment_0)
{ after(grammarAccess.getMappingAccess().getVariableDomainAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getIsKeyword_1()); }

	'is' 

{ after(grammarAccess.getMappingAccess().getIsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getAttributeDomainAssignment_2()); }
(rule__Mapping__AttributeDomainAssignment_2)
{ after(grammarAccess.getMappingAccess().getAttributeDomainAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
{ after(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
(rule__AndExpression__Group_1_0__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
(rule__AndExpression__RightAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0__0__Impl
	rule__AndExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_0_1()); }
(rule__AndExpression__OperatorAssignment_1_0_1)
{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLeftAssignment_0()); }
(rule__Comparison__LeftAssignment_0)
{ after(grammarAccess.getComparisonAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRelationAssignment_1()); }
(rule__Comparison__RelationAssignment_1)
{ after(grammarAccess.getComparisonAccess().getRelationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAlternatives_2()); }
(rule__Comparison__Alternatives_2)
{ after(grammarAccess.getComparisonAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Interval__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group__0__Impl
	rule__Interval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getAlternatives_0()); }
(rule__Interval__Alternatives_0)
{ after(grammarAccess.getIntervalAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group__1__Impl
	rule__Interval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getRangeParserRuleCall_1()); }
	ruleRange
{ after(grammarAccess.getIntervalAccess().getRangeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getAlternatives_2()); }
(rule__Interval__Alternatives_2)
{ after(grammarAccess.getIntervalAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__0__Impl
	rule__VariableReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getModelAssignment_0()); }
(rule__VariableReference__ModelAssignment_0)?
{ after(grammarAccess.getVariableReferenceAccess().getModelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__1__Impl
	rule__VariableReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getNameAssignment_1()); }
(rule__VariableReference__NameAssignment_1)
{ after(grammarAccess.getVariableReferenceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_2()); }
(rule__VariableReference__Group_2__0)*
{ after(grammarAccess.getVariableReferenceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__0__Impl
	rule__VariableReference__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getVariableReferenceAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__1__Impl
	rule__VariableReference__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getIndicesAssignment_2_1()); }
(rule__VariableReference__IndicesAssignment_2_1)
{ after(grammarAccess.getVariableReferenceAccess().getIndicesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getVariableReferenceAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModelReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelReference__Group__0__Impl
	rule__ModelReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getNameAssignment_0()); }
(rule__ModelReference__NameAssignment_0)
{ after(grammarAccess.getModelReferenceAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getModelReferenceAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ModelCompiler__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelCompiler__Group__0__Impl
	rule__ModelCompiler__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getModelKeyword_0()); }

	'model' 

{ after(grammarAccess.getModelCompilerAccess().getModelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelCompiler__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelCompiler__Group__1__Impl
	rule__ModelCompiler__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getCompilerKeyword_1()); }

	'compiler' 

{ after(grammarAccess.getModelCompilerAccess().getCompilerKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelCompiler__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelCompiler__Group__2__Impl
	rule__ModelCompiler__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getNameAssignment_2()); }
(rule__ModelCompiler__NameAssignment_2)
{ after(grammarAccess.getModelCompilerAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelCompiler__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelCompiler__Group__3__Impl
	rule__ModelCompiler__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getModelCompilerAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelCompiler__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelCompiler__Group__4__Impl
	rule__ModelCompiler__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getAttributesAssignment_4()); }
(rule__ModelCompiler__AttributesAssignment_4)*
{ after(grammarAccess.getModelCompilerAccess().getAttributesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelCompiler__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelCompiler__Group__5__Impl
	rule__ModelCompiler__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getSimulationProcessorAssignment_5()); }
(rule__ModelCompiler__SimulationProcessorAssignment_5)?
{ after(grammarAccess.getModelCompilerAccess().getSimulationProcessorAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelCompiler__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelCompiler__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getModelCompilerAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SimulationCompiler__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationCompiler__Group__0__Impl
	rule__SimulationCompiler__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationCompiler__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationCompilerAccess().getSimulationKeyword_0()); }

	'simulation' 

{ after(grammarAccess.getSimulationCompilerAccess().getSimulationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationCompiler__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationCompiler__Group__1__Impl
	rule__SimulationCompiler__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationCompiler__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationCompilerAccess().getCompilerKeyword_1()); }

	'compiler' 

{ after(grammarAccess.getSimulationCompilerAccess().getCompilerKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationCompiler__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationCompiler__Group__2__Impl
	rule__SimulationCompiler__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationCompiler__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationCompilerAccess().getNameAssignment_2()); }
(rule__SimulationCompiler__NameAssignment_2)
{ after(grammarAccess.getSimulationCompilerAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationCompiler__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationCompiler__Group__3__Impl
	rule__SimulationCompiler__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationCompiler__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationCompilerAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getSimulationCompilerAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationCompiler__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationCompiler__Group__4__Impl
	rule__SimulationCompiler__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationCompiler__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationCompilerAccess().getAttributesAssignment_4()); }
(rule__SimulationCompiler__AttributesAssignment_4)*
{ after(grammarAccess.getSimulationCompilerAccess().getAttributesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationCompiler__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationCompiler__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationCompiler__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationCompilerAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSimulationCompilerAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__NormalTemplateProcessor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalTemplateProcessor__Group__0__Impl
	rule__NormalTemplateProcessor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalTemplateProcessor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalTemplateProcessorAccess().getProcessKeyword_0()); }

	'process' 

{ after(grammarAccess.getNormalTemplateProcessorAccess().getProcessKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalTemplateProcessor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalTemplateProcessor__Group__1__Impl
	rule__NormalTemplateProcessor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalTemplateProcessor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalTemplateProcessorAccess().getTemplateKeyword_1()); }

	'template' 

{ after(grammarAccess.getNormalTemplateProcessorAccess().getTemplateKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalTemplateProcessor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalTemplateProcessor__Group__2__Impl
	rule__NormalTemplateProcessor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalTemplateProcessor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalTemplateProcessorAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getNormalTemplateProcessorAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalTemplateProcessor__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalTemplateProcessor__Group__3__Impl
	rule__NormalTemplateProcessor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalTemplateProcessor__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalTemplateProcessorAccess().getNormalTemplateProcessorAction_3()); }
(

)
{ after(grammarAccess.getNormalTemplateProcessorAccess().getNormalTemplateProcessorAction_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalTemplateProcessor__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalTemplateProcessor__Group__4__Impl
	rule__NormalTemplateProcessor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalTemplateProcessor__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalTemplateProcessorAccess().getAttributesAssignment_4()); }
(rule__NormalTemplateProcessor__AttributesAssignment_4)*
{ after(grammarAccess.getNormalTemplateProcessorAccess().getAttributesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalTemplateProcessor__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalTemplateProcessor__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalTemplateProcessor__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalTemplateProcessorAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getNormalTemplateProcessorAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SimulationTemplateProcessor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationTemplateProcessor__Group__0__Impl
	rule__SimulationTemplateProcessor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationTemplateProcessor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getProcessKeyword_0()); }

	'process' 

{ after(grammarAccess.getSimulationTemplateProcessorAccess().getProcessKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationTemplateProcessor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationTemplateProcessor__Group__1__Impl
	rule__SimulationTemplateProcessor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationTemplateProcessor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getSimulationKeyword_1()); }

	'simulation' 

{ after(grammarAccess.getSimulationTemplateProcessorAccess().getSimulationKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationTemplateProcessor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationTemplateProcessor__Group__2__Impl
	rule__SimulationTemplateProcessor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationTemplateProcessor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getTemplateKeyword_2()); }

	'template' 

{ after(grammarAccess.getSimulationTemplateProcessorAccess().getTemplateKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationTemplateProcessor__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationTemplateProcessor__Group__3__Impl
	rule__SimulationTemplateProcessor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationTemplateProcessor__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getSimulationTemplateProcessorAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationTemplateProcessor__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationTemplateProcessor__Group__4__Impl
	rule__SimulationTemplateProcessor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationTemplateProcessor__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getSimulationTemplateProcessorAction_4()); }
(

)
{ after(grammarAccess.getSimulationTemplateProcessorAccess().getSimulationTemplateProcessorAction_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationTemplateProcessor__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationTemplateProcessor__Group__5__Impl
	rule__SimulationTemplateProcessor__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationTemplateProcessor__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getAttributesAssignment_5()); }
(rule__SimulationTemplateProcessor__AttributesAssignment_5)*
{ after(grammarAccess.getSimulationTemplateProcessorAccess().getAttributesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimulationTemplateProcessor__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimulationTemplateProcessor__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationTemplateProcessor__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getSimulationTemplateProcessorAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__WrapperCodeTemplateProcessor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrapperCodeTemplateProcessor__Group__0__Impl
	rule__WrapperCodeTemplateProcessor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WrapperCodeTemplateProcessor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getProcessKeyword_0()); }

	'process' 

{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getProcessKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WrapperCodeTemplateProcessor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrapperCodeTemplateProcessor__Group__1__Impl
	rule__WrapperCodeTemplateProcessor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WrapperCodeTemplateProcessor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getWrapperKeyword_1()); }

	'wrapper' 

{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getWrapperKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WrapperCodeTemplateProcessor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrapperCodeTemplateProcessor__Group__2__Impl
	rule__WrapperCodeTemplateProcessor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WrapperCodeTemplateProcessor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getTemplateKeyword_2()); }

	'template' 

{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getTemplateKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WrapperCodeTemplateProcessor__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrapperCodeTemplateProcessor__Group__3__Impl
	rule__WrapperCodeTemplateProcessor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WrapperCodeTemplateProcessor__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WrapperCodeTemplateProcessor__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrapperCodeTemplateProcessor__Group__4__Impl
	rule__WrapperCodeTemplateProcessor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WrapperCodeTemplateProcessor__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getWrapperCodeTemplateProcessorAction_4()); }
(

)
{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getWrapperCodeTemplateProcessorAction_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WrapperCodeTemplateProcessor__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrapperCodeTemplateProcessor__Group__5__Impl
	rule__WrapperCodeTemplateProcessor__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__WrapperCodeTemplateProcessor__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getAttributesAssignment_5()); }
(rule__WrapperCodeTemplateProcessor__AttributesAssignment_5)*
{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getAttributesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WrapperCodeTemplateProcessor__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WrapperCodeTemplateProcessor__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WrapperCodeTemplateProcessor__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SignedFloat__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__0__Impl
	rule__SignedFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getSignAssignment_0()); }
(rule__SignedFloat__SignAssignment_0)?
{ after(grammarAccess.getSignedFloatAccess().getSignAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedFloat__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getValueAssignment_1()); }
(rule__SignedFloat__ValueAssignment_1)
{ after(grammarAccess.getSignedFloatAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__0__Impl
	rule__SignedInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getSignAssignment_0()); }
(rule__SignedInt__SignAssignment_0)?
{ after(grammarAccess.getSignedIntAccess().getSignAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getValueAssignment_1()); }
(rule__SignedInt__ValueAssignment_1)
{ after(grammarAccess.getSignedIntAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives_0()); }
(rule__Expression__Alternatives_0)
{ after(grammarAccess.getExpressionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)?
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getScheduleKeyword_1_0()); }

	'schedule' 

{ after(grammarAccess.getExpressionAccess().getScheduleKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExpressionAccess().getScheduleAssignment_1_1()); }
(rule__Expression__ScheduleAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getScheduleAssignment_1_1()); }
)
(
{ before(grammarAccess.getExpressionAccess().getScheduleAssignment_1_1()); }
(rule__Expression__ScheduleAssignment_1_1)*
{ after(grammarAccess.getExpressionAccess().getScheduleAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)?
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
(rule__LogicalOrExpression__Group_1_1__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_2()); }
(rule__LogicalOrExpression__Group_1_2__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalOrExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1_1__0__Impl
	rule__LogicalOrExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__LogicalOrExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__LogicalOrExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1_2__0__Impl
	rule__LogicalOrExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_2_0()); }

	'||' 

{ after(grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__LogicalOrExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getBitwiseOrExpressionParserRuleCall_0()); }
	ruleBitwiseOrExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getBitwiseOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)?
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
(rule__LogicalAndExpression__Group_1_1__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_2()); }
(rule__LogicalAndExpression__Group_1_2__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1_1__0__Impl
	rule__LogicalAndExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__LogicalAndExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__LogicalAndExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1_2__0__Impl
	rule__LogicalAndExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_2_0()); }

	'&&' 

{ after(grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__LogicalAndExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group__0__Impl
	rule__BitwiseOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseXOrExpressionParserRuleCall_0()); }
	ruleBitwiseXOrExpression
{ after(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseXOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1()); }
(rule__BitwiseOrExpression__Group_1__0)?
{ after(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group_1__0__Impl
	rule__BitwiseOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group_1__1__Impl
	rule__BitwiseOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1_1()); }
(rule__BitwiseOrExpression__Group_1_1__0)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1_2()); }
(rule__BitwiseOrExpression__Group_1_2__0)*
{ after(grammarAccess.getBitwiseOrExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitwiseOrExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group_1_1__0__Impl
	rule__BitwiseOrExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__BitwiseOrExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__BitwiseOrExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseOrExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group_1_2__0__Impl
	rule__BitwiseOrExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getVerticalLineKeyword_1_2_0()); }

	'|' 

{ after(grammarAccess.getBitwiseOrExpressionAccess().getVerticalLineKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOrExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOrExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__BitwiseOrExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseXOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group__0__Impl
	rule__BitwiseXOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getBitwiseAndExpressionParserRuleCall_0()); }
	ruleBitwiseAndExpression
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getBitwiseAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getGroup_1()); }
(rule__BitwiseXOrExpression__Group_1__0)?
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseXOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group_1__0__Impl
	rule__BitwiseXOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group_1__1__Impl
	rule__BitwiseXOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getGroup_1_1()); }
(rule__BitwiseXOrExpression__Group_1_1__0)
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getGroup_1_2()); }
(rule__BitwiseXOrExpression__Group_1_2__0)*
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitwiseXOrExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group_1_1__0__Impl
	rule__BitwiseXOrExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__BitwiseXOrExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXOrExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__BitwiseXOrExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseXOrExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group_1_2__0__Impl
	rule__BitwiseXOrExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getCircumflexAccentKeyword_1_2_0()); }

	'^' 

{ after(grammarAccess.getBitwiseXOrExpressionAccess().getCircumflexAccentKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseXOrExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseXOrExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__BitwiseXOrExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group__0__Impl
	rule__BitwiseAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getCompareOperationParserRuleCall_0()); }
	ruleCompareOperation
{ after(grammarAccess.getBitwiseAndExpressionAccess().getCompareOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1()); }
(rule__BitwiseAndExpression__Group_1__0)?
{ after(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group_1__0__Impl
	rule__BitwiseAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group_1__1__Impl
	rule__BitwiseAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1_1()); }
(rule__BitwiseAndExpression__Group_1_1__0)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1_2()); }
(rule__BitwiseAndExpression__Group_1_2__0)*
{ after(grammarAccess.getBitwiseAndExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitwiseAndExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group_1_1__0__Impl
	rule__BitwiseAndExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__BitwiseAndExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__BitwiseAndExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseAndExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group_1_2__0__Impl
	rule__BitwiseAndExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getAmpersandKeyword_1_2_0()); }

	'&' 

{ after(grammarAccess.getBitwiseAndExpressionAccess().getAmpersandKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseAndExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseAndExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__BitwiseAndExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group__0__Impl
	rule__CompareOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0()); }
	ruleNotOrValuedExpression
{ after(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getGroup_1()); }
(rule__CompareOperation__Group_1__0)?
{ after(grammarAccess.getCompareOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompareOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__0__Impl
	rule__CompareOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__1__Impl
	rule__CompareOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
(rule__CompareOperation__OperatorAssignment_1_1)
{ after(grammarAccess.getCompareOperationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompareOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
(rule__CompareOperation__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BitwiseNotExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseNotExpression__Group_0__0__Impl
	rule__BitwiseNotExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseNotExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseNotExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getBitwiseNotExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseNotExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseNotExpression__Group_0__1__Impl
	rule__BitwiseNotExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseNotExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseNotExpressionAccess().getOperatorAssignment_0_1()); }
(rule__BitwiseNotExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getBitwiseNotExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseNotExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseNotExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseNotExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseNotExpressionAccess().getSubExpressionsAssignment_0_2()); }
(rule__BitwiseNotExpression__SubExpressionsAssignment_0_2)
{ after(grammarAccess.getBitwiseNotExpressionAccess().getSubExpressionsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__0__Impl
	rule__NotExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__1__Impl
	rule__NotExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
(rule__NotExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getNotExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_0_2()); }
(rule__NotExpression__SubExpressionsAssignment_0_2)
{ after(grammarAccess.getNotExpressionAccess().getSubExpressionsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftLeftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group__0__Impl
	rule__ShiftLeftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getShiftRightExpressionParserRuleCall_0()); }
	ruleShiftRightExpression
{ after(grammarAccess.getShiftLeftExpressionAccess().getShiftRightExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftLeftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getGroup_1()); }
(rule__ShiftLeftExpression__Group_1__0)?
{ after(grammarAccess.getShiftLeftExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftLeftExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group_1__0__Impl
	rule__ShiftLeftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftLeftExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group_1__1__Impl
	rule__ShiftLeftExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getGroup_1_1()); }
(rule__ShiftLeftExpression__Group_1_1__0)
{ after(grammarAccess.getShiftLeftExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftLeftExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getGroup_1_2()); }
(rule__ShiftLeftExpression__Group_1_2__0)*
{ after(grammarAccess.getShiftLeftExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftLeftExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group_1_1__0__Impl
	rule__ShiftLeftExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__ShiftLeftExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getShiftLeftExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftLeftExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__ShiftLeftExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getShiftLeftExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftLeftExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group_1_2__0__Impl
	rule__ShiftLeftExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getLessThanSignLessThanSignKeyword_1_2_0()); }

	'<<' 

{ after(grammarAccess.getShiftLeftExpressionAccess().getLessThanSignLessThanSignKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftLeftExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftLeftExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__ShiftLeftExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getShiftLeftExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftRightExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group__0__Impl
	rule__ShiftRightExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getShiftRightUnsignedExpressionParserRuleCall_0()); }
	ruleShiftRightUnsignedExpression
{ after(grammarAccess.getShiftRightExpressionAccess().getShiftRightUnsignedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getGroup_1()); }
(rule__ShiftRightExpression__Group_1__0)?
{ after(grammarAccess.getShiftRightExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftRightExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group_1__0__Impl
	rule__ShiftRightExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group_1__1__Impl
	rule__ShiftRightExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getGroup_1_1()); }
(rule__ShiftRightExpression__Group_1_1__0)
{ after(grammarAccess.getShiftRightExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getGroup_1_2()); }
(rule__ShiftRightExpression__Group_1_2__0)*
{ after(grammarAccess.getShiftRightExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftRightExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group_1_1__0__Impl
	rule__ShiftRightExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__ShiftRightExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getShiftRightExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__ShiftRightExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftRightExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group_1_2__0__Impl
	rule__ShiftRightExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getGreaterThanSignGreaterThanSignKeyword_1_2_0()); }

	'>>' 

{ after(grammarAccess.getShiftRightExpressionAccess().getGreaterThanSignGreaterThanSignKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__ShiftRightExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftRightUnsignedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group__0__Impl
	rule__ShiftRightUnsignedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getAddExpressionParserRuleCall_0()); }
	ruleAddExpression
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getAddExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightUnsignedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getGroup_1()); }
(rule__ShiftRightUnsignedExpression__Group_1__0)?
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftRightUnsignedExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group_1__0__Impl
	rule__ShiftRightUnsignedExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightUnsignedExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group_1__1__Impl
	rule__ShiftRightUnsignedExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getGroup_1_1()); }
(rule__ShiftRightUnsignedExpression__Group_1_1__0)
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightUnsignedExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getGroup_1_2()); }
(rule__ShiftRightUnsignedExpression__Group_1_2__0)*
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftRightUnsignedExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group_1_1__0__Impl
	rule__ShiftRightUnsignedExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__ShiftRightUnsignedExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightUnsignedExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__ShiftRightUnsignedExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftRightUnsignedExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group_1_2__0__Impl
	rule__ShiftRightUnsignedExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_0()); }

	'>>>' 

{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftRightUnsignedExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftRightUnsignedExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__ShiftRightUnsignedExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); }
	ruleSubExpression
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
(rule__AddExpression__Group_1__0)?
{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__1__Impl
	rule__AddExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1_1()); }
(rule__AddExpression__Group_1_1__0)
{ after(grammarAccess.getAddExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getGroup_1_2()); }
(rule__AddExpression__Group_1_2__0)*
{ after(grammarAccess.getAddExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AddExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_1__0__Impl
	rule__AddExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__AddExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getAddExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__AddExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AddExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_2__0__Impl
	rule__AddExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_2_0()); }

	'+' 

{ after(grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AddExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__AddExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group__0__Impl
	rule__SubExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); }
	ruleMultExpression
{ after(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup_1()); }
(rule__SubExpression__Group_1__0)?
{ after(grammarAccess.getSubExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__0__Impl
	rule__SubExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__1__Impl
	rule__SubExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup_1_1()); }
(rule__SubExpression__Group_1_1__0)
{ after(grammarAccess.getSubExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getGroup_1_2()); }
(rule__SubExpression__Group_1_2__0)*
{ after(grammarAccess.getSubExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1_1__0__Impl
	rule__SubExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__SubExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getSubExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__SubExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1_2__0__Impl
	rule__SubExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getHyphenMinusKeyword_1_2_0()); }

	'-' 

{ after(grammarAccess.getSubExpressionAccess().getHyphenMinusKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__SubExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__0__Impl
	rule__MultExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getDivExpressionParserRuleCall_0()); }
	ruleDivExpression
{ after(grammarAccess.getMultExpressionAccess().getDivExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1()); }
(rule__MultExpression__Group_1__0)?
{ after(grammarAccess.getMultExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__0__Impl
	rule__MultExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__1__Impl
	rule__MultExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_1()); }
(rule__MultExpression__Group_1_1__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_2()); }
(rule__MultExpression__Group_1_2__0)*
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_1__0__Impl
	rule__MultExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__MultExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getMultExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__MultExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_2__0__Impl
	rule__MultExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_2_0()); }

	'*' 

{ after(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__MultExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__0__Impl
	rule__DivExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getModExpressionParserRuleCall_0()); }
	ruleModExpression
{ after(grammarAccess.getDivExpressionAccess().getModExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getGroup_1()); }
(rule__DivExpression__Group_1__0)?
{ after(grammarAccess.getDivExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1__0__Impl
	rule__DivExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1__1__Impl
	rule__DivExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getGroup_1_1()); }
(rule__DivExpression__Group_1_1__0)
{ after(grammarAccess.getDivExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getGroup_1_2()); }
(rule__DivExpression__Group_1_2__0)*
{ after(grammarAccess.getDivExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DivExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1_1__0__Impl
	rule__DivExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__DivExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getDivExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__DivExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DivExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1_2__0__Impl
	rule__DivExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSolidusKeyword_1_2_0()); }

	'/' 

{ after(grammarAccess.getDivExpressionAccess().getSolidusKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DivExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DivExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__DivExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group__0__Impl
	rule__ModExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getNegExpressionParserRuleCall_0()); }
	ruleNegExpression
{ after(grammarAccess.getModExpressionAccess().getNegExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getGroup_1()); }
(rule__ModExpression__Group_1__0)?
{ after(grammarAccess.getModExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__0__Impl
	rule__ModExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__1__Impl
	rule__ModExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getGroup_1_1()); }
(rule__ModExpression__Group_1_1__0)
{ after(grammarAccess.getModExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getGroup_1_2()); }
(rule__ModExpression__Group_1_2__0)*
{ after(grammarAccess.getModExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1_1__0__Impl
	rule__ModExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1_0()); }
(rule__ModExpression__OperatorAssignment_1_1_0)
{ after(grammarAccess.getModExpressionAccess().getOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
(rule__ModExpression__SubExpressionsAssignment_1_1_1)
{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1_2__0__Impl
	rule__ModExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getPercentSignKeyword_1_2_0()); }

	'%' 

{ after(grammarAccess.getModExpressionAccess().getPercentSignKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModExpression__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
(rule__ModExpression__SubExpressionsAssignment_1_2_1)
{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NegExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpression__Group_0__0__Impl
	rule__NegExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpression__Group_0__1__Impl
	rule__NegExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getOperatorAssignment_0_1()); }
(rule__NegExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getNegExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getSubExpressionsAssignment_0_2()); }
(rule__NegExpression__SubExpressionsAssignment_0_2)
{ after(grammarAccess.getNegExpressionAccess().getSubExpressionsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TernaryOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryOperation__Group_0__0__Impl
	rule__TernaryOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getTernaryOperationAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryOperation__Group_0__1__Impl
	rule__TernaryOperation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getSubExpressionsAssignment_0_1()); }
(rule__TernaryOperation__SubExpressionsAssignment_0_1)
{ after(grammarAccess.getTernaryOperationAccess().getSubExpressionsAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryOperation__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryOperation__Group_0__2__Impl
	rule__TernaryOperation__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getOperatorAssignment_0_2()); }
(rule__TernaryOperation__OperatorAssignment_0_2)
{ after(grammarAccess.getTernaryOperationAccess().getOperatorAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryOperation__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryOperation__Group_0__3__Impl
	rule__TernaryOperation__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getSubExpressionsAssignment_0_3()); }
(rule__TernaryOperation__SubExpressionsAssignment_0_3)
{ after(grammarAccess.getTernaryOperationAccess().getSubExpressionsAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryOperation__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryOperation__Group_0__4__Impl
	rule__TernaryOperation__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getColonKeyword_0_4()); }

	':' 

{ after(grammarAccess.getTernaryOperationAccess().getColonKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TernaryOperation__Group_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TernaryOperation__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__Group_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getSubExpressionsAssignment_0_5()); }
(rule__TernaryOperation__SubExpressionsAssignment_0_5)
{ after(grammarAccess.getTernaryOperationAccess().getSubExpressionsAssignment_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AtomicExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__0__Impl
	rule__AtomicExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__1__Impl
	rule__AtomicExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getBoolExpressionParserRuleCall_2_1()); }
	ruleBoolExpression
{ after(grammarAccess.getAtomicExpressionAccess().getBoolExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtomicValuedExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_4__0__Impl
	rule__AtomicValuedExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_4__1__Impl
	rule__AtomicValuedExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_4_1()); }
	ruleValuedExpression
{ after(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicValuedExpression__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtomicValuedExpression__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicValuedExpression__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_4_2()); }

	')' 

{ after(grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ValuedObjectTestExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__0__Impl
	rule__ValuedObjectTestExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__1__Impl
	rule__ValuedObjectTestExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_0_1()); }
(rule__ValuedObjectTestExpression__OperatorAssignment_0_1)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__2__Impl
	rule__ValuedObjectTestExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2()); }

	'(' 

{ after(grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__3__Impl
	rule__ValuedObjectTestExpression__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_0_3()); }
(rule__ValuedObjectTestExpression__SubExpressionsAssignment_0_3)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectTestExpression__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectTestExpression__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4()); }

	')' 

{ after(grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PrimeID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimeID__Group__0__Impl
	rule__PrimeID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimeID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimeIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getPrimeIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimeID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimeID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimeID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimeIDAccess().getApostropheKeyword_1()); }
(
	'\'' 
)*
{ after(grammarAccess.getPrimeIDAccess().getApostropheKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ValuedObjectReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectReference__Group__0__Impl
	rule__ValuedObjectReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectAssignment_0()); }
(rule__ValuedObjectReference__ValuedObjectAssignment_0)
{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectReference__Group__1__Impl
	rule__ValuedObjectReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getGroup_1()); }
(rule__ValuedObjectReference__Group_1__0)*
{ after(grammarAccess.getValuedObjectReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getGroup_2()); }
(rule__ValuedObjectReference__Group_2__0)?
{ after(grammarAccess.getValuedObjectReferenceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ValuedObjectReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectReference__Group_1__0__Impl
	rule__ValuedObjectReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getValuedObjectReferenceAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectReference__Group_1__1__Impl
	rule__ValuedObjectReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getIndicesAssignment_1_1()); }
(rule__ValuedObjectReference__IndicesAssignment_1_1)
{ after(grammarAccess.getValuedObjectReferenceAccess().getIndicesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectReference__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getValuedObjectReferenceAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ValuedObjectReference__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectReference__Group_2__0__Impl
	rule__ValuedObjectReference__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getValuedObjectReferenceAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValuedObjectReference__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValuedObjectReference__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getSubReferenceAssignment_2_1()); }
(rule__ValuedObjectReference__SubReferenceAssignment_2_1)
{ after(grammarAccess.getValuedObjectReferenceAccess().getSubReferenceAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ScheduleObjectReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScheduleObjectReference__Group__0__Impl
	rule__ScheduleObjectReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScheduleObjectReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleObjectReferenceAccess().getValuedObjectAssignment_0()); }
(rule__ScheduleObjectReference__ValuedObjectAssignment_0)
{ after(grammarAccess.getScheduleObjectReferenceAccess().getValuedObjectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScheduleObjectReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScheduleObjectReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScheduleObjectReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleObjectReferenceAccess().getPriorityAssignment_1()); }
(rule__ScheduleObjectReference__PriorityAssignment_1)
{ after(grammarAccess.getScheduleObjectReferenceAccess().getPriorityAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReferenceCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceCall__Group__0__Impl
	rule__ReferenceCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getValuedObjectAssignment_0()); }
(rule__ReferenceCall__ValuedObjectAssignment_0)
{ after(grammarAccess.getReferenceCallAccess().getValuedObjectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getAlternatives_1()); }
(rule__ReferenceCall__Alternatives_1)
{ after(grammarAccess.getReferenceCallAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReferenceCall__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceCall__Group_1_0__0__Impl
	rule__ReferenceCall__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getLeftParenthesisKeyword_1_0_0()); }

	'(' 

{ after(grammarAccess.getReferenceCallAccess().getLeftParenthesisKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceCall__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceCall__Group_1_0__1__Impl
	rule__ReferenceCall__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getParametersAssignment_1_0_1()); }
(rule__ReferenceCall__ParametersAssignment_1_0_1)
{ after(grammarAccess.getReferenceCallAccess().getParametersAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceCall__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceCall__Group_1_0__2__Impl
	rule__ReferenceCall__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getGroup_1_0_2()); }
(rule__ReferenceCall__Group_1_0_2__0)*
{ after(grammarAccess.getReferenceCallAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceCall__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceCall__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getRightParenthesisKeyword_1_0_3()); }

	')' 

{ after(grammarAccess.getReferenceCallAccess().getRightParenthesisKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ReferenceCall__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceCall__Group_1_0_2__0__Impl
	rule__ReferenceCall__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getCommaKeyword_1_0_2_0()); }

	',' 

{ after(grammarAccess.getReferenceCallAccess().getCommaKeyword_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceCall__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceCall__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getParametersAssignment_1_0_2_1()); }
(rule__ReferenceCall__ParametersAssignment_1_0_2_1)
{ after(grammarAccess.getReferenceCallAccess().getParametersAssignment_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getExternKeyword_0()); }

	'extern' 

{ after(grammarAccess.getFunctionCallAccess().getExternKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionNameAssignment_1()); }
(rule__FunctionCall__FunctionNameAssignment_1)
{ after(grammarAccess.getFunctionCallAccess().getFunctionNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getAlternatives_2()); }
(rule__FunctionCall__Alternatives_2)
{ after(grammarAccess.getFunctionCallAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionCall__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_0__0__Impl
	rule__FunctionCall__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2_0_0()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_0__1__Impl
	rule__FunctionCall__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0_1()); }
(rule__FunctionCall__ParametersAssignment_2_0_1)
{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_0__2__Impl
	rule__FunctionCall__Group_2_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2_0_2()); }
(rule__FunctionCall__Group_2_0_2__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_2_0_3()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_2_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionCall__Group_2_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_0_2__0__Impl
	rule__FunctionCall__Group_2_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_0_2_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0_2_1()); }
(rule__FunctionCall__ParametersAssignment_2_0_2_1)
{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_0()); }
(rule__Parameter__Group_0__0)?
{ after(grammarAccess.getParameterAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getExpressionAssignment_1()); }
(rule__Parameter__ExpressionAssignment_1)
{ after(grammarAccess.getParameterAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_0__0__Impl
	rule__Parameter__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getPureOutputAssignment_0_0()); }
(rule__Parameter__PureOutputAssignment_0_0)?
{ after(grammarAccess.getParameterAccess().getPureOutputAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getCallByReferenceAssignment_0_1()); }
(rule__Parameter__CallByReferenceAssignment_0_1)
{ after(grammarAccess.getParameterAccess().getCallByReferenceAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VectorValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorValue__Group__0__Impl
	rule__VectorValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getVectorValueAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VectorValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorValue__Group__1__Impl
	rule__VectorValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueAccess().getValuesAssignment_1()); }
(rule__VectorValue__ValuesAssignment_1)
{ after(grammarAccess.getVectorValueAccess().getValuesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VectorValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorValue__Group__2__Impl
	rule__VectorValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueAccess().getGroup_2()); }
(rule__VectorValue__Group_2__0)*
{ after(grammarAccess.getVectorValueAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VectorValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getVectorValueAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VectorValue__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorValue__Group_2__0__Impl
	rule__VectorValue__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValue__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getVectorValueAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VectorValue__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorValue__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValue__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueAccess().getValuesAssignment_2_1()); }
(rule__VectorValue__ValuesAssignment_2_1)
{ after(grammarAccess.getVectorValueAccess().getValuesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IgnoreValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IgnoreValue__Group__0__Impl
	rule__IgnoreValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoreValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgnoreValueAccess().getIgnoreValueAction_0()); }
(

)
{ after(grammarAccess.getIgnoreValueAccess().getIgnoreValueAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IgnoreValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IgnoreValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IgnoreValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgnoreValueAccess().get_Keyword_1()); }

	'_' 

{ after(grammarAccess.getIgnoreValueAccess().get_Keyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TagAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagAnnotation__Group__0__Impl
	rule__TagAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TagAnnotation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TagAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getNameAssignment_1()); }
(rule__TagAnnotation__NameAssignment_1)
{ after(grammarAccess.getTagAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PragmaTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaTag__Group__0__Impl
	rule__PragmaTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTagAccess().getNumberSignKeyword_0()); }

	'#' 

{ after(grammarAccess.getPragmaTagAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PragmaTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PragmaTag__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTagAccess().getNameAssignment_1()); }
(rule__PragmaTag__NameAssignment_1)
{ after(grammarAccess.getPragmaTagAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__KeyStringValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group__0__Impl
	rule__KeyStringValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group__1__Impl
	rule__KeyStringValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getNameAssignment_1()); }
(rule__KeyStringValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group__2__Impl
	rule__KeyStringValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getValuesAssignment_2()); }
(rule__KeyStringValueAnnotation__ValuesAssignment_2)
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getGroup_3()); }
(rule__KeyStringValueAnnotation__Group_3__0)*
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__KeyStringValueAnnotation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group_3__0__Impl
	rule__KeyStringValueAnnotation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getKeyStringValueAnnotationAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyStringValueAnnotation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyStringValueAnnotation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getValuesAssignment_3_1()); }
(rule__KeyStringValueAnnotation__ValuesAssignment_3_1)
{ after(grammarAccess.getKeyStringValueAnnotationAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RestrictedKeyStringValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedKeyStringValueAnnotation__Group__0__Impl
	rule__RestrictedKeyStringValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedKeyStringValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedKeyStringValueAnnotation__Group__1__Impl
	rule__RestrictedKeyStringValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
(rule__RestrictedKeyStringValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedKeyStringValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedKeyStringValueAnnotation__Group__2__Impl
	rule__RestrictedKeyStringValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesAssignment_2()); }
(rule__RestrictedKeyStringValueAnnotation__ValuesAssignment_2)
{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedKeyStringValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedKeyStringValueAnnotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getGroup_3()); }
(rule__RestrictedKeyStringValueAnnotation__Group_3__0)*
{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RestrictedKeyStringValueAnnotation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedKeyStringValueAnnotation__Group_3__0__Impl
	rule__RestrictedKeyStringValueAnnotation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedKeyStringValueAnnotation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedKeyStringValueAnnotation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesAssignment_3_1()); }
(rule__RestrictedKeyStringValueAnnotation__ValuesAssignment_3_1)
{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringPragma__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringPragma__Group__0__Impl
	rule__StringPragma__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getNumberSignKeyword_0()); }

	'#' 

{ after(grammarAccess.getStringPragmaAccess().getNumberSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringPragma__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringPragma__Group__1__Impl
	rule__StringPragma__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getNameAssignment_1()); }
(rule__StringPragma__NameAssignment_1)
{ after(grammarAccess.getStringPragmaAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringPragma__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringPragma__Group__2__Impl
	rule__StringPragma__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getValuesAssignment_2()); }
(rule__StringPragma__ValuesAssignment_2)
{ after(grammarAccess.getStringPragmaAccess().getValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringPragma__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringPragma__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getGroup_3()); }
(rule__StringPragma__Group_3__0)*
{ after(grammarAccess.getStringPragmaAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StringPragma__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringPragma__Group_3__0__Impl
	rule__StringPragma__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getStringPragmaAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringPragma__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringPragma__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getValuesAssignment_3_1()); }
(rule__StringPragma__ValuesAssignment_3_1)
{ after(grammarAccess.getStringPragmaAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypedKeyStringValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__0__Impl
	rule__TypedKeyStringValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__1__Impl
	rule__TypedKeyStringValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
(rule__TypedKeyStringValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__2__Impl
	rule__TypedKeyStringValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__3__Impl
	rule__TypedKeyStringValueAnnotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeAssignment_3()); }
(rule__TypedKeyStringValueAnnotation__TypeAssignment_3)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__4__Impl
	rule__TypedKeyStringValueAnnotation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__5__Impl
	rule__TypedKeyStringValueAnnotation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesAssignment_5()); }
(rule__TypedKeyStringValueAnnotation__ValuesAssignment_5)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup_6()); }
(rule__TypedKeyStringValueAnnotation__Group_6__0)*
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__TypedKeyStringValueAnnotation__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group_6__0__Impl
	rule__TypedKeyStringValueAnnotation__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0()); }

	',' 

{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedKeyStringValueAnnotation__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedKeyStringValueAnnotation__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesAssignment_6_1()); }
(rule__TypedKeyStringValueAnnotation__ValuesAssignment_6_1)
{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RestrictedTypedKeyStringValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group__0__Impl
	rule__RestrictedTypedKeyStringValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedTypedKeyStringValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group__1__Impl
	rule__RestrictedTypedKeyStringValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
(rule__RestrictedTypedKeyStringValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedTypedKeyStringValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group__2__Impl
	rule__RestrictedTypedKeyStringValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedTypedKeyStringValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group__3__Impl
	rule__RestrictedTypedKeyStringValueAnnotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getTypeAssignment_3()); }
(rule__RestrictedTypedKeyStringValueAnnotation__TypeAssignment_3)
{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedTypedKeyStringValueAnnotation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group__4__Impl
	rule__RestrictedTypedKeyStringValueAnnotation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedTypedKeyStringValueAnnotation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group__5__Impl
	rule__RestrictedTypedKeyStringValueAnnotation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesAssignment_5()); }
(rule__RestrictedTypedKeyStringValueAnnotation__ValuesAssignment_5)
{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedTypedKeyStringValueAnnotation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getGroup_6()); }
(rule__RestrictedTypedKeyStringValueAnnotation__Group_6__0)*
{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__RestrictedTypedKeyStringValueAnnotation__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group_6__0__Impl
	rule__RestrictedTypedKeyStringValueAnnotation__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0()); }

	',' 

{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictedTypedKeyStringValueAnnotation__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictedTypedKeyStringValueAnnotation__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesAssignment_6_1()); }
(rule__RestrictedTypedKeyStringValueAnnotation__ValuesAssignment_6_1)
{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuotedKeyStringValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedKeyStringValueAnnotation__Group__0__Impl
	rule__QuotedKeyStringValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedKeyStringValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedKeyStringValueAnnotation__Group__1__Impl
	rule__QuotedKeyStringValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
(rule__QuotedKeyStringValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedKeyStringValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedKeyStringValueAnnotation__Group__2__Impl
	rule__QuotedKeyStringValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesAssignment_2()); }
(rule__QuotedKeyStringValueAnnotation__ValuesAssignment_2)
{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedKeyStringValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedKeyStringValueAnnotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getGroup_3()); }
(rule__QuotedKeyStringValueAnnotation__Group_3__0)*
{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__QuotedKeyStringValueAnnotation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedKeyStringValueAnnotation__Group_3__0__Impl
	rule__QuotedKeyStringValueAnnotation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedKeyStringValueAnnotation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedKeyStringValueAnnotation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesAssignment_3_1()); }
(rule__QuotedKeyStringValueAnnotation__ValuesAssignment_3_1)
{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuotedTypedKeyStringValueAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group__0__Impl
	rule__QuotedTypedKeyStringValueAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedTypedKeyStringValueAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group__1__Impl
	rule__QuotedTypedKeyStringValueAnnotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
(rule__QuotedTypedKeyStringValueAnnotation__NameAssignment_1)
{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedTypedKeyStringValueAnnotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group__2__Impl
	rule__QuotedTypedKeyStringValueAnnotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedTypedKeyStringValueAnnotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group__3__Impl
	rule__QuotedTypedKeyStringValueAnnotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getTypeAssignment_3()); }
(rule__QuotedTypedKeyStringValueAnnotation__TypeAssignment_3)
{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedTypedKeyStringValueAnnotation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group__4__Impl
	rule__QuotedTypedKeyStringValueAnnotation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedTypedKeyStringValueAnnotation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group__5__Impl
	rule__QuotedTypedKeyStringValueAnnotation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesAssignment_5()); }
(rule__QuotedTypedKeyStringValueAnnotation__ValuesAssignment_5)
{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedTypedKeyStringValueAnnotation__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getGroup_6()); }
(rule__QuotedTypedKeyStringValueAnnotation__Group_6__0)*
{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__QuotedTypedKeyStringValueAnnotation__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group_6__0__Impl
	rule__QuotedTypedKeyStringValueAnnotation__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0()); }

	',' 

{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedTypedKeyStringValueAnnotation__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedTypedKeyStringValueAnnotation__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesAssignment_6_1()); }
(rule__QuotedTypedKeyStringValueAnnotation__ValuesAssignment_6_1)
{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExtendedID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__0__Impl
	rule__ExtendedID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__1__Impl
	rule__ExtendedID__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup_1()); }
(rule__ExtendedID__Group_1__0)*
{ after(grammarAccess.getExtendedIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getGroup_2()); }
(rule__ExtendedID__Group_2__0)?
{ after(grammarAccess.getExtendedIDAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExtendedID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_1__0__Impl
	rule__ExtendedID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getAlternatives_1_0()); }
(rule__ExtendedID__Alternatives_1_0)
{ after(grammarAccess.getExtendedIDAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExtendedID__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_2__0__Impl
	rule__ExtendedID__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getNumberSignKeyword_2_0()); }

	'#' 

{ after(grammarAccess.getExtendedIDAccess().getNumberSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedID__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedID__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedID__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedIDAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
{ after(grammarAccess.getExtendedIDAccess().getINTTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Integer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Floateger__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Floateger__Group__0__Impl
	rule__Floateger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Floateger__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloategerAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getFloategerAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Floateger__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Floateger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Floateger__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloategerAccess().getFLOATTerminalRuleCall_1()); }
	RULE_FLOAT
{ after(grammarAccess.getFloategerAccess().getFLOATTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__VisualizationConfiguration__ImageAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getImageSTRINGTerminalRuleCall_0_2_0()); }
	RULE_STRING{ after(grammarAccess.getVisualizationConfigurationAccess().getImageSTRINGTerminalRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisualizationConfiguration__ElementsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getElementsElementParserRuleCall_1_0_0()); }
	ruleElement{ after(grammarAccess.getVisualizationConfigurationAccess().getElementsElementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisualizationConfiguration__InteractionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationConfigurationAccess().getInteractionsInteractionParserRuleCall_1_1_0()); }
	ruleInteraction{ after(grammarAccess.getVisualizationConfigurationAccess().getInteractionsInteractionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__AnimationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getAnimationsAnimationParserRuleCall_3_0()); }
	ruleAnimation{ after(grammarAccess.getElementAccess().getAnimationsAnimationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__EventAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getEventEventParserRuleCall_2_1_0()); }
	ruleEvent{ after(grammarAccess.getInteractionAccess().getEventEventParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__ActionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getActionsActionParserRuleCall_4_0()); }
	ruleAction{ after(grammarAccess.getInteractionAccess().getActionsActionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interaction__ConditionAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInteractionAccess().getConditionAndExpressionParserRuleCall_6_1_0()); }
	ruleAndExpression{ after(grammarAccess.getInteractionAccess().getConditionAndExpressionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventDOMEventEnumRuleCall_0_0()); }
	ruleDOMEvent{ after(grammarAccess.getEventAccess().getEventDOMEventEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ElementAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getElementIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getElementIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getVariableVariableReferenceParserRuleCall_0_0()); }
	ruleVariableReference{ after(grammarAccess.getVariableAssignmentAccess().getVariableVariableReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentAccess().getValueLiteralParserRuleCall_2_0()); }
	ruleLiteral{ after(grammarAccess.getVariableAssignmentAccess().getValueLiteralParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationAction__OperationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationActionAccess().getOperationSimulationOperationEnumRuleCall_0_0()); }
	ruleSimulationOperation{ after(grammarAccess.getSimulationActionAccess().getOperationSimulationOperationEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getTypeIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAnimationAccess().getTypeIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__VariableAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getVariableVariableReferenceParserRuleCall_2_1_0()); }
	ruleVariableReference{ after(grammarAccess.getAnimationAccess().getVariableVariableReferenceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__AttributeMappingsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getAttributeMappingsAttributeMappingParserRuleCall_4_0()); }
	ruleAttributeMapping{ after(grammarAccess.getAnimationAccess().getAttributeMappingsAttributeMappingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__ConditionAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getConditionAndExpressionParserRuleCall_6_1_0()); }
	ruleAndExpression{ after(grammarAccess.getAnimationAccess().getConditionAndExpressionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__AttributeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getAttributeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAttributeMappingAccess().getAttributeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__LiteralAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getLiteralLiteralParserRuleCall_2_0_0()); }
	ruleLiteral{ after(grammarAccess.getAttributeMappingAccess().getLiteralLiteralParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__MappingsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_0_0()); }
	ruleMapping{ after(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__MappingsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_1_1_0()); }
	ruleMapping{ after(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__VariableDomainAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getVariableDomainVariableDomainParserRuleCall_0_0()); }
	ruleVariableDomain{ after(grammarAccess.getMappingAccess().getVariableDomainVariableDomainParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__AttributeDomainAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getAttributeDomainAttributeDomainParserRuleCall_2_0()); }
	ruleAttributeDomain{ after(grammarAccess.getMappingAccess().getAttributeDomainAttributeDomainParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAndKeyword_1_0_1_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAndKeyword_1_0_1_0()); }

	'and' 

{ after(grammarAccess.getAndExpressionAccess().getOperatorAndKeyword_1_0_1_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOperatorAndKeyword_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); }
	ruleComparison{ after(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLeftVariableReferenceParserRuleCall_0_0()); }
	ruleVariableReference{ after(grammarAccess.getComparisonAccess().getLeftVariableReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RelationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRelationCompareOperatorEnumRuleCall_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getComparisonAccess().getRelationCompareOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightLiteralParserRuleCall_2_0_0()); }
	ruleLiteral{ after(grammarAccess.getComparisonAccess().getRightLiteralParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightVariableReferenceParserRuleCall_2_1_0()); }
	ruleVariableReference{ after(grammarAccess.getComparisonAccess().getRightVariableReferenceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDomain__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDomainAccess().getValueLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getVariableDomainAccess().getValueLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDomain__RangeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDomainAccess().getRangeIntervalParserRuleCall_1_0()); }
	ruleInterval{ after(grammarAccess.getVariableDomainAccess().getRangeIntervalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__FromAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getFromSignedIntParserRuleCall_0_0_0()); }
	ruleSignedInt{ after(grammarAccess.getIntervalAccess().getFromSignedIntParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__FromAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getFromSignedFloatParserRuleCall_0_1_0()); }
	ruleSignedFloat{ after(grammarAccess.getIntervalAccess().getFromSignedFloatParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__ToAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getToSignedIntParserRuleCall_2_0_0()); }
	ruleSignedInt{ after(grammarAccess.getIntervalAccess().getToSignedIntParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__ToAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getToSignedFloatParserRuleCall_2_1_0()); }
	ruleSignedFloat{ after(grammarAccess.getIntervalAccess().getToSignedFloatParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__ModelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getModelModelReferenceParserRuleCall_0_0()); }
	ruleModelReference{ after(grammarAccess.getVariableReferenceAccess().getModelModelReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__IndicesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getIndicesINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getVariableReferenceAccess().getIndicesINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getModelReferenceAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ModelCompiler__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getModelCompilerAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__AttributesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getAttributesAttributeMappingParserRuleCall_4_0()); }
	ruleAttributeMapping{ after(grammarAccess.getModelCompilerAccess().getAttributesAttributeMappingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelCompiler__SimulationProcessorAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelCompilerAccess().getSimulationProcessorSimulationTemplateProcessorParserRuleCall_5_0()); }
	ruleSimulationTemplateProcessor{ after(grammarAccess.getModelCompilerAccess().getSimulationProcessorSimulationTemplateProcessorParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationCompiler__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationCompilerAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getSimulationCompilerAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationCompiler__AttributesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationCompilerAccess().getAttributesAttributeMappingParserRuleCall_4_0()); }
	ruleAttributeMapping{ after(grammarAccess.getSimulationCompilerAccess().getAttributesAttributeMappingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalTemplateProcessor__AttributesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalTemplateProcessorAccess().getAttributesAttributeMappingParserRuleCall_4_0()); }
	ruleAttributeMapping{ after(grammarAccess.getNormalTemplateProcessorAccess().getAttributesAttributeMappingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimulationTemplateProcessor__AttributesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimulationTemplateProcessorAccess().getAttributesAttributeMappingParserRuleCall_5_0()); }
	ruleAttributeMapping{ after(grammarAccess.getSimulationTemplateProcessorAccess().getAttributesAttributeMappingParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WrapperCodeTemplateProcessor__AttributesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWrapperCodeTemplateProcessorAccess().getAttributesAttributeMappingParserRuleCall_5_0()); }
	ruleAttributeMapping{ after(grammarAccess.getWrapperCodeTemplateProcessorAccess().getAttributesAttributeMappingParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueTextValueParserRuleCall_0_0()); }
	ruleTextValue{ after(grammarAccess.getLiteralAccess().getValueTextValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueSignedIntParserRuleCall_1_0()); }
	ruleSignedInt{ after(grammarAccess.getLiteralAccess().getValueSignedIntParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueSignedFloatParserRuleCall_2_0()); }
	ruleSignedFloat{ after(grammarAccess.getLiteralAccess().getValueSignedFloatParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueAnyValueParserRuleCall_3_0()); }
	ruleAnyValue{ after(grammarAccess.getLiteralAccess().getValueAnyValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__SignAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getSignSignEnumRuleCall_0_0()); }
	ruleSign{ after(grammarAccess.getSignedFloatAccess().getSignSignEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getValueFLOATTerminalRuleCall_1_0()); }
	RULE_FLOAT{ after(grammarAccess.getSignedFloatAccess().getValueFLOATTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__SignAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getSignSignEnumRuleCall_0_0()); }
	ruleSign{ after(grammarAccess.getSignedIntAccess().getSignSignEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSignedIntAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextValueAccess().getValueIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getTextValueAccess().getValueIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ScheduleAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getScheduleScheduleObjectReferenceParserRuleCall_1_1_0()); }
	ruleScheduleObjectReference{ after(grammarAccess.getExpressionAccess().getScheduleScheduleObjectReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0()); }
	ruleLogicalOrOperator{ after(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsLogicalAndExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0()); }
	ruleLogicalAndOperator{ after(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsBitwiseOrExpressionParserRuleCall_1_1_1_0()); }
	ruleBitwiseOrExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsBitwiseOrExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsBitwiseOrExpressionParserRuleCall_1_2_1_0()); }
	ruleBitwiseOrExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsBitwiseOrExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getOperatorBitwiseOrOperatorEnumRuleCall_1_1_0_0()); }
	ruleBitwiseOrOperator{ after(grammarAccess.getBitwiseOrExpressionAccess().getOperatorBitwiseOrOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsBitwiseXOrExpressionParserRuleCall_1_1_1_0()); }
	ruleBitwiseXOrExpression{ after(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsBitwiseXOrExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOrExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsBitwiseXOrExpressionParserRuleCall_1_2_1_0()); }
	ruleBitwiseXOrExpression{ after(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsBitwiseXOrExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getOperatorBitwiseXOrOperatorEnumRuleCall_1_1_0_0()); }
	ruleBitwiseXOrOperator{ after(grammarAccess.getBitwiseXOrExpressionAccess().getOperatorBitwiseXOrOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsBitwiseAndExpressionParserRuleCall_1_1_1_0()); }
	ruleBitwiseAndExpression{ after(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsBitwiseAndExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseXOrExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsBitwiseAndExpressionParserRuleCall_1_2_1_0()); }
	ruleBitwiseAndExpression{ after(grammarAccess.getBitwiseXOrExpressionAccess().getSubExpressionsBitwiseAndExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getOperatorBitwiseAndOperatorEnumRuleCall_1_1_0_0()); }
	ruleBitwiseAndOperator{ after(grammarAccess.getBitwiseAndExpressionAccess().getOperatorBitwiseAndOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_1_1_0()); }
	ruleCompareOperation{ after(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseAndExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_1_0()); }
	ruleCompareOperation{ after(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getCompareOperationAccess().getOperatorCompareOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0()); }
	ruleNotOrValuedExpression{ after(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseNotExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseNotExpressionAccess().getOperatorBitwiseNotOperatorEnumRuleCall_0_1_0()); }
	ruleBitwiseNotOperator{ after(grammarAccess.getBitwiseNotExpressionAccess().getOperatorBitwiseNotOperatorEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseNotExpression__SubExpressionsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseNotExpressionAccess().getSubExpressionsBitwiseNotExpressionParserRuleCall_0_2_0()); }
	ruleBitwiseNotExpression{ after(grammarAccess.getBitwiseNotExpressionAccess().getSubExpressionsBitwiseNotExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); }
	ruleNotOperator{ after(grammarAccess.getNotExpressionAccess().getOperatorNotOperatorEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__SubExpressionsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); }
	ruleNotExpression{ after(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getOperatorShiftLeftOperatorEnumRuleCall_1_1_0_0()); }
	ruleShiftLeftOperator{ after(grammarAccess.getShiftLeftExpressionAccess().getOperatorShiftLeftOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getSubExpressionsShiftRightExpressionParserRuleCall_1_1_1_0()); }
	ruleShiftRightExpression{ after(grammarAccess.getShiftLeftExpressionAccess().getSubExpressionsShiftRightExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftLeftExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftLeftExpressionAccess().getSubExpressionsShiftRightExpressionParserRuleCall_1_2_1_0()); }
	ruleShiftRightExpression{ after(grammarAccess.getShiftLeftExpressionAccess().getSubExpressionsShiftRightExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getOperatorShiftRightOperatorEnumRuleCall_1_1_0_0()); }
	ruleShiftRightOperator{ after(grammarAccess.getShiftRightExpressionAccess().getOperatorShiftRightOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_1_1_0()); }
	ruleShiftRightUnsignedExpression{ after(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_2_1_0()); }
	ruleShiftRightUnsignedExpression{ after(grammarAccess.getShiftRightExpressionAccess().getSubExpressionsShiftRightUnsignedExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorShiftRightUnsignedOperatorEnumRuleCall_1_1_0_0()); }
	ruleShiftRightUnsignedOperator{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorShiftRightUnsignedOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsAddExpressionParserRuleCall_1_1_1_0()); }
	ruleAddExpression{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsAddExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftRightUnsignedExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsAddExpressionParserRuleCall_1_2_1_0()); }
	ruleAddExpression{ after(grammarAccess.getShiftRightUnsignedExpressionAccess().getSubExpressionsAddExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0_0()); }
	ruleAddOperator{ after(grammarAccess.getAddExpressionAccess().getOperatorAddOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_1_1_0()); }
	ruleSubExpression{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_1_0()); }
	ruleSubExpression{ after(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0_0()); }
	ruleSubOperator{ after(grammarAccess.getSubExpressionAccess().getOperatorSubOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_1_1_0()); }
	ruleMultExpression{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_1_0()); }
	ruleMultExpression{ after(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0_0()); }
	ruleMultOperator{ after(grammarAccess.getMultExpressionAccess().getOperatorMultOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_1_1_0()); }
	ruleDivExpression{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_2_1_0()); }
	ruleDivExpression{ after(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_1_1_0_0()); }
	ruleDivOperator{ after(grammarAccess.getDivExpressionAccess().getOperatorDivOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_1_1_0()); }
	ruleModExpression{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_1_0()); }
	ruleModExpression{ after(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__OperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0_0()); }
	ruleModOperator{ after(grammarAccess.getModExpressionAccess().getOperatorModOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__SubExpressionsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_1_1_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModExpression__SubExpressionsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getOperatorSubOperatorEnumRuleCall_0_1_0()); }
	ruleSubOperator{ after(grammarAccess.getNegExpressionAccess().getOperatorSubOperatorEnumRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegExpression__SubExpressionsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0()); }
	ruleNegExpression{ after(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__SubExpressionsAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__OperatorAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getOperatorConditionalOperatorEnumRuleCall_0_2_0()); }
	ruleConditionalOperator{ after(grammarAccess.getTernaryOperationAccess().getOperatorConditionalOperatorEnumRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__SubExpressionsAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TernaryOperation__SubExpressionsAssignment_0_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_5_0()); }
	ruleAtomicValuedExpression{ after(grammarAccess.getTernaryOperationAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_0_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAlternatives_0_1_0()); }
(rule__ValuedObjectTestExpression__OperatorAlternatives_0_1_0)
{ after(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorAlternatives_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectTestExpression__SubExpressionsAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); }
	ruleValuedObjectTestExpression{ after(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__ValuedObjectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0_0()); }
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1()); }
	rulePrimeID{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__IndicesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getIndicesExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getValuedObjectReferenceAccess().getIndicesExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValuedObjectReference__SubReferenceAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValuedObjectReferenceAccess().getSubReferenceValuedObjectReferenceParserRuleCall_2_1_0()); }
	ruleValuedObjectReference{ after(grammarAccess.getValuedObjectReferenceAccess().getSubReferenceValuedObjectReferenceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScheduleObjectReference__ValuedObjectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0_0()); }
(
{ before(grammarAccess.getScheduleObjectReferenceAccess().getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1()); }
	rulePrimeID{ after(grammarAccess.getScheduleObjectReferenceAccess().getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getScheduleObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScheduleObjectReference__PriorityAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleObjectReferenceAccess().getPriorityINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getScheduleObjectReferenceAccess().getPriorityINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__ValuedObjectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getValuedObjectValuedObjectCrossReference_0_0()); }
(
{ before(grammarAccess.getReferenceCallAccess().getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1()); }
	rulePrimeID{ after(grammarAccess.getReferenceCallAccess().getValuedObjectValuedObjectPrimeIDParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getReferenceCallAccess().getValuedObjectValuedObjectCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__ParametersAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getParametersParameterParserRuleCall_1_0_1_0()); }
	ruleParameter{ after(grammarAccess.getReferenceCallAccess().getParametersParameterParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceCall__ParametersAssignment_1_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceCallAccess().getParametersParameterParserRuleCall_1_0_2_1_0()); }
	ruleParameter{ after(grammarAccess.getReferenceCallAccess().getParametersParameterParserRuleCall_1_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionCallAccess().getFunctionNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_2_0_1_0()); }
	ruleParameter{ after(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_2_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_2_0_2_1_0()); }
	ruleParameter{ after(grammarAccess.getFunctionCallAccess().getParametersParameterParserRuleCall_2_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__PureOutputAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getPureOutputExclamationMarkKeyword_0_0_0()); }
(
{ before(grammarAccess.getParameterAccess().getPureOutputExclamationMarkKeyword_0_0_0()); }

	'!' 

{ after(grammarAccess.getParameterAccess().getPureOutputExclamationMarkKeyword_0_0_0()); }
)

{ after(grammarAccess.getParameterAccess().getPureOutputExclamationMarkKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__CallByReferenceAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getCallByReferenceAmpersandKeyword_0_1_0()); }
(
{ before(grammarAccess.getParameterAccess().getCallByReferenceAmpersandKeyword_0_1_0()); }

	'&' 

{ after(grammarAccess.getParameterAccess().getCallByReferenceAmpersandKeyword_0_1_0()); }
)

{ after(grammarAccess.getParameterAccess().getCallByReferenceAmpersandKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getParameterAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextExpression__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextExpressionAccess().getTextHOSTCODETerminalRuleCall_0()); }
	RULE_HOSTCODE{ after(grammarAccess.getTextExpressionAccess().getTextHOSTCODETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolValueAccess().getValueBOOLEANTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBoolValueAccess().getValueBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValue__ValuesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueAccess().getValuesVectorValueMemberParserRuleCall_1_0()); }
	ruleVectorValueMember{ after(grammarAccess.getVectorValueAccess().getValuesVectorValueMemberParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VectorValue__ValuesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorValueAccess().getValuesVectorValueMemberParserRuleCall_2_1_0()); }
	ruleVectorValueMember{ after(grammarAccess.getVectorValueAccess().getValuesVectorValueMemberParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommentAnnotation__ValuesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommentAnnotationAccess().getValuesCOMMENT_ANNOTATIONTerminalRuleCall_0()); }
	RULE_COMMENT_ANNOTATION{ after(grammarAccess.getCommentAnnotationAccess().getValuesCOMMENT_ANNOTATIONTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TagAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTagAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getTagAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PragmaTag__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPragmaTagAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getPragmaTagAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_2_0()); }
	ruleEStringAllTypes{ after(grammarAccess.getKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyStringValueAnnotation__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_3_1_0()); }
	ruleEStringAllTypes{ after(grammarAccess.getKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_2_0()); }
	ruleEStringBoolean{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedKeyStringValueAnnotation__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_3_1_0()); }
	ruleEStringBoolean{ after(grammarAccess.getRestrictedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getStringPragmaAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getValuesEStringAllTypesParserRuleCall_2_0()); }
	ruleEStringAllTypes{ after(grammarAccess.getStringPragmaAccess().getValuesEStringAllTypesParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringPragma__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringPragmaAccess().getValuesEStringAllTypesParserRuleCall_3_1_0()); }
	ruleEStringAllTypes{ after(grammarAccess.getStringPragmaAccess().getValuesEStringAllTypesParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); }
	ruleExtendedID{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__ValuesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_5_0()); }
	ruleEStringAllTypes{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedKeyStringValueAnnotation__ValuesAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_6_1_0()); }
	ruleEStringAllTypes{ after(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesEStringAllTypesParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); }
	ruleExtendedID{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__ValuesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_5_0()); }
	ruleEStringBoolean{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictedTypedKeyStringValueAnnotation__ValuesAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_6_1_0()); }
	ruleEStringBoolean{ after(grammarAccess.getRestrictedTypedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__ValuesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedKeyStringValueAnnotation__ValuesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
	ruleExtendedID{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); }
	ruleExtendedID{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__ValuesAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_5_0()); }
	RULE_STRING{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedTypedKeyStringValueAnnotation__ValuesAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_6_1_0()); }
	RULE_STRING{ after(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'/'|'\\') ('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'/'|'\\'|'0'..'9')*;

RULE_HOSTCODE : '`' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'`')))* '`';

RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT_ANNOTATION : '//*' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_SL_COMMENT : '//' ~('*') ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_NUMBER : '0'..'9';

RULE_INT : RULE_NUMBER+;

RULE_FLOAT : (RULE_NUMBER+ '.' RULE_NUMBER* (('e'|'E') ('+'|'-')? RULE_NUMBER+)? 'f'?|RULE_NUMBER+ 'f');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


