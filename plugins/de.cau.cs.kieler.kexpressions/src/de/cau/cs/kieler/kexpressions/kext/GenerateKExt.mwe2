module de.cau.cs.kieler.kexpressions.kext.KExt

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/de/cau/cs/kieler/kexpressions/kext/KExt.xtext"
var file.extensions = "kext"
var projectName = "de.cau.cs.kieler.kexpressions"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
		platformUri = "${runtimeProject}/.."
        registerGeneratedEPackage = "de.cau.cs.kieler.kexpressions.kext.KExtPackage"
		registerGeneratedEPackage = "de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage"
		registerGeneratedEPackage = "de.cau.cs.kieler.kexpressions.KExpressionsPackage"
		registerGeneratedEPackage = "de.cau.cs.kieler.annotations.AnnotationsPackage" 
		registerGenModelFile = "platform:/resource/de.cau.cs.kieler.annotations/model/annotations.genmodel"
		registerGenModelFile = "platform:/resource/de.cau.cs.kieler.kexpressions/model/kexpressions.genmodel"
		registerGenModelFile = "platform:/resource/de.cau.cs.kieler.kexpressions/model/keffects.genmodel"
		registerGenModelFile = "platform:/resource/de.cau.cs.kieler.kexpressions/model/kext.genmodel"
	}

//	component = DirectoryCleaner {
//		directory = "${runtimeProject}/model"
//	}

//	component = DirectoryCleaner {
//        directory = "${runtimeProject}.ui/src-gen"
//	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		naming = GeneratorNaming {}
		
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

            // the serialization component
            fragment = serializer.SerializerFragment {
                generateXtendStub = true
            }

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}	

			// the Antlr parser
			fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					classSplitting = true
					backtrack = true
//					memoize = true
				}
			}

			// java-based API for validation 
			fragment = validation.ValidatorFragment {}
            
			// scoping and exporting API
//			fragment = scoping.ImportURIScopingFragment {}
            // fragment = exporting.SimpleNamesFragment {} -- chsch: seems to be abolished in 3.7.1
			
			// scoping and exporting API 
			
			 fragment = scoping.ImportNamespacesScopingFragment {
//			 	generateStub = false
			 	generateXtendStub = true
			 }
			 fragment = exporting.QualifiedNamesFragment {}


			// formatter API 
//			fragment = ecore2xtext.FormatterFragment {}
            fragment = formatting2.Formatter2Fragment auto-inject {}
            
			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			
			// antlr parser generator tailored for content assist 
			fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrUiGeneratorFragment { 
				options = {
					classSplitting = true
					backtrack = true
//                    memoize = true
				}
			}

			//fragment = builder.BuilderIntegrationFragment {}

			// project wizard (optional) 
			
			// fragment = projectWizard.SimpleProjectWizardFragment {
			//	generatorProjectName = "${projectName}.generator" 
			//	modelFileExtension = file.extensions
			// }
			
			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}			
		}
	}
}
