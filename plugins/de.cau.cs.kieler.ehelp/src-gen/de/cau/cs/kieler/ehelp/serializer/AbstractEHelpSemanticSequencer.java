/*
 * generated by Xtext 2.12.0
 */
package de.cau.cs.kieler.ehelp.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.ehelp.eHelp.Chapter;
import de.cau.cs.kieler.ehelp.eHelp.ConfigHome;
import de.cau.cs.kieler.ehelp.eHelp.ConfigPath;
import de.cau.cs.kieler.ehelp.eHelp.Context;
import de.cau.cs.kieler.ehelp.eHelp.EHelpModel;
import de.cau.cs.kieler.ehelp.eHelp.EHelpPackage;
import de.cau.cs.kieler.ehelp.eHelp.Images;
import de.cau.cs.kieler.ehelp.eHelp.Keyword;
import de.cau.cs.kieler.ehelp.eHelp.Link;
import de.cau.cs.kieler.ehelp.eHelp.List;
import de.cau.cs.kieler.ehelp.eHelp.ListItem;
import de.cau.cs.kieler.ehelp.eHelp.Table;
import de.cau.cs.kieler.ehelp.eHelp.TableCell;
import de.cau.cs.kieler.ehelp.eHelp.TableRow;
import de.cau.cs.kieler.ehelp.eHelp.Text;
import de.cau.cs.kieler.ehelp.services.EHelpGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractEHelpSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EHelpGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EHelpPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EHelpPackage.CHAPTER:
				sequence_Chapter(context, (Chapter) semanticObject); 
				return; 
			case EHelpPackage.CONFIG_HOME:
				sequence_ConfigHome(context, (ConfigHome) semanticObject); 
				return; 
			case EHelpPackage.CONFIG_PATH:
				sequence_ConfigPath(context, (ConfigPath) semanticObject); 
				return; 
			case EHelpPackage.CONTEXT:
				sequence_Context(context, (Context) semanticObject); 
				return; 
			case EHelpPackage.EHELP_MODEL:
				sequence_EHelpModel(context, (EHelpModel) semanticObject); 
				return; 
			case EHelpPackage.ENUM:
				sequence_Enum(context, (de.cau.cs.kieler.ehelp.eHelp.Enum) semanticObject); 
				return; 
			case EHelpPackage.IMAGES:
				sequence_Images(context, (Images) semanticObject); 
				return; 
			case EHelpPackage.KEYWORD:
				sequence_Keyword(context, (Keyword) semanticObject); 
				return; 
			case EHelpPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case EHelpPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case EHelpPackage.LIST_ITEM:
				sequence_ListItem(context, (ListItem) semanticObject); 
				return; 
			case EHelpPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case EHelpPackage.TABLE_CELL:
				sequence_TableCell(context, (TableCell) semanticObject); 
				return; 
			case EHelpPackage.TABLE_ROW:
				sequence_TableRow(context, (TableRow) semanticObject); 
				return; 
			case EHelpPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Chapter returns Chapter
	 *
	 * Constraint:
	 *     (name=ID? title=STRING content+=Content* subchapters+=Chapter*)
	 */
	protected void sequence_Chapter(ISerializationContext context, Chapter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Config returns ConfigHome
	 *     ConfigHome returns ConfigHome
	 *
	 * Constraint:
	 *     home=STRING
	 */
	protected void sequence_ConfigHome(ISerializationContext context, ConfigHome semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EHelpPackage.Literals.CONFIG_HOME__HOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EHelpPackage.Literals.CONFIG_HOME__HOME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigHomeAccess().getHomeSTRINGTerminalRuleCall_2_0(), semanticObject.getHome());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Config returns ConfigPath
	 *     ConfigPath returns ConfigPath
	 *
	 * Constraint:
	 *     path=STRING
	 */
	protected void sequence_ConfigPath(ISerializationContext context, ConfigPath semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EHelpPackage.Literals.CONFIG_PATH__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EHelpPackage.Literals.CONFIG_PATH__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigPathAccess().getPathSTRINGTerminalRuleCall_2_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Context
	 *     Context returns Context
	 *
	 * Constraint:
	 *     (id=ID label=STRING)
	 */
	protected void sequence_Context(ISerializationContext context, Context semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EHelpPackage.Literals.CONTEXT__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EHelpPackage.Literals.CONTEXT__ID));
			if (transientValues.isValueTransient(semanticObject, EHelpPackage.Literals.CONTEXT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EHelpPackage.Literals.CONTEXT__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getContextAccess().getLabelSTRINGTerminalRuleCall_2_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EHelpModel returns EHelpModel
	 *
	 * Constraint:
	 *     ((configs+=Config+ chapters+=Chapter+) | chapters+=Chapter+)?
	 */
	protected void sequence_EHelpModel(ISerializationContext context, EHelpModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Enum returns Enum
	 *     Content returns Enum
	 *
	 * Constraint:
	 *     items+=ListItem+
	 */
	protected void sequence_Enum(ISerializationContext context, de.cau.cs.kieler.ehelp.eHelp.Enum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Images
	 *     Images returns Images
	 *
	 * Constraint:
	 *     images+=STRING+
	 */
	protected void sequence_Images(ISerializationContext context, Images semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Keyword
	 *     Keyword returns Keyword
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Keyword(ISerializationContext context, Keyword semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EHelpPackage.Literals.KEYWORD__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EHelpPackage.Literals.KEYWORD__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeywordAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Link
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (link=[Chapter|ID] caption=STRING?)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListItem returns ListItem
	 *
	 * Constraint:
	 *     content+=Content+
	 */
	protected void sequence_ListItem(ISerializationContext context, ListItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     List returns List
	 *     Content returns List
	 *
	 * Constraint:
	 *     items+=ListItem+
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableCell returns TableCell
	 *
	 * Constraint:
	 *     (
	 *         (center?='center'? ((middle?='middle' content+=Content+) | content+=Content+)) | 
	 *         (center?='center'? left?='left' ((middle?='middle' content+=Content+) | content+=Content+)) | 
	 *         (
	 *             ((center?='center'? right?='right') | (center?='center'? left?='left' right?='right') | right?='right') 
	 *             ((middle?='middle' content+=Content+) | content+=Content+)
	 *         ) | 
	 *         (
	 *             (
	 *                 (center?='center'? ((right?='right' top?='top') | top?='top')) | 
	 *                 (center?='center'? left?='left' ((right?='right' top?='top') | top?='top')) | 
	 *                 (right?='right' top?='top') | 
	 *                 top?='top'
	 *             ) 
	 *             ((middle?='middle' content+=Content+) | content+=Content+)
	 *         ) | 
	 *         (
	 *             (
	 *                 (center?='center'? ((top?='top' middle?='middle') | middle?='middle')) | 
	 *                 (center?='center'? left?='left' ((top?='top' middle?='middle') | middle?='middle')) | 
	 *                 (
	 *                     ((center?='center'? right?='right') | (center?='center'? left?='left' right?='right') | right?='right') 
	 *                     ((top?='top' middle?='middle') | middle?='middle')
	 *                 ) | 
	 *                 (top?='top' middle?='middle') | 
	 *                 middle?='middle'
	 *             )? 
	 *             bottom?='bottom' 
	 *             content+=Content+
	 *         ) | 
	 *         (middle?='middle' content+=Content+) | 
	 *         content+=Content+
	 *     )?
	 */
	protected void sequence_TableCell(ISerializationContext context, TableCell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableRow returns TableRow
	 *
	 * Constraint:
	 *     (cells+=TableCell cells+=TableCell*)
	 */
	protected void sequence_TableRow(ISerializationContext context, TableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Table
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (width=INT? spacing=INT? stretch?='stretch'? rows+=TableRow*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Text
	 *     Text returns Text
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EHelpPackage.Literals.TEXT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EHelpPackage.Literals.TEXT__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextAccess().getTextSTRINGTerminalRuleCall_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
}
