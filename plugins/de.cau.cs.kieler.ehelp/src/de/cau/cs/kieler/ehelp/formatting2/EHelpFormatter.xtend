/*
 * generated by Xtext 2.13.0
 */
package de.cau.cs.kieler.ehelp.formatting2

import com.google.inject.Inject
import de.cau.cs.kieler.ehelp.eHelp.EHelpModel
import de.cau.cs.kieler.ehelp.eHelp.Chapter
import de.cau.cs.kieler.ehelp.eHelp.Content
import de.cau.cs.kieler.ehelp.services.EHelpGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import de.cau.cs.kieler.ehelp.eHelp.List
import de.cau.cs.kieler.ehelp.eHelp.ListItem
import de.cau.cs.kieler.ehelp.services.EHelpGrammarAccess
import de.cau.cs.kieler.ehelp.eHelp.EHelpModel
import de.cau.cs.kieler.ehelp.eHelp.Table

class EHelpFormatter extends AbstractFormatter2 {

	@Inject extension EHelpGrammarAccess

	def dispatch void format(EHelpModel eHelpModel, extension IFormattableDocument document) {
		println("format model")

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Chapter chapter : eHelpModel.getChapters()) {
			// chapter.surround[]
			chapter.format;
		}
	}

	def dispatch void format(List content, extension IFormattableDocument document) {
		println("format List")
		content.surround[indent]
		content.prepend[setNewLines(1)]
		for (item : content.items) {
			item.format
			item.regionFor.keyword('-').surround[oneSpace].prepend[newLine].surround[indent]
		}
		content.regionFor.keyword('{').append[newLine].surround[oneSpace]
		content.regionFor.keyword('}').prepend[newLine].surround[noSpace]
	}

	def dispatch void format(de.cau.cs.kieler.ehelp.eHelp.Enum content, extension IFormattableDocument document) {
		println("format Enum")
		content.surround[indent]
		content.prepend[setNewLines(1)]
		for (item : content.items) {
			item.format
			item.regionFor.keyword('-').surround[oneSpace].prepend[newLine].surround[indent]
		}
		content.regionFor.keyword('{').append[newLine].surround[oneSpace]
		content.regionFor.keyword('}').prepend[newLine].surround[noSpace]
	}


	def dispatch void format(Table content, extension IFormattableDocument document) {
		println("format Enum")
		content.surround[indent]
		content.prepend[setNewLines(1)]
		for (item : content.rows) {
//			item.format
			item.regionFor.keyword('-').surround[oneSpace].prepend[newLine].surround[indent]
			item.regionFor.keyword('|').surround[oneSpace]
		}
		content.regionFor.keyword('{').append[newLine].surround[oneSpace]
		content.regionFor.keyword('}').prepend[newLine].surround[noSpace]
	}


	def dispatch void format(Content content, extension IFormattableDocument document) {
		println("format content parent:" + content.eContainer.class.name)
		content.regionFor.keyword('[').surround[oneSpace]
		content.regionFor.keyword(']').surround[oneSpace]
		if (!((content.eContainer instanceof ListItem) ||
			(content.eContainer instanceof de.cau.cs.kieler.ehelp.eHelp.Enum))) {
			content.surround[indent]
			content.prepend[newLine]
		}
	}

	def dispatch void format(Chapter chapter, extension IFormattableDocument document) {
		println("format chapter")
		chapter.prepend[setNewLines(2)]

		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Content content : chapter.getContent()) {
			println("format content2")
			content.format;
		}
		for (Chapter subchapter : chapter.getSubchapters()) {
			// subchapter.prepend[setNewLines(2)]
			subchapter.format
			subchapter.surround[indent]
		}
		chapter.regionFor.keyword('{').append[newLine].surround[oneSpace]
		chapter.regionFor.keyword('}').prepend[newLine].surround[noSpace]
		chapter.regionFor.keyword('chapter').surround[oneSpace]
	}

// TODO: implement for List, Enum, ListItem
}
