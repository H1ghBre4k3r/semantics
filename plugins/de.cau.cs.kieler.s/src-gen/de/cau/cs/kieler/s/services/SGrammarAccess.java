/*
* generated by Xtext
*/
package de.cau.cs.kieler.s.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.core.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.text.services.AnnotationsGrammarAccess;

@Singleton
public class SGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSynchronousProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPriorityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPriorityINTTerminalRuleCall_4_0 = (RuleCall)cPriorityAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Assignment cGlobalHostCodeInstructionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGlobalHostCodeInstructionHOSTCODETerminalRuleCall_7_0 = (RuleCall)cGlobalHostCodeInstructionAssignment_7.eContents().get(0);
		private final Assignment cStatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatesStateParserRuleCall_8_0 = (RuleCall)cStatesAssignment_8.eContents().get(0);
		
		//Program:
		//	annotations+=Annotation* "synchronous program" name=ID "(" priority=INT ")" //	((signals += Signal) (signals += Signal)*)?
		//	//	(((signals+=Signal)+ ';') | ((variables+=Variable)+ ';'))? 
		//	//	(((variables+=Variable)|(signals += Signal)) ((variables+=Variable)|(signals += Signal))*)?
		//	declarations+=Declaration* //    (((valuedObjects+=ValuedObject)+ ';')*)? 
		//	globalHostCodeInstruction=HOSTCODE? states+=State+;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "synchronous program" name=ID "(" priority=INT ")" //	((signals += Signal) (signals += Signal)*)?
		////	(((signals+=Signal)+ ';') | ((variables+=Variable)+ ';'))? 
		////	(((variables+=Variable)|(signals += Signal)) ((variables+=Variable)|(signals += Signal))*)?
		//declarations+=Declaration* //    (((valuedObjects+=ValuedObject)+ ';')*)? 
		//globalHostCodeInstruction=HOSTCODE? states+=State+
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"synchronous program"
		public Keyword getSynchronousProgramKeyword_1() { return cSynchronousProgramKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//priority=INT
		public Assignment getPriorityAssignment_4() { return cPriorityAssignment_4; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_4_0() { return cPriorityINTTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_6_0() { return cDeclarationsDeclarationParserRuleCall_6_0; }

		//globalHostCodeInstruction=HOSTCODE?
		public Assignment getGlobalHostCodeInstructionAssignment_7() { return cGlobalHostCodeInstructionAssignment_7; }

		//HOSTCODE
		public RuleCall getGlobalHostCodeInstructionHOSTCODETerminalRuleCall_7_0() { return cGlobalHostCodeInstructionHOSTCODETerminalRuleCall_7_0; }

		//states+=State+
		public Assignment getStatesAssignment_8() { return cStatesAssignment_8; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_0() { return cStatesStateParserRuleCall_8_0; }
	}

	public class MetamodelManipulationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelManipulationRule");
		private final RuleCall cProgramParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MetamodelManipulationRule returns annotations::Annotatable:
		//	Program;
		public ParserRule getRule() { return rule; }

		//Program
		public RuleCall getProgramParserRuleCall() { return cProgramParserRuleCall; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cInstructionsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_7_0_0 = (RuleCall)cInstructionsAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////Annotation:
		////	'@' key = ID ':'
		////	value = STRING
		////;
		////TODO: Consolidate with Annotatable xtext grammar somehow... (s.a.)
		////Annotatable returns annotations::Annotatable:
		//// 	State | Instruction;
		//State:
		//	annotations+=Annotation* "state" "(" name=ID ")" "{" declarations+=Declaration* (instructions+=Instruction ";")* "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "state" "(" name=ID ")" "{" declarations+=Declaration* (instructions+=Instruction ";")* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_6_0() { return cDeclarationsDeclarationParserRuleCall_6_0; }

		//(instructions+=Instruction ";")*
		public Group getGroup_7() { return cGroup_7; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_7_0() { return cInstructionsAssignment_7_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_7_0_0() { return cInstructionsInstructionParserRuleCall_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExternAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cExternExternKeyword_1_0_0_0 = (Keyword)cExternAssignment_1_0_0.eContents().get(0);
		private final Assignment cStaticAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0_1_0 = (Keyword)cStaticAssignment_1_0_1.eContents().get(0);
		private final Assignment cConstAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final Keyword cConstConstKeyword_1_0_2_0 = (Keyword)cConstAssignment_1_0_2.eContents().get(0);
		private final Assignment cInputAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final Keyword cInputInputKeyword_1_0_3_0 = (Keyword)cInputAssignment_1_0_3.eContents().get(0);
		private final Assignment cOutputAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final Keyword cOutputOutputKeyword_1_0_4_0 = (Keyword)cOutputAssignment_1_0_4.eContents().get(0);
		private final Alternatives cAlternatives_1_0_5 = (Alternatives)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_0_5_0 = (Group)cAlternatives_1_0_5.eContents().get(0);
		private final Assignment cSignalAssignment_1_0_5_0_0 = (Assignment)cGroup_1_0_5_0.eContents().get(0);
		private final Keyword cSignalSignalKeyword_1_0_5_0_0_0 = (Keyword)cSignalAssignment_1_0_5_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_5_0_1 = (Assignment)cGroup_1_0_5_0.eContents().get(1);
		private final RuleCall cTypeValueTypeEnumRuleCall_1_0_5_0_1_0 = (RuleCall)cTypeAssignment_1_0_5_0_1.eContents().get(0);
		private final Assignment cSignalAssignment_1_0_5_1 = (Assignment)cAlternatives_1_0_5.eContents().get(1);
		private final Keyword cSignalSignalKeyword_1_0_5_1_0 = (Keyword)cSignalAssignment_1_0_5_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExternAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cExternExternKeyword_1_1_0_0 = (Keyword)cExternAssignment_1_1_0.eContents().get(0);
		private final Assignment cStaticAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_1_1_0 = (Keyword)cStaticAssignment_1_1_1.eContents().get(0);
		private final Assignment cConstAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final Keyword cConstConstKeyword_1_1_2_0 = (Keyword)cConstAssignment_1_1_2.eContents().get(0);
		private final Assignment cInputAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final Keyword cInputInputKeyword_1_1_3_0 = (Keyword)cInputAssignment_1_1_3.eContents().get(0);
		private final Assignment cOutputAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final Keyword cOutputOutputKeyword_1_1_4_0 = (Keyword)cOutputAssignment_1_1_4.eContents().get(0);
		private final Assignment cSignalAssignment_1_1_5 = (Assignment)cGroup_1_1.eContents().get(5);
		private final Keyword cSignalSignalKeyword_1_1_5_0 = (Keyword)cSignalAssignment_1_1_5.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_6 = (Assignment)cGroup_1_1.eContents().get(6);
		private final RuleCall cTypeValueTypeEnumRuleCall_1_1_6_0 = (RuleCall)cTypeAssignment_1_1_6.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_3_1_0 = (RuleCall)cValuedObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// TODO: ensure signal AND variable declaration in top level....
		//Declaration returns kexpressions::Declaration:
		//	annotations+=Annotation* (extern?="extern"? static?="static"? const?="const"? input?="input"? output?="output"?
		//	(signal?="signal"? type=ValueType | signal?="signal") | extern?="extern" static?="static"? const?="const"?
		//	input?="input"? output?="output"? signal?="signal"? type=ValueType?) valuedObjects+=ValuedObject (","
		//	valuedObjects+=ValuedObject)* ";";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (extern?="extern"? static?="static"? const?="const"? input?="input"? output?="output"?
		//(signal?="signal"? type=ValueType | signal?="signal") | extern?="extern" static?="static"? const?="const"?
		//input?="input"? output?="output"? signal?="signal"? type=ValueType?) valuedObjects+=ValuedObject (","
		//valuedObjects+=ValuedObject)* ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//extern?="extern"? static?="static"? const?="const"? input?="input"? output?="output"? (signal?="signal"? type=ValueType
		//| signal?="signal") | extern?="extern" static?="static"? const?="const"? input?="input"? output?="output"?
		//signal?="signal"? type=ValueType?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//extern?="extern"? static?="static"? const?="const"? input?="input"? output?="output"? (signal?="signal"? type=ValueType
		//| signal?="signal")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//extern?="extern"?
		public Assignment getExternAssignment_1_0_0() { return cExternAssignment_1_0_0; }

		//"extern"
		public Keyword getExternExternKeyword_1_0_0_0() { return cExternExternKeyword_1_0_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_1_0_1() { return cStaticAssignment_1_0_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0_1_0() { return cStaticStaticKeyword_1_0_1_0; }

		//const?="const"?
		public Assignment getConstAssignment_1_0_2() { return cConstAssignment_1_0_2; }

		//"const"
		public Keyword getConstConstKeyword_1_0_2_0() { return cConstConstKeyword_1_0_2_0; }

		//input?="input"?
		public Assignment getInputAssignment_1_0_3() { return cInputAssignment_1_0_3; }

		//"input"
		public Keyword getInputInputKeyword_1_0_3_0() { return cInputInputKeyword_1_0_3_0; }

		//output?="output"?
		public Assignment getOutputAssignment_1_0_4() { return cOutputAssignment_1_0_4; }

		//"output"
		public Keyword getOutputOutputKeyword_1_0_4_0() { return cOutputOutputKeyword_1_0_4_0; }

		//signal?="signal"? type=ValueType | signal?="signal"
		public Alternatives getAlternatives_1_0_5() { return cAlternatives_1_0_5; }

		//signal?="signal"? type=ValueType
		public Group getGroup_1_0_5_0() { return cGroup_1_0_5_0; }

		//signal?="signal"?
		public Assignment getSignalAssignment_1_0_5_0_0() { return cSignalAssignment_1_0_5_0_0; }

		//"signal"
		public Keyword getSignalSignalKeyword_1_0_5_0_0_0() { return cSignalSignalKeyword_1_0_5_0_0_0; }

		//type=ValueType
		public Assignment getTypeAssignment_1_0_5_0_1() { return cTypeAssignment_1_0_5_0_1; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_1_0_5_0_1_0() { return cTypeValueTypeEnumRuleCall_1_0_5_0_1_0; }

		//signal?="signal"
		public Assignment getSignalAssignment_1_0_5_1() { return cSignalAssignment_1_0_5_1; }

		//"signal"
		public Keyword getSignalSignalKeyword_1_0_5_1_0() { return cSignalSignalKeyword_1_0_5_1_0; }

		//extern?="extern" static?="static"? const?="const"? input?="input"? output?="output"? signal?="signal"? type=ValueType?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//extern?="extern"
		public Assignment getExternAssignment_1_1_0() { return cExternAssignment_1_1_0; }

		//"extern"
		public Keyword getExternExternKeyword_1_1_0_0() { return cExternExternKeyword_1_1_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_1_1_1() { return cStaticAssignment_1_1_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_1_1_0() { return cStaticStaticKeyword_1_1_1_0; }

		//const?="const"?
		public Assignment getConstAssignment_1_1_2() { return cConstAssignment_1_1_2; }

		//"const"
		public Keyword getConstConstKeyword_1_1_2_0() { return cConstConstKeyword_1_1_2_0; }

		//input?="input"?
		public Assignment getInputAssignment_1_1_3() { return cInputAssignment_1_1_3; }

		//"input"
		public Keyword getInputInputKeyword_1_1_3_0() { return cInputInputKeyword_1_1_3_0; }

		//output?="output"?
		public Assignment getOutputAssignment_1_1_4() { return cOutputAssignment_1_1_4; }

		//"output"
		public Keyword getOutputOutputKeyword_1_1_4_0() { return cOutputOutputKeyword_1_1_4_0; }

		//signal?="signal"?
		public Assignment getSignalAssignment_1_1_5() { return cSignalAssignment_1_1_5; }

		//"signal"
		public Keyword getSignalSignalKeyword_1_1_5_0() { return cSignalSignalKeyword_1_1_5_0; }

		//type=ValueType?
		public Assignment getTypeAssignment_1_1_6() { return cTypeAssignment_1_1_6; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_1_1_6_0() { return cTypeValueTypeEnumRuleCall_1_1_6_0; }

		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_2_0() { return cValuedObjectsValuedObjectParserRuleCall_2_0; }

		//("," valuedObjects+=ValuedObject)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_3_1() { return cValuedObjectsAssignment_3_1; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_3_1_0() { return cValuedObjectsValuedObjectParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalitiesINTTerminalRuleCall_2_1_0 = (RuleCall)cCardinalitiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCombineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCombineOperatorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_4_1_0 = (RuleCall)cCombineOperatorAssignment_4_1.eContents().get(0);
		
		//ValuedObject returns kexpressions::ValuedObject:
		//	annotations+=Annotation* name=ID ("[" cardinalities+=INT "]")* ("=" initialValue=Expression)? ("combine"
		//	combineOperator=CombineOperator)?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* name=ID ("[" cardinalities+=INT "]")* ("=" initialValue=Expression)? ("combine"
		//combineOperator=CombineOperator)?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" cardinalities+=INT "]")*
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//cardinalities+=INT
		public Assignment getCardinalitiesAssignment_2_1() { return cCardinalitiesAssignment_2_1; }

		//INT
		public RuleCall getCardinalitiesINTTerminalRuleCall_2_1_0() { return cCardinalitiesINTTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//("=" initialValue=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//initialValue=Expression
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }

		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_3_1_0() { return cInitialValueExpressionParserRuleCall_3_1_0; }

		//("combine" combineOperator=CombineOperator)?
		public Group getGroup_4() { return cGroup_4; }

		//"combine"
		public Keyword getCombineKeyword_4_0() { return cCombineKeyword_4_0; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_4_1() { return cCombineOperatorAssignment_4_1; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_4_1_0() { return cCombineOperatorCombineOperatorEnumRuleCall_4_1_0; }
	}

	public class HostCodeInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HostCodeInstruction");
		private final Assignment cHostCodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cHostCodeHOSTCODETerminalRuleCall_0 = (RuleCall)cHostCodeAssignment.eContents().get(0);
		
		////
		//// OLD S DECLARATION
		////
		////ValuedObject returns kexpressions::ValuedObject:
		////    (isInput?='input')?
		////	(isOutput?='output')?
		////	(isSignal?='signal')?
		////	(name=EString)
		////	(':=' initialValue=Expression)?
		////    ((':' type=ValueType)
		////      |
		////     (':' 'combine' type=ValueType 'with' (combineOperator=CombineOperator) )
		////    )? ";";
		//////    )?;
		////---------------------------------------------------------------------
		////----------------------- List of S-Instructions ----------------------
		////---------------------------------------------------------------------
		//HostCodeInstruction:
		//	hostCode=HOSTCODE;
		public ParserRule getRule() { return rule; }

		//hostCode=HOSTCODE
		public Assignment getHostCodeAssignment() { return cHostCodeAssignment; }

		//HOSTCODE
		public RuleCall getHostCodeHOSTCODETerminalRuleCall_0() { return cHostCodeHOSTCODETerminalRuleCall_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHaltParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJoinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPauseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTermParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIfParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTransParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cForkParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLocalSignalParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEmitParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAwaitParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPrioParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cHostCodeInstructionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAssignmentParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//// custom terminal rule for strings
		////terminal HOSTCODESTRINGTERMINAL returns ecore::EString:
		////    '$' ('a'..'z'|'A'..'Z'|'_'|'.'|'"'|'0'..'9')+ '$';
		//Instruction:
		//	Halt | Abort | Join | Pause | Term | If | Trans | Fork | LocalSignal | Emit | Await | Prio | HostCodeInstruction |
		//	Assignment;
		public ParserRule getRule() { return rule; }

		//Halt | Abort | Join | Pause | Term | If | Trans | Fork | LocalSignal | Emit | Await | Prio | HostCodeInstruction |
		//Assignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Halt
		public RuleCall getHaltParserRuleCall_0() { return cHaltParserRuleCall_0; }

		//Abort
		public RuleCall getAbortParserRuleCall_1() { return cAbortParserRuleCall_1; }

		//Join
		public RuleCall getJoinParserRuleCall_2() { return cJoinParserRuleCall_2; }

		//Pause
		public RuleCall getPauseParserRuleCall_3() { return cPauseParserRuleCall_3; }

		//Term
		public RuleCall getTermParserRuleCall_4() { return cTermParserRuleCall_4; }

		//If
		public RuleCall getIfParserRuleCall_5() { return cIfParserRuleCall_5; }

		//Trans
		public RuleCall getTransParserRuleCall_6() { return cTransParserRuleCall_6; }

		//Fork
		public RuleCall getForkParserRuleCall_7() { return cForkParserRuleCall_7; }

		//LocalSignal
		public RuleCall getLocalSignalParserRuleCall_8() { return cLocalSignalParserRuleCall_8; }

		//Emit
		public RuleCall getEmitParserRuleCall_9() { return cEmitParserRuleCall_9; }

		//Await
		public RuleCall getAwaitParserRuleCall_10() { return cAwaitParserRuleCall_10; }

		//Prio
		public RuleCall getPrioParserRuleCall_11() { return cPrioParserRuleCall_11; }

		//HostCodeInstruction
		public RuleCall getHostCodeInstructionParserRuleCall_12() { return cHostCodeInstructionParserRuleCall_12; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_13() { return cAssignmentParserRuleCall_13; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableValuedObjectCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableValuedObjectIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableValuedObjectCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Assignment:
		//	variable=[kexpressions::ValuedObject] ("[" indices+=Expression "]")* "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//variable=[kexpressions::ValuedObject] ("[" indices+=Expression "]")* "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//variable=[kexpressions::ValuedObject]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getVariableValuedObjectCrossReference_0_0() { return cVariableValuedObjectCrossReference_0_0; }

		//ID
		public RuleCall getVariableValuedObjectIDTerminalRuleCall_0_0_1() { return cVariableValuedObjectIDTerminalRuleCall_0_0_1; }

		//("[" indices+=Expression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indices+=Expression
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }

		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_1_1_0() { return cIndicesExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class PrioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Change priority
		//Prio:
		//	"prio" "(" priority=INT ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"prio" "(" priority=INT ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"prio"
		public Keyword getPrioKeyword_0() { return cPrioKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//priority=INT
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_2_0() { return cPriorityINTTerminalRuleCall_2_0; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TransElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trans");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContinuationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContinuationStateCrossReference_2_0 = (CrossReference)cContinuationAssignment_2.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_2_0_1 = (RuleCall)cContinuationStateCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Transition to anothe Thread or State   
		//Trans:
		//	"trans" "(" continuation=[State] ")";
		public ParserRule getRule() { return rule; }

		//"trans" "(" continuation=[State] ")"
		public Group getGroup() { return cGroup; }

		//"trans"
		public Keyword getTransKeyword_0() { return cTransKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//continuation=[State]
		public Assignment getContinuationAssignment_2() { return cContinuationAssignment_2; }

		//[State]
		public CrossReference getContinuationStateCrossReference_2_0() { return cContinuationStateCrossReference_2_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_2_0_1() { return cContinuationStateIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContinuationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cContinuationStateCrossReference_2_0 = (CrossReference)cContinuationAssignment_2.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_2_0_1 = (RuleCall)cContinuationStateCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPriorityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPriorityINTTerminalRuleCall_4_0 = (RuleCall)cPriorityAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Forking new Threads
		//Fork:
		//	"fork" "(" continuation=[State] "," priority=INT ")";
		public ParserRule getRule() { return rule; }

		//"fork" "(" continuation=[State] "," priority=INT ")"
		public Group getGroup() { return cGroup; }

		//"fork"
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//continuation=[State]
		public Assignment getContinuationAssignment_2() { return cContinuationAssignment_2; }

		//[State]
		public CrossReference getContinuationStateCrossReference_2_0() { return cContinuationStateCrossReference_2_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_2_0_1() { return cContinuationStateIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//priority=INT
		public Assignment getPriorityAssignment_4() { return cPriorityAssignment_4; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_4_0() { return cPriorityINTTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContinuationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_2_1_0 = (CrossReference)cContinuationAssignment_2_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContinuationStateCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// Joining Threads
		//Join:
		//	{Join} "join" ("(" continuation=[State] ")")?;
		public ParserRule getRule() { return rule; }

		//{Join} "join" ("(" continuation=[State] ")")?
		public Group getGroup() { return cGroup; }

		//{Join}
		public Action getJoinAction_0() { return cJoinAction_0; }

		//"join"
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }

		//("(" continuation=[State] ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_2_1() { return cContinuationAssignment_2_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_2_1_0() { return cContinuationStateCrossReference_2_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_2_1_0_1() { return cContinuationStateIDTerminalRuleCall_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPauseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContinuationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_2_1_0 = (CrossReference)cContinuationAssignment_2_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContinuationStateCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// Simple instructions
		//Pause:
		//	{Pause} "pause" ("(" continuation=[State] ")")?;
		public ParserRule getRule() { return rule; }

		//{Pause} "pause" ("(" continuation=[State] ")")?
		public Group getGroup() { return cGroup; }

		//{Pause}
		public Action getPauseAction_0() { return cPauseAction_0; }

		//"pause"
		public Keyword getPauseKeyword_1() { return cPauseKeyword_1; }

		//("(" continuation=[State] ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_2_1() { return cContinuationAssignment_2_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_2_1_0() { return cContinuationStateCrossReference_2_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_2_1_0_1() { return cContinuationStateIDTerminalRuleCall_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTermKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContinuationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_2_1_0 = (CrossReference)cContinuationAssignment_2_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContinuationStateCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Term:
		//	{Term} "term" ("(" continuation=[State] ")")?;
		public ParserRule getRule() { return rule; }

		//{Term} "term" ("(" continuation=[State] ")")?
		public Group getGroup() { return cGroup; }

		//{Term}
		public Action getTermAction_0() { return cTermAction_0; }

		//"term"
		public Keyword getTermKeyword_1() { return cTermKeyword_1; }

		//("(" continuation=[State] ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_2_1() { return cContinuationAssignment_2_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_2_1_0() { return cContinuationStateCrossReference_2_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_2_1_0_1() { return cContinuationStateIDTerminalRuleCall_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class HaltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Halt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHaltAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHaltKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContinuationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_2_1_0 = (CrossReference)cContinuationAssignment_2_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContinuationStateCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Halt:
		//	{Halt} "halt" ("(" continuation=[State] ")")?;
		public ParserRule getRule() { return rule; }

		//{Halt} "halt" ("(" continuation=[State] ")")?
		public Group getGroup() { return cGroup; }

		//{Halt}
		public Action getHaltAction_0() { return cHaltAction_0; }

		//"halt"
		public Keyword getHaltKeyword_1() { return cHaltKeyword_1; }

		//("(" continuation=[State] ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_2_1() { return cContinuationAssignment_2_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_2_1_0() { return cContinuationStateCrossReference_2_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_2_1_0_1() { return cContinuationStateIDTerminalRuleCall_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class LocalSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalValuedObjectCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalValuedObjectIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalValuedObjectCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// For handling local signal re-initialization (taking care or reincarnation)
		//LocalSignal:
		//	"signal" "(" signal=[kexpressions::ValuedObject] ")";
		public ParserRule getRule() { return rule; }

		//"signal" "(" signal=[kexpressions::ValuedObject] ")"
		public Group getGroup() { return cGroup; }

		//"signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//signal=[kexpressions::ValuedObject]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[kexpressions::ValuedObject]
		public CrossReference getSignalValuedObjectCrossReference_2_0() { return cSignalValuedObjectCrossReference_2_0; }

		//ID
		public RuleCall getSignalValuedObjectIDTerminalRuleCall_2_0_1() { return cSignalValuedObjectIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class EmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Emit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalValuedObjectCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalValuedObjectIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalValuedObjectCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSExpressionParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContinuationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_4_1_0 = (CrossReference)cContinuationAssignment_4_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_4_1_0_1 = (RuleCall)cContinuationStateCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Emit:
		//	"emit" "(" signal=[kexpressions::ValuedObject] ("(" value=SExpression ")")? ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"emit" "(" signal=[kexpressions::ValuedObject] ("(" value=SExpression ")")? ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"emit"
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//signal=[kexpressions::ValuedObject]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[kexpressions::ValuedObject]
		public CrossReference getSignalValuedObjectCrossReference_2_0() { return cSignalValuedObjectCrossReference_2_0; }

		//ID
		public RuleCall getSignalValuedObjectIDTerminalRuleCall_2_0_1() { return cSignalValuedObjectIDTerminalRuleCall_2_0_1; }

		//("(" value=SExpression ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//value=SExpression
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//SExpression
		public RuleCall getValueSExpressionParserRuleCall_3_1_0() { return cValueSExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//("," continuation=[State])?
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_4_1() { return cContinuationAssignment_4_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_4_1_0() { return cContinuationStateCrossReference_4_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_4_1_0_1() { return cContinuationStateIDTerminalRuleCall_4_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AbortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAbortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAbortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContinuationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_2_1_0 = (CrossReference)cContinuationAssignment_2_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_2_1_0_1 = (RuleCall)cContinuationStateCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Abort:
		//	{Abort} "abort" ("(" continuation=[State] ")")?;
		public ParserRule getRule() { return rule; }

		//{Abort} "abort" ("(" continuation=[State] ")")?
		public Group getGroup() { return cGroup; }

		//{Abort}
		public Action getAbortAction_0() { return cAbortAction_0; }

		//"abort"
		public Keyword getAbortKeyword_1() { return cAbortKeyword_1; }

		//("(" continuation=[State] ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_2_1() { return cContinuationAssignment_2_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_2_1_0() { return cContinuationStateCrossReference_2_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_2_1_0_1() { return cContinuationStateIDTerminalRuleCall_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cInstructionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_6_0_0 = (RuleCall)cInstructionsAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Conditioned execution of instructions  
		//If:
		//	"if" "(" expression=SExpression ("," continuation=[State])? ")" "{" (instructions+=Instruction ";")* "}";
		public ParserRule getRule() { return rule; }

		//"if" "(" expression=SExpression ("," continuation=[State])? ")" "{" (instructions+=Instruction ";")* "}"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=SExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//SExpression
		public RuleCall getExpressionSExpressionParserRuleCall_2_0() { return cExpressionSExpressionParserRuleCall_2_0; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(instructions+=Instruction ";")*
		public Group getGroup_6() { return cGroup_6; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_6_0() { return cInstructionsAssignment_6_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_6_0_0() { return cInstructionsInstructionParserRuleCall_6_0_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AwaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Await");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAwaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalValuedObjectCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalValuedObjectIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalValuedObjectCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContinuationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cContinuationStateCrossReference_3_1_0 = (CrossReference)cContinuationAssignment_3_1.eContents().get(0);
		private final RuleCall cContinuationStateIDTerminalRuleCall_3_1_0_1 = (RuleCall)cContinuationStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Complex instruction
		//Await:
		//	"await" "(" signal=[kexpressions::ValuedObject] ("," continuation=[State])? ")";
		public ParserRule getRule() { return rule; }

		//"await" "(" signal=[kexpressions::ValuedObject] ("," continuation=[State])? ")"
		public Group getGroup() { return cGroup; }

		//"await"
		public Keyword getAwaitKeyword_0() { return cAwaitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//signal=[kexpressions::ValuedObject]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[kexpressions::ValuedObject]
		public CrossReference getSignalValuedObjectCrossReference_2_0() { return cSignalValuedObjectCrossReference_2_0; }

		//ID
		public RuleCall getSignalValuedObjectIDTerminalRuleCall_2_0_1() { return cSignalValuedObjectIDTerminalRuleCall_2_0_1; }

		//("," continuation=[State])?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//continuation=[State]
		public Assignment getContinuationAssignment_3_1() { return cContinuationAssignment_3_1; }

		//[State]
		public CrossReference getContinuationStateCrossReference_3_1_0() { return cContinuationStateCrossReference_3_1_0; }

		//ID
		public RuleCall getContinuationStateIDTerminalRuleCall_3_1_0_1() { return cContinuationStateIDTerminalRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SExpression returns kexpressions::Expression: //| HOSTCODE
		//	Expression;
		public ParserRule getRule() { return rule; }

		////| HOSTCODE
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	
	
	private final ProgramElements pProgram;
	private final MetamodelManipulationRuleElements pMetamodelManipulationRule;
	private final StateElements pState;
	private final DeclarationElements pDeclaration;
	private final ValuedObjectElements pValuedObject;
	private final HostCodeInstructionElements pHostCodeInstruction;
	private final InstructionElements pInstruction;
	private final AssignmentElements pAssignment;
	private final PrioElements pPrio;
	private final TransElements pTrans;
	private final ForkElements pFork;
	private final JoinElements pJoin;
	private final PauseElements pPause;
	private final TermElements pTerm;
	private final HaltElements pHalt;
	private final LocalSignalElements pLocalSignal;
	private final EmitElements pEmit;
	private final AbortElements pAbort;
	private final IfElements pIf;
	private final AwaitElements pAwait;
	private final SExpressionElements pSExpression;
	
	private final Grammar grammar;

	private final KExpressionsGrammarAccess gaKExpressions;

	@Inject
	public SGrammarAccess(GrammarProvider grammarProvider,
		KExpressionsGrammarAccess gaKExpressions) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKExpressions = gaKExpressions;
		this.pProgram = new ProgramElements();
		this.pMetamodelManipulationRule = new MetamodelManipulationRuleElements();
		this.pState = new StateElements();
		this.pDeclaration = new DeclarationElements();
		this.pValuedObject = new ValuedObjectElements();
		this.pHostCodeInstruction = new HostCodeInstructionElements();
		this.pInstruction = new InstructionElements();
		this.pAssignment = new AssignmentElements();
		this.pPrio = new PrioElements();
		this.pTrans = new TransElements();
		this.pFork = new ForkElements();
		this.pJoin = new JoinElements();
		this.pPause = new PauseElements();
		this.pTerm = new TermElements();
		this.pHalt = new HaltElements();
		this.pLocalSignal = new LocalSignalElements();
		this.pEmit = new EmitElements();
		this.pAbort = new AbortElements();
		this.pIf = new IfElements();
		this.pAwait = new AwaitElements();
		this.pSExpression = new SExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.s.S".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	
	//Program:
	//	annotations+=Annotation* "synchronous program" name=ID "(" priority=INT ")" //	((signals += Signal) (signals += Signal)*)?
	//	//	(((signals+=Signal)+ ';') | ((variables+=Variable)+ ';'))? 
	//	//	(((variables+=Variable)|(signals += Signal)) ((variables+=Variable)|(signals += Signal))*)?
	//	declarations+=Declaration* //    (((valuedObjects+=ValuedObject)+ ';')*)? 
	//	globalHostCodeInstruction=HOSTCODE? states+=State+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//MetamodelManipulationRule returns annotations::Annotatable:
	//	Program;
	public MetamodelManipulationRuleElements getMetamodelManipulationRuleAccess() {
		return pMetamodelManipulationRule;
	}
	
	public ParserRule getMetamodelManipulationRuleRule() {
		return getMetamodelManipulationRuleAccess().getRule();
	}

	////Annotation:
	////	'@' key = ID ':'
	////	value = STRING
	////;
	////TODO: Consolidate with Annotatable xtext grammar somehow... (s.a.)
	////Annotatable returns annotations::Annotatable:
	//// 	State | Instruction;
	//State:
	//	annotations+=Annotation* "state" "(" name=ID ")" "{" declarations+=Declaration* (instructions+=Instruction ";")* "}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//// TODO: ensure signal AND variable declaration in top level....
	//Declaration returns kexpressions::Declaration:
	//	annotations+=Annotation* (extern?="extern"? static?="static"? const?="const"? input?="input"? output?="output"?
	//	(signal?="signal"? type=ValueType | signal?="signal") | extern?="extern" static?="static"? const?="const"?
	//	input?="input"? output?="output"? signal?="signal"? type=ValueType?) valuedObjects+=ValuedObject (","
	//	valuedObjects+=ValuedObject)* ";";
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//ValuedObject returns kexpressions::ValuedObject:
	//	annotations+=Annotation* name=ID ("[" cardinalities+=INT "]")* ("=" initialValue=Expression)? ("combine"
	//	combineOperator=CombineOperator)?;
	public ValuedObjectElements getValuedObjectAccess() {
		return pValuedObject;
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	////
	//// OLD S DECLARATION
	////
	////ValuedObject returns kexpressions::ValuedObject:
	////    (isInput?='input')?
	////	(isOutput?='output')?
	////	(isSignal?='signal')?
	////	(name=EString)
	////	(':=' initialValue=Expression)?
	////    ((':' type=ValueType)
	////      |
	////     (':' 'combine' type=ValueType 'with' (combineOperator=CombineOperator) )
	////    )? ";";
	//////    )?;
	////---------------------------------------------------------------------
	////----------------------- List of S-Instructions ----------------------
	////---------------------------------------------------------------------
	//HostCodeInstruction:
	//	hostCode=HOSTCODE;
	public HostCodeInstructionElements getHostCodeInstructionAccess() {
		return pHostCodeInstruction;
	}
	
	public ParserRule getHostCodeInstructionRule() {
		return getHostCodeInstructionAccess().getRule();
	}

	//// custom terminal rule for strings
	////terminal HOSTCODESTRINGTERMINAL returns ecore::EString:
	////    '$' ('a'..'z'|'A'..'Z'|'_'|'.'|'"'|'0'..'9')+ '$';
	//Instruction:
	//	Halt | Abort | Join | Pause | Term | If | Trans | Fork | LocalSignal | Emit | Await | Prio | HostCodeInstruction |
	//	Assignment;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Assignment:
	//	variable=[kexpressions::ValuedObject] ("[" indices+=Expression "]")* "=" expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//// Change priority
	//Prio:
	//	"prio" "(" priority=INT ("," continuation=[State])? ")";
	public PrioElements getPrioAccess() {
		return pPrio;
	}
	
	public ParserRule getPrioRule() {
		return getPrioAccess().getRule();
	}

	//// Transition to anothe Thread or State   
	//Trans:
	//	"trans" "(" continuation=[State] ")";
	public TransElements getTransAccess() {
		return pTrans;
	}
	
	public ParserRule getTransRule() {
		return getTransAccess().getRule();
	}

	//// Forking new Threads
	//Fork:
	//	"fork" "(" continuation=[State] "," priority=INT ")";
	public ForkElements getForkAccess() {
		return pFork;
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}

	//// Joining Threads
	//Join:
	//	{Join} "join" ("(" continuation=[State] ")")?;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//// Simple instructions
	//Pause:
	//	{Pause} "pause" ("(" continuation=[State] ")")?;
	public PauseElements getPauseAccess() {
		return pPause;
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Term:
	//	{Term} "term" ("(" continuation=[State] ")")?;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Halt:
	//	{Halt} "halt" ("(" continuation=[State] ")")?;
	public HaltElements getHaltAccess() {
		return pHalt;
	}
	
	public ParserRule getHaltRule() {
		return getHaltAccess().getRule();
	}

	//// For handling local signal re-initialization (taking care or reincarnation)
	//LocalSignal:
	//	"signal" "(" signal=[kexpressions::ValuedObject] ")";
	public LocalSignalElements getLocalSignalAccess() {
		return pLocalSignal;
	}
	
	public ParserRule getLocalSignalRule() {
		return getLocalSignalAccess().getRule();
	}

	//Emit:
	//	"emit" "(" signal=[kexpressions::ValuedObject] ("(" value=SExpression ")")? ("," continuation=[State])? ")";
	public EmitElements getEmitAccess() {
		return pEmit;
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}

	//Abort:
	//	{Abort} "abort" ("(" continuation=[State] ")")?;
	public AbortElements getAbortAccess() {
		return pAbort;
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}

	//// Conditioned execution of instructions  
	//If:
	//	"if" "(" expression=SExpression ("," continuation=[State])? ")" "{" (instructions+=Instruction ";")* "}";
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//// Complex instruction
	//Await:
	//	"await" "(" signal=[kexpressions::ValuedObject] ("," continuation=[State])? ")";
	public AwaitElements getAwaitAccess() {
		return pAwait;
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}

	//SExpression returns kexpressions::Expression: //| HOSTCODE
	//	Expression;
	public SExpressionElements getSExpressionAccess() {
		return pSExpression;
	}
	
	public ParserRule getSExpressionRule() {
		return getSExpressionAccess().getRule();
	}

	//Root returns ecore::EObject:
	//	Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//BoolExpression returns Expression:
	//	OrAndExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//OrAndExpression returns Expression:
	//	CompareOperation (({OperatorExpression.subExpressions+=current} operator=(OrOperator | LogicalOrOperator)
	//	subExpressions+=CompareOperation)* | ({OperatorExpression.subExpressions+=current} operator=(AndOperator |
	//	LogicalAndOperator) subExpressions+=CompareOperation)*);
	public KExpressionsGrammarAccess.OrAndExpressionElements getOrAndExpressionAccess() {
		return gaKExpressions.getOrAndExpressionAccess();
	}
	
	public ParserRule getOrAndExpressionRule() {
		return getOrAndExpressionAccess().getRule();
	}

	////OrExpression returns Expression:
	////	CompareOperation ({OperatorExpression.subExpressions+=current} operator=(OrOperator) subExpressions+=CompareOperation)*;
	//////	{OperatorExpression} subExpressions += CompareOperation (/ *{OperatorExpression.subExpressions+=current}* / operator=(AndOperator|OrOperator) subExpressions+=CompareOperation)*;
	////
	////AndExpression returns Expression:
	////	CompareOperation ({OperatorExpression.subExpressions+=current} operator=(AndOperator) subExpressions+=CompareOperation)*;
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression) | NotExpression;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// order IS IMPORTANT
	//NotOrValuedExpression returns Expression:
	//	ValuedExpression | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parents to indicate the right binding
	//NotExpression returns Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression returns Expression:
	//	AddExpression;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2
	//AddExpression returns Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=SubExpression)*;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Example: varA - ?B
	//SubExpression returns Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=MultExpression)*;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	////    ({OperatorExpression} subExpressions+=MultExpression (operator=SubOperator subExpressions+=MultExpression)+)
	////	| ({OperatorExpression} subExpressions+=MultExpression subExpressions+=NIntValue)
	////    | MultExpression;
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=DivExpression)*;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division always has to have parentheses because the '/' sign is also used for trigger/effect delimiter
	//DivExpression returns Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=ModExpression)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Example: varA mod ?B
	//ModExpression returns Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Example: -?A, -(?A + ?B)
	//// at the latter we need the parents to indicate the right binding
	//NegExpression returns Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//AtomicExpression returns Expression:
	//	BoolValue | ValuedObjectTestExpression | "(" BoolExpression ")" | FunctionCall | TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//AtomicValuedExpression returns Expression:
	//	IntValue | FloatValue | StringValue | "(" ValuedExpression ")" | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A), A varX
	//ValuedObjectTestExpression returns Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) "(" subExpressions+=ValuedObjectTestExpression ")" |
	//	ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Example: A, varB
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ("[" indices+=Expression "]")*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//FunctionCall:
	//	"<" functionName=ExtendedID ("(" parameters+=Parameter ("," parameters+=Parameter)* ")" | "()")? ">";
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//Parameter:
	//	callByReference?="&"? expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valuedObjects
	//// used in Kits.xtext 
	//AnyType returns ecore::EString:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum OrOperator returns OperatorType:
	//	OR="|";
	public KExpressionsGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaKExpressions.getOrOperatorAccess();
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//enum AndOperator returns OperatorType:
	//	AND="&";
	public KExpressionsGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaKExpressions.getAndOperatorAccess();
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	/// *
	//   the following declarations are re-used in Actions.xtext, Interface.xtext, Kits.xtext 
	// * / enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//// custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	} 

	//// --------------------------
	////
	////   ANNOTATIONS
	////
	//// --------------------------
	//Annotation:
	//	CommentAnnotation | TagAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyBooleanValueAnnotation | KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//ValuedAnnotation returns Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// e.g.: / ** semantic comment * /
	//CommentAnnotation returns StringAnnotation:
	//	value=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaKExpressions.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// e.g.: @HVlayout
	//TagAnnotation returns Annotation:
	//	"@" name=ExtendedID ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaKExpressions.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// e.g.: @layouter dot;   
	//KeyStringValueAnnotation returns StringAnnotation:
	//	"@" name=ExtendedID value=EString ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaKExpressions.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//	"@" name=ExtendedID "[" type=ExtendedID "]" value=EString ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaKExpressions.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// e.g.: @visible true;
	//KeyBooleanValueAnnotation returns BooleanAnnotation:
	//	"@" name=ExtendedID value=BOOLEAN ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaKExpressions.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// e.g.: @minSpace 10;    
	//KeyIntValueAnnotation returns IntAnnotation:
	//	"@" name=ExtendedID value=INT ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaKExpressions.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// e.g.: @minSpace 10.0;    
	//KeyFloatValueAnnotation returns FloatAnnotation:
	//	"@" name=ExtendedID value=FLOAT ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaKExpressions.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// needed for importing other resources
	//ImportAnnotation:
	//	"import" importURI=STRING;
	public AnnotationsGrammarAccess.ImportAnnotationElements getImportAnnotationAccess() {
		return gaKExpressions.getImportAnnotationAccess();
	}
	
	public ParserRule getImportAnnotationRule() {
		return getImportAnnotationAccess().getRule();
	}

	//// allow strings without quotes as they don'c contain spaces
	//EString returns ecore::EString:
	//	STRING | ID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaKExpressions.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//ExtendedID returns ecore::EString:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaKExpressions.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// --------------------------
	////
	////  Terminals...
	////
	//// --------------------------
	//// custom terminals
	//// custom terminal rule introducing semantic comments
	//terminal COMMENT_ANNOTATION:
	//	"/ **"->"* /";
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaKExpressions.getCOMMENT_ANNOTATIONRule();
	} 

	//// modified version of Terminals.ML_COMMENT as
	//// COMMENT_ANNOTATION is not recognized correctly with original one 
	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaKExpressions.getML_COMMENTRule();
	} 

	//// generic terminals
	//terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return gaKExpressions.getNUMBERRule();
	} 

	//// redefine INT terminal to allow negative numbers
	//terminal INT returns ecore::EInt:
	//	"-"? NUMBER+;
	public TerminalRule getINTRule() {
		return gaKExpressions.getINTRule();
	} 

	//// make sure the Float rule does not shadow the INT rule
	//terminal FLOAT returns ecore::EFloatObject:
	//	"-"? NUMBER+ ("." NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? "f"? | "-"? NUMBER+ "f";
	public TerminalRule getFLOATRule() {
		return gaKExpressions.getFLOATRule();
	} 

	//// introduce boolean values
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaKExpressions.getBOOLEANRule();
	} 

	//// custom terminal rule for strings
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaKExpressions.getSTRINGRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaKExpressions.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaKExpressions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaKExpressions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaKExpressions.getANY_OTHERRule();
	} 
}
