/*
 * generated by Xtext
 */
package de.cau.cs.kieler.simulation.trace.formatting2;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.annotations.Pragma;
import de.cau.cs.kieler.kexpressions.keffects.Effect;
import de.cau.cs.kieler.kexpressions.kext.formatting2.KExtFormatter;
import de.cau.cs.kieler.simulation.trace.ktrace.Tick;
import de.cau.cs.kieler.simulation.trace.ktrace.Trace;
import de.cau.cs.kieler.simulation.trace.ktrace.TraceFile;
import de.cau.cs.kieler.simulation.trace.services.KTraceGrammarAccess;
import org.eclipse.xtext.formatting2.IFormattableDocument;

class KTraceFormatter extends KExtFormatter {
	
	@Inject extension KTraceGrammarAccess

	def dispatch void format(TraceFile tracefile, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Trace traces : tracefile.getTraces()) {
			format(traces, document);
		}
		for (Pragma pragmas : tracefile.getPragmas()) {
			format(pragmas, document);
		}
	}

	def dispatch void format(Trace trace, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Tick ticks : trace.getTicks()) {
			format(ticks, document);
		}
		for (Pragma pragmas : trace.getPragmas()) {
			format(pragmas, document);
		}
		
		trace.regionFor.keywords(";").forEach[ append[ newLine ] ]
	}

	def dispatch void format(Tick tick, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Effect inputs : tick.getInputs()) {
			format(inputs, document);
		}
		for (Effect outputs : tick.getOutputs()) {
			format(outputs, document);
		}
		for (Annotation annotations : tick.getAnnotations()) {
			format(annotations, document);
		}
		
        tick.regionFor.keywords(";").forEach[ append[ newLine ] ]
	}
}
