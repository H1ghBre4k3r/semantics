/*
 * generated by Xtext
 */
package de.cau.cs.kieler.simulation.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.BooleanAnnotation;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.FloatAnnotation;
import de.cau.cs.kieler.annotations.IntAnnotation;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.prom.kibuild.AttributeMapping;
import de.cau.cs.kieler.prom.kibuild.BuildConfiguration;
import de.cau.cs.kieler.prom.kibuild.KibuildPackage;
import de.cau.cs.kieler.prom.kibuild.Literal;
import de.cau.cs.kieler.prom.kibuild.ModelCompiler;
import de.cau.cs.kieler.prom.kibuild.NormalTemplateProcessor;
import de.cau.cs.kieler.prom.kibuild.SignedFloat;
import de.cau.cs.kieler.prom.kibuild.SignedInt;
import de.cau.cs.kieler.prom.kibuild.SimulationCompiler;
import de.cau.cs.kieler.prom.kibuild.SimulationTemplateProcessor;
import de.cau.cs.kieler.prom.kibuild.TextValue;
import de.cau.cs.kieler.prom.kibuild.WrapperCodeTemplateProcessor;
import de.cau.cs.kieler.prom.serializer.KiBuildSemanticSequencer;
import de.cau.cs.kieler.simulation.kisim.DataHandlerConfiguration;
import de.cau.cs.kieler.simulation.kisim.Execution;
import de.cau.cs.kieler.simulation.kisim.Initialization;
import de.cau.cs.kieler.simulation.kisim.KisimPackage;
import de.cau.cs.kieler.simulation.kisim.SimulationConfiguration;
import de.cau.cs.kieler.simulation.services.KiSimGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractKiSimSemanticSequencer extends KiBuildSemanticSequencer {

	@Inject
	private KiSimGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.BOOLEAN_ANNOTATION:
				sequence_KeyBooleanValueAnnotation(context, (BooleanAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.FLOAT_ANNOTATION:
				sequence_KeyFloatValueAnnotation(context, (FloatAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.INT_ANNOTATION:
				sequence_KeyIntValueAnnotation(context, (IntAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			}
		else if (epackage == KibuildPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KibuildPackage.ATTRIBUTE_MAPPING:
				sequence_AttributeMapping(context, (AttributeMapping) semanticObject); 
				return; 
			case KibuildPackage.BUILD_CONFIGURATION:
				sequence_BuildConfiguration(context, (BuildConfiguration) semanticObject); 
				return; 
			case KibuildPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case KibuildPackage.MODEL_COMPILER:
				sequence_ModelCompiler(context, (ModelCompiler) semanticObject); 
				return; 
			case KibuildPackage.NORMAL_TEMPLATE_PROCESSOR:
				sequence_NormalTemplateProcessor(context, (NormalTemplateProcessor) semanticObject); 
				return; 
			case KibuildPackage.SIGNED_FLOAT:
				sequence_SignedFloat(context, (SignedFloat) semanticObject); 
				return; 
			case KibuildPackage.SIGNED_INT:
				sequence_SignedInt(context, (SignedInt) semanticObject); 
				return; 
			case KibuildPackage.SIMULATION_COMPILER:
				sequence_SimulationCompiler(context, (SimulationCompiler) semanticObject); 
				return; 
			case KibuildPackage.SIMULATION_TEMPLATE_PROCESSOR:
				sequence_SimulationTemplateProcessor(context, (SimulationTemplateProcessor) semanticObject); 
				return; 
			case KibuildPackage.TEXT_VALUE:
				sequence_TextValue(context, (TextValue) semanticObject); 
				return; 
			case KibuildPackage.WRAPPER_CODE_TEMPLATE_PROCESSOR:
				sequence_WrapperCodeTemplateProcessor(context, (WrapperCodeTemplateProcessor) semanticObject); 
				return; 
			}
		else if (epackage == KisimPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KisimPackage.ACTION:
				sequence_Action(context, (de.cau.cs.kieler.simulation.kisim.Action) semanticObject); 
				return; 
			case KisimPackage.DATA_HANDLER_CONFIGURATION:
				sequence_DataHandlerConfiguration(context, (DataHandlerConfiguration) semanticObject); 
				return; 
			case KisimPackage.EXECUTION:
				sequence_Execution(context, (Execution) semanticObject); 
				return; 
			case KisimPackage.INITIALIZATION:
				sequence_Initialization(context, (Initialization) semanticObject); 
				return; 
			case KisimPackage.SIMULATION_CONFIGURATION:
				sequence_SimulationConfiguration(context, (SimulationConfiguration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (operation=ActionOperation handler=ID id=ID)
	 */
	protected void sequence_Action(ISerializationContext context, de.cau.cs.kieler.simulation.kisim.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KisimPackage.Literals.ACTION__OPERATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KisimPackage.Literals.ACTION__OPERATION));
			if (transientValues.isValueTransient(semanticObject, KisimPackage.Literals.ACTION__HANDLER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KisimPackage.Literals.ACTION__HANDLER));
			if (transientValues.isValueTransient(semanticObject, KisimPackage.Literals.ACTION__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KisimPackage.Literals.ACTION__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getOperationActionOperationEnumRuleCall_0_0(), semanticObject.getOperation());
		feeder.accept(grammarAccess.getActionAccess().getHandlerIDTerminalRuleCall_1_0(), semanticObject.getHandler());
		feeder.accept(grammarAccess.getActionAccess().getIdIDTerminalRuleCall_2_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataHandlerConfiguration returns DataHandlerConfiguration
	 *
	 * Constraint:
	 *     (name=ID id=ID? attributes+=AttributeMapping*)
	 */
	protected void sequence_DataHandlerConfiguration(ISerializationContext context, DataHandlerConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Execution returns Execution
	 *
	 * Constraint:
	 *     actions+=Action*
	 */
	protected void sequence_Execution(ISerializationContext context, Execution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Initialization returns Initialization
	 *
	 * Constraint:
	 *     actions+=Action*
	 */
	protected void sequence_Initialization(ISerializationContext context, Initialization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimulationConfiguration returns SimulationConfiguration
	 *
	 * Constraint:
	 *     (
	 *         (attributes+=AttributeMapping+ ((handlers+=DataHandlerConfiguration+ execution=Execution) | execution=Execution)) | 
	 *         (
	 *             ((attributes+=AttributeMapping+ handlers+=DataHandlerConfiguration+) | handlers+=DataHandlerConfiguration+)? 
	 *             initialization=Initialization 
	 *             execution=Execution
	 *         ) | 
	 *         (handlers+=DataHandlerConfiguration+ execution=Execution) | 
	 *         execution=Execution
	 *     )?
	 */
	protected void sequence_SimulationConfiguration(ISerializationContext context, SimulationConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
