/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.scoping

import de.cau.cs.kieler.esterel.ConstantExpression
import de.cau.cs.kieler.esterel.ConstantRenaming
import de.cau.cs.kieler.esterel.Emit
import de.cau.cs.kieler.esterel.EsterelFunctionCall
import de.cau.cs.kieler.esterel.Exit
import de.cau.cs.kieler.esterel.FunctionRenaming
import de.cau.cs.kieler.esterel.ModuleRenaming
import de.cau.cs.kieler.esterel.ProcedureRenaming
import de.cau.cs.kieler.esterel.RelationImplication
import de.cau.cs.kieler.esterel.RelationIncompatibility
import de.cau.cs.kieler.esterel.SignalRenaming
import de.cau.cs.kieler.esterel.Sustain
import de.cau.cs.kieler.esterel.TaskRenaming
import de.cau.cs.kieler.esterel.TrapReference
import de.cau.cs.kieler.esterel.TypeRenaming
import de.cau.cs.kieler.kexpressions.ValuedObjectReference
import de.cau.cs.kieler.scl.scoping.SCLScopeProvider
import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleScope

import static de.cau.cs.kieler.esterel.scoping.EsterelScopeProviderUtil.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class EsterelScopeProvider extends SCLScopeProvider {

    /**
     * {@inheritDoc}
     */
    override getScope(EObject context, EReference reference) {
        var scope = polymorphicFindScopeForReferenceName(context, reference);
        if (scope == null) {
            scope = polymorphicFindScopeForClassName(context, reference);
            if (scope == null) {
                return super.getScope(context, reference);
            }
        }
        return scope
    }

    /* ************************************************************************
     * Scopes for references in one module
     * ************************************************************************
     */
    def IScope scope_RelationImplication_first(RelationImplication context, EReference ref) {
        return new SimpleScope(getElements(context, COLLECT_SIGNALS));
    }

    def IScope scope_RelationImplication_second(RelationImplication context, EReference ref) {
        return new SimpleScope(getElements(context, COLLECT_SIGNALS));
    }

    def IScope scope_RelationIncompatibility_incomp(RelationIncompatibility context, EReference ref) {
        return new SimpleScope(getElements(context, COLLECT_SIGNALS));
    }

    def IScope scope_Emit_signal(Emit context, EReference ref) {
        return new SimpleScope(getAllSignals(context));
    }

    def IScope scope_Sustain_signal(Sustain context, EReference ref) {
        return new SimpleScope(getAllSignals(context));
    }

    def IScope scope_ValuedObjectReference_valuedObject(ValuedObjectReference context, EReference ref) {
        var ArrayList<IEObjectDescription> scopeElems = new ArrayList<IEObjectDescription>();
        // there are several elements which are scoped as valued object
        scopeElems.addAll(getLocalSignals(context));
        scopeElems.addAll(getLocalVariables(context));
        scopeElems.addAll(getLocalTraps(context));
        scopeElems.addAll(getAllElements(context, COLLECT_CONSTANTS.merge(COLLECT_SENSORS).merge(COLLECT_SIGNALS)));
        return new SimpleScope(scopeElems);
    }

    def IScope scope_TrapReferenceExpr_valuedObject(TrapReference context, EReference ref) {
        return new SimpleScope(getLocalTraps(context));
    }

    def IScope scope_Exit_trap(Exit context, EReference ref) {
        return new SimpleScope(getLocalTraps(context));
    }

    def IScope scope_EsterelFunctionCall_function(EsterelFunctionCall context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_FUNCTIONS));
    }

    def IScope scope_DataConstant_constant(ConstantExpression context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_CONSTANTS));
    }

    /* ************************************************************************
     * ********* Scopes for renaming
     */
    def IScope scope_SignalRenaming_oldName(SignalRenaming context, EReference ref) {
        var scopeElems = getAllSignals(context);
        // sensors are treated as signals
        scopeElems.addAll(getAllElements(context, COLLECT_SENSORS));
        return new SimpleScope(scopeElems);
    }

    def IScope scope_SignalRenaming_newName(SignalRenaming context, EReference ref) {
        var scopeElems = getAllSignals(context);
        // sensors are treated as signals
        scopeElems.addAll(getAllElements(context, COLLECT_SENSORS));
        return new SimpleScope(scopeElems);
    }

    def IScope scope_ConstantRenaming_oldName(ConstantRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_CONSTANTS));
    }

    def IScope scope_ConstantRenaming_newName(ConstantRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_CONSTANTS));
    }

    def IScope scope_TypeRenaming_oldName(TypeRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_TYPES));
    }

    def IScope scope_TypeRenaming_newName(TypeRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_TYPES));
    }

    def IScope scope_FunctionRenaming_oldName(FunctionRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_FUNCTIONS));
    }

    def IScope scope_FunctionRenaming_newName(FunctionRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_FUNCTIONS));
    }

    def IScope scope_ProcedureRenaming_oldName(ProcedureRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_PROCEDURES));
    }

    def IScope scope_ProcedureRenaming_newName(ProcedureRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_PROCEDURES));
    }

    def IScope scope_TaskRenaming_oldName(TaskRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_TASKS));
    }

    def IScope scope_TaskRenaming_newName(TaskRenaming context, EReference ref) {
        return new SimpleScope(getAllElements(context, COLLECT_TASKS));
    }

    def IScope scope_ModuleRenaming_module(ModuleRenaming context, EReference ref) {
        return new SimpleScope(getAllModules(context));
    }

}
