grammar de.cau.cs.kieler.esterel.scest.SCEst with de.cau.cs.kieler.esterel.Esterel

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions
import "http://kieler.cs.cau.de/keffects/0.1.0" as keffects
import "http://kieler.cs.cau.de/kext/0.1.0" as kext
import "http://kieler.cs.cau.de/scl/0.2.0" as scl
import "http://www.cau.de/cs/kieler/esterel/Esterel"

//  root rule. a SCEst file can contain multiple modules
@Override
EsterelProgram hidden(SL_COMMENT, ML_COMMENT, WS):
    pragmas+=Pragma*
    (modules+=EsterelModule)*;

/* ###################################################
 * ###                 7.2 Modules                 ###
 * ###################################################
 */
@Override
EsterelModule returns scl::Module:
    (annotations += Annotation)*
    "module" name=ID ":"
    (declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
    (statements+=EsterelParallel)?
    ("end" "module" | ".")
;

/* ###################################################
 * ###               7.5 Statements                ###
 * ###################################################
 */

@Override
Statement returns scl::Statement:
    EsterelParallel
;

@Override 
InstructionStatement returns scl::Statement:
	super
	// + SCEst
	| UnEmit | Set 
;

SCLStatement returns scl::Statement:
    Assignment | Label | Conditional | LegacyConditional | Goto | Parallel | ModuleCall | ScopeStatement
;

@Override
EsterelThread returns scl::Statement:
    (
        InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=EsterelThread))?
    |
        SCLStatement ({EsterelThread.statements+=current} (statements+=EsterelThread))?
    )
;

@Override
EsterelAssignment returns scl::Assignment:
    (annotations += Annotation)*
    reference=VariableOrSignalReference ":=" expression=Expression
;
    
VariableOrSignalReference returns kexpressions::ValuedObjectReference:
     ValuedObjectReference
   | SignalReferenceExpression
   | VariableReference
;
      
/* ###################################################
 * ###                   SCEst                     ###
 * ###################################################
 */

// ==> unemit
// -------------------------------------
UnEmit:
    (annotations += Annotation)*
    "unemit" 
    signal=[Signal|ID]
;

// ==> reset: Signal value reset (absolute write)
// -------------------------------------
Set:
    (annotations += Annotation)*
    "set" 
    signal=[Signal|ID] 
    ("("expression=Expression")")
;
    
/* ###################################################
 * ###                   Terminal                  ###
 * ###################################################
 */    

@Override    
terminal ML_COMMENT: 
    ('%' '{') -> ('}' '%')
    |
    ('/*'!'*') -> '*/';

@Override
terminal SL_COMMENT: 
    ( '//' | '%' ) !('\n'|'\r')* ('\r'? '\n')?;
 
 
 /* ###################################################
 * ###               Expressions                   ###
 * ###################################################
 */
 
// Esterel is a bit richer than what is provided by kexpressions. 
// These rules are introduced here.
// Care about order of the rules! 
@Override
AtomicExpression returns kexpressions::Expression:
      EsterelFunctionCall
    | TrapExpression
    | BoolValue
    | ValuedObjectPreExpression
    | TextExpression
    | '(' BooleanExpression ')'
    | ConstantExpression
    | FunctionCall;
    

@Override    
AtomicValuedExpression returns kexpressions::Expression:
    IntValue
    | FloatValue
    | '(' ValuedExpression ')'
    | AtomicExpression
    | StringValue;
    
// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
@Override
ValuedObjectPreExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectPreExpression')'
    | {kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=SignalReferenceExpression
    | ValuedObjectOrSignalReference;
    
ValuedObjectOrSignalReference returns kexpressions::ValuedObjectReference:
     TickSignalExpression
   | ValuedObjectReference
   | SignalReferenceExpression
   | VariableReference
;
      