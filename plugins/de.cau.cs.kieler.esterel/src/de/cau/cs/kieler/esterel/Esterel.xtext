grammar de.cau.cs.kieler.esterel.Esterel with de.cau.cs.kieler.scl.SCL

//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions
import "http://kieler.cs.cau.de/keffects/0.1.0" as keffects
import "http://kieler.cs.cau.de/kext/0.1.0" as kext
import "http://kieler.cs.cau.de/scl/0.2.0" as scl
import "http://www.cau.de/cs/kieler/esterel/Esterel"

//  root rule. an esterel file can contain multiple modules
EsterelProgram hidden(SL_COMMENT, ML_COMMENT, WS):
    pragmas+=Pragma*
    (modules+=EsterelModule)*;

/*
 * The numbering references:
 * 
 *   The Esterel v5 Language Primer
 *   Version v5 91
 *   Gérard Berry
 *   Centre de Mathématiques Appliquées
 *   Ecole des Mines and INRIA
 *   2004 Route des Lucioles
 *   06565 Sophia-Antipolis
 *   berry@sophia.inria.fr
 *   June 5, 2000
 * 
 */

/* ###################################################
 * ###                 7.2 Modules                 ###
 * ###################################################
 */
 
// = module: a module consists of an interface and a body
// -------------------------------------
EsterelModule returns scl::Module:
    (annotations += Annotation)*
    "module" name=ID ":"
    (declarations+=EsterelDeclaration)*
    (statements+=EsterelParallel)?
    ("end" "module" | ".");


/* ###################################################
 * ###        7.3 Interface Declaration            ###
 * ###################################################
 */
 
EsterelDeclaration:
    InputDeclaration
    | OutputDeclaration
    | InputOutputDeclaration
    | ReturnDeclaration
    | TypeDeclaration
    | SensorDeclaration
    | ConstantDeclaration
    | RelationDeclaration
    | TaskDeclaration
    | FunctionDeclaration
    | ProcedureDeclaration;
 
// = Interface Declaration
// ----------------------------------------------

// overwrite to allow type definitions in a specific module
TypeIdentifier: 
      type=EsterelValueType
    | ("combine" (type=EsterelValueType | idType=ID) "with" operator=EsterelCombineOperator)
    | esterelType=[TypeDefinition|ID]
    | idType=ID;
    
// = 7.3.1 Type Declarations
// -------------------------------------
TypeDeclaration:
    (annotations += Annotation)*
    "type"
    types+=TypeDefinition ("," types+=TypeDefinition)* 
    ";";

TypeDefinition:
    name=ID;
    
// = 7.3.2 Constant Declarations
// -------------------------------------
ConstantDeclaration:
    (annotations += Annotation)*
    "constant" 
    constants+=Constant ("," constants+=Constant)* 
    ";";

Constant:
    name=ID ("=" initialValue=AnyValue)? ":" type=TypeIdentifier;
    
// = 7.3.3 Function Declaration
// -------------------------------------
FunctionDeclaration:
    (annotations += Annotation)*
    "function" 
    functions+=Function ("," functions+=Function)* 
    ";";

Function:
    name=ID 
    ("(" (parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)? ")" | '()')
    ":" returnType=TypeIdentifier;

// = 7.3.4 Procedure Declaration
// -------------------------------------
ProcedureDeclaration:
    (annotations += Annotation)*
    "procedure" procedures+=Procedure ("," procedures+=Procedure)* 
    ";";

Procedure:
    name=ID 
    ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
    ("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');

// = 7.3.5 Task Declaration
// -------------------------------------
TaskDeclaration:
    (annotations += Annotation)*
    "task" tasks+=Task ("," tasks+=Task)* 
    ";";

Task:
    name=ID
    ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()')
    ("(" (valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
    
// = 7.3.6 Signal Declaration
// -------------------------------------
InputDeclaration:
    (annotations += Annotation)*
    "input"
    valuedObjects+=Signal ("," valuedObjects+=Signal)*
    ";";
    
OutputDeclaration:
    (annotations += Annotation)*
    "output"
    valuedObjects+=Signal ("," valuedObjects+=Signal)*
    ";";
    
InputOutputDeclaration:
    (annotations += Annotation)*
    "inputoutput"
    valuedObjects+=Signal ("," valuedObjects+=Signal)*
    ";";
    
ReturnDeclaration:
    (annotations += Annotation)*
    "return"
    valuedObjects+=Signal ("," valuedObjects+=Signal)*
    ";";
    
// example 1:   A : combine boolean with or
// example 2:   A (combine boolean with or) // NO longer supported
// example 3:   A := 0 : combine integer with '+'
Signal:
    name=ID
    (  
        ":=" initialValue=Expression
        ":" 
        (     type=EsterelValueType
            | idType=ID
            | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator))
        )
    |
        ":" 
        (       type=EsterelValueType
              | idType=ID
              | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)) 
        )
    )?;

// = 7.3.7 Sensor Declaration
// -------------------------------------
SensorDeclaration:
    (annotations += Annotation)*
    "sensor" 
    valuedObjects+=Sensor ("," valuedObjects+=Sensor)* 
    ";";

Sensor:
    name=ID
    ((":" type=TypeIdentifier) | ("(" type=TypeIdentifier ")"))?;

// = 7.3.8 Input Relation Declaration
// -------------------------------------
RelationDeclaration:
    (annotations += Annotation)* 
    "relation" 
    relations+=Relation ("," relations+=Relation)* 
    ";";

Relation:
    RelationImplication | RelationIncompatibility;

RelationImplication:
    first=[Signal|ID] type="=>" second=[Signal|ID];

RelationIncompatibility:
    incomp+=[Signal|ID] type="#" incomp+=[Signal|ID] ("#" incomp+=[Signal|ID])*;


/* ###################################################
 * ###               7.5 Statements                ###
 * ###################################################
 */

InstructionStatement returns scl::Statement:
    Nothing |
    EsterelPause |
    Halt |
    Emit |
    Exit |
    Present | 
    Await |
    EsterelAssignment |
    Abort |
    Loop |
    EveryDo |
    Sustain |
    Trap |
    Suspend |
    LocalSignalDeclaration |
    LocalVariableDeclaration |
    IfTest |
    Exec |
    Run |
    ProcedureCall |
    Repeat |
    Block |
    LegacyDo
;
        
// = Parallel: at least two threads
// -------------------------------------
//EsterelParallel returns EsterelParallel:
//    {EsterelParallel}
//    threads+=EsterelThread (=>"||" threads+=EsterelThread)+;

// This rule massively improves parsing
EsterelParallel returns scl::Statement:
    EsterelThread ({EsterelParallel.statements+=current} (=>"||" statements+=EsterelThread)+)?;
    
// = Thread
// One AtomicStatement or multiple AtomicStatements
// It doesn't include 'Parallel' statements because they would be parallel to 
// the existing thread and therefore included in the previous thread list (Parallel.threads).
// -------------------------------------
//EsterelThread:
//    {EsterelThread}
//    (statements+=InstructionStatement ";" | statements+=MetaStatement)* statements+=InstructionStatement?;

// This rule massively improves parsing   
EsterelThread returns scl::Statement:
    InstructionStatement ({EsterelThread.statements+=current} (=>";" statements+=InstructionStatement)+)? ";"?;
    
// = Nothing
// -------------------------------------
Nothing:
    {Nothing} 
    (annotations += Annotation)* 
    "nothing"
;

// = Pause
// -------------------------------------
EsterelPause returns scl::Pause:
    {scl::Pause}
    (annotations += Annotation)* 
    "pause"
;
    
// = Halt
// -------------------------------------
Halt:
    {Halt} 
    (annotations += Annotation)* 
    "halt"
;

// = Block
// -------------------------------------    
Block:
    {Block}
    (annotations += Annotation)*
    "[" (statements+=EsterelParallel) "]"
;

// = 7.5.1 Signal Emission
// -------------------------------------
Emit:
    (annotations += Annotation)*
    "emit" 
    signal=[Signal|ID]       
    ("("expression=Expression")")?
;
    
// emit a signal indefinitely
Sustain:
    (annotations += Annotation)*
    "sustain" 
    signal=[Signal|ID]
    ("(" expression=Expression ")")?
;

// = 7.5.2 Assignment and Procedure Call
// -------------------------------------
EsterelAssignment returns scl::Assignment:
    reference=VariableReference ":=" expression=Expression
;
    
VariableReference returns kexpressions::ValuedObjectReference:
    valuedObject=[Variable|ID]
;
    
ProcedureCall:
    (annotations += Annotation)*
    "call" 
    procedure=[Procedure|ID] 
    ("(" 
        ( referenceArguments+=[Variable|ID] ("," referenceArguments+=[Variable|ID])* )?
    ")" | '()')
    ("(" 
        ( valueArguments+=Expression ("," valueArguments+=Expression)* )? 
    ")" | '()')
;

// = 7.5.3 The present Signal Test
// -------------------------------------
Present:
    (annotations += Annotation)*
    "present" 
    (   (
            (     expression=SignalExpression 
                | "[" expression=SignalExpression "]"
            ) 
            (
                (annotations += Annotation)*
                "then" 
                (statements+=EsterelParallel)
            )?
        ) 
        | 
        cases+=PresentCase+ 
    ) 
    (
        "else" 
        (elseStatements+=EsterelParallel)
    )? 
    "end" "present"?
;

PresentCase:
    (annotations += Annotation)*
    "case" 
    (     expression=SignalExpression 
        | "[" expression=SignalExpression "]"
    )
    (   "do" 
        (statements+=EsterelParallel)
    )?;

// = 7.5.4 The if Data Test
// -------------------------------------
IfTest:
    (annotations += Annotation)*
    "if" 
    expression=Expression 
    (
        (annotations+=Annotation)*
        "then" 
        (statements+=EsterelParallel)
    )? 
    (elseif+=ElsIf)* 
    (
            "else" 
            (elseStatements+=EsterelParallel)
    )? 
    "end" "if"?
;

ElsIf:
    (annotations += Annotation)*
    "elsif" 
    expression=Expression 
    (
        "then" 
        (statements+=EsterelParallel)
    )?;

// = 7.5.5 Looping & 7.5.9 Temporal Loops
// -------------------------------------
Loop:
    {Loop}
    (annotations += Annotation)*
    "loop" 
    (statements+=EsterelParallel) 
    ("end" "loop"? | "each" delay=DelayExpression)
;

// = 7.5.6 Repeat Looping
// -------------------------------------
Repeat:
    (annotations += Annotation)*
    (positive?="positive")? 
    "repeat" 
    expression=Expression 
    "times" 
    (statements+=EsterelParallel) 
    "end" "repeat"?
;

// = 7.5.7 The abort Statements
// -------------------------------------
Abort:
    (annotations += Annotation)*
    ((weak?="weak")? "abort") 
    (statements+=EsterelParallel) 
    "when" 
    (
        delay=DelayExpression
        (
            "do"
            (doStatements+=EsterelParallel)
            "end" "weak"? "abort"?
        |
            "end" "weak"? "abort"?
        )? 
    |
        cases+=Case+
        "end" "weak"? "abort"?
    )
;

Case:
    (annotations += Annotation)*
    "case" 
    delay=DelayExpression 
    ( 
        "do" 
        (statements+=EsterelParallel) 
    )?;

// = 7.5.8 The await Statement
// -------------------------------------
Await:
    (annotations += Annotation)*
    "await" 
    (
        delay=DelayExpression
        (   
            "do" 
            (statements+=EsterelParallel)
            "end" "await"?
        )?
    |
        cases+=Case+
        "end" "await"?
    )
;

// = 7.5.9 Temporal Loops
// -------------------------------------

// for 'LoopEach' look at 7.5.5

EveryDo:
    (annotations += Annotation)*
    "every" 
    delay=DelayExpression 
    "do" 
    (statements+=EsterelParallel)
    "end" "every"?
;

// = 7.5.10 The suspend Statement
// -------------------------------------
Suspend:
    (annotations += Annotation)*
    ((weak?="weak")? "suspend") 
    (statements+=EsterelParallel) 
    "when" 
    delay=DelayExpression
;
    
// = 7.5.11 Traps
// -------------------------------------
Trap:
    (annotations += Annotation)*
    "trap" 
    trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)* 
    "in" 
    (statements+=EsterelParallel)
    (trapHandler+=TrapHandler)* 
    "end" "trap"?
;

TrapSignal returns Signal:
    {TrapSignal}
    name=ID
    (
        ":=" initialValue=Expression
        ":" 
          (       type=EsterelValueType
                | idType=ID
                | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)) 
          )
    |
        ":" 
          (       type=EsterelValueType
                | idType=ID
                | ("combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)) 
          )
    )?
;

TrapHandler:
    (annotations += Annotation)*
    "handle" 
    trapExpr=TrapExpr 
    "do" 
    (statements+=EsterelParallel)
;

Exit:
    (annotations += Annotation)*
    "exit" 
    trap=[TrapSignal|ID] 
    ("(" expression=Expression ")")?
;

// = 7.5.12 The exec Task Execution Statement
// -------------------------------------
Exec:
    (annotations += Annotation)*
    "exec"
        (   task=[Task|ID] 
            ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
            ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")" | '()') 
            "return" 
            returnSignal=[Signal] 
            ("do" (statements+=EsterelParallel))? 
        | 
            execCaseList+=ExecCase+ 
        ) 
    "end" "exec"?
;

ExecCase:
    (annotations += Annotation)*
    "case" task=[Task|ID] 
    ("(" (referenceParameters+=[Variable|ID] ("," referenceParameters+=[Variable|ID])*)? ")" | '()')
    ("(" (valueParameters+=Expression ("," valueParameters+=Expression)*)? ")"  | '()')
    "return" 
    returnSignal=[Signal] 
    ("do" (statements+=EsterelParallel))?;

// = 7.5.13 Local Signal Declaration    
// -------------------------------------
LocalSignalDeclaration:
    (annotations += Annotation)*
    "signal" valuedObjects+=Signal ("," valuedObjects+=Signal)* 
    "in" (statements+=EsterelParallel)
    "end" "signal"?
;

// = 7.5.14 Local Variable Declaration
// ------------------------------------- 
LocalVariableDeclaration:
    (annotations += Annotation)*
    "var" 
    (variableDeclarations+=EsterelVariableDeclaration) ("," variableDeclarations+=EsterelVariableDeclaration)* 
    "in" 
    (statements+=EsterelParallel)
    "end" "var"?
;
    
EsterelVariableDeclaration:
    (variables+=Variable) ("," variables+=Variable)* ":" type=TypeIdentifier;

Variable:
     name=ID (":=" initialValue=Expression)?;

// = 7.5.15 The run Module Instantiation Statement
// -------------------------------------
Run:
    (annotations += Annotation)*
    (   (   "run" 
            module=ModuleRenaming 
            ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")? 
        )
        | 
        (   "copymodule"
            module=ModuleRenaming
            ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?
            
         )
    )
;

ModuleRenaming:
       module=[scl::Module|ID] 
    | (newName=ID "/" module=[scl::Module|ID])
;
Renamings:
    (annotations += Annotation)*
    ( "type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
    | "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
    | "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
    | "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
    | "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
    | "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)* );

TypeRenaming:
    (newName=[TypeDefinition|ID] | newType=EsterelValueType) "/" oldName=[TypeDefinition|ID];

ConstantRenaming:
    (newName=[Constant|ID] | newValue=AnyValue) "/" oldName=[Constant|ID];

FunctionRenaming:
    (newName=[Function|ID] | newFunc=BuildInFunction) "/" oldName=[Function|ID];

ProcedureRenaming:
    newName=[Procedure|ID] "/" oldName=[Procedure|ID];

TaskRenaming:
    newName=[Task|ID] "/" oldName=[Task|ID];

SignalRenaming:
    newName=[Signal|ID] "/" oldName=[Signal|ID];

// renaming can also rename build in types and functions
BuildInFunction:
    "*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or";


/* ###################################################
 * ###               7.6 Old Syntax                ###
 * ###################################################
 */
 
LegacyDo returns Do:
    (annotations += Annotation)*
    "do" 
    (statements+=EsterelParallel)
    ( 
        "upto" 
        delay=DelayExpression
    | 
        "watching" 
        watching=DelayExpression 
        ( 
            "timeout" 
            (watchingStatements+=InstructionStatement)+ 
            "end" "timeout"?  
        )?
    );

       
/* ###################################################
 * ###                    Enum                     ###
 * ###################################################
 */
   
enum EsterelCompareOperator returns kexpressions::OperatorType:
    EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";

enum EsterelPreOperator returns kexpressions::OperatorType:
    PRE="pre";

enum EsterelOrOperator returns kexpressions::OperatorType:
    LOGICAL_OR="or";

enum EsterelAndOperator returns kexpressions::OperatorType:
    LOGICAL_AND="and";

enum EsterelNotOperator returns kexpressions::OperatorType:
    NOT="not";

enum EsterelAddOperator returns kexpressions::OperatorType:
    ADD="+";
    
enum EsterelSubOperator returns kexpressions::OperatorType:
    SUB="-";
    
enum EsterelMultOperator returns kexpressions::OperatorType: 
    MULT="*";

enum EsterelModOperator returns kexpressions::OperatorType:  
    MOD="mod";

enum EsterelDivOperator returns kexpressions::OperatorType:  
    DIV="/";

enum EsterelValueTestOperator returns kexpressions::OperatorType:
    VAL="?";    

/*
   the following declarations are re-used in Actions.xtext, Interface.xtext, Kits.xtext 
*/
enum EsterelValueType returns kexpressions::ValueType:
    PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned"  | 
    INT="integer" | FLOAT="float" | DOUBLE="double" |
    STRING="string" | HOST="host";


enum EsterelCombineOperator returns kexpressions::CombineOperator:
    NONE="none" | ADD="+" | MULT="*" | MAX="max" |
    MIN="min" | OR="or" | AND="and" | HOST="host";


/* ###################################################
 * ###                 Terminal                    ###
 * ###################################################
 */

terminal SL_COMMENT:
    '%' !('\n' | '\r')* ('\r'? '\n')?;

terminal ML_COMMENT:
    ('%' '{')->('}' '%');

// allow escaping by double quotes ( "this is a ""quote"", how nice." ) - Esterel style
terminal STRING:
    '"' (!('"') | ('"' '"'))* '"';

// custom terminal rule allowing to save transition label string as they are
terminal HOSTCODE: 
    "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'";       
       
       
/* ###################################################
 * ###               Expressions                   ###
 * ###################################################
 */
 
// Esterel is a bit richer than what is provided by kexpressions. 
// These rules are introduced here.
// Care about order of the rules! 
AtomicExpression returns kexpressions::Expression:
    EsterelFunctionCall
    | TrapExpression
    | BoolValue
    | ValuedObjectTestExpression
    | TextExpression
    | '(' BooleanExpression ')'
    | ConstantExpression;

TrapExpression returns kexpressions::Expression:
    {TrapExpression} "??" trap=[Signal|ID];

EsterelFunctionCall:
    function=[Function|ID] 
    ("(" (parameter+=Expression ("," parameter+=Expression)*)? ")" | '()');

ConstantExpression returns kexpressions::Expression:
    {ConstantExpression} (constant=[Constant|ID] | value=AnyValue);

// --> B.3.5 Trap Expressions <--
// -------------------------------------
// The warning can be ignored since the operator will only override itself in this loop.
TrapExpr returns kexpressions::Expression:
    TrapAndExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelOrOperator subExpressions+=TrapAndExpression)+
    )?;
    
// The warning can be ignored since the operator will only override itself in this loop.
TrapAndExpression returns kexpressions::Expression:
    TrapNotExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelAndOperator subExpressions+=TrapNotExpression)+
    )?;

// The warning can be ignored since the operator will only override itself in this loop.
TrapNotExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=EsterelNotOperator
    subExpressions+=TrapNotExpression
    |
    TrapAtomicExpression;

TrapAtomicExpression returns kexpressions::Expression:
      TrapReferenceExpr
    | "(" TrapExpression ")";

TrapReferenceExpr returns kexpressions::ValuedObjectReference:
    {TrapReference} valuedObject=[TrapSignal|ID];    
    
// --> B.3.3 Signal Expressions <--
// -------------------------------------
// The warning can be ignored since the operator will only override itself in this loop.
SignalExpression returns kexpressions::Expression:
    SignalAndExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelOrOperator subExpressions+=SignalAndExpression)+
    )?;

// The warning can be ignored since the operator will only override itself in this loop.
SignalAndExpression returns kexpressions::Expression:
    SignalNotExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelAndOperator subExpressions+=SignalNotExpression)+
    )?;

// The warning can be ignored since the operator will only override itself in this loop.
SignalNotExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=EsterelNotOperator 
    subExpressions+=SignalNotExpression
    |
    SignalAtomicExpression;

SignalAtomicExpression returns kexpressions::Expression:
     "(" SignalExpression ")"
    | SignalPreExpr
    | SignalReferenceExpr;
    

SignalReferenceExpr returns kexpressions::ValuedObjectReference:
    SignalReferenceExpression | TickSignalExpression
;

SignalReferenceExpression returns kexpressions::ValuedObjectReference:
    {SignalReference} valuedObject=[Signal|ID];
    
TickSignalExpression returns kexpressions::ValuedObjectReference:
    {TickReference} 'tick';

SignalPreExpr returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=EsterelPreOperator 
    '(' subExpressions+=SignalReferenceExpr ')';

// --> B.3.4 Delay Expressions <--
// -------------------------------------
DelayExpression:
    ( delay=IntValue | immediate?="immediate" )?
    (     expression=SignalReferenceExpr 
        | "[" expression=SignalExpression "]"
    );

    
/* #########################################################################
 * 
 * 
 * Before the following was an extra plugin named
 * "KExpressions":  de.cau.cs.kieler.esterel.kexpressions
 * 
 * 
 * #########################################################################
 */    

Expression returns kexpressions::Expression:
      BooleanExpression
    | ValuedExpression;


// Example: not D and C or ?E = 42 or not (A and (B or C))
BooleanExpression returns kexpressions::Expression:
    OrExpression;


// Example: A or B, A and B and C, C and B or D and not E, A and B and C
// The warning can be ignored since the operator will only override itself in this loop.
OrExpression returns kexpressions::Expression:
    AndExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelOrOperator subExpressions+=AndExpression)+
    )?;


// Example: A and B, not C and 42 <= ?D
// The warning can be ignored since the operator will only override itself in this loop.
AndExpression returns kexpressions::Expression:
    CompareOperation 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelAndOperator subExpressions+=CompareOperation)+
    )?;


// Example: 42 <= ?A
CompareOperation returns kexpressions::Expression:
    NotOrValuedExpression 
    ({kexpressions::OperatorExpression.subExpressions+=current} 
        operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression
    )?;


// order IS IMPORTANT
NotOrValuedExpression returns kexpressions::Expression:
      ValuedExpression
    | NotExpression;


// Example: not A, not false, not (A or B)
// at the latter we need the parans to indicate the right binding
NotExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=EsterelNotOperator 
    subExpressions+=(NotExpression)
    | 
    AtomicExpression;
  
    
// everything that evaluates to a primitive number value
ValuedExpression returns kexpressions::Expression:
    AddExpression;


// Example: 1 + 2
// The warning can be ignored since the operator will only override itself in this loop.
AddExpression returns kexpressions::Expression:
    SubExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelAddOperator subExpressions+=SubExpression)+
    )?;


// Example: varA - ?B
// The warning can be ignored since the operator will only override itself in this loop.
SubExpression returns kexpressions::Expression:
    MultExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelSubOperator subExpressions+=MultExpression)+
    )?;


// Example: 2 * 4
// The warning can be ignored since the operator will only override itself in this loop.
MultExpression returns kexpressions::Expression:
    DivExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        (operator=EsterelMultOperator subExpressions+=DivExpression)+
    )?;


// Example: (2 / 4)
// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
DivExpression returns kexpressions::Expression:
    ModExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        operator=EsterelDivOperator 
        subExpressions+=ModExpression
    )?;
    

// Example: varA mod ?B
ModExpression returns kexpressions::Expression:
    NegExpression 
    (   {kexpressions::OperatorExpression.subExpressions+=current} 
        operator=EsterelModOperator 
        subExpressions+=AtomicValuedExpression
    )?;


// Example: not A, not false, not (A or B)
// at the latter we need the parans to indicate the right binding
NegExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} 
    operator=EsterelSubOperator 
    subExpressions+=(NegExpression)
    | 
    AtomicValuedExpression;

AtomicValuedExpression returns kexpressions::Expression:
    IntValue
    | FloatValue
    | '(' ValuedExpression ')'
    | AtomicExpression;


// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
ValuedObjectTestExpression returns kexpressions::Expression:
    {kexpressions::OperatorExpression} operator=EsterelPreOperator '('subExpressions+=ValuedObjectTestExpression')'
    | {kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference
    | ValuedObjectReference;
