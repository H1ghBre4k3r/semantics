/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.scest.scoping;

import de.cau.cs.kieler.esterel.scoping.EsterelScopeProvider
import de.cau.cs.kieler.kexpressions.ValuedObjectReference
import java.util.ArrayList
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleScope

import static de.cau.cs.kieler.esterel.scoping.EsterelScopeProviderUtil.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class SCEstScopeProvider extends EsterelScopeProvider {

    override IScope scope_ValuedObjectReference_valuedObject(ValuedObjectReference context, EReference ref) {
        val ArrayList<IEObjectDescription> scopeElems = new ArrayList<IEObjectDescription>();
        // there are several elements which are scoped as valued object
        scopeElems.addAll(getLocalSignals(context));
        scopeElems.addAll(getLocalVariables(context));
        scopeElems.addAll(getLocalTraps(context));
        scopeElems.addAll(getAllElements(context, COLLECT_CONSTANTS.merge(COLLECT_SENSORS).merge(COLLECT_SIGNALS)));
        return new SimpleScope(getScopeForValuedObjectReference(context, ref), scopeElems);
    }
}
