/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.scest.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.esterel.services.EsterelGrammarAccess;
import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SCEstGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EsterelProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPragmasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0 = (RuleCall)cPragmasAssignment_0.eContents().get(0);
		private final Assignment cModulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModulesEsterelModuleParserRuleCall_1_0 = (RuleCall)cModulesAssignment_1.eContents().get(0);
		
		////  root rule. a SCEst file can contain multiple modules
		// EsterelProgram hidden(SL_COMMENT, ML_COMMENT, WS):
		//	pragmas+=Pragma* modules+=EsterelModule*;
		@Override public ParserRule getRule() { return rule; }

		//pragmas+=Pragma* modules+=EsterelModule*
		public Group getGroup() { return cGroup; }

		//pragmas+=Pragma*
		public Assignment getPragmasAssignment_0() { return cPragmasAssignment_0; }

		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0() { return cPragmasPragmaParserRuleCall_0_0; }

		//modules+=EsterelModule*
		public Assignment getModulesAssignment_1() { return cModulesAssignment_1; }

		//EsterelModule
		public RuleCall getModulesEsterelModuleParserRuleCall_1_0() { return cModulesEsterelModuleParserRuleCall_1_0; }
	}

	public class EsterelModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_4_0_0 = (RuleCall)cDeclarationsAssignment_4_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cDeclarationsEsterelDeclarationParserRuleCall_4_1_0 = (RuleCall)cDeclarationsAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cStatementsEsterelParallelParserRuleCall_5_0_0 = (RuleCall)cStatementsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Alternatives cAlternatives_5_1_0 = (Alternatives)cGroup_5_1.eContents().get(0);
		private final Group cGroup_5_1_0_0 = (Group)cAlternatives_5_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1_0_0_0 = (Assignment)cGroup_5_1_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_5_1_0_0_0_0 = (RuleCall)cStatementsAssignment_5_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_0_0_1 = (Keyword)cGroup_5_1_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1_0_1 = (Assignment)cAlternatives_5_1_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_5_1_0_1_0 = (RuleCall)cStatementsAssignment_5_1_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_5_1_1_0 = (RuleCall)cStatementsAssignment_5_1_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cEndKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cModuleKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		/// * ###################################################
		// * ###                 7.2 Modules                 ###
		// * ###################################################
		// * /
		//EsterelModule scl::Module:
		//	annotations+=Annotation* "module" name=ID ":" (declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
		//	(statements+=EsterelParallel | (statements+=InstructionStatement ";" | statements+=MetaStatement)*
		//	statements+=Statement?) ("end" "module" | ".")
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "module" name=ID ":" (declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
		//(statements+=EsterelParallel | (statements+=InstructionStatement ";" | statements+=MetaStatement)*
		//statements+=Statement?) ("end" "module" | ".")
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//declarations+=VariableDeclaration
		public Assignment getDeclarationsAssignment_4_0() { return cDeclarationsAssignment_4_0; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_4_0_0() { return cDeclarationsVariableDeclarationParserRuleCall_4_0_0; }

		//declarations+=EsterelDeclaration
		public Assignment getDeclarationsAssignment_4_1() { return cDeclarationsAssignment_4_1; }

		//EsterelDeclaration
		public RuleCall getDeclarationsEsterelDeclarationParserRuleCall_4_1_0() { return cDeclarationsEsterelDeclarationParserRuleCall_4_1_0; }

		//(statements+=EsterelParallel | (statements+=InstructionStatement ";" | statements+=MetaStatement)*
		//statements+=Statement?)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//statements+=EsterelParallel
		public Assignment getStatementsAssignment_5_0() { return cStatementsAssignment_5_0; }

		//EsterelParallel
		public RuleCall getStatementsEsterelParallelParserRuleCall_5_0_0() { return cStatementsEsterelParallelParserRuleCall_5_0_0; }

		//(statements+=InstructionStatement ";" | statements+=MetaStatement)* statements+=Statement?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//(statements+=InstructionStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_5_1_0() { return cAlternatives_5_1_0; }

		//statements+=InstructionStatement ";"
		public Group getGroup_5_1_0_0() { return cGroup_5_1_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_5_1_0_0_0() { return cStatementsAssignment_5_1_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_5_1_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_5_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_0_0_1() { return cSemicolonKeyword_5_1_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_5_1_0_1() { return cStatementsAssignment_5_1_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_5_1_0_1_0() { return cStatementsMetaStatementParserRuleCall_5_1_0_1_0; }

		//statements+=Statement?
		public Assignment getStatementsAssignment_5_1_1() { return cStatementsAssignment_5_1_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_1_1_0() { return cStatementsStatementParserRuleCall_5_1_1_0; }

		//("end" "module" | ".")
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"end" "module"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"end"
		public Keyword getEndKeyword_6_0_0() { return cEndKeyword_6_0_0; }

		//"module"
		public Keyword getModuleKeyword_6_0_1() { return cModuleKeyword_6_0_1; }

		//"."
		public Keyword getFullStopKeyword_6_1() { return cFullStopKeyword_6_1; }
	}

	public class MetaOrInstructionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.MetaOrInstructionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetaStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstructionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * ###################################################
		// * ###               7.5 Statements                ###
		// * ###################################################
		// * /
		//MetaOrInstructionStatement scl::Statement:
		//	MetaStatement | InstructionStatement
		@Override public ParserRule getRule() { return rule; }

		//MetaStatement | InstructionStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//MetaStatement
		public RuleCall getMetaStatementParserRuleCall_0() { return cMetaStatementParserRuleCall_0; }

		//InstructionStatement
		public RuleCall getInstructionStatementParserRuleCall_1() { return cInstructionStatementParserRuleCall_1; }
	}

	public class MetaStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
		private final RuleCall cMetaStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Allow scl labels
		// MetaStatement scl::Statement:
		//	SCL::MetaStatement
		@Override public ParserRule getRule() { return rule; }

		//SCL::MetaStatement
		public RuleCall getMetaStatementParserRuleCall() { return cMetaStatementParserRuleCall; }
	}

	public class InstructionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.InstructionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnEmitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGotoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParallelParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cModuleCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//InstructionStatement scl::Statement:
		//	super | UnEmit | Set | Assignment | Goto | Parallel | ModuleCall
		@Override public ParserRule getRule() { return rule; }

		//super | UnEmit | Set | Assignment | Goto | Parallel | ModuleCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//super
		public RuleCall getInstructionStatementParserRuleCall_0() { return cInstructionStatementParserRuleCall_0; }

		//UnEmit
		public RuleCall getUnEmitParserRuleCall_1() { return cUnEmitParserRuleCall_1; }

		//Set
		public RuleCall getSetParserRuleCall_2() { return cSetParserRuleCall_2; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_3() { return cAssignmentParserRuleCall_3; }

		//Goto
		public RuleCall getGotoParserRuleCall_4() { return cGotoParserRuleCall_4; }

		//Parallel
		public RuleCall getParallelParserRuleCall_5() { return cParallelParserRuleCall_5; }

		//ModuleCall
		public RuleCall getModuleCallParserRuleCall_6() { return cModuleCallParserRuleCall_6; }
	}

	public class EsterelThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelThread");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInstructionStatementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cEsterelThreadStatementsAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1_1 = (Alternatives)cGroup_0_1_1.eContents().get(1);
		private final Group cGroup_0_1_1_1_0 = (Group)cAlternatives_0_1_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_0_1_1_1_0_0 = (Assignment)cGroup_0_1_1_1_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_0_1_1_1_0_0_0 = (RuleCall)cStatementsAssignment_0_1_1_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_1_1_0_1 = (Keyword)cGroup_0_1_1_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_0_1_1_1_1 = (Assignment)cAlternatives_0_1_1_1.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_0_1_1_1_1_0 = (RuleCall)cStatementsAssignment_0_1_1_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_0_1_1_2 = (Assignment)cGroup_0_1_1.eContents().get(2);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_0_1_1_2_0 = (RuleCall)cStatementsAssignment_0_1_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMetaStatementParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cEsterelThreadStatementsAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1_1_0_0 = (Assignment)cGroup_1_1_1_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_1_1_1_0_0_0 = (RuleCall)cStatementsAssignment_1_1_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_0_1 = (Keyword)cGroup_1_1_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_1_1_1_1_0 = (RuleCall)cStatementsAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_1_1_2_0 = (RuleCall)cStatementsAssignment_1_1_2.eContents().get(0);
		
		//EsterelThread scl::Statement:
		//	InstructionStatement ({EsterelThread.statements+=current} (";" (statements+=InstructionStatement ";" |
		//	statements+=MetaStatement)* statements+=InstructionStatement?))? | MetaStatement ({EsterelThread.statements+=current}
		//	(statements+=InstructionStatement ";" | statements+=MetaStatement)* statements+=InstructionStatement?)?
		@Override public ParserRule getRule() { return rule; }

		//InstructionStatement ({EsterelThread.statements+=current} (";" (statements+=InstructionStatement ";" |
		//statements+=MetaStatement)* statements+=InstructionStatement?))? | MetaStatement ({EsterelThread.statements+=current}
		//(statements+=InstructionStatement ";" | statements+=MetaStatement)* statements+=InstructionStatement?)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//InstructionStatement ({EsterelThread.statements+=current} (";" (statements+=InstructionStatement ";" |
		//statements+=MetaStatement)* statements+=InstructionStatement?))?
		public Group getGroup_0() { return cGroup_0; }

		//InstructionStatement
		public RuleCall getInstructionStatementParserRuleCall_0_0() { return cInstructionStatementParserRuleCall_0_0; }

		//({EsterelThread.statements+=current} (";" (statements+=InstructionStatement ";" | statements+=MetaStatement)*
		//statements+=InstructionStatement?))?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{EsterelThread.statements+=current}
		public Action getEsterelThreadStatementsAction_0_1_0() { return cEsterelThreadStatementsAction_0_1_0; }

		//(";" (statements+=InstructionStatement ";" | statements+=MetaStatement)* statements+=InstructionStatement?)
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//";"
		public Keyword getSemicolonKeyword_0_1_1_0() { return cSemicolonKeyword_0_1_1_0; }

		//(statements+=InstructionStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_0_1_1_1() { return cAlternatives_0_1_1_1; }

		//statements+=InstructionStatement ";"
		public Group getGroup_0_1_1_1_0() { return cGroup_0_1_1_1_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_0_1_1_1_0_0() { return cStatementsAssignment_0_1_1_1_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_0_1_1_1_0_0_0() { return cStatementsInstructionStatementParserRuleCall_0_1_1_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1_1_1_0_1() { return cSemicolonKeyword_0_1_1_1_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_0_1_1_1_1() { return cStatementsAssignment_0_1_1_1_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_0_1_1_1_1_0() { return cStatementsMetaStatementParserRuleCall_0_1_1_1_1_0; }

		//statements+=InstructionStatement?
		public Assignment getStatementsAssignment_0_1_1_2() { return cStatementsAssignment_0_1_1_2; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_0_1_1_2_0() { return cStatementsInstructionStatementParserRuleCall_0_1_1_2_0; }

		//MetaStatement ({EsterelThread.statements+=current} (statements+=InstructionStatement ";" | statements+=MetaStatement)*
		//statements+=InstructionStatement?)?
		public Group getGroup_1() { return cGroup_1; }

		//MetaStatement
		public RuleCall getMetaStatementParserRuleCall_1_0() { return cMetaStatementParserRuleCall_1_0; }

		//({EsterelThread.statements+=current} (statements+=InstructionStatement ";" | statements+=MetaStatement)*
		//statements+=InstructionStatement?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{EsterelThread.statements+=current}
		public Action getEsterelThreadStatementsAction_1_1_0() { return cEsterelThreadStatementsAction_1_1_0; }

		//(statements+=InstructionStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//statements+=InstructionStatement ";"
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_1_1_1_0_0() { return cStatementsAssignment_1_1_1_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_1_1_1_0_0_0() { return cStatementsInstructionStatementParserRuleCall_1_1_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_1_0_1() { return cSemicolonKeyword_1_1_1_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_1_1_1_1() { return cStatementsAssignment_1_1_1_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_1_1_1_1_0() { return cStatementsMetaStatementParserRuleCall_1_1_1_1_0; }

		//statements+=InstructionStatement?
		public Assignment getStatementsAssignment_1_1_2() { return cStatementsAssignment_1_1_2; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_1_1_2_0() { return cStatementsInstructionStatementParserRuleCall_1_1_2_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cReferenceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cReferenceVariableReferenceParserRuleCall_1_0_0 = (RuleCall)cReferenceAssignment_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//// ==> 7.5.2 Assignment
		// // -------------------------------------
		// Assignment scl::Assignment:
		//	SCL::Assignment | reference=VariableReference ":=" expression=Expression
		@Override public ParserRule getRule() { return rule; }

		//SCL::Assignment | reference=VariableReference ":=" expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SCL::Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//// SCL is allowed again
		// reference=VariableReference ":=" expression=Expression
		public Group getGroup_1() { return cGroup_1; }

		//// SCL is allowed again
		// reference=VariableReference
		public Assignment getReferenceAssignment_1_0() { return cReferenceAssignment_1_0; }

		//VariableReference
		public RuleCall getReferenceVariableReferenceParserRuleCall_1_0_0() { return cReferenceVariableReferenceParserRuleCall_1_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
	}

	public class UnEmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.UnEmit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cUnemitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		
		/// * ###################################################
		// * ###                   SCEst                     ###
		// * ###################################################
		// * /
		//// ==> unemit
		// // -------------------------------------
		// UnEmit:
		//	annotations+=Annotation* "unemit" signal=[Signal];
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "unemit" signal=[Signal]
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"unemit"
		public Keyword getUnemitKeyword_1() { return cUnemitKeyword_1; }

		//signal=[Signal]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }
	}

	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalSignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// ==> reset: Signal value reset (absolute write)
		// // -------------------------------------
		// Set:
		//	annotations+=Annotation* "set" signal=[Signal] ("(" expression=Expression ")");
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "set" signal=[Signal] ("(" expression=Expression ")")
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }

		//signal=[Signal]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[Signal]
		public CrossReference getSignalSignalCrossReference_2_0() { return cSignalSignalCrossReference_2_0; }

		//ID
		public RuleCall getSignalSignalIDTerminalRuleCall_2_0_1() { return cSignalSignalIDTerminalRuleCall_2_0_1; }

		//("(" expression=Expression ")")
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEsterelFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrapExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValuedObjectTestExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cConstantExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFunctionCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		/// * ###################################################
		// * ###               Expressions                   ###
		// * ###################################################
		// * /
		//// Esterel is a bit richer than what is provided by kexpressions. 
		// // These rules are introduced here.
		//
		//// Care about order of the rules! 
		// AtomicExpression kexpressions::Expression:
		//	EsterelFunctionCall | TrapExpression | BoolValue | ValuedObjectTestExpression | TextExpression | '('
		//	BooleanExpression ')' | ConstantExpression | FunctionCall
		@Override public ParserRule getRule() { return rule; }

		//EsterelFunctionCall | TrapExpression | BoolValue | ValuedObjectTestExpression | TextExpression | '(' BooleanExpression
		//')' | ConstantExpression | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//EsterelFunctionCall
		public RuleCall getEsterelFunctionCallParserRuleCall_0() { return cEsterelFunctionCallParserRuleCall_0; }

		//TrapExpression
		public RuleCall getTrapExpressionParserRuleCall_1() { return cTrapExpressionParserRuleCall_1; }

		//BoolValue
		public RuleCall getBoolValueParserRuleCall_2() { return cBoolValueParserRuleCall_2; }

		//ValuedObjectTestExpression
		public RuleCall getValuedObjectTestExpressionParserRuleCall_3() { return cValuedObjectTestExpressionParserRuleCall_3; }

		//TextExpression
		public RuleCall getTextExpressionParserRuleCall_4() { return cTextExpressionParserRuleCall_4; }

		//'(' BooleanExpression ')'
		public Group getGroup_5() { return cGroup_5; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_5_1() { return cBooleanExpressionParserRuleCall_5_1; }

		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_6() { return cConstantExpressionParserRuleCall_6; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_7() { return cFunctionCallParserRuleCall_7; }
	}

	public class AtomicValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.AtomicValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cAtomicExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AtomicValuedExpression kexpressions::Expression:
		//	IntValue | FloatValue | '(' ValuedExpression ')' | AtomicExpression | StringValue
		@Override public ParserRule getRule() { return rule; }

		//IntValue | FloatValue | '(' ValuedExpression ')' | AtomicExpression | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }

		//'(' ValuedExpression ')'
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_2_1() { return cValuedExpressionParserRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_3() { return cAtomicExpressionParserRuleCall_3; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_4() { return cStringValueParserRuleCall_4; }
	}
	
	
	private final EsterelProgramElements pEsterelProgram;
	private final EsterelModuleElements pEsterelModule;
	private final MetaOrInstructionStatementElements pMetaOrInstructionStatement;
	private final MetaStatementElements pMetaStatement;
	private final InstructionStatementElements pInstructionStatement;
	private final EsterelThreadElements pEsterelThread;
	private final AssignmentElements pAssignment;
	private final UnEmitElements pUnEmit;
	private final SetElements pSet;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final AtomicExpressionElements pAtomicExpression;
	private final AtomicValuedExpressionElements pAtomicValuedExpression;
	
	private final Grammar grammar;

	private final EsterelGrammarAccess gaEsterel;

	private final SCLGrammarAccess gaSCL;

	private final KExtGrammarAccess gaKExt;

	private final KEffectsGrammarAccess gaKEffects;

	private final KExpressionsGrammarAccess gaKExpressions;

	private final AnnotationsGrammarAccess gaAnnotations;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCEstGrammarAccess(GrammarProvider grammarProvider,
		EsterelGrammarAccess gaEsterel,
		SCLGrammarAccess gaSCL,
		KExtGrammarAccess gaKExt,
		KEffectsGrammarAccess gaKEffects,
		KExpressionsGrammarAccess gaKExpressions,
		AnnotationsGrammarAccess gaAnnotations,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEsterel = gaEsterel;
		this.gaSCL = gaSCL;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pEsterelProgram = new EsterelProgramElements();
		this.pEsterelModule = new EsterelModuleElements();
		this.pMetaOrInstructionStatement = new MetaOrInstructionStatementElements();
		this.pMetaStatement = new MetaStatementElements();
		this.pInstructionStatement = new InstructionStatementElements();
		this.pEsterelThread = new EsterelThreadElements();
		this.pAssignment = new AssignmentElements();
		this.pUnEmit = new UnEmitElements();
		this.pSet = new SetElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.SL_COMMENT");
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pAtomicValuedExpression = new AtomicValuedExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.esterel.scest.SCEst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public EsterelGrammarAccess getEsterelGrammarAccess() {
		return gaEsterel;
	}

	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}

	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}

	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////  root rule. a SCEst file can contain multiple modules
	// EsterelProgram hidden(SL_COMMENT, ML_COMMENT, WS):
	//	pragmas+=Pragma* modules+=EsterelModule*;
	public EsterelProgramElements getEsterelProgramAccess() {
		return pEsterelProgram;
	}
	
	public ParserRule getEsterelProgramRule() {
		return getEsterelProgramAccess().getRule();
	}

	/// * ###################################################
	// * ###                 7.2 Modules                 ###
	// * ###################################################
	// * /
	//EsterelModule scl::Module:
	//	annotations+=Annotation* "module" name=ID ":" (declarations+=VariableDeclaration | declarations+=EsterelDeclaration)*
	//	(statements+=EsterelParallel | (statements+=InstructionStatement ";" | statements+=MetaStatement)*
	//	statements+=Statement?) ("end" "module" | ".")
	public EsterelModuleElements getEsterelModuleAccess() {
		return pEsterelModule;
	}
	
	public ParserRule getEsterelModuleRule() {
		return getEsterelModuleAccess().getRule();
	}

	/// * ###################################################
	// * ###               7.5 Statements                ###
	// * ###################################################
	// * /
	//MetaOrInstructionStatement scl::Statement:
	//	MetaStatement | InstructionStatement
	public MetaOrInstructionStatementElements getMetaOrInstructionStatementAccess() {
		return pMetaOrInstructionStatement;
	}
	
	public ParserRule getMetaOrInstructionStatementRule() {
		return getMetaOrInstructionStatementAccess().getRule();
	}

	//// Allow scl labels
	// MetaStatement scl::Statement:
	//	SCL::MetaStatement
	public MetaStatementElements getMetaStatementAccess() {
		return pMetaStatement;
	}
	
	public ParserRule getMetaStatementRule() {
		return getMetaStatementAccess().getRule();
	}

	//InstructionStatement scl::Statement:
	//	super | UnEmit | Set | Assignment | Goto | Parallel | ModuleCall
	public InstructionStatementElements getInstructionStatementAccess() {
		return pInstructionStatement;
	}
	
	public ParserRule getInstructionStatementRule() {
		return getInstructionStatementAccess().getRule();
	}

	//EsterelThread scl::Statement:
	//	InstructionStatement ({EsterelThread.statements+=current} (";" (statements+=InstructionStatement ";" |
	//	statements+=MetaStatement)* statements+=InstructionStatement?))? | MetaStatement ({EsterelThread.statements+=current}
	//	(statements+=InstructionStatement ";" | statements+=MetaStatement)* statements+=InstructionStatement?)?
	public EsterelThreadElements getEsterelThreadAccess() {
		return pEsterelThread;
	}
	
	public ParserRule getEsterelThreadRule() {
		return getEsterelThreadAccess().getRule();
	}

	//// ==> 7.5.2 Assignment
	// // -------------------------------------
	// Assignment scl::Assignment:
	//	SCL::Assignment | reference=VariableReference ":=" expression=Expression
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	/// * ###################################################
	// * ###                   SCEst                     ###
	// * ###################################################
	// * /
	//// ==> unemit
	// // -------------------------------------
	// UnEmit:
	//	annotations+=Annotation* "unemit" signal=[Signal];
	public UnEmitElements getUnEmitAccess() {
		return pUnEmit;
	}
	
	public ParserRule getUnEmitRule() {
		return getUnEmitAccess().getRule();
	}

	//// ==> reset: Signal value reset (absolute write)
	// // -------------------------------------
	// Set:
	//	annotations+=Annotation* "set" signal=[Signal] ("(" expression=Expression ")");
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	('%' '{')->('}' '%') | ('/ *' !'*')->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	('//' | '%') !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	/// * ###################################################
	// * ###               Expressions                   ###
	// * ###################################################
	// * /
	//// Esterel is a bit richer than what is provided by kexpressions. 
	// // These rules are introduced here.
	//
	//// Care about order of the rules! 
	// AtomicExpression kexpressions::Expression:
	//	EsterelFunctionCall | TrapExpression | BoolValue | ValuedObjectTestExpression | TextExpression | '('
	//	BooleanExpression ')' | ConstantExpression | FunctionCall
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//AtomicValuedExpression kexpressions::Expression:
	//	IntValue | FloatValue | '(' ValuedExpression ')' | AtomicExpression | StringValue
	public AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return pAtomicValuedExpression;
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	/// * ###################################################
	// * ###        7.3 Interface Declaration            ###
	// * ###################################################
	// * /
	//EsterelDeclaration:
	//	InputDeclaration | OutputDeclaration | InputOutputDeclaration | ReturnDeclaration | TypeDeclaration |
	//	SensorDeclaration | ConstantDeclaration | RelationDeclaration | TaskDeclaration | FunctionDeclaration |
	//	ProcedureDeclaration;
	public EsterelGrammarAccess.EsterelDeclarationElements getEsterelDeclarationAccess() {
		return gaEsterel.getEsterelDeclarationAccess();
	}
	
	public ParserRule getEsterelDeclarationRule() {
		return getEsterelDeclarationAccess().getRule();
	}

	//// = Interface Declaration
	// // ----------------------------------------------
	//
	//// overwrite to allow type definitions in a specific module
	// TypeIdentifier:
	//	type=EsterelValueType | "combine" (type=EsterelValueType | idType=ID) "with" operator=EsterelCombineOperator |
	//	esterelType=[TypeDefinition] | idType=ID;
	public EsterelGrammarAccess.TypeIdentifierElements getTypeIdentifierAccess() {
		return gaEsterel.getTypeIdentifierAccess();
	}
	
	public ParserRule getTypeIdentifierRule() {
		return getTypeIdentifierAccess().getRule();
	}

	//// = 7.3.1 Type Declarations
	// // -------------------------------------
	// TypeDeclaration:
	//	annotations+=Annotation* "type" types+=TypeDefinition ("," types+=TypeDefinition)* ";";
	public EsterelGrammarAccess.TypeDeclarationElements getTypeDeclarationAccess() {
		return gaEsterel.getTypeDeclarationAccess();
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//TypeDefinition:
	//	name=ID;
	public EsterelGrammarAccess.TypeDefinitionElements getTypeDefinitionAccess() {
		return gaEsterel.getTypeDefinitionAccess();
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//// = 7.3.2 Constant Declarations
	// // -------------------------------------
	// ConstantDeclaration:
	//	annotations+=Annotation* "constant" constants+=Constant ("," constants+=Constant)* ";";
	public EsterelGrammarAccess.ConstantDeclarationElements getConstantDeclarationAccess() {
		return gaEsterel.getConstantDeclarationAccess();
	}
	
	public ParserRule getConstantDeclarationRule() {
		return getConstantDeclarationAccess().getRule();
	}

	//Constant:
	//	name=ID ("=" initialValue=AnyValue)? ":" type=TypeIdentifier;
	public EsterelGrammarAccess.ConstantElements getConstantAccess() {
		return gaEsterel.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//// = 7.3.3 Function Declaration
	// // -------------------------------------
	// FunctionDeclaration:
	//	annotations+=Annotation* "function" functions+=Function ("," functions+=Function)* ";";
	public EsterelGrammarAccess.FunctionDeclarationElements getFunctionDeclarationAccess() {
		return gaEsterel.getFunctionDeclarationAccess();
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//Function:
	//	name=ID ("(" (parameterTypes+=TypeIdentifier ("," parameterTypes+=TypeIdentifier)*)? ")" | '()') ":"
	//	returnType=TypeIdentifier;
	public EsterelGrammarAccess.FunctionElements getFunctionAccess() {
		return gaEsterel.getFunctionAccess();
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//// = 7.3.4 Procedure Declaration
	// // -------------------------------------
	// ProcedureDeclaration:
	//	annotations+=Annotation* "procedure" procedures+=Procedure ("," procedures+=Procedure)* ";";
	public EsterelGrammarAccess.ProcedureDeclarationElements getProcedureDeclarationAccess() {
		return gaEsterel.getProcedureDeclarationAccess();
	}
	
	public ParserRule getProcedureDeclarationRule() {
		return getProcedureDeclarationAccess().getRule();
	}

	//Procedure:
	//	name=ID ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()') ("("
	//	(valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
	public EsterelGrammarAccess.ProcedureElements getProcedureAccess() {
		return gaEsterel.getProcedureAccess();
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//// = 7.3.5 Task Declaration
	// // -------------------------------------
	// TaskDeclaration:
	//	annotations+=Annotation* "task" tasks+=Task ("," tasks+=Task)* ";";
	public EsterelGrammarAccess.TaskDeclarationElements getTaskDeclarationAccess() {
		return gaEsterel.getTaskDeclarationAccess();
	}
	
	public ParserRule getTaskDeclarationRule() {
		return getTaskDeclarationAccess().getRule();
	}

	//Task:
	//	name=ID ("(" (referenceArguments+=TypeIdentifier ("," referenceArguments+=TypeIdentifier)*)? ")" | '()') ("("
	//	(valueArguments+=TypeIdentifier ("," valueArguments+=TypeIdentifier)*)? ")" | '()');
	public EsterelGrammarAccess.TaskElements getTaskAccess() {
		return gaEsterel.getTaskAccess();
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//// = 7.3.6 Signal Declaration
	// // -------------------------------------
	// InputDeclaration:
	//	annotations+=Annotation* "input" valuedObjects+=Signal ("," valuedObjects+=Signal)* ";";
	public EsterelGrammarAccess.InputDeclarationElements getInputDeclarationAccess() {
		return gaEsterel.getInputDeclarationAccess();
	}
	
	public ParserRule getInputDeclarationRule() {
		return getInputDeclarationAccess().getRule();
	}

	//OutputDeclaration:
	//	annotations+=Annotation* "output" valuedObjects+=Signal ("," valuedObjects+=Signal)* ";";
	public EsterelGrammarAccess.OutputDeclarationElements getOutputDeclarationAccess() {
		return gaEsterel.getOutputDeclarationAccess();
	}
	
	public ParserRule getOutputDeclarationRule() {
		return getOutputDeclarationAccess().getRule();
	}

	//InputOutputDeclaration:
	//	annotations+=Annotation* "inputoutput" valuedObjects+=Signal ("," valuedObjects+=Signal)* ";";
	public EsterelGrammarAccess.InputOutputDeclarationElements getInputOutputDeclarationAccess() {
		return gaEsterel.getInputOutputDeclarationAccess();
	}
	
	public ParserRule getInputOutputDeclarationRule() {
		return getInputOutputDeclarationAccess().getRule();
	}

	//ReturnDeclaration:
	//	annotations+=Annotation* "return" valuedObjects+=Signal ("," valuedObjects+=Signal)* ";";
	public EsterelGrammarAccess.ReturnDeclarationElements getReturnDeclarationAccess() {
		return gaEsterel.getReturnDeclarationAccess();
	}
	
	public ParserRule getReturnDeclarationRule() {
		return getReturnDeclarationAccess().getRule();
	}

	//// example 1:   A : combine boolean with or
	// // example 2:   A (combine boolean with or)
	//
	//// example 3:   A := 0 : combine integer with '+'
	// Signal:
	//	name=ID (":" (type=EsterelValueType | idType=ID | "combine" (type=EsterelValueType | idType=ID) "with"
	//	(combineFunction=[Function] | combineOperator=EsterelCombineOperator)) | "(" (type=EsterelValueType | idType=ID |
	//	"combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function] |
	//	combineOperator=EsterelCombineOperator)) ")" | ":=" initialValue=Expression ":" (type=EsterelValueType | idType=ID |
	//	"combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function] |
	//	combineOperator=EsterelCombineOperator)))?;
	public EsterelGrammarAccess.SignalElements getSignalAccess() {
		return gaEsterel.getSignalAccess();
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//// = 7.3.7 Sensor Declaration
	// // -------------------------------------
	// SensorDeclaration:
	//	annotations+=Annotation* "sensor" valuedObjects+=Sensor ("," valuedObjects+=Sensor)* ";";
	public EsterelGrammarAccess.SensorDeclarationElements getSensorDeclarationAccess() {
		return gaEsterel.getSensorDeclarationAccess();
	}
	
	public ParserRule getSensorDeclarationRule() {
		return getSensorDeclarationAccess().getRule();
	}

	//Sensor:
	//	name=ID (":" type=TypeIdentifier | "(" type=TypeIdentifier ")")?;
	public EsterelGrammarAccess.SensorElements getSensorAccess() {
		return gaEsterel.getSensorAccess();
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}

	//// = 7.3.8 Input Relation Declaration
	// // -------------------------------------
	// RelationDeclaration:
	//	annotations+=Annotation* "relation" relations+=Relation ("," relations+=Relation)* ";";
	public EsterelGrammarAccess.RelationDeclarationElements getRelationDeclarationAccess() {
		return gaEsterel.getRelationDeclarationAccess();
	}
	
	public ParserRule getRelationDeclarationRule() {
		return getRelationDeclarationAccess().getRule();
	}

	//Relation:
	//	RelationImplication | RelationIncompatibility;
	public EsterelGrammarAccess.RelationElements getRelationAccess() {
		return gaEsterel.getRelationAccess();
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//RelationImplication:
	//	first=[Signal] type="=>" second=[Signal];
	public EsterelGrammarAccess.RelationImplicationElements getRelationImplicationAccess() {
		return gaEsterel.getRelationImplicationAccess();
	}
	
	public ParserRule getRelationImplicationRule() {
		return getRelationImplicationAccess().getRule();
	}

	//RelationIncompatibility:
	//	incomp+=[Signal] type="#" incomp+=[Signal] ("#" incomp+=[Signal])*;
	public EsterelGrammarAccess.RelationIncompatibilityElements getRelationIncompatibilityAccess() {
		return gaEsterel.getRelationIncompatibilityAccess();
	}
	
	public ParserRule getRelationIncompatibilityRule() {
		return getRelationIncompatibilityAccess().getRule();
	}

	////Statement returns scl::Statement:
	// //    EsterelParallel | InstructionStatement
	// //;
	// InstructionStatement
	//scl::Statement:
	//	Abort | super::Assignment | Await | Block | ProcedureCall | Emit | EveryDo | Exit | Exec | Halt | IfTest |
	//	LocalSignalDeclaration | Loop | Nothing | Pause | Present | Repeat | Run | Suspend | Sustain | Trap |
	//	LocalVariableDeclaration
	public EsterelGrammarAccess.InstructionStatementElements getEsterelInstructionStatementAccess() {
		return gaEsterel.getInstructionStatementAccess();
	}
	
	public ParserRule getEsterelInstructionStatementRule() {
		return getEsterelInstructionStatementAccess().getRule();
	}

	//// = Parallel: at least two threads
	// // -------------------------------------
	//
	////EsterelParallel returns EsterelParallel:
	// //    {EsterelParallel}
	//
	////    threads+=EsterelThread (=>"||" threads+=EsterelThread)+;
	// // This rule massively improves parsing
	//
	//EsterelParallel scl::Statement:
	//	super::EsterelThread ({EsterelParallel.statements+=current} ("||" statements+=super::EsterelThread)+)?
	public EsterelGrammarAccess.EsterelParallelElements getEsterelParallelAccess() {
		return gaEsterel.getEsterelParallelAccess();
	}
	
	public ParserRule getEsterelParallelRule() {
		return getEsterelParallelAccess().getRule();
	}

	//// = Nothing
	// // -------------------------------------
	// Nothing:
	//	{Nothing} annotations+=Annotation* "nothing";
	public EsterelGrammarAccess.NothingElements getNothingAccess() {
		return gaEsterel.getNothingAccess();
	}
	
	public ParserRule getNothingRule() {
		return getNothingAccess().getRule();
	}

	//// = Halt
	// // -------------------------------------
	// Halt:
	//	{Halt} annotations+=Annotation* "halt";
	public EsterelGrammarAccess.HaltElements getHaltAccess() {
		return gaEsterel.getHaltAccess();
	}
	
	public ParserRule getHaltRule() {
		return getHaltAccess().getRule();
	}

	//// = Block
	// // -------------------------------------    
	// Block:
	//	{Block} annotations+=Annotation* "[" (statements+=EsterelParallel | (statements+=super::InstructionStatement ";" |
	//	statements+=super::MetaStatement)* statements+=super::InstructionStatement?) "]";
	public EsterelGrammarAccess.BlockElements getBlockAccess() {
		return gaEsterel.getBlockAccess();
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//// = 7.5.1 Signal Emission
	// // -------------------------------------
	// Emit:
	//	annotations+=Annotation* "emit" signal=[Signal] ("(" expression=Expression ")")?;
	public EsterelGrammarAccess.EmitElements getEmitAccess() {
		return gaEsterel.getEmitAccess();
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}

	//// emit a signal indefinitely
	// Sustain:
	//	annotations+=Annotation* "sustain" signal=[Signal] ("(" expression=Expression ")")?;
	public EsterelGrammarAccess.SustainElements getSustainAccess() {
		return gaEsterel.getSustainAccess();
	}
	
	public ParserRule getSustainRule() {
		return getSustainAccess().getRule();
	}

	//VariableReference kexpressions::ValuedObjectReference:
	//	valuedObject=[Variable]
	public EsterelGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaEsterel.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//ProcedureCall:
	//	annotations+=Annotation* "call" procedure=[Procedure] ("(" (referenceArguments+=[Variable] (","
	//	referenceArguments+=[Variable])*)? ")" | '()') ("(" (valueArguments+=Expression ("," valueArguments+=Expression)*)?
	//	")" | '()');
	public EsterelGrammarAccess.ProcedureCallElements getProcedureCallAccess() {
		return gaEsterel.getProcedureCallAccess();
	}
	
	public ParserRule getProcedureCallRule() {
		return getProcedureCallAccess().getRule();
	}

	//// = 7.5.3 The present Signal Test
	// // -------------------------------------
	// Present:
	//	annotations+=Annotation* "present" ((expression=SignalExpression | "[" expression=SignalExpression "]")
	//	(annotations+=Annotation* "then" (statements+=EsterelParallel | (statements+=super::InstructionStatement ";" |
	//	statements+=super::MetaStatement)* statements+=super::InstructionStatement?))? | cases+=PresentCase+) ("else"
	//	(elseStatements+=EsterelParallel | (elseStatements+=super::InstructionStatement ";" |
	//	elseStatements+=super::MetaStatement)* elseStatements+=super::InstructionStatement?))? "end" "present"?;
	public EsterelGrammarAccess.PresentElements getPresentAccess() {
		return gaEsterel.getPresentAccess();
	}
	
	public ParserRule getPresentRule() {
		return getPresentAccess().getRule();
	}

	//PresentCase:
	//	annotations+=Annotation* "case" (expression=SignalExpression | "[" expression=SignalExpression "]") ("do"
	//	(statements+=EsterelParallel | (statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?))?;
	public EsterelGrammarAccess.PresentCaseElements getPresentCaseAccess() {
		return gaEsterel.getPresentCaseAccess();
	}
	
	public ParserRule getPresentCaseRule() {
		return getPresentCaseAccess().getRule();
	}

	//// = 7.5.4 The if Data Test
	// // -------------------------------------
	// IfTest:
	//	annotations+=Annotation* "if" expression=Expression (annotations+=Annotation* "then" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?))? elseif+=ElsIf* ("else" (elseStatements+=EsterelParallel |
	//	(elseStatements+=super::InstructionStatement ";" | elseStatements+=super::MetaStatement)*
	//	elseStatements+=super::InstructionStatement?))? "end" "if"?;
	public EsterelGrammarAccess.IfTestElements getIfTestAccess() {
		return gaEsterel.getIfTestAccess();
	}
	
	public ParserRule getIfTestRule() {
		return getIfTestAccess().getRule();
	}

	//ElsIf:
	//	annotations+=Annotation* "elsif" expression=Expression ("then" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?))?;
	public EsterelGrammarAccess.ElsIfElements getElsIfAccess() {
		return gaEsterel.getElsIfAccess();
	}
	
	public ParserRule getElsIfRule() {
		return getElsIfAccess().getRule();
	}

	//// = 7.5.5 Looping & 7.5.9 Temporal Loops
	// // -------------------------------------
	// Loop:
	//	{Loop} annotations+=Annotation* "loop" (statements+=EsterelParallel | (statements+=super::InstructionStatement ";" |
	//	statements+=super::MetaStatement)* statements+=super::InstructionStatement?) ("end" "loop"? | "each"
	//	delay=DelayExpression);
	public EsterelGrammarAccess.LoopElements getLoopAccess() {
		return gaEsterel.getLoopAccess();
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//// = 7.5.6 Repeat Looping
	// // -------------------------------------
	// Repeat:
	//	annotations+=Annotation* positive?="positive"? "repeat" expression=Expression "times" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?) "end" "repeat"?;
	public EsterelGrammarAccess.RepeatElements getRepeatAccess() {
		return gaEsterel.getRepeatAccess();
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}

	//// = 7.5.7 The abort Statements
	// // -------------------------------------
	// Abort:
	//	annotations+=Annotation* (weak?="weak"? "abort") (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?) "when" (delay=DelayExpression "do" (doStatements+=EsterelParallel |
	//	(doStatements+=super::InstructionStatement ";" | doStatements+=super::MetaStatement)*
	//	doStatements+=super::InstructionStatement?) "end" ("weak" "abort" | "abort")? | delay=DelayExpression ("end" | "end"
	//	"weak"? "abort")? | cases+=Case+ "end" ("weak" "abort" | "abort")?);
	public EsterelGrammarAccess.AbortElements getAbortAccess() {
		return gaEsterel.getAbortAccess();
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}

	//Case:
	//	annotations+=Annotation* "case" delay=DelayExpression ("do" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?))?;
	public EsterelGrammarAccess.CaseElements getCaseAccess() {
		return gaEsterel.getCaseAccess();
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//// = 7.5.8 The await Statement
	// // -------------------------------------
	// Await:
	//	annotations+=Annotation* "await" (delay=DelayExpression ("do" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?) "end" "await"?)? | cases+=Case+ "end" "await"?);
	public EsterelGrammarAccess.AwaitElements getAwaitAccess() {
		return gaEsterel.getAwaitAccess();
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}

	//// = 7.5.9 Temporal Loops
	// // -------------------------------------
	// // for 'LoopEach' look at 7.5.5
	// EveryDo:
	//	annotations+=Annotation* "every" delay=DelayExpression "do" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?) "end" "every"?;
	public EsterelGrammarAccess.EveryDoElements getEveryDoAccess() {
		return gaEsterel.getEveryDoAccess();
	}
	
	public ParserRule getEveryDoRule() {
		return getEveryDoAccess().getRule();
	}

	//// = 7.5.10 The suspend Statement
	// // -------------------------------------
	// Suspend:
	//	annotations+=Annotation* (weak?="weak"? "suspend") (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?) "when" delay=DelayExpression;
	public EsterelGrammarAccess.SuspendElements getSuspendAccess() {
		return gaEsterel.getSuspendAccess();
	}
	
	public ParserRule getSuspendRule() {
		return getSuspendAccess().getRule();
	}

	//// = 7.5.11 Traps
	// // -------------------------------------
	// Trap:
	//	annotations+=Annotation* "trap" trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)* "in"
	//	(statements+=EsterelParallel | (statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?) trapHandler+=TrapHandler* "end" "trap"?;
	public EsterelGrammarAccess.TrapElements getTrapAccess() {
		return gaEsterel.getTrapAccess();
	}
	
	public ParserRule getTrapRule() {
		return getTrapAccess().getRule();
	}

	//TrapSignal Signal:
	//	{TrapSignal} name=ID (":" (type=EsterelValueType | idType=ID | "combine" (type=EsterelValueType | idType=ID) "with"
	//	(combineFunction=[Function] | combineOperator=EsterelCombineOperator)) | "(" (type=EsterelValueType | idType=ID |
	//	"combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function] |
	//	combineOperator=EsterelCombineOperator)) ")" | ":=" initialValue=Expression ":" (type=EsterelValueType | idType=ID |
	//	"combine" (type=EsterelValueType | idType=ID) "with" (combineFunction=[Function] |
	//	combineOperator=EsterelCombineOperator)))?
	public EsterelGrammarAccess.TrapSignalElements getTrapSignalAccess() {
		return gaEsterel.getTrapSignalAccess();
	}
	
	public ParserRule getTrapSignalRule() {
		return getTrapSignalAccess().getRule();
	}

	//TrapHandler:
	//	annotations+=Annotation* "handle" trapExpr=TrapExpr "do" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?);
	public EsterelGrammarAccess.TrapHandlerElements getTrapHandlerAccess() {
		return gaEsterel.getTrapHandlerAccess();
	}
	
	public ParserRule getTrapHandlerRule() {
		return getTrapHandlerAccess().getRule();
	}

	//Exit:
	//	annotations+=Annotation* "exit" trap=[TrapSignal] ("(" expression=Expression ")")?;
	public EsterelGrammarAccess.ExitElements getExitAccess() {
		return gaEsterel.getExitAccess();
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	//// = 7.5.12 The exec Task Execution Statement
	// // -------------------------------------
	// Exec:
	//	annotations+=Annotation* "exec" (task=[Task] ("(" (referenceParameters+=[Variable] (","
	//	referenceParameters+=[Variable])*)? ")" | '()') ("(" (valueParameters+=Expression (","
	//	valueParameters+=Expression)*)? ")" | '()') "return" returnSignal=[Signal] ("do" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?))? | execCaseList+=ExecCase+) "end" "exec"?;
	public EsterelGrammarAccess.ExecElements getExecAccess() {
		return gaEsterel.getExecAccess();
	}
	
	public ParserRule getExecRule() {
		return getExecAccess().getRule();
	}

	//ExecCase:
	//	annotations+=Annotation* "case" task=[Task] ("(" (referenceParameters+=[Variable] (","
	//	referenceParameters+=[Variable])*)? ")" | '()') ("(" (valueParameters+=Expression (","
	//	valueParameters+=Expression)*)? ")" | '()') "return" returnSignal=[Signal] ("do" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?))?;
	public EsterelGrammarAccess.ExecCaseElements getExecCaseAccess() {
		return gaEsterel.getExecCaseAccess();
	}
	
	public ParserRule getExecCaseRule() {
		return getExecCaseAccess().getRule();
	}

	//// = 7.5.13 Local Signal Declaration    
	// // -------------------------------------
	// LocalSignalDeclaration:
	//	annotations+=Annotation* "signal" valuedObjects+=Signal ("," valuedObjects+=Signal)* "in"
	//	(statements+=EsterelParallel | (statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?) "end" "signal"?;
	public EsterelGrammarAccess.LocalSignalDeclarationElements getLocalSignalDeclarationAccess() {
		return gaEsterel.getLocalSignalDeclarationAccess();
	}
	
	public ParserRule getLocalSignalDeclarationRule() {
		return getLocalSignalDeclarationAccess().getRule();
	}

	//// = 7.5.14 Local Variable Declaration
	// // ------------------------------------- 
	// LocalVariableDeclaration:
	//	annotations+=Annotation* "var" variableDeclarations+=EsterelVariableDeclaration (","
	//	variableDeclarations+=EsterelVariableDeclaration)* "in" (statements+=EsterelParallel |
	//	(statements+=super::InstructionStatement ";" | statements+=super::MetaStatement)*
	//	statements+=super::InstructionStatement?) "end" "var"?;
	public EsterelGrammarAccess.LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return gaEsterel.getLocalVariableDeclarationAccess();
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//EsterelVariableDeclaration:
	//	variables+=Variable ("," variables+=Variable)* ":" type=TypeIdentifier;
	public EsterelGrammarAccess.EsterelVariableDeclarationElements getEsterelVariableDeclarationAccess() {
		return gaEsterel.getEsterelVariableDeclarationAccess();
	}
	
	public ParserRule getEsterelVariableDeclarationRule() {
		return getEsterelVariableDeclarationAccess().getRule();
	}

	//Variable:
	//	name=ID (":=" initialValue=Expression)?;
	public EsterelGrammarAccess.VariableElements getVariableAccess() {
		return gaEsterel.getVariableAccess();
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//// = 7.5.15 The run Module Instantiation Statement
	// // -------------------------------------
	// Run:
	//	annotations+=Annotation* ("run" module=ModuleRenaming ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")? |
	//	"copymodule" module=ModuleRenaming ("[" renamings+=Renamings (";" renamings+=Renamings)* "]")?);
	public EsterelGrammarAccess.RunElements getRunAccess() {
		return gaEsterel.getRunAccess();
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}

	////deprecated
	// ModuleRenaming:
	//	module=[scl::Module] | newName=ID "/" module=[scl::Module];
	public EsterelGrammarAccess.ModuleRenamingElements getModuleRenamingAccess() {
		return gaEsterel.getModuleRenamingAccess();
	}
	
	public ParserRule getModuleRenamingRule() {
		return getModuleRenamingAccess().getRule();
	}

	//Renamings:
	//	annotations+=Annotation* ("type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)* | "constant"
	//	renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)* | "function" renamings+=FunctionRenaming (","
	//	renamings+=FunctionRenaming)* | "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)* | "task"
	//	renamings+=TaskRenaming ("," renamings+=TaskRenaming)* | "signal" renamings+=SignalRenaming (","
	//	renamings+=SignalRenaming)*);
	public EsterelGrammarAccess.RenamingsElements getRenamingsAccess() {
		return gaEsterel.getRenamingsAccess();
	}
	
	public ParserRule getRenamingsRule() {
		return getRenamingsAccess().getRule();
	}

	//TypeRenaming:
	//	(newName=[TypeDefinition] | newType=EsterelValueType) "/" oldName=[TypeDefinition];
	public EsterelGrammarAccess.TypeRenamingElements getTypeRenamingAccess() {
		return gaEsterel.getTypeRenamingAccess();
	}
	
	public ParserRule getTypeRenamingRule() {
		return getTypeRenamingAccess().getRule();
	}

	//ConstantRenaming:
	//	(newName=[Constant] | newValue=AnyValue) "/" oldName=[Constant];
	public EsterelGrammarAccess.ConstantRenamingElements getConstantRenamingAccess() {
		return gaEsterel.getConstantRenamingAccess();
	}
	
	public ParserRule getConstantRenamingRule() {
		return getConstantRenamingAccess().getRule();
	}

	//FunctionRenaming:
	//	(newName=[Function] | newFunc=BuildInFunction) "/" oldName=[Function];
	public EsterelGrammarAccess.FunctionRenamingElements getFunctionRenamingAccess() {
		return gaEsterel.getFunctionRenamingAccess();
	}
	
	public ParserRule getFunctionRenamingRule() {
		return getFunctionRenamingAccess().getRule();
	}

	//ProcedureRenaming:
	//	newName=[Procedure] "/" oldName=[Procedure];
	public EsterelGrammarAccess.ProcedureRenamingElements getProcedureRenamingAccess() {
		return gaEsterel.getProcedureRenamingAccess();
	}
	
	public ParserRule getProcedureRenamingRule() {
		return getProcedureRenamingAccess().getRule();
	}

	//TaskRenaming:
	//	newName=[Task] "/" oldName=[Task];
	public EsterelGrammarAccess.TaskRenamingElements getTaskRenamingAccess() {
		return gaEsterel.getTaskRenamingAccess();
	}
	
	public ParserRule getTaskRenamingRule() {
		return getTaskRenamingAccess().getRule();
	}

	//SignalRenaming:
	//	newName=[Signal] "/" oldName=[Signal];
	public EsterelGrammarAccess.SignalRenamingElements getSignalRenamingAccess() {
		return gaEsterel.getSignalRenamingAccess();
	}
	
	public ParserRule getSignalRenamingRule() {
		return getSignalRenamingAccess().getRule();
	}

	//// renaming can also rename build in types and functions
	// BuildInFunction:
	//	"*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or";
	public EsterelGrammarAccess.BuildInFunctionElements getBuildInFunctionAccess() {
		return gaEsterel.getBuildInFunctionAccess();
	}
	
	public ParserRule getBuildInFunctionRule() {
		return getBuildInFunctionAccess().getRule();
	}

	/// * ###################################################
	// * ###               7.6 Old Syntax                ###
	// * ###################################################
	// * /
	//LegacyDo Do:
	//	annotations+=Annotation* "do" (statements+=EsterelParallel | (statements+=super::InstructionStatement ";" |
	//	statements+=super::MetaStatement)* statements+=super::InstructionStatement?) (annotations+=Annotation* "upto"
	//	delay=DelayExpression | watchingAnnotations+=Annotation* "watching" watching=DelayExpression ("timeout"
	//	((watchingStatements+=Statement ";" | statements+=super::MetaStatement)* watchingStatements+=Statement?) "end"
	//	"timeout"?)?)
	public EsterelGrammarAccess.LegacyDoElements getLegacyDoAccess() {
		return gaEsterel.getLegacyDoAccess();
	}
	
	public ParserRule getLegacyDoRule() {
		return getLegacyDoAccess().getRule();
	}

	//enum EsterelCompareOperator returns kexpressions::OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public EsterelGrammarAccess.EsterelCompareOperatorElements getEsterelCompareOperatorAccess() {
		return gaEsterel.getEsterelCompareOperatorAccess();
	}
	
	public EnumRule getEsterelCompareOperatorRule() {
		return getEsterelCompareOperatorAccess().getRule();
	}

	//enum EsterelPreOperator returns kexpressions::OperatorType:
	//	PRE="pre";
	public EsterelGrammarAccess.EsterelPreOperatorElements getEsterelPreOperatorAccess() {
		return gaEsterel.getEsterelPreOperatorAccess();
	}
	
	public EnumRule getEsterelPreOperatorRule() {
		return getEsterelPreOperatorAccess().getRule();
	}

	//enum EsterelOrOperator returns kexpressions::OperatorType:
	//	LOGICAL_OR="or";
	public EsterelGrammarAccess.EsterelOrOperatorElements getEsterelOrOperatorAccess() {
		return gaEsterel.getEsterelOrOperatorAccess();
	}
	
	public EnumRule getEsterelOrOperatorRule() {
		return getEsterelOrOperatorAccess().getRule();
	}

	//enum EsterelAndOperator returns kexpressions::OperatorType:
	//	LOGICAL_AND="and";
	public EsterelGrammarAccess.EsterelAndOperatorElements getEsterelAndOperatorAccess() {
		return gaEsterel.getEsterelAndOperatorAccess();
	}
	
	public EnumRule getEsterelAndOperatorRule() {
		return getEsterelAndOperatorAccess().getRule();
	}

	//enum EsterelNotOperator returns kexpressions::OperatorType:
	//	NOT="not";
	public EsterelGrammarAccess.EsterelNotOperatorElements getEsterelNotOperatorAccess() {
		return gaEsterel.getEsterelNotOperatorAccess();
	}
	
	public EnumRule getEsterelNotOperatorRule() {
		return getEsterelNotOperatorAccess().getRule();
	}

	//enum EsterelAddOperator returns kexpressions::OperatorType:
	//	ADD="+";
	public EsterelGrammarAccess.EsterelAddOperatorElements getEsterelAddOperatorAccess() {
		return gaEsterel.getEsterelAddOperatorAccess();
	}
	
	public EnumRule getEsterelAddOperatorRule() {
		return getEsterelAddOperatorAccess().getRule();
	}

	//enum EsterelSubOperator returns kexpressions::OperatorType:
	//	SUB="-";
	public EsterelGrammarAccess.EsterelSubOperatorElements getEsterelSubOperatorAccess() {
		return gaEsterel.getEsterelSubOperatorAccess();
	}
	
	public EnumRule getEsterelSubOperatorRule() {
		return getEsterelSubOperatorAccess().getRule();
	}

	//enum EsterelMultOperator returns kexpressions::OperatorType:
	//	MULT="*";
	public EsterelGrammarAccess.EsterelMultOperatorElements getEsterelMultOperatorAccess() {
		return gaEsterel.getEsterelMultOperatorAccess();
	}
	
	public EnumRule getEsterelMultOperatorRule() {
		return getEsterelMultOperatorAccess().getRule();
	}

	//enum EsterelModOperator returns kexpressions::OperatorType:
	//	MOD="mod";
	public EsterelGrammarAccess.EsterelModOperatorElements getEsterelModOperatorAccess() {
		return gaEsterel.getEsterelModOperatorAccess();
	}
	
	public EnumRule getEsterelModOperatorRule() {
		return getEsterelModOperatorAccess().getRule();
	}

	//enum EsterelDivOperator returns kexpressions::OperatorType:
	//	DIV="/";
	public EsterelGrammarAccess.EsterelDivOperatorElements getEsterelDivOperatorAccess() {
		return gaEsterel.getEsterelDivOperatorAccess();
	}
	
	public EnumRule getEsterelDivOperatorRule() {
		return getEsterelDivOperatorAccess().getRule();
	}

	//enum EsterelValueTestOperator returns kexpressions::OperatorType:
	//	VAL="?";
	public EsterelGrammarAccess.EsterelValueTestOperatorElements getEsterelValueTestOperatorAccess() {
		return gaEsterel.getEsterelValueTestOperatorAccess();
	}
	
	public EnumRule getEsterelValueTestOperatorRule() {
		return getEsterelValueTestOperatorAccess().getRule();
	}

	//enum EsterelValueType returns kexpressions::ValueType:
	//	PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned" | INT="integer" | FLOAT="float" | DOUBLE="double" |
	//	STRING="string" | HOST="host";
	public EsterelGrammarAccess.EsterelValueTypeElements getEsterelValueTypeAccess() {
		return gaEsterel.getEsterelValueTypeAccess();
	}
	
	public EnumRule getEsterelValueTypeRule() {
		return getEsterelValueTypeAccess().getRule();
	}

	//enum EsterelCombineOperator returns kexpressions::CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host";
	public EsterelGrammarAccess.EsterelCombineOperatorElements getEsterelCombineOperatorAccess() {
		return gaEsterel.getEsterelCombineOperatorAccess();
	}
	
	public EnumRule getEsterelCombineOperatorRule() {
		return getEsterelCombineOperatorAccess().getRule();
	}

	//terminal STRING:
	//	'"' (!'"' | '"' '"')* '"';
	public TerminalRule getSTRINGRule() {
		return gaEsterel.getSTRINGRule();
	} 

	//terminal HOSTCODE:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getHOSTCODERule() {
		return gaEsterel.getHOSTCODERule();
	} 

	//TrapExpression kexpressions::Expression:
	//	{TrapExpression} "??" trap=[Signal]
	public EsterelGrammarAccess.TrapExpressionElements getTrapExpressionAccess() {
		return gaEsterel.getTrapExpressionAccess();
	}
	
	public ParserRule getTrapExpressionRule() {
		return getTrapExpressionAccess().getRule();
	}

	//EsterelFunctionCall:
	//	function=[Function] ("(" (parameter+=Expression ("," parameter+=Expression)*)? ")" | '()');
	public EsterelGrammarAccess.EsterelFunctionCallElements getEsterelFunctionCallAccess() {
		return gaEsterel.getEsterelFunctionCallAccess();
	}
	
	public ParserRule getEsterelFunctionCallRule() {
		return getEsterelFunctionCallAccess().getRule();
	}

	//ConstantExpression kexpressions::Expression:
	//	{ConstantExpression} (constant=[Constant] | value=AnyValue)
	public EsterelGrammarAccess.ConstantExpressionElements getConstantExpressionAccess() {
		return gaEsterel.getConstantExpressionAccess();
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}

	//// --> B.3.5 Trap Expressions <--
	// // -------------------------------------
	//
	//// The warning can be ignored since the operator will only override itself in this loop.
	// TrapExpr
	//kexpressions::Expression:
	//	TrapAndExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelOrOperator
	//	subExpressions+=TrapAndExpression)+)?
	public EsterelGrammarAccess.TrapExprElements getTrapExprAccess() {
		return gaEsterel.getTrapExprAccess();
	}
	
	public ParserRule getTrapExprRule() {
		return getTrapExprAccess().getRule();
	}

	//// The warning can be ignored since the operator will only override itself in this loop.
	// TrapAndExpression
	//kexpressions::Expression:
	//	TrapNotExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelAndOperator
	//	subExpressions+=TrapNotExpression)+)?
	public EsterelGrammarAccess.TrapAndExpressionElements getTrapAndExpressionAccess() {
		return gaEsterel.getTrapAndExpressionAccess();
	}
	
	public ParserRule getTrapAndExpressionRule() {
		return getTrapAndExpressionAccess().getRule();
	}

	//// The warning can be ignored since the operator will only override itself in this loop.
	// TrapNotExpression
	//kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=EsterelNotOperator subExpressions+=TrapNotExpression |
	//	TrapAtomicExpression
	public EsterelGrammarAccess.TrapNotExpressionElements getTrapNotExpressionAccess() {
		return gaEsterel.getTrapNotExpressionAccess();
	}
	
	public ParserRule getTrapNotExpressionRule() {
		return getTrapNotExpressionAccess().getRule();
	}

	//TrapAtomicExpression kexpressions::Expression:
	//	TrapReferenceExpr | "(" TrapExpression ")"
	public EsterelGrammarAccess.TrapAtomicExpressionElements getTrapAtomicExpressionAccess() {
		return gaEsterel.getTrapAtomicExpressionAccess();
	}
	
	public ParserRule getTrapAtomicExpressionRule() {
		return getTrapAtomicExpressionAccess().getRule();
	}

	//TrapReferenceExpr kexpressions::ValuedObjectReference:
	//	{TrapReference} valuedObject=[TrapSignal]
	public EsterelGrammarAccess.TrapReferenceExprElements getTrapReferenceExprAccess() {
		return gaEsterel.getTrapReferenceExprAccess();
	}
	
	public ParserRule getTrapReferenceExprRule() {
		return getTrapReferenceExprAccess().getRule();
	}

	//// --> B.3.3 Signal Expressions <--
	// // -------------------------------------
	//
	//// The warning can be ignored since the operator will only override itself in this loop.
	// SignalExpression
	//kexpressions::Expression:
	//	SignalAndExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelOrOperator
	//	subExpressions+=SignalAndExpression)+)?
	public EsterelGrammarAccess.SignalExpressionElements getSignalExpressionAccess() {
		return gaEsterel.getSignalExpressionAccess();
	}
	
	public ParserRule getSignalExpressionRule() {
		return getSignalExpressionAccess().getRule();
	}

	//// The warning can be ignored since the operator will only override itself in this loop.
	// SignalAndExpression
	//kexpressions::Expression:
	//	SignalNotExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelAndOperator
	//	subExpressions+=SignalNotExpression)+)?
	public EsterelGrammarAccess.SignalAndExpressionElements getSignalAndExpressionAccess() {
		return gaEsterel.getSignalAndExpressionAccess();
	}
	
	public ParserRule getSignalAndExpressionRule() {
		return getSignalAndExpressionAccess().getRule();
	}

	//// The warning can be ignored since the operator will only override itself in this loop.
	// SignalNotExpression
	//kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=EsterelNotOperator subExpressions+=SignalNotExpression |
	//	SignalAtomicExpression
	public EsterelGrammarAccess.SignalNotExpressionElements getSignalNotExpressionAccess() {
		return gaEsterel.getSignalNotExpressionAccess();
	}
	
	public ParserRule getSignalNotExpressionRule() {
		return getSignalNotExpressionAccess().getRule();
	}

	//SignalAtomicExpression kexpressions::Expression:
	//	"(" SignalExpression ")" | SignalPreExpr | SignalReferenceExpr
	public EsterelGrammarAccess.SignalAtomicExpressionElements getSignalAtomicExpressionAccess() {
		return gaEsterel.getSignalAtomicExpressionAccess();
	}
	
	public ParserRule getSignalAtomicExpressionRule() {
		return getSignalAtomicExpressionAccess().getRule();
	}

	//SignalReferenceExpr kexpressions::ValuedObjectReference:
	//	SignalReferenceExpression | TickSignalExpression
	public EsterelGrammarAccess.SignalReferenceExprElements getSignalReferenceExprAccess() {
		return gaEsterel.getSignalReferenceExprAccess();
	}
	
	public ParserRule getSignalReferenceExprRule() {
		return getSignalReferenceExprAccess().getRule();
	}

	//SignalReferenceExpression kexpressions::ValuedObjectReference:
	//	{SignalReference} valuedObject=[Signal]
	public EsterelGrammarAccess.SignalReferenceExpressionElements getSignalReferenceExpressionAccess() {
		return gaEsterel.getSignalReferenceExpressionAccess();
	}
	
	public ParserRule getSignalReferenceExpressionRule() {
		return getSignalReferenceExpressionAccess().getRule();
	}

	//TickSignalExpression kexpressions::ValuedObjectReference:
	//	{TickReference} 'tick'
	public EsterelGrammarAccess.TickSignalExpressionElements getTickSignalExpressionAccess() {
		return gaEsterel.getTickSignalExpressionAccess();
	}
	
	public ParserRule getTickSignalExpressionRule() {
		return getTickSignalExpressionAccess().getRule();
	}

	//SignalPreExpr kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=EsterelPreOperator '(' subExpressions+=SignalReferenceExpr ')'
	public EsterelGrammarAccess.SignalPreExprElements getSignalPreExprAccess() {
		return gaEsterel.getSignalPreExprAccess();
	}
	
	public ParserRule getSignalPreExprRule() {
		return getSignalPreExprAccess().getRule();
	}

	//// --> B.3.4 Delay Expressions <--
	// // -------------------------------------
	// DelayExpression:
	//	(delay=IntValue | immediate?="immediate")? (expression=SignalReferenceExpr | "[" expression=SignalExpression "]");
	public EsterelGrammarAccess.DelayExpressionElements getDelayExpressionAccess() {
		return gaEsterel.getDelayExpressionAccess();
	}
	
	public ParserRule getDelayExpressionRule() {
		return getDelayExpressionAccess().getRule();
	}

	/// * #########################################################################
	// * 
	// * 
	// * Before the following was an extra plugin named
	// * "KExpressions":  de.cau.cs.kieler.esterel.kexpressions
	// * 
	// * 
	// * #########################################################################
	// * /
	//Expression kexpressions::Expression:
	//	BooleanExpression | ValuedExpression
	public EsterelGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaEsterel.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	// BooleanExpression kexpressions::Expression:
	//	OrExpression
	public EsterelGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaEsterel.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
	//
	//// The warning can be ignored since the operator will only override itself in this loop.
	// OrExpression
	//kexpressions::Expression:
	//	AndExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelOrOperator
	//	subExpressions+=AndExpression)+)?
	public EsterelGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaEsterel.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//// Example: A and B, not C and 42 <= ?D
	//
	//// The warning can be ignored since the operator will only override itself in this loop.
	// AndExpression
	//kexpressions::Expression:
	//	CompareOperation ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelAndOperator
	//	subExpressions+=CompareOperation)+)?
	public EsterelGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaEsterel.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//// Example: 42 <= ?A
	// CompareOperation kexpressions::Expression:
	//	NotOrValuedExpression ({kexpressions::OperatorExpression.subExpressions+=current} operator=EsterelCompareOperator
	//	subExpressions+=NotOrValuedExpression)?
	public EsterelGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaEsterel.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// order IS IMPORTANT
	// NotOrValuedExpression kexpressions::Expression:
	//	ValuedExpression | NotExpression
	public EsterelGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaEsterel.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	// // at the latter we need the parans to indicate the right binding
	//
	//NotExpression kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=EsterelNotOperator subExpressions+=NotExpression |
	//	super::AtomicExpression
	public EsterelGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaEsterel.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	// ValuedExpression kexpressions::Expression:
	//	AddExpression
	public EsterelGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaEsterel.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2
	// // The warning can be ignored since the operator will only override itself in this loop.
	//
	//AddExpression kexpressions::Expression:
	//	SubExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelAddOperator
	//	subExpressions+=SubExpression)+)?
	public EsterelGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaEsterel.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Example: varA - ?B
	// // The warning can be ignored since the operator will only override itself in this loop.
	//
	//SubExpression kexpressions::Expression:
	//	MultExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelSubOperator
	//	subExpressions+=MultExpression)+)?
	public EsterelGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaEsterel.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Example: 2 * 4
	// // The warning can be ignored since the operator will only override itself in this loop.
	//
	//MultExpression kexpressions::Expression:
	//	DivExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=EsterelMultOperator
	//	subExpressions+=DivExpression)+)?
	public EsterelGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaEsterel.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Example: (2 / 4)
	//
	//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
	//
	//DivExpression kexpressions::Expression:
	//	ModExpression ({kexpressions::OperatorExpression.subExpressions+=current} operator=EsterelDivOperator
	//	subExpressions+=ModExpression)?
	public EsterelGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaEsterel.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Example: varA mod ?B
	// ModExpression kexpressions::Expression:
	//	NegExpression ({kexpressions::OperatorExpression.subExpressions+=current} operator=EsterelModOperator
	//	subExpressions+=super::AtomicValuedExpression)?
	public EsterelGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaEsterel.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	// // at the latter we need the parans to indicate the right binding
	//
	//NegExpression kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=EsterelSubOperator subExpressions+=NegExpression |
	//	super::AtomicValuedExpression
	public EsterelGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaEsterel.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
	// ValuedObjectTestExpression kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=EsterelPreOperator '(' subExpressions+=ValuedObjectTestExpression ')' |
	//	{kexpressions::OperatorExpression} operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference |
	//	ValuedObjectReference
	public EsterelGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaEsterel.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//SCLProgram:
	//	pragmas+=Pragma* modules+=Module*;
	public SCLGrammarAccess.SCLProgramElements getSCLProgramAccess() {
		return gaSCL.getSCLProgramAccess();
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}

	//Module:
	//	annotations+=Annotation* => 'module' name=ID ':'? declarations+=Declaration* (statements+=super::InstructionStatement
	//	';' | statements+=super::MetaStatement)* statements+=Statement?;
	public SCLGrammarAccess.ModuleElements getModuleAccess() {
		return gaSCL.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Statement:
	//	super::MetaStatement | super::InstructionStatement;
	public SCLGrammarAccess.StatementElements getStatementAccess() {
		return gaSCL.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//MetaStatement Statement:
	//	Label | ScopeStatement | Conditional
	public SCLGrammarAccess.MetaStatementElements getSCLMetaStatementAccess() {
		return gaSCL.getMetaStatementAccess();
	}
	
	public ParserRule getSCLMetaStatementRule() {
		return getSCLMetaStatementAccess().getRule();
	}

	//Pause:
	//	{Pause} annotations+=Annotation* 'pause';
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Label:
	//	annotations+=Annotation* (name=ID ':');
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Goto:
	//	annotations+=Annotation* 'goto' target=[Label];
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Assignment:
	//	annotations+=Annotation* reference=ValuedObjectReference operator=AssignOperator expression=super::Expression (=>
	//	'schedule' schedule+=ScheduleObjectReference+)?;
	public SCLGrammarAccess.AssignmentElements getSCLAssignmentAccess() {
		return gaSCL.getAssignmentAccess();
	}
	
	public ParserRule getSCLAssignmentRule() {
		return getSCLAssignmentAccess().getRule();
	}

	//Conditional:
	//	annotations+=Annotation* 'if' expression=BoolExpression => '{' declarations+=Declaration*
	//	(statements+=super::InstructionStatement ';' | statements+=super::MetaStatement)* statements+=Statement? '}'
	//	else=ElseScope?;
	public SCLGrammarAccess.ConditionalElements getConditionalAccess() {
		return gaSCL.getConditionalAccess();
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//ElseScope:
	//	{ElseScope} annotations+=Annotation* 'else' '{' declarations+=Declaration* (statements+=super::InstructionStatement
	//	';' | statements+=super::MetaStatement)* statements+=Statement? '}';
	public SCLGrammarAccess.ElseScopeElements getElseScopeAccess() {
		return gaSCL.getElseScopeAccess();
	}
	
	public ParserRule getElseScopeRule() {
		return getElseScopeAccess().getRule();
	}

	//LegacyConditional Conditional:
	//	annotations+=Annotation* 'if' expression=BoolExpression => 'then' (statements+=super::InstructionStatement ';' |
	//	statements+=super::MetaStatement)* statements+=Statement? ('end' | else=LeagacyElseScope)
	public SCLGrammarAccess.LegacyConditionalElements getLegacyConditionalAccess() {
		return gaSCL.getLegacyConditionalAccess();
	}
	
	public ParserRule getLegacyConditionalRule() {
		return getLegacyConditionalAccess().getRule();
	}

	//LeagacyElseScope ElseScope:
	//	{ElseScope} annotations+=Annotation* 'else' (statements+=super::InstructionStatement ';' |
	//	statements+=super::MetaStatement)* statements+=Statement? 'end'
	public SCLGrammarAccess.LeagacyElseScopeElements getLeagacyElseScopeAccess() {
		return gaSCL.getLeagacyElseScopeAccess();
	}
	
	public ParserRule getLeagacyElseScopeRule() {
		return getLeagacyElseScopeAccess().getRule();
	}

	//Thread:
	//	{Thread} (annotations+=Annotation* => '{' declarations+=Declaration* (statements+=super::InstructionStatement ';' |
	//	statements+=super::MetaStatement)* statements+=Statement? '}' | (statements+=super::InstructionStatement ';' |
	//	statements+=super::MetaStatement)* statements+=Statement?);
	public SCLGrammarAccess.ThreadElements getThreadAccess() {
		return gaSCL.getThreadAccess();
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}

	//Parallel:
	//	'fork' (threads+=Thread (=> 'par' threads+=Thread)*) 'join';
	public SCLGrammarAccess.ParallelElements getParallelAccess() {
		return gaSCL.getParallelAccess();
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//ScopeStatement:
	//	{ScopeStatement} annotations+=Annotation* '{' declarations+=Declaration* (statements+=super::InstructionStatement ';'
	//	| statements+=super::MetaStatement)* statements+=Statement? '}';
	public SCLGrammarAccess.ScopeStatementElements getScopeStatementAccess() {
		return gaSCL.getScopeStatementAccess();
	}
	
	public ParserRule getScopeStatementRule() {
		return getScopeStatementAccess().getRule();
	}

	//ModuleCall:
	//	annotations+=Annotation* 'run' module=[Module] ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?;
	public SCLGrammarAccess.ModuleCallElements getModuleCallAccess() {
		return gaSCL.getModuleCallAccess();
	}
	
	public ParserRule getModuleCallRule() {
		return getModuleCallAccess().getRule();
	}

	//Parameter kexpressions::Parameter:
	//	(pureOutput?='!'? callByReference?='&')? expression=super::Expression ('to'
	//	explicitBinding=[kexpressions::ValuedObject] ('[' explicitBindingIndices+=super::Expression ']')*)?
	public SCLGrammarAccess.ParameterElements getParameterAccess() {
		return gaSCL.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	scopes+=RootScope
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//RootScope kext::KExtScope:
	//	{kext::KExtScope} declarations+=Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)*
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}

	//Scope kext::KExtScope:
	//	{kext::KExtScope} name=ID? '{'
	//	declarations+=Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)* '}'
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=super::Expression
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//DeclarationWOSemicolon kexpressions::Declaration:
	//	VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}

	//VariableDeclaration kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableDeclarationWOSemicolon kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}

	//NamespaceID:
	//	ID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}

	//ReferenceDeclaration kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation* ('ref' reference=[annotations::NamedObject|NamespaceID] |
	//	'extern' extern=super::STRING) valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}

	//ReferenceDeclarationWOSemicolon kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation* ('ref' reference=[annotations::NamedObject|NamespaceID] |
	//	'extern' extern=super::STRING) valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}

	//ScheduleDeclaration kexpressions::ScheduleDeclaration:
	//	annotations+=Annotation*
	//	'schedule' name=PrimeID
	//	global=SchedulePriorityType?
	//	priorities+=SchedulePriority*
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}

	//ScheduleDeclarationWOSemicolon kexpressions::ScheduleDeclaration:
	//	annotations+=Annotation*
	//	'schedule' name=PrimeID
	//	global=SchedulePriorityType?
	//	priorities+=SchedulePriority*
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}

	//SchedulePriority kexpressions::SchedulePriority:
	//	'prio' priority=INT type=SchedulePriorityType
	public KExtGrammarAccess.SchedulePriorityElements getSchedulePriorityAccess() {
		return gaKExt.getSchedulePriorityAccess();
	}
	
	public ParserRule getSchedulePriorityRule() {
		return getSchedulePriorityAccess().getRule();
	}

	//enum SchedulePriorityType returns kexpressions::SchedulePriorityType:
	//	CONFLICT="conflict" | CONFLUENT="confluent";
	public KExtGrammarAccess.SchedulePriorityTypeElements getSchedulePriorityTypeAccess() {
		return gaKExt.getSchedulePriorityTypeAccess();
	}
	
	public EnumRule getSchedulePriorityTypeRule() {
		return getSchedulePriorityTypeAccess().getRule();
	}

	////ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
	////    annotations+=Annotation*
	////    (
	////        'ref' reference = [kexpressions::Identifiable|NamespaceID]
	////        valuedObjects+=ValuedObject (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
	////        (',' valuedObjects+=ValuedObject (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?)* 
	////        ';'
	////    ) | (
	////        'extern' extern = STRING
	////        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	////    );
	////    
	////ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
	////    annotations+=Annotation*
	////    (
	////        'ref' reference = [kexpressions::Identifiable|NamespaceID]
	////        valuedObjects+=ValuedObject (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?
	////        (',' valuedObjects+=ValuedObject (('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')?)* 
	////    ) | (
	////        'extern' extern = STRING
	////        valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	////    );
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	annotations+=QuotedStringAnnotation*
	//	name=PrimeID ('[' cardinalities+=super::Expression ']')* ('=' initialValue=super::Expression)? ('combine'
	//	combineOperator=CombineOperator)?
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect keffects::Effect:
	//	super::Assignment | PostfixEffect | Emission | HostcodeEffect | ReferenceCallEffect | FunctionCallEffect |
	//	PrintCallEffect
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission keffects::Emission:
	//	annotations+=QuotedStringAnnotation*
	//	reference=ValuedObjectReference ("(" newValue=super::Expression ")")? ('schedule'
	//	schedule+=ScheduleObjectReference+)?
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaKEffects.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*    
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;	 
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=PostfixOperator ('schedule' schedule+=ScheduleObjectReference+)?
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=super::HOSTCODE
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect keffects::ReferenceCallEffect:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject|PrimeID] ('(' parameters+=super::Parameter (','
	//	parameters+=super::Parameter)* ')' | '()')
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation* ('extern' functionName=ID ('(' parameters+=super::Parameter (','
	//	parameters+=super::Parameter)* ')'
	//	| '()')) | '<' functionName=ID ('(' parameters+=super::Parameter (',' parameters+=super::Parameter)* ')'
	//	| '()')
	//	'>'
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//PrintCallEffect keffects::PrintCallEffect:
	//	annotations+=Annotation*
	//	'print' parameters+=super::Parameter (',' parameters+=super::Parameter)*
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}

	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//	ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
	//	ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
	//	ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	/// * Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// * / // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	super::Expression
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression) ('||' subExpressions+=LogicalAndExpression)*)?
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression) ('&&' subExpressions+=BitwiseOrExpression)*)?
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseXOrExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseXOrExpression) ('|' subExpressions+=BitwiseXOrExpression)*)?
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseXOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseXOrOperator
	//	subExpressions+=BitwiseAndExpression) ('^' subExpressions+=BitwiseAndExpression)*)?
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	super::CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=super::CompareOperation) ('&' subExpressions+=super::CompareOperation)*)?
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//BitwiseNotExpression Expression:
	//	{OperatorExpression} operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression | super::AtomicExpression
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}

	//ShiftLeftExpression Expression:
	//	ShiftRightExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftLeftOperator
	//	subExpressions+=ShiftRightExpression) ('<<' subExpressions+=ShiftRightExpression)*)?
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}

	//ShiftRightExpression Expression:
	//	ShiftRightUnsignedExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightOperator
	//	subExpressions+=ShiftRightUnsignedExpression) ('>>' subExpressions+=ShiftRightUnsignedExpression)*)?
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}

	//ShiftRightUnsignedExpression Expression:
	//	super::AddExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightUnsignedOperator
	//	subExpressions+=super::AddExpression) ('>>>' subExpressions+=super::AddExpression)*)?
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}

	//TernaryOperation Expression:
	//	{OperatorExpression} subExpressions+=super::AtomicValuedExpression operator=ConditionalOperator
	//	subExpressions+=super::AtomicValuedExpression ':' subExpressions+=super::AtomicValuedExpression
	//	| super::AtomicValuedExpression
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}

	//// ID with primes
	//PrimeID:
	//	ID "'"*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] ('[' indices+=super::Expression ']')* ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//ScheduleObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}

	//// Reference Call Rule
	//// Calls to references. They may include a parameter list. 
	//ReferenceCall:
	//	valuedObject=[ValuedObject|PrimeID] ('(' parameters+=super::Parameter (',' parameters+=super::Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//// Deprecated?
	//FunctionCall:
	//	'extern' functionName=ID ('(' parameters+=super::Parameter (',' parameters+=super::Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	text=super::HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//StringValue:
	//	value=super::STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//VectorValue:
	//	'{' values+=VectorValueMember (',' values+=VectorValueMember)* '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}

	//VectorValueMember Expression:
	//	BoolExpression | super::ValuedExpression | IgnoreValue
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}

	//IgnoreValue:
	//	{IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}

	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | super::STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//AnyValue Value:
	//	IntValue | FloatValue | BoolValue | StringValue
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum BitwiseNotOperator returns OperatorType:
	//	BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}

	//enum BitwiseXOrOperator returns OperatorType:
	//	BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}

	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//enum ShiftLeftOperator returns OperatorType:
	//	SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}

	//enum ShiftRightOperator returns OperatorType:
	//	SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}

	//enum ShiftRightUnsignedOperator returns OperatorType:
	//	SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}

	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//enum ConditionalOperator returns OperatorType:
	//	CONDITIONAL="?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}

	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// General rule for pragmas
	//// We only have string and tag pragmas.    
	//Pragma:
	//	StringPragma | PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}

	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations. 
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	//RestrictedTypeAnnotation Annotation:
	//	CommentAnnotation | RestrictedKeyStringValueAnnotation | RestrictedTypedKeyStringValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}

	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//QuotedStringAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	//// e.g.: / ** semantic comment * /
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//CommentAnnotatonSL CommentAnnotation:
	//	values+=SL_COMMENT_ANNOTATION
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}

	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation Annotation:
	//	'@' name=ExtendedID
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//PragmaTag Pragma:
	//	'#' name=ExtendedID
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}

	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//RestrictedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}

	//StringPragma:
	//	'#' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringAllTypes (',' values+=EStringAllTypes)*
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//RestrictedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=super::STRING (',' values+=super::STRING)*
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=super::STRING (',' values+=super::STRING)*
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	super::STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean:
	//	super::STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//EStringAllTypes:
	//	super::STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}

	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID (('.' | '-') ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//QualifiedID:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//terminal COMMENT_ANNOTATION:
	//	'/ **'->'* /';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//terminal SL_COMMENT_ANNOTATION:
	//	'// *' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//terminal ID:
	//	'^'? (('_'? 'a'..'z' | '_'? 'A'..'Z') | '_' '0'..'9' | '__') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
