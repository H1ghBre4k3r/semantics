/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.Pragma;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.StringPragma;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.esterel.Abort;
import de.cau.cs.kieler.esterel.Await;
import de.cau.cs.kieler.esterel.Block;
import de.cau.cs.kieler.esterel.Case;
import de.cau.cs.kieler.esterel.Constant;
import de.cau.cs.kieler.esterel.ConstantDeclaration;
import de.cau.cs.kieler.esterel.ConstantExpression;
import de.cau.cs.kieler.esterel.ConstantRenaming;
import de.cau.cs.kieler.esterel.DelayExpression;
import de.cau.cs.kieler.esterel.Do;
import de.cau.cs.kieler.esterel.ElsIf;
import de.cau.cs.kieler.esterel.Emit;
import de.cau.cs.kieler.esterel.EsterelFunctionCall;
import de.cau.cs.kieler.esterel.EsterelPackage;
import de.cau.cs.kieler.esterel.EsterelParallel;
import de.cau.cs.kieler.esterel.EsterelProgram;
import de.cau.cs.kieler.esterel.EsterelThread;
import de.cau.cs.kieler.esterel.EsterelVariableDeclaration;
import de.cau.cs.kieler.esterel.EveryDo;
import de.cau.cs.kieler.esterel.Exec;
import de.cau.cs.kieler.esterel.ExecCase;
import de.cau.cs.kieler.esterel.Exit;
import de.cau.cs.kieler.esterel.Function;
import de.cau.cs.kieler.esterel.FunctionDeclaration;
import de.cau.cs.kieler.esterel.FunctionRenaming;
import de.cau.cs.kieler.esterel.Halt;
import de.cau.cs.kieler.esterel.IfTest;
import de.cau.cs.kieler.esterel.InputDeclaration;
import de.cau.cs.kieler.esterel.InputOutputDeclaration;
import de.cau.cs.kieler.esterel.LocalSignalDeclaration;
import de.cau.cs.kieler.esterel.LocalVariableDeclaration;
import de.cau.cs.kieler.esterel.Loop;
import de.cau.cs.kieler.esterel.ModuleRenaming;
import de.cau.cs.kieler.esterel.Nothing;
import de.cau.cs.kieler.esterel.OutputDeclaration;
import de.cau.cs.kieler.esterel.Present;
import de.cau.cs.kieler.esterel.PresentCase;
import de.cau.cs.kieler.esterel.Procedure;
import de.cau.cs.kieler.esterel.ProcedureCall;
import de.cau.cs.kieler.esterel.ProcedureDeclaration;
import de.cau.cs.kieler.esterel.ProcedureRenaming;
import de.cau.cs.kieler.esterel.RelationDeclaration;
import de.cau.cs.kieler.esterel.RelationImplication;
import de.cau.cs.kieler.esterel.RelationIncompatibility;
import de.cau.cs.kieler.esterel.Renamings;
import de.cau.cs.kieler.esterel.Repeat;
import de.cau.cs.kieler.esterel.ReturnDeclaration;
import de.cau.cs.kieler.esterel.Run;
import de.cau.cs.kieler.esterel.Sensor;
import de.cau.cs.kieler.esterel.SensorDeclaration;
import de.cau.cs.kieler.esterel.Signal;
import de.cau.cs.kieler.esterel.SignalReference;
import de.cau.cs.kieler.esterel.SignalRenaming;
import de.cau.cs.kieler.esterel.Suspend;
import de.cau.cs.kieler.esterel.Sustain;
import de.cau.cs.kieler.esterel.Task;
import de.cau.cs.kieler.esterel.TaskDeclaration;
import de.cau.cs.kieler.esterel.TaskRenaming;
import de.cau.cs.kieler.esterel.TickReference;
import de.cau.cs.kieler.esterel.Trap;
import de.cau.cs.kieler.esterel.TrapExpression;
import de.cau.cs.kieler.esterel.TrapHandler;
import de.cau.cs.kieler.esterel.TrapReference;
import de.cau.cs.kieler.esterel.TrapSignal;
import de.cau.cs.kieler.esterel.TypeDeclaration;
import de.cau.cs.kieler.esterel.TypeDefinition;
import de.cau.cs.kieler.esterel.TypeIdentifier;
import de.cau.cs.kieler.esterel.TypeRenaming;
import de.cau.cs.kieler.esterel.Variable;
import de.cau.cs.kieler.esterel.services.EsterelGrammarAccess;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.IgnoreValue;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.ReferenceCall;
import de.cau.cs.kieler.kexpressions.ReferenceDeclaration;
import de.cau.cs.kieler.kexpressions.ScheduleDeclaration;
import de.cau.cs.kieler.kexpressions.ScheduleObjectReference;
import de.cau.cs.kieler.kexpressions.SchedulePriority;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ValuedObject;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.VariableDeclaration;
import de.cau.cs.kieler.kexpressions.VectorValue;
import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;
import de.cau.cs.kieler.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.kexpressions.keffects.PrintCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.ReferenceCallEffect;
import de.cau.cs.kieler.kexpressions.kext.AnnotatedExpression;
import de.cau.cs.kieler.kexpressions.kext.KExtPackage;
import de.cau.cs.kieler.kexpressions.kext.KExtScope;
import de.cau.cs.kieler.kexpressions.kext.Kext;
import de.cau.cs.kieler.kexpressions.kext.TestEntity;
import de.cau.cs.kieler.scl.Conditional;
import de.cau.cs.kieler.scl.ElseScope;
import de.cau.cs.kieler.scl.Goto;
import de.cau.cs.kieler.scl.Label;
import de.cau.cs.kieler.scl.Module;
import de.cau.cs.kieler.scl.ModuleCall;
import de.cau.cs.kieler.scl.Parallel;
import de.cau.cs.kieler.scl.Pause;
import de.cau.cs.kieler.scl.SCLPackage;
import de.cau.cs.kieler.scl.SCLProgram;
import de.cau.cs.kieler.scl.ScopeStatement;
import de.cau.cs.kieler.scl.serializer.SCLSemanticSequencer;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractEsterelSemanticSequencer extends SCLSemanticSequencer {

	@Inject
	private EsterelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getCommentAnnotationRule()) {
					sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommentAnnotatonSLRule()) {
					sequence_CommentAnnotatonSL(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.PRAGMA:
				sequence_PragmaTag(context, (Pragma) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedKeyStringValueAnnotationRule()) {
					sequence_RestrictedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.STRING_PRAGMA:
				sequence_StringPragma(context, (StringPragma) semanticObject); 
				return; 
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()) {
					sequence_RestrictedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == EsterelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EsterelPackage.ABORT:
				sequence_Abort(context, (Abort) semanticObject); 
				return; 
			case EsterelPackage.AWAIT:
				sequence_Await(context, (Await) semanticObject); 
				return; 
			case EsterelPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case EsterelPackage.CASE:
				sequence_Case(context, (Case) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_DECLARATION:
				sequence_ConstantDeclaration(context, (ConstantDeclaration) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_EXPRESSION:
				sequence_ConstantExpression(context, (ConstantExpression) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_RENAMING:
				sequence_ConstantRenaming(context, (ConstantRenaming) semanticObject); 
				return; 
			case EsterelPackage.DELAY_EXPRESSION:
				sequence_DelayExpression(context, (DelayExpression) semanticObject); 
				return; 
			case EsterelPackage.DO:
				sequence_LegacyDo(context, (Do) semanticObject); 
				return; 
			case EsterelPackage.ELS_IF:
				sequence_ElsIf(context, (ElsIf) semanticObject); 
				return; 
			case EsterelPackage.EMIT:
				sequence_Emit(context, (Emit) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_FUNCTION_CALL:
				sequence_EsterelFunctionCall(context, (EsterelFunctionCall) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_PARALLEL:
				sequence_EsterelParallel(context, (EsterelParallel) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_PROGRAM:
				sequence_EsterelProgram(context, (EsterelProgram) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_THREAD:
				sequence_EsterelThread(context, (EsterelThread) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_VARIABLE_DECLARATION:
				sequence_EsterelVariableDeclaration(context, (EsterelVariableDeclaration) semanticObject); 
				return; 
			case EsterelPackage.EVERY_DO:
				sequence_EveryDo(context, (EveryDo) semanticObject); 
				return; 
			case EsterelPackage.EXEC:
				sequence_Exec(context, (Exec) semanticObject); 
				return; 
			case EsterelPackage.EXEC_CASE:
				sequence_ExecCase(context, (ExecCase) semanticObject); 
				return; 
			case EsterelPackage.EXIT:
				sequence_Exit(context, (Exit) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION_DECLARATION:
				sequence_FunctionDeclaration(context, (FunctionDeclaration) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION_RENAMING:
				sequence_FunctionRenaming(context, (FunctionRenaming) semanticObject); 
				return; 
			case EsterelPackage.HALT:
				sequence_Halt(context, (Halt) semanticObject); 
				return; 
			case EsterelPackage.IF_TEST:
				sequence_IfTest(context, (IfTest) semanticObject); 
				return; 
			case EsterelPackage.INPUT_DECLARATION:
				sequence_InputDeclaration(context, (InputDeclaration) semanticObject); 
				return; 
			case EsterelPackage.INPUT_OUTPUT_DECLARATION:
				sequence_InputOutputDeclaration(context, (InputOutputDeclaration) semanticObject); 
				return; 
			case EsterelPackage.LOCAL_SIGNAL_DECLARATION:
				sequence_LocalSignalDeclaration(context, (LocalSignalDeclaration) semanticObject); 
				return; 
			case EsterelPackage.LOCAL_VARIABLE_DECLARATION:
				sequence_LocalVariableDeclaration(context, (LocalVariableDeclaration) semanticObject); 
				return; 
			case EsterelPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case EsterelPackage.MODULE_RENAMING:
				sequence_ModuleRenaming(context, (ModuleRenaming) semanticObject); 
				return; 
			case EsterelPackage.NOTHING:
				sequence_Nothing(context, (Nothing) semanticObject); 
				return; 
			case EsterelPackage.OUTPUT_DECLARATION:
				sequence_OutputDeclaration(context, (OutputDeclaration) semanticObject); 
				return; 
			case EsterelPackage.PRESENT:
				sequence_Present(context, (Present) semanticObject); 
				return; 
			case EsterelPackage.PRESENT_CASE:
				sequence_PresentCase(context, (PresentCase) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE:
				sequence_Procedure(context, (Procedure) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE_CALL:
				sequence_ProcedureCall(context, (ProcedureCall) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE_DECLARATION:
				sequence_ProcedureDeclaration(context, (ProcedureDeclaration) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE_RENAMING:
				sequence_ProcedureRenaming(context, (ProcedureRenaming) semanticObject); 
				return; 
			case EsterelPackage.RELATION_DECLARATION:
				sequence_RelationDeclaration(context, (RelationDeclaration) semanticObject); 
				return; 
			case EsterelPackage.RELATION_IMPLICATION:
				sequence_RelationImplication(context, (RelationImplication) semanticObject); 
				return; 
			case EsterelPackage.RELATION_INCOMPATIBILITY:
				sequence_RelationIncompatibility(context, (RelationIncompatibility) semanticObject); 
				return; 
			case EsterelPackage.RENAMINGS:
				sequence_Renamings(context, (Renamings) semanticObject); 
				return; 
			case EsterelPackage.REPEAT:
				sequence_Repeat(context, (Repeat) semanticObject); 
				return; 
			case EsterelPackage.RETURN_DECLARATION:
				sequence_ReturnDeclaration(context, (ReturnDeclaration) semanticObject); 
				return; 
			case EsterelPackage.RUN:
				sequence_Run(context, (Run) semanticObject); 
				return; 
			case EsterelPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case EsterelPackage.SENSOR_DECLARATION:
				sequence_SensorDeclaration(context, (SensorDeclaration) semanticObject); 
				return; 
			case EsterelPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case EsterelPackage.SIGNAL_REFERENCE:
				sequence_SignalReferenceExpression(context, (SignalReference) semanticObject); 
				return; 
			case EsterelPackage.SIGNAL_RENAMING:
				sequence_SignalRenaming(context, (SignalRenaming) semanticObject); 
				return; 
			case EsterelPackage.SUSPEND:
				sequence_Suspend(context, (Suspend) semanticObject); 
				return; 
			case EsterelPackage.SUSTAIN:
				sequence_Sustain(context, (Sustain) semanticObject); 
				return; 
			case EsterelPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case EsterelPackage.TASK_DECLARATION:
				sequence_TaskDeclaration(context, (TaskDeclaration) semanticObject); 
				return; 
			case EsterelPackage.TASK_RENAMING:
				sequence_TaskRenaming(context, (TaskRenaming) semanticObject); 
				return; 
			case EsterelPackage.TICK_REFERENCE:
				sequence_TickSignalExpression(context, (TickReference) semanticObject); 
				return; 
			case EsterelPackage.TRAP:
				sequence_Trap(context, (Trap) semanticObject); 
				return; 
			case EsterelPackage.TRAP_EXPRESSION:
				sequence_TrapExpression(context, (TrapExpression) semanticObject); 
				return; 
			case EsterelPackage.TRAP_HANDLER:
				sequence_TrapHandler(context, (TrapHandler) semanticObject); 
				return; 
			case EsterelPackage.TRAP_REFERENCE:
				sequence_TrapReferenceExpr(context, (TrapReference) semanticObject); 
				return; 
			case EsterelPackage.TRAP_SIGNAL:
				sequence_TrapSignal(context, (TrapSignal) semanticObject); 
				return; 
			case EsterelPackage.TYPE_DECLARATION:
				sequence_TypeDeclaration(context, (TypeDeclaration) semanticObject); 
				return; 
			case EsterelPackage.TYPE_DEFINITION:
				sequence_TypeDefinition(context, (TypeDefinition) semanticObject); 
				return; 
			case EsterelPackage.TYPE_IDENTIFIER:
				sequence_TypeIdentifier(context, (TypeIdentifier) semanticObject); 
				return; 
			case EsterelPackage.TYPE_RENAMING:
				sequence_TypeRenaming(context, (TypeRenaming) semanticObject); 
				return; 
			case EsterelPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		else if (epackage == KEffectsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				sequence_PostfixEffect(context, (Assignment) semanticObject); 
				return; 
			case KEffectsPackage.EMISSION:
				sequence_Emission(context, (Emission) semanticObject); 
				return; 
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			case KEffectsPackage.PRINT_CALL_EFFECT:
				sequence_PrintCallEffect(context, (PrintCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.REFERENCE_CALL_EFFECT:
				sequence_ReferenceCallEffect(context, (ReferenceCallEffect) semanticObject); 
				return; 
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.IGNORE_VALUE:
				sequence_IgnoreValue(context, (IgnoreValue) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_LogicalAndExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseXOrExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBitwiseNotExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseNotExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getShiftLeftExpressionRule()) {
					sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_ShiftLeftExpression_ShiftRightExpression_ShiftRightUnsignedExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()) {
					sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_ShiftRightExpression_ShiftRightUnsignedExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()) {
					sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_ShiftRightUnsignedExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTernaryOperationRule()) {
					sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_TernaryOperation_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBooleanExpressionRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSignalExpressionRule()
						|| action == grammarAccess.getSignalExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSignalAndExpressionRule()
						|| action == grammarAccess.getSignalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSignalNotExpressionRule()
						|| rule == grammarAccess.getSignalAtomicExpressionRule()) {
					sequence_SignalAndExpression_SignalExpression_SignalNotExpression_SignalPreExpr(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSignalPreExprRule()) {
					sequence_SignalPreExpr(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrapExprRule()) {
					sequence_TrapAndExpression_TrapExpr_TrapNotExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getTrapExprAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTrapAndExpressionRule()) {
					sequence_TrapAndExpression_TrapNotExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getTrapAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTrapNotExpressionRule()) {
					sequence_TrapNotExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.REFERENCE_CALL:
				sequence_ReferenceCall(context, (ReferenceCall) semanticObject); 
				return; 
			case KExpressionsPackage.REFERENCE_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getReferenceDeclarationWOSemicolonRule()) {
					sequence_ReferenceDeclarationWOSemicolon(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getReferenceDeclarationRule()) {
					sequence_ReferenceDeclaration(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getScheduleDeclarationWOSemicolonRule()) {
					sequence_ScheduleDeclarationWOSemicolon(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getScheduleDeclarationRule()) {
					sequence_ScheduleDeclaration(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_OBJECT_REFERENCE:
				sequence_ScheduleObjectReference(context, (ScheduleObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.SCHEDULE_PRIORITY:
				sequence_SchedulePriority(context, (SchedulePriority) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT:
				sequence_ValuedObject(context, (ValuedObject) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				if (rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBooleanExpressionRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getValuedObjectTestExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getValuedObjectReferenceRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVariableReferenceRule()) {
					sequence_VariableReference(context, (ValuedObjectReference) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VARIABLE_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getVariableDeclarationWOSemicolonRule()) {
					sequence_VariableDeclarationWOSemicolon(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getVariableDeclarationRule()) {
					sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VECTOR_VALUE:
				sequence_VectorValue(context, (VectorValue) semanticObject); 
				return; 
			}
		else if (epackage == KExtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExtPackage.ANNOTATED_EXPRESSION:
				sequence_AnnotatedExpression(context, (AnnotatedExpression) semanticObject); 
				return; 
			case KExtPackage.KEXT_SCOPE:
				if (rule == grammarAccess.getRootScopeRule()) {
					sequence_RootScope(context, (KExtScope) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getScopeRule()) {
					sequence_Scope(context, (KExtScope) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.KEXT:
				sequence_Kext(context, (Kext) semanticObject); 
				return; 
			case KExtPackage.TEST_ENTITY:
				sequence_TestEntity(context, (TestEntity) semanticObject); 
				return; 
			}
		else if (epackage == SCLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SCLPackage.ASSIGNMENT:
				sequence_Assignment(context, (de.cau.cs.kieler.scl.Assignment) semanticObject); 
				return; 
			case SCLPackage.CONDITIONAL:
				if (rule == grammarAccess.getConditionalRule()) {
					sequence_Conditional(context, (Conditional) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLegacyConditionalRule()) {
					sequence_LegacyConditional(context, (Conditional) semanticObject); 
					return; 
				}
				else break;
			case SCLPackage.ELSE_SCOPE:
				if (rule == grammarAccess.getElseScopeRule()) {
					sequence_ElseScope(context, (ElseScope) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getLeagacyElseScopeRule()) {
					sequence_LeagacyElseScope(context, (ElseScope) semanticObject); 
					return; 
				}
				else break;
			case SCLPackage.GOTO:
				sequence_Goto(context, (Goto) semanticObject); 
				return; 
			case SCLPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case SCLPackage.MODULE:
				if (rule == grammarAccess.getEsterelModuleRule()) {
					sequence_EsterelModule(context, (Module) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModuleRule()) {
					sequence_Module(context, (Module) semanticObject); 
					return; 
				}
				else break;
			case SCLPackage.MODULE_CALL:
				sequence_ModuleCall(context, (ModuleCall) semanticObject); 
				return; 
			case SCLPackage.PARALLEL:
				sequence_Parallel(context, (Parallel) semanticObject); 
				return; 
			case SCLPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case SCLPackage.SCL_PROGRAM:
				sequence_SCLProgram(context, (SCLProgram) semanticObject); 
				return; 
			case SCLPackage.SCOPE_STATEMENT:
				sequence_ScopeStatement(context, (ScopeStatement) semanticObject); 
				return; 
			case SCLPackage.THREAD:
				sequence_Thread(context, (de.cau.cs.kieler.scl.Thread) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Abort
	 *     EsterelParallel returns Abort
	 *     EsterelParallel.EsterelParallel_1_0 returns Abort
	 *     EsterelThread returns Abort
	 *     EsterelThread.EsterelThread_1_0 returns Abort
	 *     Abort returns Abort
	 *     Statement returns Abort
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         weak?='weak'? 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))? 
	 *         (
	 *             (
	 *                 delay=DelayExpression 
	 *                 (doStatements+=EsterelParallel | ((doStatements+=InstructionStatement | doStatements+=MetaStatement)* doStatements+=InstructionStatement?))?
	 *             ) | 
	 *             delay=DelayExpression | 
	 *             cases+=Case+
	 *         )
	 *     )
	 */
	protected void sequence_Abort(ISerializationContext context, Abort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BoolExpression returns OperatorExpression
	 *     LogicalOrExpression returns OperatorExpression
	 *     VectorValueMember returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalAndExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_LogicalAndExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseOrExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseXOrExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseXOrExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseAndExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BitwiseNotExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression)
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseNotExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShiftLeftExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=ShiftLeftExpression_OperatorExpression_1_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=ShiftRightExpression 
	 *             subExpressions+=ShiftRightExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftRightExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=ShiftRightUnsignedExpression 
	 *             subExpressions+=ShiftRightUnsignedExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftRightUnsignedExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=AddExpression 
	 *             subExpressions+=AddExpression*
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_ShiftLeftExpression_ShiftRightExpression_ShiftRightUnsignedExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=ShiftRightExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=ShiftRightUnsignedExpression 
	 *             subExpressions+=ShiftRightUnsignedExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftRightUnsignedExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=AddExpression 
	 *             subExpressions+=AddExpression*
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_ShiftRightExpression_ShiftRightUnsignedExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShiftRightExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightUnsignedExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=ShiftRightUnsignedExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=AddExpression 
	 *             subExpressions+=AddExpression*
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_ShiftRightUnsignedExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TernaryOperation returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (
	 *             subExpressions+=AtomicValuedExpression 
	 *             operator=ConditionalOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression
	 *         )
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_TernaryOperation_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns OperatorExpression
	 *     Expression returns OperatorExpression
	 *     BooleanExpression returns OperatorExpression
	 *     OrExpression returns OperatorExpression
	 *     OrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AndExpression returns OperatorExpression
	 *     AndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     CompareOperation returns OperatorExpression
	 *     CompareOperation.OperatorExpression_1_0 returns OperatorExpression
	 *     NotOrValuedExpression returns OperatorExpression
	 *     NotExpression returns OperatorExpression
	 *     ValuedExpression returns OperatorExpression
	 *     AddExpression returns OperatorExpression
	 *     AddExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SubExpression returns OperatorExpression
	 *     SubExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultExpression returns OperatorExpression
	 *     MultExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     DivExpression returns OperatorExpression
	 *     DivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ModExpression returns OperatorExpression
	 *     ModExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     NegExpression returns OperatorExpression
	 *     AtomicValuedExpression returns OperatorExpression
	 *     Root returns OperatorExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=EsterelCompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=EsterelNotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=EsterelAddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=EsterelSubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=EsterelMultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=EsterelDivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=EsterelModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=EsterelSubOperator subExpressions+=NegExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference)
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Assignment
	 *     EsterelParallel returns Assignment
	 *     EsterelParallel.EsterelParallel_1_0 returns Assignment
	 *     EsterelThread returns Assignment
	 *     EsterelThread.EsterelThread_1_0 returns Assignment
	 *     Assignment returns Assignment
	 *     Statement returns Assignment
	 *     Effect returns Assignment
	 *
	 * Constraint:
	 *     (reference=VariableReference expression=Expression)
	 */
	protected void sequence_Assignment(ISerializationContext context, de.cau.cs.kieler.scl.Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__REFERENCE));
			if (transientValues.isValueTransient(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getReferenceVariableReferenceParserRuleCall_0_0(), semanticObject.getReference());
		feeder.accept(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Await
	 *     EsterelParallel returns Await
	 *     EsterelParallel.EsterelParallel_1_0 returns Await
	 *     EsterelThread returns Await
	 *     EsterelThread.EsterelThread_1_0 returns Await
	 *     Await returns Await
	 *     Statement returns Await
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (
	 *                 delay=DelayExpression 
	 *                 (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *             ) | 
	 *             cases+=Case+
	 *         )
	 *     )
	 */
	protected void sequence_Await(ISerializationContext context, Await semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Block
	 *     EsterelParallel returns Block
	 *     EsterelParallel.EsterelParallel_1_0 returns Block
	 *     EsterelThread returns Block
	 *     EsterelThread.EsterelThread_1_0 returns Block
	 *     Block returns Block
	 *     Statement returns Block
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Case returns Case
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         delay=DelayExpression 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_Case(ISerializationContext context, Case semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns ConstantDeclaration
	 *     ConstantDeclaration returns ConstantDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* constants+=Constant constants+=Constant*)
	 */
	protected void sequence_ConstantDeclaration(ISerializationContext context, ConstantDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns ConstantExpression
	 *     ConstantExpression returns ConstantExpression
	 *     Expression returns ConstantExpression
	 *     BooleanExpression returns ConstantExpression
	 *     OrExpression returns ConstantExpression
	 *     OrExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     AndExpression returns ConstantExpression
	 *     AndExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     CompareOperation returns ConstantExpression
	 *     CompareOperation.OperatorExpression_1_0 returns ConstantExpression
	 *     NotOrValuedExpression returns ConstantExpression
	 *     NotExpression returns ConstantExpression
	 *     ValuedExpression returns ConstantExpression
	 *     AddExpression returns ConstantExpression
	 *     AddExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     SubExpression returns ConstantExpression
	 *     SubExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     MultExpression returns ConstantExpression
	 *     MultExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     DivExpression returns ConstantExpression
	 *     DivExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     ModExpression returns ConstantExpression
	 *     ModExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     NegExpression returns ConstantExpression
	 *     AtomicValuedExpression returns ConstantExpression
	 *     Root returns ConstantExpression
	 *     BoolExpression returns ConstantExpression
	 *     LogicalOrExpression returns ConstantExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     LogicalAndExpression returns ConstantExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     BitwiseOrExpression returns ConstantExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     BitwiseXOrExpression returns ConstantExpression
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     BitwiseAndExpression returns ConstantExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     BitwiseNotExpression returns ConstantExpression
	 *     ShiftLeftExpression returns ConstantExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     ShiftRightExpression returns ConstantExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     ShiftRightUnsignedExpression returns ConstantExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     TernaryOperation returns ConstantExpression
	 *     VectorValueMember returns ConstantExpression
	 *
	 * Constraint:
	 *     (constant=[Constant|ID] | value=AnyValue)
	 */
	protected void sequence_ConstantExpression(ISerializationContext context, ConstantExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstantRenaming returns ConstantRenaming
	 *
	 * Constraint:
	 *     ((newName=[Constant|ID] | newValue=AnyValue) oldName=[Constant|ID])
	 */
	protected void sequence_ConstantRenaming(ISerializationContext context, ConstantRenaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     (name=ID initialValue=AnyValue? type=TypeIdentifier)
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DelayExpression returns DelayExpression
	 *
	 * Constraint:
	 *     ((delay=IntValue | immediate?='immediate')? (expression=SignalReferenceExpr | expression=SignalExpression))
	 */
	protected void sequence_DelayExpression(ISerializationContext context, DelayExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElsIf returns ElsIf
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         expression=Expression 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_ElsIf(ISerializationContext context, ElsIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Emit
	 *     EsterelParallel returns Emit
	 *     EsterelParallel.EsterelParallel_1_0 returns Emit
	 *     EsterelThread returns Emit
	 *     EsterelThread.EsterelThread_1_0 returns Emit
	 *     Emit returns Emit
	 *     Statement returns Emit
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signal=[Signal|ID] expression=Expression?)
	 */
	protected void sequence_Emit(ISerializationContext context, Emit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns EsterelFunctionCall
	 *     EsterelFunctionCall returns EsterelFunctionCall
	 *     Expression returns EsterelFunctionCall
	 *     BooleanExpression returns EsterelFunctionCall
	 *     OrExpression returns EsterelFunctionCall
	 *     OrExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     AndExpression returns EsterelFunctionCall
	 *     AndExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     CompareOperation returns EsterelFunctionCall
	 *     CompareOperation.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     NotOrValuedExpression returns EsterelFunctionCall
	 *     NotExpression returns EsterelFunctionCall
	 *     ValuedExpression returns EsterelFunctionCall
	 *     AddExpression returns EsterelFunctionCall
	 *     AddExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     SubExpression returns EsterelFunctionCall
	 *     SubExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     MultExpression returns EsterelFunctionCall
	 *     MultExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     DivExpression returns EsterelFunctionCall
	 *     DivExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     ModExpression returns EsterelFunctionCall
	 *     ModExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     NegExpression returns EsterelFunctionCall
	 *     AtomicValuedExpression returns EsterelFunctionCall
	 *     Root returns EsterelFunctionCall
	 *     BoolExpression returns EsterelFunctionCall
	 *     LogicalOrExpression returns EsterelFunctionCall
	 *     LogicalOrExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     LogicalAndExpression returns EsterelFunctionCall
	 *     LogicalAndExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     BitwiseOrExpression returns EsterelFunctionCall
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     BitwiseXOrExpression returns EsterelFunctionCall
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     BitwiseAndExpression returns EsterelFunctionCall
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     BitwiseNotExpression returns EsterelFunctionCall
	 *     ShiftLeftExpression returns EsterelFunctionCall
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     ShiftRightExpression returns EsterelFunctionCall
	 *     ShiftRightExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     ShiftRightUnsignedExpression returns EsterelFunctionCall
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns EsterelFunctionCall
	 *     TernaryOperation returns EsterelFunctionCall
	 *     VectorValueMember returns EsterelFunctionCall
	 *
	 * Constraint:
	 *     (function=[Function|ID] (parameter+=Expression parameter+=Expression*)?)
	 */
	protected void sequence_EsterelFunctionCall(ISerializationContext context, EsterelFunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelModule returns Module
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         name=ID 
	 *         declarations+=EsterelDeclaration* 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_EsterelModule(ISerializationContext context, Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelParallel returns EsterelParallel
	 *
	 * Constraint:
	 *     (statements+=EsterelParallel_EsterelParallel_1_0 statements+=EsterelThread+)
	 */
	protected void sequence_EsterelParallel(ISerializationContext context, EsterelParallel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelProgram returns EsterelProgram
	 *
	 * Constraint:
	 *     ((pragmas+=Pragma+ modules+=EsterelModule+) | modules+=EsterelModule+)?
	 */
	protected void sequence_EsterelProgram(ISerializationContext context, EsterelProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelParallel returns EsterelThread
	 *     EsterelParallel.EsterelParallel_1_0 returns EsterelThread
	 *     EsterelThread returns EsterelThread
	 *
	 * Constraint:
	 *     (statements+=EsterelThread_EsterelThread_1_0 statements+=InstructionStatement+)
	 */
	protected void sequence_EsterelThread(ISerializationContext context, EsterelThread semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelVariableDeclaration returns EsterelVariableDeclaration
	 *
	 * Constraint:
	 *     (variables+=Variable variables+=Variable* type=TypeIdentifier)
	 */
	protected void sequence_EsterelVariableDeclaration(ISerializationContext context, EsterelVariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns EveryDo
	 *     EsterelParallel returns EveryDo
	 *     EsterelParallel.EsterelParallel_1_0 returns EveryDo
	 *     EsterelThread returns EveryDo
	 *     EsterelThread.EsterelThread_1_0 returns EveryDo
	 *     EveryDo returns EveryDo
	 *     Statement returns EveryDo
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         delay=DelayExpression 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_EveryDo(ISerializationContext context, EveryDo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExecCase returns ExecCase
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         task=[Task|ID] 
	 *         (referenceParameters+=[Variable|ID] referenceParameters+=[Variable|ID]*)? 
	 *         (valueParameters+=Expression valueParameters+=Expression*)? 
	 *         returnSignal=[Signal|ID] 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_ExecCase(ISerializationContext context, ExecCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Exec
	 *     EsterelParallel returns Exec
	 *     EsterelParallel.EsterelParallel_1_0 returns Exec
	 *     EsterelThread returns Exec
	 *     EsterelThread.EsterelThread_1_0 returns Exec
	 *     Exec returns Exec
	 *     Statement returns Exec
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (
	 *                 task=[Task|ID] 
	 *                 (referenceParameters+=[Variable|ID] referenceParameters+=[Variable|ID]*)? 
	 *                 (valueParameters+=Expression valueParameters+=Expression*)? 
	 *                 returnSignal=[Signal|ID] 
	 *                 (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *             ) | 
	 *             execCaseList+=ExecCase+
	 *         )
	 *     )
	 */
	protected void sequence_Exec(ISerializationContext context, Exec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Exit
	 *     EsterelParallel returns Exit
	 *     EsterelParallel.EsterelParallel_1_0 returns Exit
	 *     EsterelThread returns Exit
	 *     EsterelThread.EsterelThread_1_0 returns Exit
	 *     Exit returns Exit
	 *     Statement returns Exit
	 *
	 * Constraint:
	 *     (annotations+=Annotation* trap=[TrapSignal|ID] expression=Expression?)
	 */
	protected void sequence_Exit(ISerializationContext context, Exit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns FunctionDeclaration
	 *     FunctionDeclaration returns FunctionDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* functions+=Function functions+=Function*)
	 */
	protected void sequence_FunctionDeclaration(ISerializationContext context, FunctionDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionRenaming returns FunctionRenaming
	 *
	 * Constraint:
	 *     ((newName=[Function|ID] | newFunc=BuildInFunction) oldName=[Function|ID])
	 */
	protected void sequence_FunctionRenaming(ISerializationContext context, FunctionRenaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=ID (parameterTypes+=TypeIdentifier parameterTypes+=TypeIdentifier*)? returnType=TypeIdentifier)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Halt
	 *     EsterelParallel returns Halt
	 *     EsterelParallel.EsterelParallel_1_0 returns Halt
	 *     EsterelThread returns Halt
	 *     EsterelThread.EsterelThread_1_0 returns Halt
	 *     Halt returns Halt
	 *     Statement returns Halt
	 *
	 * Constraint:
	 *     annotations+=Annotation*
	 */
	protected void sequence_Halt(ISerializationContext context, Halt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns IfTest
	 *     EsterelParallel returns IfTest
	 *     EsterelParallel.EsterelParallel_1_0 returns IfTest
	 *     EsterelThread returns IfTest
	 *     EsterelThread.EsterelThread_1_0 returns IfTest
	 *     IfTest returns IfTest
	 *     Statement returns IfTest
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         expression=Expression 
	 *         annotations+=Annotation* 
	 *         (
	 *             statements+=EsterelParallel | 
	 *             (statements+=MetaStatement? (statements+=InstructionStatement? statements+=MetaStatement?)* statements+=InstructionStatement?)
	 *         )? 
	 *         elseif+=ElsIf* 
	 *         (
	 *             elseStatements+=EsterelParallel | 
	 *             ((elseStatements+=InstructionStatement | elseStatements+=MetaStatement)* elseStatements+=InstructionStatement?)
	 *         )?
	 *     )
	 */
	protected void sequence_IfTest(ISerializationContext context, IfTest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns InputDeclaration
	 *     InputDeclaration returns InputDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* valuedObjects+=Signal valuedObjects+=Signal*)
	 */
	protected void sequence_InputDeclaration(ISerializationContext context, InputDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns InputOutputDeclaration
	 *     InputOutputDeclaration returns InputOutputDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* valuedObjects+=Signal valuedObjects+=Signal*)
	 */
	protected void sequence_InputOutputDeclaration(ISerializationContext context, InputOutputDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LegacyDo returns Do
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))? 
	 *         (
	 *             (annotations+=Annotation* delay=DelayExpression) | 
	 *             (
	 *                 watchingAnnotations+=Annotation* 
	 *                 watching=DelayExpression 
	 *                 (watchingStatements+=Statement | statements+=MetaStatement)* 
	 *                 watchingStatements+=Statement?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_LegacyDo(ISerializationContext context, Do semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns LocalSignalDeclaration
	 *     EsterelParallel returns LocalSignalDeclaration
	 *     EsterelParallel.EsterelParallel_1_0 returns LocalSignalDeclaration
	 *     EsterelThread returns LocalSignalDeclaration
	 *     EsterelThread.EsterelThread_1_0 returns LocalSignalDeclaration
	 *     LocalSignalDeclaration returns LocalSignalDeclaration
	 *     Statement returns LocalSignalDeclaration
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         valuedObjects+=Signal 
	 *         valuedObjects+=Signal* 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_LocalSignalDeclaration(ISerializationContext context, LocalSignalDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns LocalVariableDeclaration
	 *     EsterelParallel returns LocalVariableDeclaration
	 *     EsterelParallel.EsterelParallel_1_0 returns LocalVariableDeclaration
	 *     EsterelThread returns LocalVariableDeclaration
	 *     EsterelThread.EsterelThread_1_0 returns LocalVariableDeclaration
	 *     LocalVariableDeclaration returns LocalVariableDeclaration
	 *     Statement returns LocalVariableDeclaration
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         variableDeclarations+=EsterelVariableDeclaration 
	 *         variableDeclarations+=EsterelVariableDeclaration* 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_LocalVariableDeclaration(ISerializationContext context, LocalVariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Loop
	 *     EsterelParallel returns Loop
	 *     EsterelParallel.EsterelParallel_1_0 returns Loop
	 *     EsterelThread returns Loop
	 *     EsterelThread.EsterelThread_1_0 returns Loop
	 *     Loop returns Loop
	 *     Statement returns Loop
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))? 
	 *         delay=DelayExpression?
	 *     )
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleRenaming returns ModuleRenaming
	 *
	 * Constraint:
	 *     (module=[Module|ID] | (newName=ID module=[Module|ID]))
	 */
	protected void sequence_ModuleRenaming(ISerializationContext context, ModuleRenaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MetaStatement returns Nothing
	 *     InstructionStatement returns Nothing
	 *     EsterelParallel returns Nothing
	 *     EsterelParallel.EsterelParallel_1_0 returns Nothing
	 *     EsterelThread returns Nothing
	 *     EsterelThread.EsterelThread_1_0 returns Nothing
	 *     Nothing returns Nothing
	 *     Statement returns Nothing
	 *
	 * Constraint:
	 *     annotations+=Annotation*
	 */
	protected void sequence_Nothing(ISerializationContext context, Nothing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns OutputDeclaration
	 *     OutputDeclaration returns OutputDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* valuedObjects+=Signal valuedObjects+=Signal*)
	 */
	protected void sequence_OutputDeclaration(ISerializationContext context, OutputDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PresentCase returns PresentCase
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (expression=SignalExpression | expression=SignalExpression) 
	 *         (
	 *             statements+=EsterelParallel | 
	 *             (statements+=InstructionStatement? (statements+=MetaStatement? statements+=InstructionStatement?)* statements+=InstructionStatement?)
	 *         )?
	 *     )
	 */
	protected void sequence_PresentCase(ISerializationContext context, PresentCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Present
	 *     EsterelParallel returns Present
	 *     EsterelParallel.EsterelParallel_1_0 returns Present
	 *     EsterelThread returns Present
	 *     EsterelThread.EsterelThread_1_0 returns Present
	 *     Present returns Present
	 *     Statement returns Present
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (
	 *                 (expression=SignalExpression | expression=SignalExpression) 
	 *                 annotations+=Annotation* 
	 *                 (
	 *                     (statements+=EsterelParallel? elseStatements+=EsterelParallel?) | 
	 *                     (
	 *                         (
	 *                             (statements+=EsterelParallel? elseStatements+=MetaStatement?) | 
	 *                             (
	 *                                 (statements+=MetaStatement? statements+=InstructionStatement?)* 
	 *                                 statements+=MetaStatement? 
	 *                                 statements+=InstructionStatement? 
	 *                                 elseStatements+=MetaStatement?
	 *                             )
	 *                         ) 
	 *                         (elseStatements+=InstructionStatement? elseStatements+=MetaStatement?)* 
	 *                         elseStatements+=InstructionStatement?
	 *                     ) | 
	 *                     (
	 *                         (statements+=MetaStatement? statements+=InstructionStatement?)* 
	 *                         statements+=MetaStatement? 
	 *                         statements+=InstructionStatement? 
	 *                         elseStatements+=EsterelParallel?
	 *                     )
	 *                 )
	 *             ) | 
	 *             (cases+=PresentCase+ elseStatements+=EsterelParallel?) | 
	 *             (
	 *                 cases+=PresentCase+ 
	 *                 elseStatements+=MetaStatement? 
	 *                 (elseStatements+=InstructionStatement? elseStatements+=MetaStatement?)* 
	 *                 elseStatements+=InstructionStatement?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_Present(ISerializationContext context, Present semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns ProcedureCall
	 *     EsterelParallel returns ProcedureCall
	 *     EsterelParallel.EsterelParallel_1_0 returns ProcedureCall
	 *     EsterelThread returns ProcedureCall
	 *     EsterelThread.EsterelThread_1_0 returns ProcedureCall
	 *     ProcedureCall returns ProcedureCall
	 *     Statement returns ProcedureCall
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         procedure=[Procedure|ID] 
	 *         (referenceArguments+=[Variable|ID] referenceArguments+=[Variable|ID]*)? 
	 *         (valueArguments+=Expression valueArguments+=Expression*)?
	 *     )
	 */
	protected void sequence_ProcedureCall(ISerializationContext context, ProcedureCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns ProcedureDeclaration
	 *     ProcedureDeclaration returns ProcedureDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* procedures+=Procedure procedures+=Procedure*)
	 */
	protected void sequence_ProcedureDeclaration(ISerializationContext context, ProcedureDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcedureRenaming returns ProcedureRenaming
	 *
	 * Constraint:
	 *     (newName=[Procedure|ID] oldName=[Procedure|ID])
	 */
	protected void sequence_ProcedureRenaming(ISerializationContext context, ProcedureRenaming semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.PROCEDURE_RENAMING__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.PROCEDURE_RENAMING__NEW_NAME));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.PROCEDURE_RENAMING__OLD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.PROCEDURE_RENAMING__OLD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcedureRenamingAccess().getNewNameProcedureIDTerminalRuleCall_0_0_1(), semanticObject.getNewName());
		feeder.accept(grammarAccess.getProcedureRenamingAccess().getOldNameProcedureIDTerminalRuleCall_2_0_1(), semanticObject.getOldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Procedure returns Procedure
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (referenceArguments+=TypeIdentifier referenceArguments+=TypeIdentifier*)? 
	 *         (valueArguments+=TypeIdentifier valueArguments+=TypeIdentifier*)?
	 *     )
	 */
	protected void sequence_Procedure(ISerializationContext context, Procedure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns RelationDeclaration
	 *     RelationDeclaration returns RelationDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* relations+=Relation relations+=Relation*)
	 */
	protected void sequence_RelationDeclaration(ISerializationContext context, RelationDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns RelationImplication
	 *     RelationImplication returns RelationImplication
	 *
	 * Constraint:
	 *     (first=[Signal|ID] type='=>' second=[Signal|ID])
	 */
	protected void sequence_RelationImplication(ISerializationContext context, RelationImplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.RELATION_IMPLICATION__FIRST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.RELATION_IMPLICATION__FIRST));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.RELATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.RELATION__TYPE));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.RELATION_IMPLICATION__SECOND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.RELATION_IMPLICATION__SECOND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationImplicationAccess().getFirstSignalIDTerminalRuleCall_0_0_1(), semanticObject.getFirst());
		feeder.accept(grammarAccess.getRelationImplicationAccess().getTypeEqualsSignGreaterThanSignKeyword_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRelationImplicationAccess().getSecondSignalIDTerminalRuleCall_2_0_1(), semanticObject.getSecond());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns RelationIncompatibility
	 *     RelationIncompatibility returns RelationIncompatibility
	 *
	 * Constraint:
	 *     (incomp+=[Signal|ID] type='#' incomp+=[Signal|ID] incomp+=[Signal|ID]*)
	 */
	protected void sequence_RelationIncompatibility(ISerializationContext context, RelationIncompatibility semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Renamings returns Renamings
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (renamings+=TypeRenaming renamings+=TypeRenaming*) | 
	 *             (renamings+=ConstantRenaming renamings+=ConstantRenaming*) | 
	 *             (renamings+=FunctionRenaming renamings+=FunctionRenaming*) | 
	 *             (renamings+=ProcedureRenaming renamings+=ProcedureRenaming*) | 
	 *             (renamings+=TaskRenaming renamings+=TaskRenaming*) | 
	 *             (renamings+=SignalRenaming renamings+=SignalRenaming*)
	 *         )
	 *     )
	 */
	protected void sequence_Renamings(ISerializationContext context, Renamings semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Repeat
	 *     EsterelParallel returns Repeat
	 *     EsterelParallel.EsterelParallel_1_0 returns Repeat
	 *     EsterelThread returns Repeat
	 *     EsterelThread.EsterelThread_1_0 returns Repeat
	 *     Repeat returns Repeat
	 *     Statement returns Repeat
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         positive?='positive'? 
	 *         expression=Expression 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_Repeat(ISerializationContext context, Repeat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns ReturnDeclaration
	 *     ReturnDeclaration returns ReturnDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* valuedObjects+=Signal valuedObjects+=Signal*)
	 */
	protected void sequence_ReturnDeclaration(ISerializationContext context, ReturnDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Run
	 *     EsterelParallel returns Run
	 *     EsterelParallel.EsterelParallel_1_0 returns Run
	 *     EsterelThread returns Run
	 *     EsterelThread.EsterelThread_1_0 returns Run
	 *     Run returns Run
	 *     Statement returns Run
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         ((module=ModuleRenaming (renamings+=Renamings renamings+=Renamings*)?) | (module=ModuleRenaming (renamings+=Renamings renamings+=Renamings*)?))
	 *     )
	 */
	protected void sequence_Run(ISerializationContext context, Run semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns SensorDeclaration
	 *     SensorDeclaration returns SensorDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* valuedObjects+=Sensor valuedObjects+=Sensor*)
	 */
	protected void sequence_SensorDeclaration(ISerializationContext context, SensorDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=ID (type=TypeIdentifier | type=TypeIdentifier)?)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignalExpression returns OperatorExpression
	 *     SignalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SignalAndExpression returns OperatorExpression
	 *     SignalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SignalNotExpression returns OperatorExpression
	 *     SignalAtomicExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=SignalExpression_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=SignalAndExpression)+) | 
	 *         (subExpressions+=SignalAndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=SignalNotExpression)+) | 
	 *         (operator=EsterelNotOperator subExpressions+=SignalNotExpression) | 
	 *         (operator=EsterelPreOperator subExpressions+=SignalReferenceExpr)
	 *     )
	 */
	protected void sequence_SignalAndExpression_SignalExpression_SignalNotExpression_SignalPreExpr(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignalPreExpr returns OperatorExpression
	 *
	 * Constraint:
	 *     (operator=EsterelPreOperator subExpressions+=SignalReferenceExpr)
	 */
	protected void sequence_SignalPreExpr(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignalExpression returns SignalReference
	 *     SignalExpression.OperatorExpression_1_0 returns SignalReference
	 *     SignalAndExpression returns SignalReference
	 *     SignalAndExpression.OperatorExpression_1_0 returns SignalReference
	 *     SignalNotExpression returns SignalReference
	 *     SignalAtomicExpression returns SignalReference
	 *     SignalReferenceExpr returns SignalReference
	 *     SignalReferenceExpression returns SignalReference
	 *
	 * Constraint:
	 *     valuedObject=[Signal|ID]
	 */
	protected void sequence_SignalReferenceExpression(ISerializationContext context, SignalReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalReferenceExpressionAccess().getValuedObjectSignalIDTerminalRuleCall_1_0_1(), semanticObject.getValuedObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SignalRenaming returns SignalRenaming
	 *
	 * Constraint:
	 *     (newName=[Signal|ID] oldName=[Signal|ID])
	 */
	protected void sequence_SignalRenaming(ISerializationContext context, SignalRenaming semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.SIGNAL_RENAMING__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.SIGNAL_RENAMING__NEW_NAME));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.SIGNAL_RENAMING__OLD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.SIGNAL_RENAMING__OLD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalRenamingAccess().getNewNameSignalIDTerminalRuleCall_0_0_1(), semanticObject.getNewName());
		feeder.accept(grammarAccess.getSignalRenamingAccess().getOldNameSignalIDTerminalRuleCall_2_0_1(), semanticObject.getOldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             type=EsterelValueType | 
	 *             idType=ID | 
	 *             ((type=EsterelValueType | idType=ID) (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)) | 
	 *             type=EsterelValueType | 
	 *             idType=ID | 
	 *             ((type=EsterelValueType | idType=ID) (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)) | 
	 *             (
	 *                 initialValue=Expression 
	 *                 (type=EsterelValueType | idType=ID | ((type=EsterelValueType | idType=ID) (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)))
	 *             )
	 *         )?
	 *     )
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Suspend
	 *     EsterelParallel returns Suspend
	 *     EsterelParallel.EsterelParallel_1_0 returns Suspend
	 *     EsterelThread returns Suspend
	 *     EsterelThread.EsterelThread_1_0 returns Suspend
	 *     Suspend returns Suspend
	 *     Statement returns Suspend
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         weak?='weak'? 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))? 
	 *         delay=DelayExpression
	 *     )
	 */
	protected void sequence_Suspend(ISerializationContext context, Suspend semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Sustain
	 *     EsterelParallel returns Sustain
	 *     EsterelParallel.EsterelParallel_1_0 returns Sustain
	 *     EsterelThread returns Sustain
	 *     EsterelThread.EsterelThread_1_0 returns Sustain
	 *     Sustain returns Sustain
	 *     Statement returns Sustain
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signal=[Signal|ID] expression=Expression?)
	 */
	protected void sequence_Sustain(ISerializationContext context, Sustain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns TaskDeclaration
	 *     TaskDeclaration returns TaskDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* tasks+=Task tasks+=Task*)
	 */
	protected void sequence_TaskDeclaration(ISerializationContext context, TaskDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TaskRenaming returns TaskRenaming
	 *
	 * Constraint:
	 *     (newName=[Task|ID] oldName=[Task|ID])
	 */
	protected void sequence_TaskRenaming(ISerializationContext context, TaskRenaming semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.TASK_RENAMING__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.TASK_RENAMING__NEW_NAME));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.TASK_RENAMING__OLD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.TASK_RENAMING__OLD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaskRenamingAccess().getNewNameTaskIDTerminalRuleCall_0_0_1(), semanticObject.getNewName());
		feeder.accept(grammarAccess.getTaskRenamingAccess().getOldNameTaskIDTerminalRuleCall_2_0_1(), semanticObject.getOldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (referenceArguments+=TypeIdentifier referenceArguments+=TypeIdentifier*)? 
	 *         (valueArguments+=TypeIdentifier valueArguments+=TypeIdentifier*)?
	 *     )
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignalExpression returns TickReference
	 *     SignalExpression.OperatorExpression_1_0 returns TickReference
	 *     SignalAndExpression returns TickReference
	 *     SignalAndExpression.OperatorExpression_1_0 returns TickReference
	 *     SignalNotExpression returns TickReference
	 *     SignalAtomicExpression returns TickReference
	 *     SignalReferenceExpr returns TickReference
	 *     TickSignalExpression returns TickReference
	 *
	 * Constraint:
	 *     {TickReference}
	 */
	protected void sequence_TickSignalExpression(ISerializationContext context, TickReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrapExpr returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=TrapExpr_OperatorExpression_1_0 (operator=EsterelOrOperator subExpressions+=TrapAndExpression)+) | 
	 *         (subExpressions+=TrapAndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=TrapNotExpression)+) | 
	 *         (operator=EsterelNotOperator subExpressions+=TrapNotExpression)
	 *     )
	 */
	protected void sequence_TrapAndExpression_TrapExpr_TrapNotExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrapExpr.OperatorExpression_1_0 returns OperatorExpression
	 *     TrapAndExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=TrapAndExpression_OperatorExpression_1_0 (operator=EsterelAndOperator subExpressions+=TrapNotExpression)+) | 
	 *         (operator=EsterelNotOperator subExpressions+=TrapNotExpression)
	 *     )
	 */
	protected void sequence_TrapAndExpression_TrapNotExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns TrapExpression
	 *     TrapExpression returns TrapExpression
	 *     TrapExpr returns TrapExpression
	 *     TrapExpr.OperatorExpression_1_0 returns TrapExpression
	 *     TrapAndExpression returns TrapExpression
	 *     TrapAndExpression.OperatorExpression_1_0 returns TrapExpression
	 *     TrapNotExpression returns TrapExpression
	 *     TrapAtomicExpression returns TrapExpression
	 *     Expression returns TrapExpression
	 *     BooleanExpression returns TrapExpression
	 *     OrExpression returns TrapExpression
	 *     OrExpression.OperatorExpression_1_0 returns TrapExpression
	 *     AndExpression returns TrapExpression
	 *     AndExpression.OperatorExpression_1_0 returns TrapExpression
	 *     CompareOperation returns TrapExpression
	 *     CompareOperation.OperatorExpression_1_0 returns TrapExpression
	 *     NotOrValuedExpression returns TrapExpression
	 *     NotExpression returns TrapExpression
	 *     ValuedExpression returns TrapExpression
	 *     AddExpression returns TrapExpression
	 *     AddExpression.OperatorExpression_1_0 returns TrapExpression
	 *     SubExpression returns TrapExpression
	 *     SubExpression.OperatorExpression_1_0 returns TrapExpression
	 *     MultExpression returns TrapExpression
	 *     MultExpression.OperatorExpression_1_0 returns TrapExpression
	 *     DivExpression returns TrapExpression
	 *     DivExpression.OperatorExpression_1_0 returns TrapExpression
	 *     ModExpression returns TrapExpression
	 *     ModExpression.OperatorExpression_1_0 returns TrapExpression
	 *     NegExpression returns TrapExpression
	 *     AtomicValuedExpression returns TrapExpression
	 *     Root returns TrapExpression
	 *     BoolExpression returns TrapExpression
	 *     LogicalOrExpression returns TrapExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns TrapExpression
	 *     LogicalAndExpression returns TrapExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns TrapExpression
	 *     BitwiseOrExpression returns TrapExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns TrapExpression
	 *     BitwiseXOrExpression returns TrapExpression
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns TrapExpression
	 *     BitwiseAndExpression returns TrapExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns TrapExpression
	 *     BitwiseNotExpression returns TrapExpression
	 *     ShiftLeftExpression returns TrapExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns TrapExpression
	 *     ShiftRightExpression returns TrapExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns TrapExpression
	 *     ShiftRightUnsignedExpression returns TrapExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns TrapExpression
	 *     TernaryOperation returns TrapExpression
	 *     VectorValueMember returns TrapExpression
	 *
	 * Constraint:
	 *     trap=[Signal|ID]
	 */
	protected void sequence_TrapExpression(ISerializationContext context, TrapExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.TRAP_EXPRESSION__TRAP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.TRAP_EXPRESSION__TRAP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrapExpressionAccess().getTrapSignalIDTerminalRuleCall_2_0_1(), semanticObject.getTrap());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrapHandler returns TrapHandler
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         trapExpr=TrapExpr 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))?
	 *     )
	 */
	protected void sequence_TrapHandler(ISerializationContext context, TrapHandler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrapAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     TrapNotExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (operator=EsterelNotOperator subExpressions+=TrapNotExpression)
	 */
	protected void sequence_TrapNotExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrapExpr returns TrapReference
	 *     TrapExpr.OperatorExpression_1_0 returns TrapReference
	 *     TrapAndExpression returns TrapReference
	 *     TrapAndExpression.OperatorExpression_1_0 returns TrapReference
	 *     TrapNotExpression returns TrapReference
	 *     TrapAtomicExpression returns TrapReference
	 *     TrapReferenceExpr returns TrapReference
	 *
	 * Constraint:
	 *     valuedObject=[TrapSignal|ID]
	 */
	protected void sequence_TrapReferenceExpr(ISerializationContext context, TrapReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrapReferenceExprAccess().getValuedObjectTrapSignalIDTerminalRuleCall_1_0_1(), semanticObject.getValuedObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrapSignal returns TrapSignal
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             type=EsterelValueType | 
	 *             idType=ID | 
	 *             ((type=EsterelValueType | idType=ID) (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)) | 
	 *             type=EsterelValueType | 
	 *             idType=ID | 
	 *             ((type=EsterelValueType | idType=ID) (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)) | 
	 *             (
	 *                 initialValue=Expression 
	 *                 (type=EsterelValueType | idType=ID | ((type=EsterelValueType | idType=ID) (combineFunction=[Function|ID] | combineOperator=EsterelCombineOperator)))
	 *             )
	 *         )?
	 *     )
	 */
	protected void sequence_TrapSignal(ISerializationContext context, TrapSignal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstructionStatement returns Trap
	 *     EsterelParallel returns Trap
	 *     EsterelParallel.EsterelParallel_1_0 returns Trap
	 *     EsterelThread returns Trap
	 *     EsterelThread.EsterelThread_1_0 returns Trap
	 *     Trap returns Trap
	 *     Statement returns Trap
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         trapSignals+=TrapSignal 
	 *         trapSignals+=TrapSignal* 
	 *         (statements+=EsterelParallel | ((statements+=InstructionStatement | statements+=MetaStatement)* statements+=InstructionStatement?))? 
	 *         trapHandler+=TrapHandler*
	 *     )
	 */
	protected void sequence_Trap(ISerializationContext context, Trap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelDeclaration returns TypeDeclaration
	 *     TypeDeclaration returns TypeDeclaration
	 *
	 * Constraint:
	 *     (annotations+=Annotation* types+=TypeDefinition types+=TypeDefinition*)
	 */
	protected void sequence_TypeDeclaration(ISerializationContext context, TypeDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDefinition returns TypeDefinition
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TypeDefinition(ISerializationContext context, TypeDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AnnotationsPackage.Literals.NAMED_OBJECT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeDefinitionAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeIdentifier returns TypeIdentifier
	 *
	 * Constraint:
	 *     (type=EsterelValueType | ((type=EsterelValueType | idType=ID) operator=EsterelCombineOperator) | esterelType=[TypeDefinition|ID] | idType=ID)
	 */
	protected void sequence_TypeIdentifier(ISerializationContext context, TypeIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRenaming returns TypeRenaming
	 *
	 * Constraint:
	 *     ((newName=[TypeDefinition|ID] | newType=EsterelValueType) oldName=[TypeDefinition|ID])
	 */
	protected void sequence_TypeRenaming(ISerializationContext context, TypeRenaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValuedObjectTestExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (operator=EsterelPreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=EsterelValueTestOperator subExpressions+=ValuedObjectReference)
	 *     )
	 */
	protected void sequence_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableReference returns ValuedObjectReference
	 *
	 * Constraint:
	 *     valuedObject=[Variable|ID]
	 */
	protected void sequence_VariableReference(ISerializationContext context, ValuedObjectReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableReferenceAccess().getValuedObjectVariableIDTerminalRuleCall_0_1(), semanticObject.getValuedObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID initialValue=Expression?)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
