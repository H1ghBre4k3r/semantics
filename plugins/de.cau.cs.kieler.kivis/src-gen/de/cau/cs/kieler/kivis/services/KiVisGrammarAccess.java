/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kivis.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KiVisGrammarAccess extends AbstractGrammarElementFinder {
	
	public class VisualizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.Visualization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cImageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cImagesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImagesSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cImagesAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLoadKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLoadsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLoadsSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cLoadsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitSCRIPTTerminalRuleCall_2_1_0 = (RuleCall)cInitAssignment_2_1.eContents().get(0);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentContentParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		
		//Visualization:
		//	('image' images+=STRING)* ('load' loads+=STRING)* ('init' init=SCRIPT)?
		//	content+=Content*;
		@Override public ParserRule getRule() { return rule; }
		
		//('image' images+=STRING)* ('load' loads+=STRING)* ('init' init=SCRIPT)? content+=Content*
		public Group getGroup() { return cGroup; }
		
		//('image' images+=STRING)*
		public Group getGroup_0() { return cGroup_0; }
		
		//'image'
		public Keyword getImageKeyword_0_0() { return cImageKeyword_0_0; }
		
		//images+=STRING
		public Assignment getImagesAssignment_0_1() { return cImagesAssignment_0_1; }
		
		//STRING
		public RuleCall getImagesSTRINGTerminalRuleCall_0_1_0() { return cImagesSTRINGTerminalRuleCall_0_1_0; }
		
		//('load' loads+=STRING)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'load'
		public Keyword getLoadKeyword_1_0() { return cLoadKeyword_1_0; }
		
		//loads+=STRING
		public Assignment getLoadsAssignment_1_1() { return cLoadsAssignment_1_1; }
		
		//STRING
		public RuleCall getLoadsSTRINGTerminalRuleCall_1_1_0() { return cLoadsSTRINGTerminalRuleCall_1_1_0; }
		
		//('init' init=SCRIPT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'init'
		public Keyword getInitKeyword_2_0() { return cInitKeyword_2_0; }
		
		//init=SCRIPT
		public Assignment getInitAssignment_2_1() { return cInitAssignment_2_1; }
		
		//SCRIPT
		public RuleCall getInitSCRIPTTerminalRuleCall_2_1_0() { return cInitSCRIPTTerminalRuleCall_2_1_0; }
		
		//content+=Content*
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }
		
		//Content
		public RuleCall getContentContentParserRuleCall_3_0() { return cContentContentParserRuleCall_3_0; }
	}
	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBindingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHandlerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Content:
		//	Binding | Handler | Action | Code;
		@Override public ParserRule getRule() { return rule; }
		
		//Binding | Handler | Action | Code
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Binding
		public RuleCall getBindingParserRuleCall_0() { return cBindingParserRuleCall_0; }
		
		//Handler
		public RuleCall getHandlerParserRuleCall_1() { return cHandlerParserRuleCall_1; }
		
		//Action
		public RuleCall getActionParserRuleCall_2() { return cActionParserRuleCall_2; }
		
		//Code
		public RuleCall getCodeParserRuleCall_3() { return cCodeParserRuleCall_3; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableComplexKeyParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cToKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cDomElementAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cDomElementSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cDomElementAssignment_2_0_1.eContents().get(0);
		private final Keyword cWithKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cInterfaceAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cInterfaceBindingInterface1ParserRuleCall_2_0_3_0 = (RuleCall)cInterfaceAssignment_2_0_3.eContents().get(0);
		private final Assignment cScriptAssignment_2_0_4 = (Assignment)cGroup_2_0.eContents().get(4);
		private final RuleCall cScriptSCRIPTTerminalRuleCall_2_0_4_0 = (RuleCall)cScriptAssignment_2_0_4.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cWithKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInterfaceBindingInterface2ParserRuleCall_2_1_1_0 = (RuleCall)cInterfaceAssignment_2_1_1.eContents().get(0);
		private final Assignment cScriptAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cScriptSCRIPTTerminalRuleCall_2_1_2_0 = (RuleCall)cScriptAssignment_2_1_2.eContents().get(0);
		
		//Binding:
		//	'bind' variable=ComplexKey ('to' domElement=STRING
		//	'with' interface=BindingInterface1 script=SCRIPT
		//	|
		//	'with' interface=BindingInterface2 script=SCRIPT);
		@Override public ParserRule getRule() { return rule; }
		
		//'bind' variable=ComplexKey ('to' domElement=STRING 'with' interface=BindingInterface1 script=SCRIPT | 'with'
		//interface=BindingInterface2 script=SCRIPT)
		public Group getGroup() { return cGroup; }
		
		//'bind'
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }
		
		//variable=ComplexKey
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//ComplexKey
		public RuleCall getVariableComplexKeyParserRuleCall_1_0() { return cVariableComplexKeyParserRuleCall_1_0; }
		
		//('to' domElement=STRING 'with' interface=BindingInterface1 script=SCRIPT | 'with' interface=BindingInterface2
		//script=SCRIPT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'to' domElement=STRING 'with' interface=BindingInterface1 script=SCRIPT
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'to'
		public Keyword getToKeyword_2_0_0() { return cToKeyword_2_0_0; }
		
		//domElement=STRING
		public Assignment getDomElementAssignment_2_0_1() { return cDomElementAssignment_2_0_1; }
		
		//STRING
		public RuleCall getDomElementSTRINGTerminalRuleCall_2_0_1_0() { return cDomElementSTRINGTerminalRuleCall_2_0_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2_0_2() { return cWithKeyword_2_0_2; }
		
		//interface=BindingInterface1
		public Assignment getInterfaceAssignment_2_0_3() { return cInterfaceAssignment_2_0_3; }
		
		//BindingInterface1
		public RuleCall getInterfaceBindingInterface1ParserRuleCall_2_0_3_0() { return cInterfaceBindingInterface1ParserRuleCall_2_0_3_0; }
		
		//script=SCRIPT
		public Assignment getScriptAssignment_2_0_4() { return cScriptAssignment_2_0_4; }
		
		//SCRIPT
		public RuleCall getScriptSCRIPTTerminalRuleCall_2_0_4_0() { return cScriptSCRIPTTerminalRuleCall_2_0_4_0; }
		
		//'with' interface=BindingInterface2 script=SCRIPT
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'with'
		public Keyword getWithKeyword_2_1_0() { return cWithKeyword_2_1_0; }
		
		//interface=BindingInterface2
		public Assignment getInterfaceAssignment_2_1_1() { return cInterfaceAssignment_2_1_1; }
		
		//BindingInterface2
		public RuleCall getInterfaceBindingInterface2ParserRuleCall_2_1_1_0() { return cInterfaceBindingInterface2ParserRuleCall_2_1_1_0; }
		
		//script=SCRIPT
		public Assignment getScriptAssignment_2_1_2() { return cScriptAssignment_2_1_2; }
		
		//SCRIPT
		public RuleCall getScriptSCRIPTTerminalRuleCall_2_1_2_0() { return cScriptSCRIPTTerminalRuleCall_2_1_2_0; }
	}
	public class HandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.Handler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableSimpleKeyParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cInKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cMultimatchAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cMultimatchAllKeyword_2_0_1_0 = (Keyword)cMultimatchAssignment_2_0_1.eContents().get(0);
		private final Assignment cDomElementAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cDomElementSTRINGTerminalRuleCall_2_0_2_0 = (RuleCall)cDomElementAssignment_2_0_2.eContents().get(0);
		private final Keyword cWithKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cInterfaceAssignment_2_0_4 = (Assignment)cGroup_2_0.eContents().get(4);
		private final RuleCall cInterfaceHandlerInterface1ParserRuleCall_2_0_4_0 = (RuleCall)cInterfaceAssignment_2_0_4.eContents().get(0);
		private final Assignment cScriptAssignment_2_0_5 = (Assignment)cGroup_2_0.eContents().get(5);
		private final RuleCall cScriptSCRIPTTerminalRuleCall_2_0_5_0 = (RuleCall)cScriptAssignment_2_0_5.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cWithKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cInterfaceAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cInterfaceHandlerInterface2ParserRuleCall_2_1_1_0 = (RuleCall)cInterfaceAssignment_2_1_1.eContents().get(0);
		private final Assignment cScriptAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cScriptSCRIPTTerminalRuleCall_2_1_2_0 = (RuleCall)cScriptAssignment_2_1_2.eContents().get(0);
		
		//Handler:
		//	'handle' variable=SimpleKey ('in' multimatch?='all'? domElement=STRING
		//	'with' interface=HandlerInterface1 script=SCRIPT
		//	|
		//	'with' interface=HandlerInterface2 script=SCRIPT);
		@Override public ParserRule getRule() { return rule; }
		
		//'handle' variable=SimpleKey ('in' multimatch?='all'? domElement=STRING 'with' interface=HandlerInterface1 script=SCRIPT
		//| 'with' interface=HandlerInterface2 script=SCRIPT)
		public Group getGroup() { return cGroup; }
		
		//'handle'
		public Keyword getHandleKeyword_0() { return cHandleKeyword_0; }
		
		//variable=SimpleKey
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//SimpleKey
		public RuleCall getVariableSimpleKeyParserRuleCall_1_0() { return cVariableSimpleKeyParserRuleCall_1_0; }
		
		//('in' multimatch?='all'? domElement=STRING 'with' interface=HandlerInterface1 script=SCRIPT | 'with'
		//interface=HandlerInterface2 script=SCRIPT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'in' multimatch?='all'? domElement=STRING 'with' interface=HandlerInterface1 script=SCRIPT
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'in'
		public Keyword getInKeyword_2_0_0() { return cInKeyword_2_0_0; }
		
		//multimatch?='all'?
		public Assignment getMultimatchAssignment_2_0_1() { return cMultimatchAssignment_2_0_1; }
		
		//'all'
		public Keyword getMultimatchAllKeyword_2_0_1_0() { return cMultimatchAllKeyword_2_0_1_0; }
		
		//domElement=STRING
		public Assignment getDomElementAssignment_2_0_2() { return cDomElementAssignment_2_0_2; }
		
		//STRING
		public RuleCall getDomElementSTRINGTerminalRuleCall_2_0_2_0() { return cDomElementSTRINGTerminalRuleCall_2_0_2_0; }
		
		//'with'
		public Keyword getWithKeyword_2_0_3() { return cWithKeyword_2_0_3; }
		
		//interface=HandlerInterface1
		public Assignment getInterfaceAssignment_2_0_4() { return cInterfaceAssignment_2_0_4; }
		
		//HandlerInterface1
		public RuleCall getInterfaceHandlerInterface1ParserRuleCall_2_0_4_0() { return cInterfaceHandlerInterface1ParserRuleCall_2_0_4_0; }
		
		//script=SCRIPT
		public Assignment getScriptAssignment_2_0_5() { return cScriptAssignment_2_0_5; }
		
		//SCRIPT
		public RuleCall getScriptSCRIPTTerminalRuleCall_2_0_5_0() { return cScriptSCRIPTTerminalRuleCall_2_0_5_0; }
		
		//'with' interface=HandlerInterface2 script=SCRIPT
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'with'
		public Keyword getWithKeyword_2_1_0() { return cWithKeyword_2_1_0; }
		
		//interface=HandlerInterface2
		public Assignment getInterfaceAssignment_2_1_1() { return cInterfaceAssignment_2_1_1; }
		
		//HandlerInterface2
		public RuleCall getInterfaceHandlerInterface2ParserRuleCall_2_1_1_0() { return cInterfaceHandlerInterface2ParserRuleCall_2_1_1_0; }
		
		//script=SCRIPT
		public Assignment getScriptAssignment_2_1_2() { return cScriptAssignment_2_1_2; }
		
		//SCRIPT
		public RuleCall getScriptSCRIPTTerminalRuleCall_2_1_2_0() { return cScriptSCRIPTTerminalRuleCall_2_1_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDomEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDomEventSTRINGTerminalRuleCall_1_0 = (RuleCall)cDomEventAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultimatchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultimatchAllKeyword_3_0 = (Keyword)cMultimatchAssignment_3.eContents().get(0);
		private final Assignment cDomElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDomElementSTRINGTerminalRuleCall_4_0 = (RuleCall)cDomElementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDoKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInterfaceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInterfaceActionInterface1ParserRuleCall_5_1_0 = (RuleCall)cInterfaceAssignment_5_1.eContents().get(0);
		private final Assignment cScriptAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cScriptSCRIPTTerminalRuleCall_5_2_0 = (RuleCall)cScriptAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDeferredKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDeferredInterfaceAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDeferredInterfaceActionInterface2ParserRuleCall_6_1_0 = (RuleCall)cDeferredInterfaceAssignment_6_1.eContents().get(0);
		private final Assignment cDeferredScriptAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDeferredScriptSCRIPTTerminalRuleCall_6_2_0 = (RuleCall)cDeferredScriptAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSetKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSetterAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSetterSetterParserRuleCall_7_1_0 = (RuleCall)cSetterAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cSignalKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSignalAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSignalComplexKeyParserRuleCall_8_1_0 = (RuleCall)cSignalAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cSimulationKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cControlAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cControlSimulationCorntrolEnumRuleCall_9_1_0 = (RuleCall)cControlAssignment_9_1.eContents().get(0);
		
		//Action:
		//	'event' domEvent=STRING
		//	'on' multimatch?='all'? domElement=STRING ('do' interface=ActionInterface1 script=SCRIPT)? ('deferred'
		//	deferredInterface=ActionInterface2 deferredScript=SCRIPT)? ('set' setter+=Setter)* ('signal' signal=ComplexKey)?
		//	('simulation' control=SimulationCorntrol)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' domEvent=STRING 'on' multimatch?='all'? domElement=STRING ('do' interface=ActionInterface1 script=SCRIPT)?
		//('deferred' deferredInterface=ActionInterface2 deferredScript=SCRIPT)? ('set' setter+=Setter)* ('signal'
		//signal=ComplexKey)? ('simulation' control=SimulationCorntrol)?
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//domEvent=STRING
		public Assignment getDomEventAssignment_1() { return cDomEventAssignment_1; }
		
		//STRING
		public RuleCall getDomEventSTRINGTerminalRuleCall_1_0() { return cDomEventSTRINGTerminalRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//multimatch?='all'?
		public Assignment getMultimatchAssignment_3() { return cMultimatchAssignment_3; }
		
		//'all'
		public Keyword getMultimatchAllKeyword_3_0() { return cMultimatchAllKeyword_3_0; }
		
		//domElement=STRING
		public Assignment getDomElementAssignment_4() { return cDomElementAssignment_4; }
		
		//STRING
		public RuleCall getDomElementSTRINGTerminalRuleCall_4_0() { return cDomElementSTRINGTerminalRuleCall_4_0; }
		
		//('do' interface=ActionInterface1 script=SCRIPT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'do'
		public Keyword getDoKeyword_5_0() { return cDoKeyword_5_0; }
		
		//interface=ActionInterface1
		public Assignment getInterfaceAssignment_5_1() { return cInterfaceAssignment_5_1; }
		
		//ActionInterface1
		public RuleCall getInterfaceActionInterface1ParserRuleCall_5_1_0() { return cInterfaceActionInterface1ParserRuleCall_5_1_0; }
		
		//script=SCRIPT
		public Assignment getScriptAssignment_5_2() { return cScriptAssignment_5_2; }
		
		//SCRIPT
		public RuleCall getScriptSCRIPTTerminalRuleCall_5_2_0() { return cScriptSCRIPTTerminalRuleCall_5_2_0; }
		
		//('deferred' deferredInterface=ActionInterface2 deferredScript=SCRIPT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'deferred'
		public Keyword getDeferredKeyword_6_0() { return cDeferredKeyword_6_0; }
		
		//deferredInterface=ActionInterface2
		public Assignment getDeferredInterfaceAssignment_6_1() { return cDeferredInterfaceAssignment_6_1; }
		
		//ActionInterface2
		public RuleCall getDeferredInterfaceActionInterface2ParserRuleCall_6_1_0() { return cDeferredInterfaceActionInterface2ParserRuleCall_6_1_0; }
		
		//deferredScript=SCRIPT
		public Assignment getDeferredScriptAssignment_6_2() { return cDeferredScriptAssignment_6_2; }
		
		//SCRIPT
		public RuleCall getDeferredScriptSCRIPTTerminalRuleCall_6_2_0() { return cDeferredScriptSCRIPTTerminalRuleCall_6_2_0; }
		
		//('set' setter+=Setter)*
		public Group getGroup_7() { return cGroup_7; }
		
		//'set'
		public Keyword getSetKeyword_7_0() { return cSetKeyword_7_0; }
		
		//setter+=Setter
		public Assignment getSetterAssignment_7_1() { return cSetterAssignment_7_1; }
		
		//Setter
		public RuleCall getSetterSetterParserRuleCall_7_1_0() { return cSetterSetterParserRuleCall_7_1_0; }
		
		//('signal' signal=ComplexKey)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'signal'
		public Keyword getSignalKeyword_8_0() { return cSignalKeyword_8_0; }
		
		//signal=ComplexKey
		public Assignment getSignalAssignment_8_1() { return cSignalAssignment_8_1; }
		
		//ComplexKey
		public RuleCall getSignalComplexKeyParserRuleCall_8_1_0() { return cSignalComplexKeyParserRuleCall_8_1_0; }
		
		//('simulation' control=SimulationCorntrol)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'simulation'
		public Keyword getSimulationKeyword_9_0() { return cSimulationKeyword_9_0; }
		
		//control=SimulationCorntrol
		public Assignment getControlAssignment_9_1() { return cControlAssignment_9_1; }
		
		//SimulationCorntrol
		public RuleCall getControlSimulationCorntrolEnumRuleCall_9_1_0() { return cControlSimulationCorntrolEnumRuleCall_9_1_0; }
	}
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.Code");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfaceCodeInterfaceParserRuleCall_1_0 = (RuleCall)cInterfaceAssignment_1.eContents().get(0);
		private final Assignment cScriptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptSCRIPTTerminalRuleCall_2_0 = (RuleCall)cScriptAssignment_2.eContents().get(0);
		
		//Code:
		//	'script' interface=CodeInterface script=SCRIPT;
		@Override public ParserRule getRule() { return rule; }
		
		//'script' interface=CodeInterface script=SCRIPT
		public Group getGroup() { return cGroup; }
		
		//'script'
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }
		
		//interface=CodeInterface
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }
		
		//CodeInterface
		public RuleCall getInterfaceCodeInterfaceParserRuleCall_1_0() { return cInterfaceCodeInterfaceParserRuleCall_1_0; }
		
		//script=SCRIPT
		public Assignment getScriptAssignment_2() { return cScriptAssignment_2; }
		
		//SCRIPT
		public RuleCall getScriptSCRIPTTerminalRuleCall_2_0() { return cScriptSCRIPTTerminalRuleCall_2_0; }
	}
	public class SetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.Setter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableComplexKeyParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfaceSetterInterfaceParserRuleCall_1_0 = (RuleCall)cInterfaceAssignment_1.eContents().get(0);
		private final Assignment cScriptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptSCRIPTTerminalRuleCall_2_0 = (RuleCall)cScriptAssignment_2.eContents().get(0);
		
		//Setter:
		//	variable=ComplexKey
		//	interface=SetterInterface
		//	script=SCRIPT;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=ComplexKey interface=SetterInterface script=SCRIPT
		public Group getGroup() { return cGroup; }
		
		//variable=ComplexKey
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//ComplexKey
		public RuleCall getVariableComplexKeyParserRuleCall_0_0() { return cVariableComplexKeyParserRuleCall_0_0; }
		
		//interface=SetterInterface
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }
		
		//SetterInterface
		public RuleCall getInterfaceSetterInterfaceParserRuleCall_1_0() { return cInterfaceSetterInterfaceParserRuleCall_1_0; }
		
		//script=SCRIPT
		public Assignment getScriptAssignment_2() { return cScriptAssignment_2; }
		
		//SCRIPT
		public RuleCall getScriptSCRIPTTerminalRuleCall_2_0() { return cScriptSCRIPTTerminalRuleCall_2_0; }
	}
	public class BindingInterface1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.BindingInterface1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementIDTerminalRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cVariableAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_3_0_1_0 = (RuleCall)cVariableAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVariableAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_3_1_1_0 = (RuleCall)cVariableAssignment_3_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cPoolAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cPoolIDTerminalRuleCall_3_1_3_0 = (RuleCall)cPoolAssignment_3_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BindingInterface1 Interface:
		//	{Interface}
		//	'('
		//	element=ID (',' variable=ID
		//	|
		//	',' variable=ID
		//	',' pool=ID)?
		//	')' '=>'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} '(' element=ID (',' variable=ID | ',' variable=ID ',' pool=ID)? ')' '=>'?
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//element=ID
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_2_0() { return cElementIDTerminalRuleCall_2_0; }
		
		//(',' variable=ID | ',' variable=ID ',' pool=ID)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//',' variable=ID
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }
		
		//variable=ID
		public Assignment getVariableAssignment_3_0_1() { return cVariableAssignment_3_0_1; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_3_0_1_0() { return cVariableIDTerminalRuleCall_3_0_1_0; }
		
		//',' variable=ID ',' pool=ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//variable=ID
		public Assignment getVariableAssignment_3_1_1() { return cVariableAssignment_3_1_1; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_3_1_1_0() { return cVariableIDTerminalRuleCall_3_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_3_1_2() { return cCommaKeyword_3_1_2; }
		
		//pool=ID
		public Assignment getPoolAssignment_3_1_3() { return cPoolAssignment_3_1_3; }
		
		//ID
		public RuleCall getPoolIDTerminalRuleCall_3_1_3_0() { return cPoolIDTerminalRuleCall_3_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'=>'?
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }
	}
	public class BindingInterface2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.BindingInterface2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPoolAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPoolIDTerminalRuleCall_2_1_1_0 = (RuleCall)cPoolAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BindingInterface2 Interface:
		//	{Interface}
		//	'(' (variable=ID (',' pool=ID)?)?
		//	')' '=>'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} '(' (variable=ID (',' pool=ID)?)? ')' '=>'?
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(variable=ID (',' pool=ID)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//variable=ID
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0_0() { return cVariableIDTerminalRuleCall_2_0_0; }
		
		//(',' pool=ID)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//pool=ID
		public Assignment getPoolAssignment_2_1_1() { return cPoolAssignment_2_1_1; }
		
		//ID
		public RuleCall getPoolIDTerminalRuleCall_2_1_1_0() { return cPoolIDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'=>'?
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }
	}
	public class HandlerInterface1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.HandlerInterface1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementIDTerminalRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableIDTerminalRuleCall_4_0 = (RuleCall)cVariableAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPoolAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPoolIDTerminalRuleCall_5_1_0 = (RuleCall)cPoolAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//HandlerInterface1 Interface:
		//	{Interface}
		//	'('
		//	element=ID
		//	',' variable=ID (',' pool=ID)?
		//	')' '=>'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} '(' element=ID ',' variable=ID (',' pool=ID)? ')' '=>'?
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//element=ID
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_2_0() { return cElementIDTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//variable=ID
		public Assignment getVariableAssignment_4() { return cVariableAssignment_4; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_4_0() { return cVariableIDTerminalRuleCall_4_0; }
		
		//(',' pool=ID)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//pool=ID
		public Assignment getPoolAssignment_5_1() { return cPoolAssignment_5_1; }
		
		//ID
		public RuleCall getPoolIDTerminalRuleCall_5_1_0() { return cPoolIDTerminalRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'=>'?
		public Keyword getEqualsSignGreaterThanSignKeyword_7() { return cEqualsSignGreaterThanSignKeyword_7; }
	}
	public class HandlerInterface2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.HandlerInterface2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPoolAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPoolIDTerminalRuleCall_3_1_0 = (RuleCall)cPoolAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HandlerInterface2 Interface:
		//	{Interface}
		//	'('
		//	variable=ID (',' pool=ID)?
		//	')' '=>'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} '(' variable=ID (',' pool=ID)? ')' '=>'?
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable=ID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0() { return cVariableIDTerminalRuleCall_2_0; }
		
		//(',' pool=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//pool=ID
		public Assignment getPoolAssignment_3_1() { return cPoolAssignment_3_1; }
		
		//ID
		public RuleCall getPoolIDTerminalRuleCall_3_1_0() { return cPoolIDTerminalRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'=>'?
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }
	}
	public class ActionInterface1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.ActionInterface1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ActionInterface1 Interface:
		//	{Interface} ('('
		//	')' '=>'?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} ('(' ')' '=>'?)?
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//('(' ')' '=>'?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
		
		//'=>'?
		public Keyword getEqualsSignGreaterThanSignKeyword_1_2() { return cEqualsSignGreaterThanSignKeyword_1_2; }
	}
	public class ActionInterface2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.ActionInterface2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPoolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPoolIDTerminalRuleCall_1_1_0 = (RuleCall)cPoolAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ActionInterface2 Interface:
		//	{Interface} ('('
		//	pool=ID?
		//	')' '=>'?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} ('(' pool=ID? ')' '=>'?)?
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//('(' pool=ID? ')' '=>'?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//pool=ID?
		public Assignment getPoolAssignment_1_1() { return cPoolAssignment_1_1; }
		
		//ID
		public RuleCall getPoolIDTerminalRuleCall_1_1_0() { return cPoolIDTerminalRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'=>'?
		public Keyword getEqualsSignGreaterThanSignKeyword_1_3() { return cEqualsSignGreaterThanSignKeyword_1_3; }
	}
	public class CodeInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.CodeInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPoolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPoolIDTerminalRuleCall_1_1_0 = (RuleCall)cPoolAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//CodeInterface Interface:
		//	{Interface} ('('
		//	pool=ID?
		//	')' '=>'?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} ('(' pool=ID? ')' '=>'?)?
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//('(' pool=ID? ')' '=>'?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//pool=ID?
		public Assignment getPoolAssignment_1_1() { return cPoolAssignment_1_1; }
		
		//ID
		public RuleCall getPoolIDTerminalRuleCall_1_1_0() { return cPoolIDTerminalRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'=>'?
		public Keyword getEqualsSignGreaterThanSignKeyword_1_3() { return cEqualsSignGreaterThanSignKeyword_1_3; }
	}
	public class SetterInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.SetterInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SetterInterface Interface:
		//	{Interface} ('('
		//	')' '=>'?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Interface} ('(' ')' '=>'?)?
		public Group getGroup() { return cGroup; }
		
		//{Interface}
		public Action getInterfaceAction_0() { return cInterfaceAction_0; }
		
		//('(' ')' '=>'?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
		
		//'=>'?
		public Keyword getEqualsSignGreaterThanSignKeyword_1_2() { return cEqualsSignGreaterThanSignKeyword_1_2; }
	}
	public class SimpleKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.SimpleKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// Json object member key
		//SimpleKey:
		//	(ID | '#' ID) ('-' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | '#' ID) ('-' ID)*
		public Group getGroup() { return cGroup; }
		
		//(ID | '#' ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'#' ID
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_1_0() { return cNumberSignKeyword_0_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1() { return cIDTerminalRuleCall_0_1_1; }
		
		//('-' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ComplexKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.ComplexKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//// Json object member key with member access via '.'
		//ComplexKey:
		//	(ID | '#' ID) ('-' ID | '.' (INT | ID))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | '#' ID) ('-' ID | '.' (INT | ID))*
		public Group getGroup() { return cGroup; }
		
		//(ID | '#' ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'#' ID
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_1_0() { return cNumberSignKeyword_0_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1() { return cIDTerminalRuleCall_0_1_1; }
		
		//('-' ID | '.' (INT | ID))*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'-' ID
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0_1() { return cIDTerminalRuleCall_1_0_1; }
		
		//'.' (INT | ID)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//(INT | ID)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_0() { return cINTTerminalRuleCall_1_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1_1() { return cIDTerminalRuleCall_1_1_1_1; }
	}
	
	public class SimulationCorntrolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.SimulationCorntrol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENothingKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTEPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTEPStepKeyword_1_0 = (Keyword)cSTEPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTOPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTOPStopKeyword_2_0 = (Keyword)cSTOPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPAUSEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPAUSEPauseKeyword_3_0 = (Keyword)cPAUSEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPLAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPLAYPlayKeyword_4_0 = (Keyword)cPLAYEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SimulationCorntrol:
		//	NONE='nothing' | STEP='step' | STOP='stop' | PAUSE='pause' | PLAY='play';
		public EnumRule getRule() { return rule; }
		
		//NONE='nothing' | STEP='step' | STOP='stop' | PAUSE='pause' | PLAY='play'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE='nothing'
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//'nothing'
		public Keyword getNONENothingKeyword_0_0() { return cNONENothingKeyword_0_0; }
		
		//STEP='step'
		public EnumLiteralDeclaration getSTEPEnumLiteralDeclaration_1() { return cSTEPEnumLiteralDeclaration_1; }
		
		//'step'
		public Keyword getSTEPStepKeyword_1_0() { return cSTEPStepKeyword_1_0; }
		
		//STOP='stop'
		public EnumLiteralDeclaration getSTOPEnumLiteralDeclaration_2() { return cSTOPEnumLiteralDeclaration_2; }
		
		//'stop'
		public Keyword getSTOPStopKeyword_2_0() { return cSTOPStopKeyword_2_0; }
		
		//PAUSE='pause'
		public EnumLiteralDeclaration getPAUSEEnumLiteralDeclaration_3() { return cPAUSEEnumLiteralDeclaration_3; }
		
		//'pause'
		public Keyword getPAUSEPauseKeyword_3_0() { return cPAUSEPauseKeyword_3_0; }
		
		//PLAY='play'
		public EnumLiteralDeclaration getPLAYEnumLiteralDeclaration_4() { return cPLAYEnumLiteralDeclaration_4; }
		
		//'play'
		public Keyword getPLAYPlayKeyword_4_0() { return cPLAYPlayKeyword_4_0; }
	}
	
	private final VisualizationElements pVisualization;
	private final ContentElements pContent;
	private final BindingElements pBinding;
	private final HandlerElements pHandler;
	private final ActionElements pAction;
	private final CodeElements pCode;
	private final SetterElements pSetter;
	private final BindingInterface1Elements pBindingInterface1;
	private final BindingInterface2Elements pBindingInterface2;
	private final HandlerInterface1Elements pHandlerInterface1;
	private final HandlerInterface2Elements pHandlerInterface2;
	private final ActionInterface1Elements pActionInterface1;
	private final ActionInterface2Elements pActionInterface2;
	private final CodeInterfaceElements pCodeInterface;
	private final SetterInterfaceElements pSetterInterface;
	private final SimpleKeyElements pSimpleKey;
	private final ComplexKeyElements pComplexKey;
	private final SimulationCorntrolElements eSimulationCorntrol;
	private final TerminalRule tBOOL;
	private final TerminalRule tESCAPED_CHAR;
	private final TerminalRule tSCRIPT;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KiVisGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVisualization = new VisualizationElements();
		this.pContent = new ContentElements();
		this.pBinding = new BindingElements();
		this.pHandler = new HandlerElements();
		this.pAction = new ActionElements();
		this.pCode = new CodeElements();
		this.pSetter = new SetterElements();
		this.pBindingInterface1 = new BindingInterface1Elements();
		this.pBindingInterface2 = new BindingInterface2Elements();
		this.pHandlerInterface1 = new HandlerInterface1Elements();
		this.pHandlerInterface2 = new HandlerInterface2Elements();
		this.pActionInterface1 = new ActionInterface1Elements();
		this.pActionInterface2 = new ActionInterface2Elements();
		this.pCodeInterface = new CodeInterfaceElements();
		this.pSetterInterface = new SetterInterfaceElements();
		this.pSimpleKey = new SimpleKeyElements();
		this.pComplexKey = new ComplexKeyElements();
		this.eSimulationCorntrol = new SimulationCorntrolElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.BOOL");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.ESCAPED_CHAR");
		this.tSCRIPT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.SCRIPT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.kivis.KiVis.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.kivis.KiVis".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Visualization:
	//	('image' images+=STRING)* ('load' loads+=STRING)* ('init' init=SCRIPT)?
	//	content+=Content*;
	public VisualizationElements getVisualizationAccess() {
		return pVisualization;
	}
	
	public ParserRule getVisualizationRule() {
		return getVisualizationAccess().getRule();
	}
	
	//Content:
	//	Binding | Handler | Action | Code;
	public ContentElements getContentAccess() {
		return pContent;
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}
	
	//Binding:
	//	'bind' variable=ComplexKey ('to' domElement=STRING
	//	'with' interface=BindingInterface1 script=SCRIPT
	//	|
	//	'with' interface=BindingInterface2 script=SCRIPT);
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//Handler:
	//	'handle' variable=SimpleKey ('in' multimatch?='all'? domElement=STRING
	//	'with' interface=HandlerInterface1 script=SCRIPT
	//	|
	//	'with' interface=HandlerInterface2 script=SCRIPT);
	public HandlerElements getHandlerAccess() {
		return pHandler;
	}
	
	public ParserRule getHandlerRule() {
		return getHandlerAccess().getRule();
	}
	
	//Action:
	//	'event' domEvent=STRING
	//	'on' multimatch?='all'? domElement=STRING ('do' interface=ActionInterface1 script=SCRIPT)? ('deferred'
	//	deferredInterface=ActionInterface2 deferredScript=SCRIPT)? ('set' setter+=Setter)* ('signal' signal=ComplexKey)?
	//	('simulation' control=SimulationCorntrol)?;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Code:
	//	'script' interface=CodeInterface script=SCRIPT;
	public CodeElements getCodeAccess() {
		return pCode;
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}
	
	//Setter:
	//	variable=ComplexKey
	//	interface=SetterInterface
	//	script=SCRIPT;
	public SetterElements getSetterAccess() {
		return pSetter;
	}
	
	public ParserRule getSetterRule() {
		return getSetterAccess().getRule();
	}
	
	//BindingInterface1 Interface:
	//	{Interface}
	//	'('
	//	element=ID (',' variable=ID
	//	|
	//	',' variable=ID
	//	',' pool=ID)?
	//	')' '=>'?;
	public BindingInterface1Elements getBindingInterface1Access() {
		return pBindingInterface1;
	}
	
	public ParserRule getBindingInterface1Rule() {
		return getBindingInterface1Access().getRule();
	}
	
	//BindingInterface2 Interface:
	//	{Interface}
	//	'(' (variable=ID (',' pool=ID)?)?
	//	')' '=>'?;
	public BindingInterface2Elements getBindingInterface2Access() {
		return pBindingInterface2;
	}
	
	public ParserRule getBindingInterface2Rule() {
		return getBindingInterface2Access().getRule();
	}
	
	//HandlerInterface1 Interface:
	//	{Interface}
	//	'('
	//	element=ID
	//	',' variable=ID (',' pool=ID)?
	//	')' '=>'?;
	public HandlerInterface1Elements getHandlerInterface1Access() {
		return pHandlerInterface1;
	}
	
	public ParserRule getHandlerInterface1Rule() {
		return getHandlerInterface1Access().getRule();
	}
	
	//HandlerInterface2 Interface:
	//	{Interface}
	//	'('
	//	variable=ID (',' pool=ID)?
	//	')' '=>'?;
	public HandlerInterface2Elements getHandlerInterface2Access() {
		return pHandlerInterface2;
	}
	
	public ParserRule getHandlerInterface2Rule() {
		return getHandlerInterface2Access().getRule();
	}
	
	//ActionInterface1 Interface:
	//	{Interface} ('('
	//	')' '=>'?)?;
	public ActionInterface1Elements getActionInterface1Access() {
		return pActionInterface1;
	}
	
	public ParserRule getActionInterface1Rule() {
		return getActionInterface1Access().getRule();
	}
	
	//ActionInterface2 Interface:
	//	{Interface} ('('
	//	pool=ID?
	//	')' '=>'?)?;
	public ActionInterface2Elements getActionInterface2Access() {
		return pActionInterface2;
	}
	
	public ParserRule getActionInterface2Rule() {
		return getActionInterface2Access().getRule();
	}
	
	//CodeInterface Interface:
	//	{Interface} ('('
	//	pool=ID?
	//	')' '=>'?)?;
	public CodeInterfaceElements getCodeInterfaceAccess() {
		return pCodeInterface;
	}
	
	public ParserRule getCodeInterfaceRule() {
		return getCodeInterfaceAccess().getRule();
	}
	
	//SetterInterface Interface:
	//	{Interface} ('('
	//	')' '=>'?)?;
	public SetterInterfaceElements getSetterInterfaceAccess() {
		return pSetterInterface;
	}
	
	public ParserRule getSetterInterfaceRule() {
		return getSetterInterfaceAccess().getRule();
	}
	
	//// Json object member key
	//SimpleKey:
	//	(ID | '#' ID) ('-' ID)*;
	public SimpleKeyElements getSimpleKeyAccess() {
		return pSimpleKey;
	}
	
	public ParserRule getSimpleKeyRule() {
		return getSimpleKeyAccess().getRule();
	}
	
	//// Json object member key with member access via '.'
	//ComplexKey:
	//	(ID | '#' ID) ('-' ID | '.' (INT | ID))*;
	public ComplexKeyElements getComplexKeyAccess() {
		return pComplexKey;
	}
	
	public ParserRule getComplexKeyRule() {
		return getComplexKeyAccess().getRule();
	}
	
	//enum SimulationCorntrol:
	//	NONE='nothing' | STEP='step' | STOP='stop' | PAUSE='pause' | PLAY='play';
	public SimulationCorntrolElements getSimulationCorntrolAccess() {
		return eSimulationCorntrol;
	}
	
	public EnumRule getSimulationCorntrolRule() {
		return getSimulationCorntrolAccess().getRule();
	}
	
	//terminal BOOL returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal fragment ESCAPED_CHAR:
	//	'\\' ('n' | 't' | 'r' | '\\');
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//terminal SCRIPT:
	//	"'" (ESCAPED_CHAR | !('\\' | "'"))* "'";
	public TerminalRule getSCRIPTRule() {
		return tSCRIPT;
	}
	
	//@Override
	//terminal STRING:
	//	'"' (ESCAPED_CHAR | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
