/**
 * generated by Xtext
 */
package de.cau.cs.kieler.kivis.kivis.impl;

import de.cau.cs.kieler.kivis.kivis.Action;
import de.cau.cs.kieler.kivis.kivis.Interface;
import de.cau.cs.kieler.kivis.kivis.KivisPackage;
import de.cau.cs.kieler.kivis.kivis.Setter;
import de.cau.cs.kieler.kivis.kivis.SimulationCorntrol;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.cau.cs.kieler.kivis.kivis.impl.ActionImpl#getDomEvent <em>Dom Event</em>}</li>
 *   <li>{@link de.cau.cs.kieler.kivis.kivis.impl.ActionImpl#isMultimatch <em>Multimatch</em>}</li>
 *   <li>{@link de.cau.cs.kieler.kivis.kivis.impl.ActionImpl#getDomElement <em>Dom Element</em>}</li>
 *   <li>{@link de.cau.cs.kieler.kivis.kivis.impl.ActionImpl#getDeferredInterface <em>Deferred Interface</em>}</li>
 *   <li>{@link de.cau.cs.kieler.kivis.kivis.impl.ActionImpl#getDeferredScript <em>Deferred Script</em>}</li>
 *   <li>{@link de.cau.cs.kieler.kivis.kivis.impl.ActionImpl#getSetter <em>Setter</em>}</li>
 *   <li>{@link de.cau.cs.kieler.kivis.kivis.impl.ActionImpl#getSignal <em>Signal</em>}</li>
 *   <li>{@link de.cau.cs.kieler.kivis.kivis.impl.ActionImpl#getControl <em>Control</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActionImpl extends ContentImpl implements Action
{
  /**
   * The default value of the '{@link #getDomEvent() <em>Dom Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomEvent()
   * @generated
   * @ordered
   */
  protected static final String DOM_EVENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDomEvent() <em>Dom Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomEvent()
   * @generated
   * @ordered
   */
  protected String domEvent = DOM_EVENT_EDEFAULT;

  /**
   * The default value of the '{@link #isMultimatch() <em>Multimatch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMultimatch()
   * @generated
   * @ordered
   */
  protected static final boolean MULTIMATCH_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMultimatch() <em>Multimatch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMultimatch()
   * @generated
   * @ordered
   */
  protected boolean multimatch = MULTIMATCH_EDEFAULT;

  /**
   * The default value of the '{@link #getDomElement() <em>Dom Element</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomElement()
   * @generated
   * @ordered
   */
  protected static final String DOM_ELEMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDomElement() <em>Dom Element</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomElement()
   * @generated
   * @ordered
   */
  protected String domElement = DOM_ELEMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getDeferredInterface() <em>Deferred Interface</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeferredInterface()
   * @generated
   * @ordered
   */
  protected Interface deferredInterface;

  /**
   * The default value of the '{@link #getDeferredScript() <em>Deferred Script</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeferredScript()
   * @generated
   * @ordered
   */
  protected static final String DEFERRED_SCRIPT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDeferredScript() <em>Deferred Script</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeferredScript()
   * @generated
   * @ordered
   */
  protected String deferredScript = DEFERRED_SCRIPT_EDEFAULT;

  /**
   * The cached value of the '{@link #getSetter() <em>Setter</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSetter()
   * @generated
   * @ordered
   */
  protected EList<Setter> setter;

  /**
   * The default value of the '{@link #getSignal() <em>Signal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignal()
   * @generated
   * @ordered
   */
  protected static final String SIGNAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSignal() <em>Signal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignal()
   * @generated
   * @ordered
   */
  protected String signal = SIGNAL_EDEFAULT;

  /**
   * The default value of the '{@link #getControl() <em>Control</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControl()
   * @generated
   * @ordered
   */
  protected static final SimulationCorntrol CONTROL_EDEFAULT = SimulationCorntrol.NONE;

  /**
   * The cached value of the '{@link #getControl() <em>Control</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getControl()
   * @generated
   * @ordered
   */
  protected SimulationCorntrol control = CONTROL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KivisPackage.Literals.ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDomEvent()
  {
    return domEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDomEvent(String newDomEvent)
  {
    String oldDomEvent = domEvent;
    domEvent = newDomEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KivisPackage.ACTION__DOM_EVENT, oldDomEvent, domEvent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isMultimatch()
  {
    return multimatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMultimatch(boolean newMultimatch)
  {
    boolean oldMultimatch = multimatch;
    multimatch = newMultimatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KivisPackage.ACTION__MULTIMATCH, oldMultimatch, multimatch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDomElement()
  {
    return domElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDomElement(String newDomElement)
  {
    String oldDomElement = domElement;
    domElement = newDomElement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KivisPackage.ACTION__DOM_ELEMENT, oldDomElement, domElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Interface getDeferredInterface()
  {
    return deferredInterface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeferredInterface(Interface newDeferredInterface, NotificationChain msgs)
  {
    Interface oldDeferredInterface = deferredInterface;
    deferredInterface = newDeferredInterface;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KivisPackage.ACTION__DEFERRED_INTERFACE, oldDeferredInterface, newDeferredInterface);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeferredInterface(Interface newDeferredInterface)
  {
    if (newDeferredInterface != deferredInterface)
    {
      NotificationChain msgs = null;
      if (deferredInterface != null)
        msgs = ((InternalEObject)deferredInterface).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KivisPackage.ACTION__DEFERRED_INTERFACE, null, msgs);
      if (newDeferredInterface != null)
        msgs = ((InternalEObject)newDeferredInterface).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KivisPackage.ACTION__DEFERRED_INTERFACE, null, msgs);
      msgs = basicSetDeferredInterface(newDeferredInterface, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KivisPackage.ACTION__DEFERRED_INTERFACE, newDeferredInterface, newDeferredInterface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDeferredScript()
  {
    return deferredScript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeferredScript(String newDeferredScript)
  {
    String oldDeferredScript = deferredScript;
    deferredScript = newDeferredScript;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KivisPackage.ACTION__DEFERRED_SCRIPT, oldDeferredScript, deferredScript));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Setter> getSetter()
  {
    if (setter == null)
    {
      setter = new EObjectContainmentEList<Setter>(Setter.class, this, KivisPackage.ACTION__SETTER);
    }
    return setter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSignal()
  {
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSignal(String newSignal)
  {
    String oldSignal = signal;
    signal = newSignal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KivisPackage.ACTION__SIGNAL, oldSignal, signal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimulationCorntrol getControl()
  {
    return control;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setControl(SimulationCorntrol newControl)
  {
    SimulationCorntrol oldControl = control;
    control = newControl == null ? CONTROL_EDEFAULT : newControl;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KivisPackage.ACTION__CONTROL, oldControl, control));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KivisPackage.ACTION__DEFERRED_INTERFACE:
        return basicSetDeferredInterface(null, msgs);
      case KivisPackage.ACTION__SETTER:
        return ((InternalEList<?>)getSetter()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KivisPackage.ACTION__DOM_EVENT:
        return getDomEvent();
      case KivisPackage.ACTION__MULTIMATCH:
        return isMultimatch();
      case KivisPackage.ACTION__DOM_ELEMENT:
        return getDomElement();
      case KivisPackage.ACTION__DEFERRED_INTERFACE:
        return getDeferredInterface();
      case KivisPackage.ACTION__DEFERRED_SCRIPT:
        return getDeferredScript();
      case KivisPackage.ACTION__SETTER:
        return getSetter();
      case KivisPackage.ACTION__SIGNAL:
        return getSignal();
      case KivisPackage.ACTION__CONTROL:
        return getControl();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KivisPackage.ACTION__DOM_EVENT:
        setDomEvent((String)newValue);
        return;
      case KivisPackage.ACTION__MULTIMATCH:
        setMultimatch((Boolean)newValue);
        return;
      case KivisPackage.ACTION__DOM_ELEMENT:
        setDomElement((String)newValue);
        return;
      case KivisPackage.ACTION__DEFERRED_INTERFACE:
        setDeferredInterface((Interface)newValue);
        return;
      case KivisPackage.ACTION__DEFERRED_SCRIPT:
        setDeferredScript((String)newValue);
        return;
      case KivisPackage.ACTION__SETTER:
        getSetter().clear();
        getSetter().addAll((Collection<? extends Setter>)newValue);
        return;
      case KivisPackage.ACTION__SIGNAL:
        setSignal((String)newValue);
        return;
      case KivisPackage.ACTION__CONTROL:
        setControl((SimulationCorntrol)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KivisPackage.ACTION__DOM_EVENT:
        setDomEvent(DOM_EVENT_EDEFAULT);
        return;
      case KivisPackage.ACTION__MULTIMATCH:
        setMultimatch(MULTIMATCH_EDEFAULT);
        return;
      case KivisPackage.ACTION__DOM_ELEMENT:
        setDomElement(DOM_ELEMENT_EDEFAULT);
        return;
      case KivisPackage.ACTION__DEFERRED_INTERFACE:
        setDeferredInterface((Interface)null);
        return;
      case KivisPackage.ACTION__DEFERRED_SCRIPT:
        setDeferredScript(DEFERRED_SCRIPT_EDEFAULT);
        return;
      case KivisPackage.ACTION__SETTER:
        getSetter().clear();
        return;
      case KivisPackage.ACTION__SIGNAL:
        setSignal(SIGNAL_EDEFAULT);
        return;
      case KivisPackage.ACTION__CONTROL:
        setControl(CONTROL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KivisPackage.ACTION__DOM_EVENT:
        return DOM_EVENT_EDEFAULT == null ? domEvent != null : !DOM_EVENT_EDEFAULT.equals(domEvent);
      case KivisPackage.ACTION__MULTIMATCH:
        return multimatch != MULTIMATCH_EDEFAULT;
      case KivisPackage.ACTION__DOM_ELEMENT:
        return DOM_ELEMENT_EDEFAULT == null ? domElement != null : !DOM_ELEMENT_EDEFAULT.equals(domElement);
      case KivisPackage.ACTION__DEFERRED_INTERFACE:
        return deferredInterface != null;
      case KivisPackage.ACTION__DEFERRED_SCRIPT:
        return DEFERRED_SCRIPT_EDEFAULT == null ? deferredScript != null : !DEFERRED_SCRIPT_EDEFAULT.equals(deferredScript);
      case KivisPackage.ACTION__SETTER:
        return setter != null && !setter.isEmpty();
      case KivisPackage.ACTION__SIGNAL:
        return SIGNAL_EDEFAULT == null ? signal != null : !SIGNAL_EDEFAULT.equals(signal);
      case KivisPackage.ACTION__CONTROL:
        return control != CONTROL_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (domEvent: ");
    result.append(domEvent);
    result.append(", multimatch: ");
    result.append(multimatch);
    result.append(", domElement: ");
    result.append(domElement);
    result.append(", deferredScript: ");
    result.append(deferredScript);
    result.append(", signal: ");
    result.append(signal);
    result.append(", control: ");
    result.append(control);
    result.append(')');
    return result.toString();
  }

} //ActionImpl
