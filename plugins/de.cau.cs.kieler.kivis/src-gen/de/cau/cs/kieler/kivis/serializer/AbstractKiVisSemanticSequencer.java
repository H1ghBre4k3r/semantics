/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kivis.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.kivis.kivis.Binding;
import de.cau.cs.kieler.kivis.kivis.Code;
import de.cau.cs.kieler.kivis.kivis.Handler;
import de.cau.cs.kieler.kivis.kivis.Interface;
import de.cau.cs.kieler.kivis.kivis.KivisPackage;
import de.cau.cs.kieler.kivis.kivis.Visualization;
import de.cau.cs.kieler.kivis.services.KiVisGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractKiVisSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KiVisGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KivisPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KivisPackage.ACTION:
				sequence_Action(context, (de.cau.cs.kieler.kivis.kivis.Action) semanticObject); 
				return; 
			case KivisPackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case KivisPackage.CODE:
				sequence_Code(context, (Code) semanticObject); 
				return; 
			case KivisPackage.HANDLER:
				sequence_Handler(context, (Handler) semanticObject); 
				return; 
			case KivisPackage.INTERFACE:
				if (rule == grammarAccess.getActionInterface1Rule()) {
					sequence_ActionInterface1(context, (Interface) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getActionInterface2Rule()) {
					sequence_ActionInterface2(context, (Interface) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBindingInterface1Rule()) {
					sequence_BindingInterface1(context, (Interface) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBindingInterface2Rule()) {
					sequence_BindingInterface2(context, (Interface) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCodeInterfaceRule()) {
					sequence_CodeInterface(context, (Interface) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getHandlerInterface1Rule()) {
					sequence_HandlerInterface1(context, (Interface) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getHandlerInterface2Rule()) {
					sequence_HandlerInterface2(context, (Interface) semanticObject); 
					return; 
				}
				else break;
			case KivisPackage.VISUALIZATION:
				sequence_Visualization(context, (Visualization) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActionInterface1 returns Interface
	 *
	 * Constraint:
	 *     pool=ID?
	 */
	protected void sequence_ActionInterface1(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActionInterface2 returns Interface
	 *
	 * Constraint:
	 *     {Interface}
	 */
	protected void sequence_ActionInterface2(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Action
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (
	 *         domEvent=STRING 
	 *         multimatch?='all'? 
	 *         domElement=STRING 
	 *         ((deferred?='deferred' interface=ActionInterface1 script=SCRIPT) | (interface=ActionInterface2 script=SCRIPT))? 
	 *         variable=Key? 
	 *         control=SimulationCorntrol?
	 *     )
	 */
	protected void sequence_Action(ISerializationContext context, de.cau.cs.kieler.kivis.kivis.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BindingInterface1 returns Interface
	 *
	 * Constraint:
	 *     (element=ID (variable=ID | (variable=ID pool=ID))?)
	 */
	protected void sequence_BindingInterface1(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BindingInterface2 returns Interface
	 *
	 * Constraint:
	 *     (variable=ID pool=ID?)?
	 */
	protected void sequence_BindingInterface2(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Binding
	 *     Binding returns Binding
	 *
	 * Constraint:
	 *     (variable=Key ((domElement=STRING interface=BindingInterface1 script=SCRIPT) | (interface=BindingInterface2 script=SCRIPT)))
	 */
	protected void sequence_Binding(ISerializationContext context, Binding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CodeInterface returns Interface
	 *
	 * Constraint:
	 *     pool=ID?
	 */
	protected void sequence_CodeInterface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Code
	 *     Code returns Code
	 *
	 * Constraint:
	 *     (interface=CodeInterface script=SCRIPT)
	 */
	protected void sequence_Code(ISerializationContext context, Code semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KivisPackage.Literals.CONTENT__INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KivisPackage.Literals.CONTENT__INTERFACE));
			if (transientValues.isValueTransient(semanticObject, KivisPackage.Literals.CONTENT__SCRIPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KivisPackage.Literals.CONTENT__SCRIPT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCodeAccess().getInterfaceCodeInterfaceParserRuleCall_1_0(), semanticObject.getInterface());
		feeder.accept(grammarAccess.getCodeAccess().getScriptSCRIPTTerminalRuleCall_2_0(), semanticObject.getScript());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HandlerInterface1 returns Interface
	 *
	 * Constraint:
	 *     (element=ID variable=ID pool=ID?)
	 */
	protected void sequence_HandlerInterface1(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HandlerInterface2 returns Interface
	 *
	 * Constraint:
	 *     (variable=ID pool=ID?)
	 */
	protected void sequence_HandlerInterface2(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Handler
	 *     Handler returns Handler
	 *
	 * Constraint:
	 *     (variable=Key ((multimatch?='all'? domElement=STRING interface=HandlerInterface1 script=SCRIPT) | (interface=HandlerInterface2 script=SCRIPT)))
	 */
	protected void sequence_Handler(ISerializationContext context, Handler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Visualization returns Visualization
	 *
	 * Constraint:
	 *     (
	 *         (images+=STRING* loads+=STRING+ init=SCRIPT content+=Content*) | 
	 *         (images+=STRING* (init=SCRIPT | (init=SCRIPT content+=Content*))) | 
	 *         init=SCRIPT | 
	 *         (init=SCRIPT content+=Content*)
	 *     )?
	 */
	protected void sequence_Visualization(ISerializationContext context, Visualization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
