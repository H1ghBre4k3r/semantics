grammar de.cau.cs.kieler.kivis.KiVis with org.eclipse.xtext.common.Terminals

generate kivis "http://www.cau.de/cs/kieler/kivis/KiVis"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Visualization:
	('image' images += STRING)*
	('load' loads += STRING)*
	('init' init = SCRIPT)?
	(content += Content)*
;

Content:
    Binding | Handler | Action | Code
;

Binding:
    'bind' variable=ComplexKey
    (
        'to' domElement=STRING
        'with' interface=BindingInterface1 script=SCRIPT
    |
        'with' interface=BindingInterface2 script=SCRIPT
    )
;

Handler:
    'handle' variable=SimpleKey
    (
        'in' (multimatch?='all')? domElement=STRING
        'with' interface=HandlerInterface1 script=SCRIPT
    |
        'with' interface=HandlerInterface2 script=SCRIPT
    )
;

Action:
    'event' domEvent=STRING
    'on' (multimatch?='all')? domElement=STRING
    ('do' interface=ActionInterface1 script=SCRIPT)?
    ('deferred' deferredInterface=ActionInterface2 deferredScript=SCRIPT)?
    ('set' setter+=Setter)*
    ('signal' signal=ComplexKey)?
    ('simulation' control=SimulationCorntrol)?
;

Code:
    'script' interface=CodeInterface script=SCRIPT
;

Setter:
    variable=ComplexKey
    interface=SetterInterface
    script=SCRIPT
;


BindingInterface1 returns Interface:
    {Interface}
    '('
    element = ID
    (
        ',' variable = ID
    |
        ',' variable = ID
        ',' pool = ID
    )?
    ')' '=>'?
;

BindingInterface2 returns Interface:
    {Interface}
    '('
    (
    variable = ID
    (',' pool = ID)?
    )?
    ')' '=>'?
;

HandlerInterface1 returns Interface:
    {Interface}
    '('
    element = ID
    ',' variable = ID
    (',' pool = ID)?
    ')' '=>'?
;

HandlerInterface2 returns Interface:
    {Interface}
    '('
    variable = ID
    (',' pool = ID)?
    ')' '=>'?
;

ActionInterface1 returns Interface:
    {Interface}
    (
    '('
    ')' '=>'?
    )?
;

ActionInterface2 returns Interface:
    {Interface}
    (
    '('
    (pool = ID)?
    ')' '=>'?
    )?
;

CodeInterface returns Interface:
    {Interface}
    (
    '('
    (pool = ID)?
    ')' '=>'?
    )?
;

SetterInterface returns Interface:
    {Interface}
    (
    '('
    ')' '=>'?
    )?
;

// Json object member key
SimpleKey returns ecore::EString:
    (ID | '#' ID) ('-' ID)*
;
// Json object member key with member access via '.'
ComplexKey returns ecore::EString:
    (ID | '#' ID) (('-' ID) | ('.' (INT | ID)))*
;

enum SimulationCorntrol:
    NONE='nothing' | STEP='step' | STOP='stop' | PAUSE='pause' | PLAY='play'
;

terminal BOOL returns ecore::EBooleanObject :
    'true' | 'false';

terminal fragment ESCAPED_CHAR:
    '\\' ('n'|'t'|'r'|'\\');
    
terminal SCRIPT returns ecore::EString:
    "'" ( ESCAPED_CHAR | !('\\'|"'") )* "'";
    
@Override 
terminal STRING returns ecore::EString:
    '"' ( ESCAPED_CHAR | !('\\'|'"') )* '"';
