/*
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.ide.highlighting


import de.cau.cs.kieler.core.ls.IHighlighting
import java.util.List

class LustreHighlighting implements IHighlighting {
    override String getId() {
        return "lus" // assume that only one extension is present
    }
    override String getName() {
        return "Lustre"
    }
    override List<String> getKeywords() {
        return #["_",
        "and",
        "assert",
        "automaton",
        "bool",
        "class",
        "combine",
        "commuting",
        "conflicting",
        "const",
        "current",
        "div",
        "do",
        "else",
        "emit",
        "enum",
        "expression",
        "extern",
        "fby",
        "float",
        "function",
        "global",
        "host",
        "if",
        "include",
        "initial",
        "input",
        "int",
        "is",
        "json",
        "label",
        "last",
        "let",
        "max",
        "min",
        "mod",
        "node",
        "none",
        "nor",
        "not",
        "null",
        "or",
        "output",
        "pre",
        "print",
        "private",
        "protected",
        "public",
        "random",
        "randomize",
        "real",
        "ref",
        "restart",
        "resume",
        "returns",
        "schedule",
        "scope",
        "seq",
        "sfby",
        "signal",
        "state",
        "static",
        "string",
        "struct",
        "tel",
        "then",
        "this",
        "to",
        "type",
        "unless",
        "unsafe",
        "until",
        "val",
        "var",
        "void",
        "when",
        "xor"
        ]
    }
}
