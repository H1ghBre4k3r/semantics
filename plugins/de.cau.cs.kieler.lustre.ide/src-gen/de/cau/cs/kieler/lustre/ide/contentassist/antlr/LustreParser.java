/*
 * generated by Xtext 2.10.0
 */
package de.cau.cs.kieler.lustre.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.cau.cs.kieler.lustre.ide.contentassist.antlr.internal.InternalLustreParser;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class LustreParser extends AbstractContentAssistParser {

	@Inject
	private LustreGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalLustreParser createParser() {
		InternalLustreParser result = new InternalLustreParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getType_DeclAccess().getAlternatives(), "rule__Type_Decl__Alternatives");
					put(grammarAccess.getConst_DeclAccess().getAlternatives(), "rule__Const_Decl__Alternatives");
					put(grammarAccess.getEq_or_AstAccess().getAlternatives(), "rule__Eq_or_Ast__Alternatives");
					put(grammarAccess.getLeft_PartAccess().getAlternatives(), "rule__Left_Part__Alternatives");
					put(grammarAccess.getSelectorAccess().getAlternatives(), "rule__Selector__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
					put(grammarAccess.getMulOrDivAccess().getAlternatives_1_0(), "rule__MulOrDiv__Alternatives_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAtomicExpressionAccess().getAlternatives(), "rule__AtomicExpression__Alternatives");
					put(grammarAccess.getConstantExpressionAccess().getAlternatives(), "rule__ConstantExpression__Alternatives");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getPackage_HeaderAccess().getGroup(), "rule__Package_Header__Group__0");
					put(grammarAccess.getPackage_HeaderAccess().getGroup_2(), "rule__Package_Header__Group_2__0");
					put(grammarAccess.getPackage_ProvideAccess().getGroup(), "rule__Package_Provide__Group__0");
					put(grammarAccess.getPackage_Body_ContentAccess().getGroup(), "rule__Package_Body_Content__Group__0");
					put(grammarAccess.getPragmaAccess().getGroup(), "rule__Pragma__Group__0");
					put(grammarAccess.getIdentifierAccess().getGroup(), "rule__Identifier__Group__0");
					put(grammarAccess.getIdentifierAccess().getGroup_0(), "rule__Identifier__Group_0__0");
					put(grammarAccess.getType_DeclAccess().getGroup_0(), "rule__Type_Decl__Group_0__0");
					put(grammarAccess.getType_DeclAccess().getGroup_1(), "rule__Type_Decl__Group_1__0");
					put(grammarAccess.getRecord_TypeAccess().getGroup(), "rule__Record_Type__Group__0");
					put(grammarAccess.getField_ListAccess().getGroup(), "rule__Field_List__Group__0");
					put(grammarAccess.getField_ListAccess().getGroup_1(), "rule__Field_List__Group_1__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getEnum_TypeAccess().getGroup(), "rule__Enum_Type__Group__0");
					put(grammarAccess.getConst_DeclAccess().getGroup_0(), "rule__Const_Decl__Group_0__0");
					put(grammarAccess.getConst_DeclAccess().getGroup_1(), "rule__Const_Decl__Group_1__0");
					put(grammarAccess.getConst_DeclAccess().getGroup_2(), "rule__Const_Decl__Group_2__0");
					put(grammarAccess.getIdent_ListAccess().getGroup(), "rule__Ident_List__Group__0");
					put(grammarAccess.getIdent_ListAccess().getGroup_1(), "rule__Ident_List__Group_1__0");
					put(grammarAccess.getNode_DeclAccess().getGroup(), "rule__Node_Decl__Group__0");
					put(grammarAccess.getNode_HeaderAccess().getGroup(), "rule__Node_Header__Group__0");
					put(grammarAccess.getVar_Decl_ListAccess().getGroup(), "rule__Var_Decl_List__Group__0");
					put(grammarAccess.getVar_Decl_ListAccess().getGroup_1(), "rule__Var_Decl_List__Group_1__0");
					put(grammarAccess.getVar_DeclAccess().getGroup(), "rule__Var_Decl__Group__0");
					put(grammarAccess.getDeclared_ClockAccess().getGroup(), "rule__Declared_Clock__Group__0");
					put(grammarAccess.getFN_BodyAccess().getGroup(), "rule__FN_Body__Group__0");
					put(grammarAccess.getLocal_Var_DeclAccess().getGroup(), "rule__Local_Var_Decl__Group__0");
					put(grammarAccess.getEquation_ListAccess().getGroup(), "rule__Equation_List__Group__0");
					put(grammarAccess.getEquationAccess().getGroup(), "rule__Equation__Group__0");
					put(grammarAccess.getLeft_PartAccess().getGroup_0(), "rule__Left_Part__Group_0__0");
					put(grammarAccess.getLeft_ListAccess().getGroup(), "rule__Left_List__Group__0");
					put(grammarAccess.getLeft_ListAccess().getGroup_1(), "rule__Left_List__Group_1__0");
					put(grammarAccess.getLeftAccess().getGroup(), "rule__Left__Group__0");
					put(grammarAccess.getSelectorAccess().getGroup_0(), "rule__Selector__Group_0__0");
					put(grammarAccess.getSelectorAccess().getGroup_1(), "rule__Selector__Group_1__0");
					put(grammarAccess.getSelTrancheEndAccess().getGroup(), "rule__SelTrancheEnd__Group__0");
					put(grammarAccess.getAssertionAccess().getGroup(), "rule__Assertion__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getFbyAccess().getGroup(), "rule__Fby__Group__0");
					put(grammarAccess.getFbyAccess().getGroup_1(), "rule__Fby__Group_1__0");
					put(grammarAccess.getArrowAccess().getGroup(), "rule__Arrow__Group__0");
					put(grammarAccess.getArrowAccess().getGroup_1(), "rule__Arrow__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
					put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1_0_0(), "rule__MulOrDiv__Group_1_0_0__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1_0_1(), "rule__MulOrDiv__Group_1_0_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
					put(grammarAccess.getPrimaryAccess().getGroup_4(), "rule__Primary__Group_4__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup_1(), "rule__AtomicExpression__Group_1__0");
					put(grammarAccess.getConstantExpressionAccess().getGroup_0(), "rule__ConstantExpression__Group_0__0");
					put(grammarAccess.getConstantExpressionAccess().getGroup_1(), "rule__ConstantExpression__Group_1__0");
					put(grammarAccess.getConstantExpressionAccess().getGroup_2(), "rule__ConstantExpression__Group_2__0");
					put(grammarAccess.getProgramAccess().getPkgAssignment(), "rule__Program__PkgAssignment");
					put(grammarAccess.getPackageAccess().getHeadAssignment_0(), "rule__Package__HeadAssignment_0");
					put(grammarAccess.getPackageAccess().getBodyAssignment_1(), "rule__Package__BodyAssignment_1");
					put(grammarAccess.getPackage_HeaderAccess().getNameAssignment_1(), "rule__Package_Header__NameAssignment_1");
					put(grammarAccess.getPackage_HeaderAccess().getUsesAssignment_2_1(), "rule__Package_Header__UsesAssignment_2_1");
					put(grammarAccess.getPackage_HeaderAccess().getProvidesAssignment_4(), "rule__Package_Header__ProvidesAssignment_4");
					put(grammarAccess.getPackage_ProvideAccess().getNameAssignment_1(), "rule__Package_Provide__NameAssignment_1");
					put(grammarAccess.getPackage_ProvideAccess().getParamAssignment_3(), "rule__Package_Provide__ParamAssignment_3");
					put(grammarAccess.getPackage_ProvideAccess().getRetAssignment_7(), "rule__Package_Provide__RetAssignment_7");
					put(grammarAccess.getPackage_Body_ContentAccess().getEntitiesAssignment_1(), "rule__Package_Body_Content__EntitiesAssignment_1");
					put(grammarAccess.getIdentifierAccess().getPkgAssignment_0_0(), "rule__Identifier__PkgAssignment_0_0");
					put(grammarAccess.getIdentifierAccess().getFromPgkAssignment_0_1(), "rule__Identifier__FromPgkAssignment_0_1");
					put(grammarAccess.getIdentifierAccess().getNameAssignment_1(), "rule__Identifier__NameAssignment_1");
					put(grammarAccess.getType_DeclAccess().getNameAssignment_0_1(), "rule__Type_Decl__NameAssignment_0_1");
					put(grammarAccess.getType_DeclAccess().getNameAssignment_1_1(), "rule__Type_Decl__NameAssignment_1_1");
					put(grammarAccess.getType_DeclAccess().getTypeAssignment_1_3(), "rule__Type_Decl__TypeAssignment_1_3");
					put(grammarAccess.getTypeAccess().getNameAssignment(), "rule__Type__NameAssignment");
					put(grammarAccess.getRecord_TypeAccess().getFieldsAssignment_2(), "rule__Record_Type__FieldsAssignment_2");
					put(grammarAccess.getField_ListAccess().getFieldsAssignment_0(), "rule__Field_List__FieldsAssignment_0");
					put(grammarAccess.getField_ListAccess().getFieldsAssignment_1_1(), "rule__Field_List__FieldsAssignment_1_1");
					put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
					put(grammarAccess.getFieldAccess().getTypeAssignment_2(), "rule__Field__TypeAssignment_2");
					put(grammarAccess.getEnum_TypeAccess().getNameListAssignment_2(), "rule__Enum_Type__NameListAssignment_2");
					put(grammarAccess.getConst_DeclAccess().getNameAssignment_0_1(), "rule__Const_Decl__NameAssignment_0_1");
					put(grammarAccess.getConst_DeclAccess().getTypeAssignment_0_3(), "rule__Const_Decl__TypeAssignment_0_3");
					put(grammarAccess.getConst_DeclAccess().getNameAssignment_1_1(), "rule__Const_Decl__NameAssignment_1_1");
					put(grammarAccess.getConst_DeclAccess().getExprAssignment_1_3(), "rule__Const_Decl__ExprAssignment_1_3");
					put(grammarAccess.getConst_DeclAccess().getNameAssignment_2_1(), "rule__Const_Decl__NameAssignment_2_1");
					put(grammarAccess.getConst_DeclAccess().getTypeAssignment_2_3(), "rule__Const_Decl__TypeAssignment_2_3");
					put(grammarAccess.getConst_DeclAccess().getExprAssignment_2_5(), "rule__Const_Decl__ExprAssignment_2_5");
					put(grammarAccess.getIdent_ListAccess().getNamesAssignment_0(), "rule__Ident_List__NamesAssignment_0");
					put(grammarAccess.getIdent_ListAccess().getNamesAssignment_1_1(), "rule__Ident_List__NamesAssignment_1_1");
					put(grammarAccess.getNode_DeclAccess().getHeadAssignment_0(), "rule__Node_Decl__HeadAssignment_0");
					put(grammarAccess.getNode_DeclAccess().getBdyAssignment_1(), "rule__Node_Decl__BdyAssignment_1");
					put(grammarAccess.getNode_HeaderAccess().getNameAssignment_1(), "rule__Node_Header__NameAssignment_1");
					put(grammarAccess.getNode_HeaderAccess().getParamAssignment_3(), "rule__Node_Header__ParamAssignment_3");
					put(grammarAccess.getNode_HeaderAccess().getRetAssignment_7(), "rule__Node_Header__RetAssignment_7");
					put(grammarAccess.getVar_Decl_ListAccess().getVarListAssignment_0(), "rule__Var_Decl_List__VarListAssignment_0");
					put(grammarAccess.getVar_Decl_ListAccess().getVarListAssignment_1_1(), "rule__Var_Decl_List__VarListAssignment_1_1");
					put(grammarAccess.getVar_DeclAccess().getNameAssignment_0(), "rule__Var_Decl__NameAssignment_0");
					put(grammarAccess.getVar_DeclAccess().getTypeAssignment_2(), "rule__Var_Decl__TypeAssignment_2");
					put(grammarAccess.getVar_DeclAccess().getClkAssignment_3(), "rule__Var_Decl__ClkAssignment_3");
					put(grammarAccess.getDeclared_ClockAccess().getNameAssignment_1(), "rule__Declared_Clock__NameAssignment_1");
					put(grammarAccess.getFN_BodyAccess().getDeclAssignment_1(), "rule__FN_Body__DeclAssignment_1");
					put(grammarAccess.getFN_BodyAccess().getEqAssignment_3(), "rule__FN_Body__EqAssignment_3");
					put(grammarAccess.getEquation_ListAccess().getEqAssignment_1(), "rule__Equation_List__EqAssignment_1");
					put(grammarAccess.getEquationAccess().getLeftAssignment_0(), "rule__Equation__LeftAssignment_0");
					put(grammarAccess.getEquationAccess().getRightAssignment_2(), "rule__Equation__RightAssignment_2");
					put(grammarAccess.getLeft_ListAccess().getIdAssignment_0(), "rule__Left_List__IdAssignment_0");
					put(grammarAccess.getLeft_ListAccess().getIdAssignment_1_1(), "rule__Left_List__IdAssignment_1_1");
					put(grammarAccess.getLeftAccess().getNameAssignment_0(), "rule__Left__NameAssignment_0");
					put(grammarAccess.getLeftAccess().getSelAssignment_1(), "rule__Left__SelAssignment_1");
					put(grammarAccess.getSelectorAccess().getNameAssignment_0_1(), "rule__Selector__NameAssignment_0_1");
					put(grammarAccess.getSelectorAccess().getBeginAssignment_1_1(), "rule__Selector__BeginAssignment_1_1");
					put(grammarAccess.getSelectorAccess().getEndAssignment_1_2(), "rule__Selector__EndAssignment_1_2");
					put(grammarAccess.getExpressionAccess().getIfexprAssignment_0_2(), "rule__Expression__IfexprAssignment_0_2");
					put(grammarAccess.getExpressionAccess().getThenexprAssignment_0_4(), "rule__Expression__ThenexprAssignment_0_4");
					put(grammarAccess.getExpressionAccess().getElseexprAssignment_0_6(), "rule__Expression__ElseexprAssignment_0_6");
					put(grammarAccess.getFbyAccess().getRightAssignment_1_2(), "rule__Fby__RightAssignment_1_2");
					put(grammarAccess.getArrowAccess().getRightAssignment_1_2(), "rule__Arrow__RightAssignment_1_2");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_1(), "rule__MulOrDiv__RightAssignment_1_1");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_2_2(), "rule__Primary__ExpressionAssignment_2_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_3_2(), "rule__Primary__ExpressionAssignment_3_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_4_2(), "rule__Primary__ExpressionAssignment_4_2");
					put(grammarAccess.getAtomicExpressionAccess().getValueAssignment_1_1(), "rule__AtomicExpression__ValueAssignment_1_1");
					put(grammarAccess.getConstantExpressionAccess().getValueAssignment_0_1(), "rule__ConstantExpression__ValueAssignment_0_1");
					put(grammarAccess.getConstantExpressionAccess().getValueAssignment_1_1(), "rule__ConstantExpression__ValueAssignment_1_1");
					put(grammarAccess.getConstantExpressionAccess().getValueAssignment_2_1(), "rule__ConstantExpression__ValueAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalLustreParser typedParser = (InternalLustreParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public LustreGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LustreGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
