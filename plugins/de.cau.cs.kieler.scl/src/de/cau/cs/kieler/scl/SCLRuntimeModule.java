/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl;

import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.yakindu.base.types.ITypeSystem;
import org.yakindu.sct.model.sgraph.resource.SCTLinker;
import org.yakindu.sct.model.sgraph.resource.provider.SCTResourceDescriptionStrategy;
import org.yakindu.sct.model.stext.conversion.StextValueConverterService;
import org.yakindu.sct.model.stext.naming.StextNameProvider;
import org.yakindu.sct.model.stext.scoping.STextGlobalScopeProvider;
import org.yakindu.sct.model.stext.types.ISTextTypeInferrer;
import org.yakindu.sct.model.stext.types.STextDefaulTypeSystem;

import de.cau.cs.kieler.yakindu.sccharts.model.stext.types.SyncTypeInferrer;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class SCLRuntimeModule extends de.cau.cs.kieler.scl.AbstractSCLRuntimeModule {

    public Class<? extends org.eclipse.xtext.scoping.IGlobalScopeProvider> bindIGlobalScopeProvider() {
        super.bindIGlobalScopeProvider();
        return STextGlobalScopeProvider.class;
}

@Override
public Class<? extends ILinker> bindILinker() {
        return SCTLinker.class;
}

@Override
public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
        return StextNameProvider.class;
}

@Override
public Class<? extends org.eclipse.xtext.conversion.IValueConverterService> bindIValueConverterService() {
        return StextValueConverterService.class;
}

public Class<? extends ITypeSystem> bindITypeSystem() {
        return STextDefaulTypeSystem.class;
}

public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
        return SCTResourceDescriptionStrategy.class;
}

public Class<? extends ISTextTypeInferrer> bindISTextTypeInferrer() {
        return SyncTypeInferrer.class;
}
    
}
