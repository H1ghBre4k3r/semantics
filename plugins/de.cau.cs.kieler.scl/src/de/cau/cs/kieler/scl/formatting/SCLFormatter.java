/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class SCLFormatter extends AbstractDeclarativeFormatter {

    @Override
    protected void configureFormatting(FormattingConfig c) {
        de.cau.cs.kieler.scl.services.SCLGrammarAccess f = (de.cau.cs.kieler.scl.services.SCLGrammarAccess) getGrammarAccess();
        
//        c.setLinewrap(1).before(f.getSCLProgramAccess().getLeftCurlyBracketKeyword_3_0_0());
//        c.setLinewrap(1).before(f.getSCLProgramAccess().getLeftCurlyBracketKeyword_3_1_1());
//        c.setLinewrap(1).before(f.getSCLProgramAccess().getDeclarationsAssignment_3_1_0());        
        
        for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("{", "}")) {
            c.setIndentation(pair.getFirst(), pair.getSecond());
            c.setLinewrap(1).after(pair.getFirst());
            c.setLinewrap(1).before(pair.getSecond());
            c.setLinewrap(1).after(pair.getSecond());
        }
        for (Keyword comma : f.findKeywords(",")) {
            c.setNoLinewrap().before(comma);
            c.setNoSpace().before(comma);
        }
        c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
        c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
        c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());

        for (Keyword semicolon : f.findKeywords(";")) {
            c.setNoSpace().before(semicolon);
            c.setLinewrap().after(semicolon);
        }

        for (Keyword semicolon : f.findKeywords(":")) {
            c.setNoSpace().before(semicolon);
            c.setLinewrap().after(semicolon);
        }
        
        // Annotation
        c.setLinewrap().before(f.getAnnotationAccess().getRule());
        c.setLinewrap().after(f.getAnnotationAccess().getRule());
        // have no space between '@' and the annotation name
        for (Keyword at : f.findKeywords("@")) {
            c.setNoSpace().after(at);
        }
        
        c.setLinewrap(1).after(f.getParallelAccess().getForkKeyword_0());
        c.setLinewrap(1).after(f.getParallelAccess().getParKeyword_1_1_0());
        c.setLinewrap(1).after(f.getParallelAccess().getJoinKeyword_2());
        c.setLinewrap(1).before(f.getParallelAccess().getParKeyword_1_1_0());
        c.setLinewrap(1).before(f.getParallelAccess().getJoinKeyword_2());
        c.setIndentation(f.getParallelAccess().getForkKeyword_0(), f.getParallelAccess().getParKeyword_1_1_0());
        c.setIndentation(f.getParallelAccess().getParKeyword_1_1_0(), f.getParallelAccess().getJoinKeyword_2());
    }
}
