/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.formatting2;

import com.google.inject.Inject
import de.cau.cs.kieler.annotations.Annotation
import de.cau.cs.kieler.annotations.Pragma
import de.cau.cs.kieler.kexpressions.Declaration
import de.cau.cs.kieler.kexpressions.Parameter
import de.cau.cs.kieler.kexpressions.kext.formatting2.KExtFormatter
import de.cau.cs.kieler.scl.Assignment
import de.cau.cs.kieler.scl.Conditional
import de.cau.cs.kieler.scl.ElseScope
import de.cau.cs.kieler.scl.Label
import de.cau.cs.kieler.scl.Module
import de.cau.cs.kieler.scl.ModuleCall
import de.cau.cs.kieler.scl.Parallel
import de.cau.cs.kieler.scl.Pause
import de.cau.cs.kieler.scl.SCLProgram
import de.cau.cs.kieler.scl.ScopeStatement
import de.cau.cs.kieler.scl.Statement
import de.cau.cs.kieler.scl.Thread
import de.cau.cs.kieler.scl.services.SCLGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument

class SCLFormatter extends KExtFormatter {
	
	@Inject extension SCLGrammarAccess

	def dispatch void format(SCLProgram sclprogram, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Pragma pragmas : sclprogram.getPragmas()) {
			format(pragmas, document);
            pragmas.append[ newLine ]
		}
		for (Module modules : sclprogram.getModules()) {
			format(modules, document);
            modules.append[ newLine ]
		}
	}

	def dispatch void format(Module module, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : module.getAnnotations()) {
			format(annotations, document);
		}
		for (Declaration declarations : module.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statement : module.getStatements()) {
			format(statement, document);
		}
		
//		module.regionFor.keyword(moduleAccess.colonKeyword_3).prepend[ noSpace ].append[ newLine ]
//        module.regionFor.keywords(moduleAccess.semicolonKeyword_5_0_1).forEach[prepend[ noSpace ].append[ newLine ]]
        if (module.regionFor.keyword(moduleAccess.colonKeyword_3) !== null) {
            module.regionFor.keyword(moduleAccess.colonKeyword_3).prepend[ noSpace ].append[ newLine ]
        } else {
            module.regionFor.ruleCall(moduleAccess.nameIDTerminalRuleCall_2_0).append[ newLine ]
        }
	}

	def dispatch void format(Pause pause, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : pause.getAnnotations()) {
			format(annotations, document);
		}
		pause.append[ newLine ]
		pause.regionFor.keyword(";")?.prepend[ noSpace ]
	}

	def dispatch void format(Label label, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : label.getAnnotations()) {
			format(annotations, document);
		}
		
        label.regionFor.keyword(labelAccess.colonKeyword_2).prepend[ noSpace ].append[ newLine ]
	}

	def dispatch void format(Assignment assignment, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		super.format(assignment as de.cau.cs.kieler.kexpressions.keffects.Assignment, document)
        assignment.regionFor.keyword(";")?.prepend[ noSpace ]
		assignment.append[ newLine ]
	}

	def dispatch void format(Conditional conditional, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : conditional.getAnnotations()) {
			format(annotations, document);
		}
		format(conditional.getExpression(), document);
		for (Declaration declarations : conditional.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : conditional.getStatements()) {
			format(statements, document);
		}
		format(conditional.getElse(), document);

//        conditional.regionFor.keywords(conditionalAccess.semicolonKeyword_5_0_1).forEach[prepend[ noSpace ].append[ newLine ]]
        conditional.regionFor.keywordPairs("{", "}").head?.interior[ indent ]
        conditional.regionFor.keyword("{").append[ newLine ]
        conditional.regionFor.keyword("}").prepend[ newLine ]
        if (conditional.^else === null ) conditional.regionFor.keyword("}").append[ newLine ]     
	}

	def dispatch void format(ElseScope elsescope, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : elsescope.getAnnotations()) {
			format(annotations, document);
		}
		for (Declaration declarations : elsescope.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : elsescope.getStatements()) {
			format(statements, document);
		}
		
//		elsescope.regionFor.keywords(elseScopeAccess.semicolonKeyword_5_0_1).forEach[prepend[ noSpace ].append[ newLine ]]
        elsescope.regionFor.keywordPairs("{", "}").head?.interior[ indent ]
        elsescope.regionFor.keyword("{").append[ newLine ]
        elsescope.regionFor.keyword("}").prepend[ newLine ]
        elsescope.regionFor.keyword("}").append[ newLine ]
	}

	def dispatch void format(Thread thread, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : thread.getAnnotations()) {
			format(annotations, document);
		}
		for (Declaration declarations : thread.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : thread.getStatements()) {
			format(statements, document);
		}
		
//		thread.regionFor.keywords(threadAccess.semicolonKeyword_1_0_3_0_1).forEach[prepend[ noSpace ].append[ newLine ]]
//        thread.regionFor.keywords(threadAccess.semicolonKeyword_1_1_0_0_1).forEach[prepend[ noSpace ].append[ newLine ]]
//        thread.regionFor.keywordPairs("{", "}").head?.interior[ indent ]
//        thread.regionFor.keyword("{").append[ newLine ]
//        thread.regionFor.keyword("}").prepend[ newLine ]
        thread.interior[ indent ]
        if (thread.regionFor.keyword("{") !== null) {
            thread.regionFor.keyword("{").append[ newLine ]
        } else {
            thread.prepend[ newLine ]
        }
	}

	def dispatch void format(Parallel parallel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Thread threads : parallel.getThreads()) {
			format(threads, document);
		}
		parallel.append[ newLine ]
	}

	def dispatch void format(ScopeStatement scopestatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : scopestatement.getAnnotations()) {
			format(annotations, document);
		}
		for (Declaration declarations : scopestatement.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : scopestatement.getStatements()) {
			format(statements, document);
		}
		
		scopestatement.regionFor.keywordPairs("{", "}").head?.interior[ indent ]
        scopestatement.regionFor.keyword("{").append[ newLine ]
        scopestatement.regionFor.keyword("}").prepend[ newLine ]
        scopestatement.regionFor.keyword("}").append[ newLine ]
	}
	
    def dispatch void format(ModuleCall callstatement, extension IFormattableDocument document) {
        callstatement.regionFor.keyword('(')?.prepend[ noSpace ].append[ noSpace ]
        callstatement.regionFor.keyword(')')?.prepend[ noSpace ]
        
        for (Parameter parameters : callstatement.getParameters()) {
            format(parameters, document);
        }
        
        callstatement.regionFor.keyword(";")?.prepend[ noSpace ]
    }
}
