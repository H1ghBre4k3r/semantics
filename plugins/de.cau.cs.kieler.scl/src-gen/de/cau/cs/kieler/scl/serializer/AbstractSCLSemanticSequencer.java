/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.cau.cs.kieler.core.annotations.Annotation;
import de.cau.cs.kieler.core.annotations.AnnotationsPackage;
import de.cau.cs.kieler.core.annotations.BooleanAnnotation;
import de.cau.cs.kieler.core.annotations.CommentAnnotation;
import de.cau.cs.kieler.core.annotations.FloatAnnotation;
import de.cau.cs.kieler.core.annotations.IntAnnotation;
import de.cau.cs.kieler.core.annotations.StringAnnotation;
import de.cau.cs.kieler.core.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.core.kexpressions.BoolValue;
import de.cau.cs.kieler.core.kexpressions.Declaration;
import de.cau.cs.kieler.core.kexpressions.FloatValue;
import de.cau.cs.kieler.core.kexpressions.FunctionCall;
import de.cau.cs.kieler.core.kexpressions.IntValue;
import de.cau.cs.kieler.core.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.core.kexpressions.OperatorExpression;
import de.cau.cs.kieler.core.kexpressions.Parameter;
import de.cau.cs.kieler.core.kexpressions.StringValue;
import de.cau.cs.kieler.core.kexpressions.TextExpression;
import de.cau.cs.kieler.core.kexpressions.ValuedObject;
import de.cau.cs.kieler.core.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.core.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.core.kexpressions.keffects.Emission;
import de.cau.cs.kieler.core.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.core.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.core.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.core.kexpressions.text.kext.AnnotatedExpression;
import de.cau.cs.kieler.core.kexpressions.text.kext.Kext;
import de.cau.cs.kieler.core.kexpressions.text.kext.KextPackage;
import de.cau.cs.kieler.core.kexpressions.text.kext.TestEntity;
import de.cau.cs.kieler.core.kexpressions.text.serializer.KEXTSemanticSequencer;
import de.cau.cs.kieler.scl.scl.Conditional;
import de.cau.cs.kieler.scl.scl.EmptyStatement;
import de.cau.cs.kieler.scl.scl.Goto;
import de.cau.cs.kieler.scl.scl.InstructionStatement;
import de.cau.cs.kieler.scl.scl.Parallel;
import de.cau.cs.kieler.scl.scl.Pause;
import de.cau.cs.kieler.scl.scl.SCLProgram;
import de.cau.cs.kieler.scl.scl.SclPackage;
import de.cau.cs.kieler.scl.scl.StatementScope;
import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractSCLSemanticSequencer extends KEXTSemanticSequencer {

	@Inject
	private SCLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == AnnotationsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.BOOLEAN_ANNOTATION:
				sequence_KeyBooleanValueAnnotation(context, (BooleanAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.FLOAT_ANNOTATION:
				sequence_KeyFloatValueAnnotation(context, (FloatAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.INT_ANNOTATION:
				sequence_KeyIntValueAnnotation(context, (IntAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if(context == grammarAccess.getAnnotationRule() ||
				   context == grammarAccess.getKeyStringValueAnnotationRule() ||
				   context == grammarAccess.getValuedAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getQuotedKeyStringValueAnnotationRule() ||
				   context == grammarAccess.getRestrictedAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if(context == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule() ||
				   context == grammarAccess.getRestrictedAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAnnotationRule() ||
				   context == grammarAccess.getTypedKeyStringValueAnnotationRule() ||
				   context == grammarAccess.getValuedAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if(semanticObject.eClass().getEPackage() == KEffectsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				sequence_PostfixEffect(context, (Assignment) semanticObject); 
				return; 
			case KEffectsPackage.EMISSION:
				sequence_Emission(context, (Emission) semanticObject); 
				return; 
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == KExpressionsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if(context == grammarAccess.getAddExpressionRule() ||
				   context == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getAtomicExpressionRule() ||
				   context == grammarAccess.getAtomicValuedExpressionRule() ||
				   context == grammarAccess.getBitwiseAndExpressionRule() ||
				   context == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getBitwiseOrExpressionRule() ||
				   context == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getBoolExpressionRule() ||
				   context == grammarAccess.getCompareOperationRule() ||
				   context == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getDivExpressionRule() ||
				   context == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getExpressionRule() ||
				   context == grammarAccess.getLogicalAndExpressionRule() ||
				   context == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getLogicalOrExpressionRule() ||
				   context == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getModExpressionRule() ||
				   context == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getMultExpressionRule() ||
				   context == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getNegExpressionRule() ||
				   context == grammarAccess.getNotExpressionRule() ||
				   context == grammarAccess.getNotOrValuedExpressionRule() ||
				   context == grammarAccess.getRootRule() ||
				   context == grammarAccess.getSubExpressionRule() ||
				   context == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getValuedExpressionRule()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_NotOrValuedExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT:
				sequence_ValuedObject(context, (ValuedObject) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == KextPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case KextPackage.ANNOTATED_EXPRESSION:
				sequence_AnnotatedExpression(context, (AnnotatedExpression) semanticObject); 
				return; 
			case KextPackage.KEXT:
				sequence_Kext(context, (Kext) semanticObject); 
				return; 
			case KextPackage.TEST_ENTITY:
				sequence_TestEntity(context, (TestEntity) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == SclPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case SclPackage.ASSIGNMENT:
				sequence_Assignment(context, (de.cau.cs.kieler.scl.scl.Assignment) semanticObject); 
				return; 
			case SclPackage.CONDITIONAL:
				sequence_Conditional(context, (Conditional) semanticObject); 
				return; 
			case SclPackage.EMPTY_STATEMENT:
				sequence_EmptyStatement(context, (EmptyStatement) semanticObject); 
				return; 
			case SclPackage.GOTO:
				sequence_Goto(context, (Goto) semanticObject); 
				return; 
			case SclPackage.INSTRUCTION_STATEMENT:
				sequence_InstructionStatement(context, (InstructionStatement) semanticObject); 
				return; 
			case SclPackage.PARALLEL:
				sequence_Parallel(context, (Parallel) semanticObject); 
				return; 
			case SclPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case SclPackage.SCL_PROGRAM:
				sequence_SCLProgram(context, (SCLProgram) semanticObject); 
				return; 
			case SclPackage.STATEMENT_SCOPE:
				sequence_StatementScope(context, (StatementScope) semanticObject); 
				return; 
			case SclPackage.THREAD:
				sequence_Thread(context, (de.cau.cs.kieler.scl.scl.Thread) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (valuedObject=[ValuedObject|ID] indices+=Expression* expression=Expression)
	 */
	protected void sequence_Assignment(EObject context, de.cau.cs.kieler.scl.scl.Assignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         expression=Expression 
	 *         declarations+=Declaration* 
	 *         (statements+=InstructionStatement | statements+=EmptyStatement)* 
	 *         (statements+=InstructionStatement statements+=EmptyStatement*)? 
	 *         (
	 *             declarations+=Declaration* 
	 *             (elseStatements+=InstructionStatement | elseStatements+=EmptyStatement)* 
	 *             (elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?
	 *         )?
	 *     )
	 */
	protected void sequence_Conditional(EObject context, Conditional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* label=ID)
	 */
	protected void sequence_EmptyStatement(EObject context, EmptyStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     targetLabel=ID
	 */
	protected void sequence_Goto(EObject context, Goto semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SclPackage.Literals.GOTO__TARGET_LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SclPackage.Literals.GOTO__TARGET_LABEL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getGotoAccess().getTargetLabelIDTerminalRuleCall_1_0(), semanticObject.getTargetLabel());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* instruction=Instruction)
	 */
	protected void sequence_InstructionStatement(EObject context, InstructionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (threads+=Thread threads+=Thread*)
	 */
	protected void sequence_Parallel(EObject context, Parallel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Pause}
	 */
	protected void sequence_Pause(EObject context, Pause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         name=ID 
	 *         declarations+=Declaration* 
	 *         (statements+=InstructionStatement | statements+=EmptyStatement)* 
	 *         (statements+=InstructionStatement statements+=EmptyStatement*)?
	 *     )
	 */
	protected void sequence_SCLProgram(EObject context, SCLProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         declarations+=Declaration* 
	 *         (statements+=InstructionStatement | statements+=EmptyStatement)* 
	 *         (statements+=InstructionStatement statements+=EmptyStatement*)?
	 *     )
	 */
	protected void sequence_StatementScope(EObject context, StatementScope semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (statements+=InstructionStatement | statements+=EmptyStatement)* 
	 *         (statements+=InstructionStatement statements+=EmptyStatement*)?
	 *     )
	 */
	protected void sequence_Thread(EObject context, de.cau.cs.kieler.scl.scl.Thread semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
