/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.core.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.text.services.AnnotationsGrammarAccess;

@Singleton
public class SCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SCLProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCLProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_5_0_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_5_0_1_0 = (RuleCall)cStatementsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_5_1_0_0 = (RuleCall)cStatementsAssignment_5_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_5_1_1_0 = (RuleCall)cStatementsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////generate scl "http://kieler.cs.cau.de/scl/scl"
		//SCLProgram:
		//	annotations+=Annotation* "module" name=ID declarations+=Declaration* "{" ((statements+=InstructionStatement ";" |
		//	statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "module" name=ID declarations+=Declaration* "{" ((statements+=InstructionStatement ";" |
		//statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(statements+=InstructionStatement ";" | statements+=EmptyStatement)* (statements+=InstructionStatement
		//statements+=EmptyStatement*)?
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=InstructionStatement ";" | statements+=EmptyStatement)*
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//statements+=InstructionStatement ";"
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_5_0_0_0() { return cStatementsAssignment_5_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_5_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_5_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_0_1() { return cSemicolonKeyword_5_0_0_1; }

		//statements+=EmptyStatement
		public Assignment getStatementsAssignment_5_0_1() { return cStatementsAssignment_5_0_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_5_0_1_0() { return cStatementsEmptyStatementParserRuleCall_5_0_1_0; }

		//(statements+=InstructionStatement statements+=EmptyStatement*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_5_1_0() { return cStatementsAssignment_5_1_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_5_1_0_0() { return cStatementsInstructionStatementParserRuleCall_5_1_0_0; }

		//statements+=EmptyStatement*
		public Assignment getStatementsAssignment_5_1_1() { return cStatementsAssignment_5_1_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_5_1_1_0() { return cStatementsEmptyStatementParserRuleCall_5_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstConstKeyword_1_0 = (Keyword)cConstAssignment_1.eContents().get(0);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInputInputKeyword_2_0 = (Keyword)cInputAssignment_2.eContents().get(0);
		private final Assignment cOutputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cOutputOutputKeyword_3_0 = (Keyword)cOutputAssignment_3.eContents().get(0);
		private final Assignment cStaticAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cStaticStaticKeyword_4_0 = (Keyword)cStaticAssignment_4.eContents().get(0);
		private final Assignment cSignalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cSignalSignalKeyword_5_0 = (Keyword)cSignalAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Assignment cTypeAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final RuleCall cTypeHostTypeEnumRuleCall_6_0_0_0 = (RuleCall)cTypeAssignment_6_0_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_6_0_1_0 = (RuleCall)cHostTypeAssignment_6_0_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_6_0_2_0 = (RuleCall)cValuedObjectsAssignment_6_0_2.eContents().get(0);
		private final Group cGroup_6_0_3 = (Group)cGroup_6_0.eContents().get(3);
		private final Keyword cCommaKeyword_6_0_3_0 = (Keyword)cGroup_6_0_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_6_0_3_1 = (Assignment)cGroup_6_0_3.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_6_0_3_1_0 = (RuleCall)cValuedObjectsAssignment_6_0_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_0_4 = (Keyword)cGroup_6_0.eContents().get(4);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Assignment cTypeAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_6_1_0_0 = (RuleCall)cTypeAssignment_6_1_0.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_6_1_1_0 = (RuleCall)cValuedObjectsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_1_2 = (Group)cGroup_6_1.eContents().get(2);
		private final Keyword cCommaKeyword_6_1_2_0 = (Keyword)cGroup_6_1_2.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_6_1_2_1 = (Assignment)cGroup_6_1_2.eContents().get(1);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_6_1_2_1_0 = (RuleCall)cValuedObjectsAssignment_6_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1_3 = (Keyword)cGroup_6_1.eContents().get(3);
		
		//Declaration returns kexpressions::Declaration:
		//	annotations+=Annotation* const?="const"? input?="input"? output?="output"? static?="static"? signal?="signal"?
		//	(type=HostType hostType=STRING valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";" | type=ValueType
		//	valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";");
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* const?="const"? input?="input"? output?="output"? static?="static"? signal?="signal"?
		//(type=HostType hostType=STRING valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";" | type=ValueType
		//valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";")
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//const?="const"?
		public Assignment getConstAssignment_1() { return cConstAssignment_1; }

		//"const"
		public Keyword getConstConstKeyword_1_0() { return cConstConstKeyword_1_0; }

		//input?="input"?
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }

		//"input"
		public Keyword getInputInputKeyword_2_0() { return cInputInputKeyword_2_0; }

		//output?="output"?
		public Assignment getOutputAssignment_3() { return cOutputAssignment_3; }

		//"output"
		public Keyword getOutputOutputKeyword_3_0() { return cOutputOutputKeyword_3_0; }

		//static?="static"?
		public Assignment getStaticAssignment_4() { return cStaticAssignment_4; }

		//"static"
		public Keyword getStaticStaticKeyword_4_0() { return cStaticStaticKeyword_4_0; }

		//signal?="signal"?
		public Assignment getSignalAssignment_5() { return cSignalAssignment_5; }

		//"signal"
		public Keyword getSignalSignalKeyword_5_0() { return cSignalSignalKeyword_5_0; }

		//type=HostType hostType=STRING valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";" | type=ValueType
		//valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";"
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//type=HostType hostType=STRING valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//type=HostType
		public Assignment getTypeAssignment_6_0_0() { return cTypeAssignment_6_0_0; }

		//HostType
		public RuleCall getTypeHostTypeEnumRuleCall_6_0_0_0() { return cTypeHostTypeEnumRuleCall_6_0_0_0; }

		//hostType=STRING
		public Assignment getHostTypeAssignment_6_0_1() { return cHostTypeAssignment_6_0_1; }

		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_6_0_1_0() { return cHostTypeSTRINGTerminalRuleCall_6_0_1_0; }

		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_6_0_2() { return cValuedObjectsAssignment_6_0_2; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_6_0_2_0() { return cValuedObjectsValuedObjectParserRuleCall_6_0_2_0; }

		//("," valuedObjects+=ValuedObject)*
		public Group getGroup_6_0_3() { return cGroup_6_0_3; }

		//","
		public Keyword getCommaKeyword_6_0_3_0() { return cCommaKeyword_6_0_3_0; }

		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_6_0_3_1() { return cValuedObjectsAssignment_6_0_3_1; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_6_0_3_1_0() { return cValuedObjectsValuedObjectParserRuleCall_6_0_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_0_4() { return cSemicolonKeyword_6_0_4; }

		//type=ValueType valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";"
		public Group getGroup_6_1() { return cGroup_6_1; }

		//type=ValueType
		public Assignment getTypeAssignment_6_1_0() { return cTypeAssignment_6_1_0; }

		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_6_1_0_0() { return cTypeValueTypeEnumRuleCall_6_1_0_0; }

		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_6_1_1() { return cValuedObjectsAssignment_6_1_1; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_6_1_1_0() { return cValuedObjectsValuedObjectParserRuleCall_6_1_1_0; }

		//("," valuedObjects+=ValuedObject)*
		public Group getGroup_6_1_2() { return cGroup_6_1_2; }

		//","
		public Keyword getCommaKeyword_6_1_2_0() { return cCommaKeyword_6_1_2_0; }

		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_6_1_2_1() { return cValuedObjectsAssignment_6_1_2_1; }

		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_6_1_2_1_0() { return cValuedObjectsValuedObjectParserRuleCall_6_1_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1_3() { return cSemicolonKeyword_6_1_3; }
	}

	public class ValuedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValuedObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_1_1_0 = (RuleCall)cInitialValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCombineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCombineOperatorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCombineOperatorCombineOperatorEnumRuleCall_2_1_0 = (RuleCall)cCombineOperatorAssignment_2_1.eContents().get(0);
		
		//ValuedObject returns kexpressions::ValuedObject: //    (annotations+=Annotation)* // Parser does not like this
		//	name=ID ("=" initialValue=Expression)? ("combine" combineOperator=CombineOperator)?;
		@Override public ParserRule getRule() { return rule; }

		////    (annotations+=Annotation)* // Parser does not like this
		//name=ID ("=" initialValue=Expression)? ("combine" combineOperator=CombineOperator)?
		public Group getGroup() { return cGroup; }

		////    (annotations+=Annotation)* // Parser does not like this
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("=" initialValue=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//initialValue=Expression
		public Assignment getInitialValueAssignment_1_1() { return cInitialValueAssignment_1_1; }

		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_1_1_0() { return cInitialValueExpressionParserRuleCall_1_1_0; }

		//("combine" combineOperator=CombineOperator)?
		public Group getGroup_2() { return cGroup_2; }

		//"combine"
		public Keyword getCombineKeyword_2_0() { return cCombineKeyword_2_0; }

		//combineOperator=CombineOperator
		public Assignment getCombineOperatorAssignment_2_1() { return cCombineOperatorAssignment_2_1; }

		//CombineOperator
		public RuleCall getCombineOperatorCombineOperatorEnumRuleCall_2_1_0() { return cCombineOperatorCombineOperatorEnumRuleCall_2_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstructionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	EmptyStatement | InstructionStatement;
		@Override public ParserRule getRule() { return rule; }

		//EmptyStatement | InstructionStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//EmptyStatement
		public RuleCall getEmptyStatementParserRuleCall_0() { return cEmptyStatementParserRuleCall_0; }

		//InstructionStatement
		public RuleCall getInstructionStatementParserRuleCall_1() { return cInstructionStatementParserRuleCall_1; }
	}

	public class EmptyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmptyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_1_0_0 = (RuleCall)cLabelAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//EmptyStatement:
		//	annotations+=Annotation* (label=ID ":");
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (label=ID ":")
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//label=ID ":"
		public Group getGroup_1() { return cGroup_1; }

		//label=ID
		public Assignment getLabelAssignment_1_0() { return cLabelAssignment_1_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0_0() { return cLabelIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
	}

	public class InstructionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstructionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cInstructionAlternatives_1_0 = (Alternatives)cInstructionAssignment_1.eContents().get(0);
		private final RuleCall cInstructionAssignmentParserRuleCall_1_0_0 = (RuleCall)cInstructionAlternatives_1_0.eContents().get(0);
		private final RuleCall cInstructionConditionalParserRuleCall_1_0_1 = (RuleCall)cInstructionAlternatives_1_0.eContents().get(1);
		private final RuleCall cInstructionGotoParserRuleCall_1_0_2 = (RuleCall)cInstructionAlternatives_1_0.eContents().get(2);
		private final RuleCall cInstructionParallelParserRuleCall_1_0_3 = (RuleCall)cInstructionAlternatives_1_0.eContents().get(3);
		private final RuleCall cInstructionPauseParserRuleCall_1_0_4 = (RuleCall)cInstructionAlternatives_1_0.eContents().get(4);
		private final RuleCall cInstructionStatementScopeParserRuleCall_1_0_5 = (RuleCall)cInstructionAlternatives_1_0.eContents().get(5);
		
		//InstructionStatement:
		//	annotations+=Annotation* instruction=(Assignment | Conditional | Goto | Parallel | Pause | StatementScope);
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* instruction=(Assignment | Conditional | Goto | Parallel | Pause | StatementScope)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//instruction=(Assignment | Conditional | Goto | Parallel | Pause | StatementScope)
		public Assignment getInstructionAssignment_1() { return cInstructionAssignment_1; }

		//Assignment | Conditional | Goto | Parallel | Pause | StatementScope
		public Alternatives getInstructionAlternatives_1_0() { return cInstructionAlternatives_1_0; }

		//Assignment
		public RuleCall getInstructionAssignmentParserRuleCall_1_0_0() { return cInstructionAssignmentParserRuleCall_1_0_0; }

		//Conditional
		public RuleCall getInstructionConditionalParserRuleCall_1_0_1() { return cInstructionConditionalParserRuleCall_1_0_1; }

		//Goto
		public RuleCall getInstructionGotoParserRuleCall_1_0_2() { return cInstructionGotoParserRuleCall_1_0_2; }

		//Parallel
		public RuleCall getInstructionParallelParserRuleCall_1_0_3() { return cInstructionParallelParserRuleCall_1_0_3; }

		//Pause
		public RuleCall getInstructionPauseParserRuleCall_1_0_4() { return cInstructionPauseParserRuleCall_1_0_4; }

		//StatementScope
		public RuleCall getInstructionStatementScopeParserRuleCall_1_0_5() { return cInstructionStatementScopeParserRuleCall_1_0_5; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGotoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParallelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPauseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStatementScopeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Instruction:
		//	Assignment | Conditional | Goto | Parallel | Pause | StatementScope;
		@Override public ParserRule getRule() { return rule; }

		//Assignment | Conditional | Goto | Parallel | Pause | StatementScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }

		//Goto
		public RuleCall getGotoParserRuleCall_2() { return cGotoParserRuleCall_2; }

		//Parallel
		public RuleCall getParallelParserRuleCall_3() { return cParallelParserRuleCall_3; }

		//Pause
		public RuleCall getPauseParserRuleCall_4() { return cPauseParserRuleCall_4; }

		//StatementScope
		public RuleCall getStatementScopeParserRuleCall_5() { return cStatementScopeParserRuleCall_5; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuedObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_0_0 = (CrossReference)cValuedObjectAssignment_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectIDTerminalRuleCall_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment: //    assignment = kexpressions::Expression
		//	valuedObject=[kexpressions::ValuedObject] "=" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		////    assignment = kexpressions::Expression
		//valuedObject=[kexpressions::ValuedObject] "=" expression=Expression
		public Group getGroup() { return cGroup; }

		////    assignment = kexpressions::Expression
		//valuedObject=[kexpressions::ValuedObject]
		public Assignment getValuedObjectAssignment_0() { return cValuedObjectAssignment_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getValuedObjectValuedObjectCrossReference_0_0() { return cValuedObjectValuedObjectCrossReference_0_0; }

		//ID
		public RuleCall getValuedObjectValuedObjectIDTerminalRuleCall_0_0_1() { return cValuedObjectValuedObjectIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Assignment cStatementsAssignment_4_0_0_0 = (Assignment)cGroup_4_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_4_0_0_0_0 = (RuleCall)cStatementsAssignment_4_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_0_1 = (Keyword)cGroup_4_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_4_0_1_0 = (RuleCall)cStatementsAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cStatementsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_4_1_0_0 = (RuleCall)cStatementsAssignment_4_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_4_1_1_0 = (RuleCall)cStatementsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDeclarationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_5_1_0 = (RuleCall)cDeclarationsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Alternatives cAlternatives_5_2_0 = (Alternatives)cGroup_5_2.eContents().get(0);
		private final Group cGroup_5_2_0_0 = (Group)cAlternatives_5_2_0.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_2_0_0_0 = (Assignment)cGroup_5_2_0_0.eContents().get(0);
		private final RuleCall cElseStatementsInstructionStatementParserRuleCall_5_2_0_0_0_0 = (RuleCall)cElseStatementsAssignment_5_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2_0_0_1 = (Keyword)cGroup_5_2_0_0.eContents().get(1);
		private final Assignment cElseStatementsAssignment_5_2_0_1 = (Assignment)cAlternatives_5_2_0.eContents().get(1);
		private final RuleCall cElseStatementsEmptyStatementParserRuleCall_5_2_0_1_0 = (RuleCall)cElseStatementsAssignment_5_2_0_1.eContents().get(0);
		private final Group cGroup_5_2_1 = (Group)cGroup_5_2.eContents().get(1);
		private final Assignment cElseStatementsAssignment_5_2_1_0 = (Assignment)cGroup_5_2_1.eContents().get(0);
		private final RuleCall cElseStatementsInstructionStatementParserRuleCall_5_2_1_0_0 = (RuleCall)cElseStatementsAssignment_5_2_1_0.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_2_1_1 = (Assignment)cGroup_5_2_1.eContents().get(1);
		private final RuleCall cElseStatementsEmptyStatementParserRuleCall_5_2_1_1_0 = (RuleCall)cElseStatementsAssignment_5_2_1_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Conditional:
		//	"if" expression=Expression "then" declarations+=Declaration* ((statements+=InstructionStatement ";" |
		//	statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) ("else"
		//	declarations+=Declaration* ((elseStatements+=InstructionStatement ";" | elseStatements+=EmptyStatement)*
		//	(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?))? "end";
		@Override public ParserRule getRule() { return rule; }

		//"if" expression=Expression "then" declarations+=Declaration* ((statements+=InstructionStatement ";" |
		//statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) ("else"
		//declarations+=Declaration* ((elseStatements+=InstructionStatement ";" | elseStatements+=EmptyStatement)*
		//(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?))? "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }

		//(statements+=InstructionStatement ";" | statements+=EmptyStatement)* (statements+=InstructionStatement
		//statements+=EmptyStatement*)?
		public Group getGroup_4() { return cGroup_4; }

		//(statements+=InstructionStatement ";" | statements+=EmptyStatement)*
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//statements+=InstructionStatement ";"
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_4_0_0_0() { return cStatementsAssignment_4_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_4_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_4_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_0_1() { return cSemicolonKeyword_4_0_0_1; }

		//statements+=EmptyStatement
		public Assignment getStatementsAssignment_4_0_1() { return cStatementsAssignment_4_0_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_4_0_1_0() { return cStatementsEmptyStatementParserRuleCall_4_0_1_0; }

		//(statements+=InstructionStatement statements+=EmptyStatement*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_4_1_0() { return cStatementsAssignment_4_1_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_4_1_0_0() { return cStatementsInstructionStatementParserRuleCall_4_1_0_0; }

		//statements+=EmptyStatement*
		public Assignment getStatementsAssignment_4_1_1() { return cStatementsAssignment_4_1_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_4_1_1_0() { return cStatementsEmptyStatementParserRuleCall_4_1_1_0; }

		//("else" declarations+=Declaration* ((elseStatements+=InstructionStatement ";" | elseStatements+=EmptyStatement)*
		//(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?))?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_5_1() { return cDeclarationsAssignment_5_1; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_5_1_0() { return cDeclarationsDeclarationParserRuleCall_5_1_0; }

		//(elseStatements+=InstructionStatement ";" | elseStatements+=EmptyStatement)* (elseStatements+=InstructionStatement
		//elseStatements+=EmptyStatement*)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//(elseStatements+=InstructionStatement ";" | elseStatements+=EmptyStatement)*
		public Alternatives getAlternatives_5_2_0() { return cAlternatives_5_2_0; }

		//elseStatements+=InstructionStatement ";"
		public Group getGroup_5_2_0_0() { return cGroup_5_2_0_0; }

		//elseStatements+=InstructionStatement
		public Assignment getElseStatementsAssignment_5_2_0_0_0() { return cElseStatementsAssignment_5_2_0_0_0; }

		//InstructionStatement
		public RuleCall getElseStatementsInstructionStatementParserRuleCall_5_2_0_0_0_0() { return cElseStatementsInstructionStatementParserRuleCall_5_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2_0_0_1() { return cSemicolonKeyword_5_2_0_0_1; }

		//elseStatements+=EmptyStatement
		public Assignment getElseStatementsAssignment_5_2_0_1() { return cElseStatementsAssignment_5_2_0_1; }

		//EmptyStatement
		public RuleCall getElseStatementsEmptyStatementParserRuleCall_5_2_0_1_0() { return cElseStatementsEmptyStatementParserRuleCall_5_2_0_1_0; }

		//(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }

		//elseStatements+=InstructionStatement
		public Assignment getElseStatementsAssignment_5_2_1_0() { return cElseStatementsAssignment_5_2_1_0; }

		//InstructionStatement
		public RuleCall getElseStatementsInstructionStatementParserRuleCall_5_2_1_0_0() { return cElseStatementsInstructionStatementParserRuleCall_5_2_1_0_0; }

		//elseStatements+=EmptyStatement*
		public Assignment getElseStatementsAssignment_5_2_1_1() { return cElseStatementsAssignment_5_2_1_1; }

		//EmptyStatement
		public RuleCall getElseStatementsEmptyStatementParserRuleCall_5_2_1_1_0() { return cElseStatementsEmptyStatementParserRuleCall_5_2_1_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetLabelIDTerminalRuleCall_1_0 = (RuleCall)cTargetLabelAssignment_1.eContents().get(0);
		
		//Goto:
		//	"goto" targetLabel=ID;
		@Override public ParserRule getRule() { return rule; }

		//"goto" targetLabel=ID
		public Group getGroup() { return cGroup; }

		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }

		//targetLabel=ID
		public Assignment getTargetLabelAssignment_1() { return cTargetLabelAssignment_1; }

		//ID
		public RuleCall getTargetLabelIDTerminalRuleCall_1_0() { return cTargetLabelIDTerminalRuleCall_1_0; }
	}

	public class StatementSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cThreadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSCLProgramParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStatementScopeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//StatementSequence:
		//	Thread | SCLProgram | Conditional | StatementScope;
		@Override public ParserRule getRule() { return rule; }

		//Thread | SCLProgram | Conditional | StatementScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//Thread
		public RuleCall getThreadParserRuleCall_0() { return cThreadParserRuleCall_0; }

		//SCLProgram
		public RuleCall getSCLProgramParserRuleCall_1() { return cSCLProgramParserRuleCall_1; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_2() { return cConditionalParserRuleCall_2; }

		//StatementScope
		public RuleCall getStatementScopeParserRuleCall_3() { return cStatementScopeParserRuleCall_3; }
	}

	public class ThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Thread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThreadAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0_0 = (RuleCall)cAnnotationsAssignment_1_0.eContents().get(0);
		private final Keyword cThreadKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_2_0_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_2_0_1_0 = (RuleCall)cStatementsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cStatementsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_2_1_0_0 = (RuleCall)cStatementsAssignment_2_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_2_1_1_0 = (RuleCall)cStatementsAssignment_2_1_1.eContents().get(0);
		
		//Thread:
		//	{Thread} (annotations+=Annotation* "thread")? ((statements+=InstructionStatement ";" | statements+=EmptyStatement)*
		//	(statements+=InstructionStatement statements+=EmptyStatement*)?);
		@Override public ParserRule getRule() { return rule; }

		//{Thread} (annotations+=Annotation* "thread")? ((statements+=InstructionStatement ";" | statements+=EmptyStatement)*
		//(statements+=InstructionStatement statements+=EmptyStatement*)?)
		public Group getGroup() { return cGroup; }

		//{Thread}
		public Action getThreadAction_0() { return cThreadAction_0; }

		//(annotations+=Annotation* "thread")?
		public Group getGroup_1() { return cGroup_1; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_0() { return cAnnotationsAssignment_1_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0_0() { return cAnnotationsAnnotationParserRuleCall_1_0_0; }

		//"thread"
		public Keyword getThreadKeyword_1_1() { return cThreadKeyword_1_1; }

		//(statements+=InstructionStatement ";" | statements+=EmptyStatement)* (statements+=InstructionStatement
		//statements+=EmptyStatement*)?
		public Group getGroup_2() { return cGroup_2; }

		//(statements+=InstructionStatement ";" | statements+=EmptyStatement)*
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//statements+=InstructionStatement ";"
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_2_0_0_0() { return cStatementsAssignment_2_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_2_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_0_1() { return cSemicolonKeyword_2_0_0_1; }

		//statements+=EmptyStatement
		public Assignment getStatementsAssignment_2_0_1() { return cStatementsAssignment_2_0_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_2_0_1_0() { return cStatementsEmptyStatementParserRuleCall_2_0_1_0; }

		//(statements+=InstructionStatement statements+=EmptyStatement*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_2_1_0() { return cStatementsAssignment_2_1_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_2_1_0_0() { return cStatementsInstructionStatementParserRuleCall_2_1_0_0; }

		//statements+=EmptyStatement*
		public Assignment getStatementsAssignment_2_1_1() { return cStatementsAssignment_2_1_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_2_1_1_0() { return cStatementsEmptyStatementParserRuleCall_2_1_1_0; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cThreadsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cThreadsThreadParserRuleCall_1_0_0 = (RuleCall)cThreadsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cParKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cThreadsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cThreadsThreadParserRuleCall_1_1_1_0 = (RuleCall)cThreadsAssignment_1_1_1.eContents().get(0);
		private final Keyword cJoinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parallel:
		//	"fork" (threads+=Thread ("par" threads+=Thread)*) "join";
		@Override public ParserRule getRule() { return rule; }

		//"fork" (threads+=Thread ("par" threads+=Thread)*) "join"
		public Group getGroup() { return cGroup; }

		//"fork"
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }

		//threads+=Thread ("par" threads+=Thread)*
		public Group getGroup_1() { return cGroup_1; }

		//threads+=Thread
		public Assignment getThreadsAssignment_1_0() { return cThreadsAssignment_1_0; }

		//Thread
		public RuleCall getThreadsThreadParserRuleCall_1_0_0() { return cThreadsThreadParserRuleCall_1_0_0; }

		//("par" threads+=Thread)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"par"
		public Keyword getParKeyword_1_1_0() { return cParKeyword_1_1_0; }

		//threads+=Thread
		public Assignment getThreadsAssignment_1_1_1() { return cThreadsAssignment_1_1_1; }

		//Thread
		public RuleCall getThreadsThreadParserRuleCall_1_1_1_0() { return cThreadsThreadParserRuleCall_1_1_1_0; }

		//"join"
		public Keyword getJoinKeyword_2() { return cJoinKeyword_2; }
	}

	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPauseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPauseAction_1 = (Action)cGroup.eContents().get(1);
		
		//Pause:
		//	"pause" {Pause};
		@Override public ParserRule getRule() { return rule; }

		//"pause" {Pause}
		public Group getGroup() { return cGroup; }

		//"pause"
		public Keyword getPauseKeyword_0() { return cPauseKeyword_0; }

		//{Pause}
		public Action getPauseAction_1() { return cPauseAction_1; }
	}

	public class StatementScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cAlternatives_3_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_0_0_0 = (Assignment)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_3_0_0_0_0 = (RuleCall)cStatementsAssignment_3_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_3_0_1_0 = (RuleCall)cStatementsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cStatementsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_3_1_0_0 = (RuleCall)cStatementsAssignment_3_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_3_1_1_0 = (RuleCall)cStatementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StatementScope:
		//	{StatementScope} "{" declarations+=Declaration* ((statements+=InstructionStatement ";" | statements+=EmptyStatement)*
		//	(statements+=InstructionStatement statements+=EmptyStatement*)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//{StatementScope} "{" declarations+=Declaration* ((statements+=InstructionStatement ";" | statements+=EmptyStatement)*
		//(statements+=InstructionStatement statements+=EmptyStatement*)?) "}"
		public Group getGroup() { return cGroup; }

		//{StatementScope}
		public Action getStatementScopeAction_0() { return cStatementScopeAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }

		//(statements+=InstructionStatement ";" | statements+=EmptyStatement)* (statements+=InstructionStatement
		//statements+=EmptyStatement*)?
		public Group getGroup_3() { return cGroup_3; }

		//(statements+=InstructionStatement ";" | statements+=EmptyStatement)*
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//statements+=InstructionStatement ";"
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_3_0_0_0() { return cStatementsAssignment_3_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_3_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_3_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_0_0_1() { return cSemicolonKeyword_3_0_0_1; }

		//statements+=EmptyStatement
		public Assignment getStatementsAssignment_3_0_1() { return cStatementsAssignment_3_0_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_3_0_1_0() { return cStatementsEmptyStatementParserRuleCall_3_0_1_0; }

		//(statements+=InstructionStatement statements+=EmptyStatement*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_3_1_0() { return cStatementsAssignment_3_1_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_3_1_0_0() { return cStatementsInstructionStatementParserRuleCall_3_1_0_0; }

		//statements+=EmptyStatement*
		public Assignment getStatementsAssignment_3_1_1() { return cStatementsAssignment_3_1_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_3_1_1_0() { return cStatementsEmptyStatementParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	public class ValueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPureKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBoolKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNSIGNEDUnsignedKeyword_2_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTIntKeyword_3_0 = (Keyword)cINTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSTRINGStringKeyword_5_0 = (Keyword)cSTRINGEnumLiteralDeclaration_5.eContents().get(0);
		
		//// Override ValueType rule without host type
		//enum ValueType returns kexpressions::ValueType:
		//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | STRING="string";
		public EnumRule getRule() { return rule; }

		//PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | STRING="string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PURE="pure"
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }

		//"pure"
		public Keyword getPUREPureKeyword_0_0() { return cPUREPureKeyword_0_0; }

		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }

		//"bool"
		public Keyword getBOOLBoolKeyword_1_0() { return cBOOLBoolKeyword_1_0; }

		//UNSIGNED="unsigned"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_2() { return cUNSIGNEDEnumLiteralDeclaration_2; }

		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_2_0() { return cUNSIGNEDUnsignedKeyword_2_0; }

		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_3() { return cINTEnumLiteralDeclaration_3; }

		//"int"
		public Keyword getINTIntKeyword_3_0() { return cINTIntKeyword_3_0; }

		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }

		//"float"
		public Keyword getFLOATFloatKeyword_4_0() { return cFLOATFloatKeyword_4_0; }

		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_5() { return cSTRINGEnumLiteralDeclaration_5; }

		//"string"
		public Keyword getSTRINGStringKeyword_5_0() { return cSTRINGStringKeyword_5_0; }
	}
	
	private final SCLProgramElements pSCLProgram;
	private final DeclarationElements pDeclaration;
	private final ValueTypeElements unknownRuleValueType;
	private final ValuedObjectElements pValuedObject;
	private final StatementElements pStatement;
	private final EmptyStatementElements pEmptyStatement;
	private final InstructionStatementElements pInstructionStatement;
	private final InstructionElements pInstruction;
	private final AssignmentElements pAssignment;
	private final ConditionalElements pConditional;
	private final GotoElements pGoto;
	private final StatementSequenceElements pStatementSequence;
	private final ThreadElements pThread;
	private final ParallelElements pParallel;
	private final PauseElements pPause;
	private final StatementScopeElements pStatementScope;
	
	private final Grammar grammar;

	private final KExpressionsGrammarAccess gaKExpressions;

	@Inject
	public SCLGrammarAccess(GrammarProvider grammarProvider,
		KExpressionsGrammarAccess gaKExpressions) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKExpressions = gaKExpressions;
		this.pSCLProgram = new SCLProgramElements();
		this.pDeclaration = new DeclarationElements();
		this.unknownRuleValueType = new ValueTypeElements();
		this.pValuedObject = new ValuedObjectElements();
		this.pStatement = new StatementElements();
		this.pEmptyStatement = new EmptyStatementElements();
		this.pInstructionStatement = new InstructionStatementElements();
		this.pInstruction = new InstructionElements();
		this.pAssignment = new AssignmentElements();
		this.pConditional = new ConditionalElements();
		this.pGoto = new GotoElements();
		this.pStatementSequence = new StatementSequenceElements();
		this.pThread = new ThreadElements();
		this.pParallel = new ParallelElements();
		this.pPause = new PauseElements();
		this.pStatementScope = new StatementScopeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.scl.SCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	
	////generate scl "http://kieler.cs.cau.de/scl/scl"
	//SCLProgram:
	//	annotations+=Annotation* "module" name=ID declarations+=Declaration* "{" ((statements+=InstructionStatement ";" |
	//	statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) "}";
	public SCLProgramElements getSCLProgramAccess() {
		return pSCLProgram;
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}

	//Declaration returns kexpressions::Declaration:
	//	annotations+=Annotation* const?="const"? input?="input"? output?="output"? static?="static"? signal?="signal"?
	//	(type=HostType hostType=STRING valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";" | type=ValueType
	//	valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";");
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// Override ValueType rule without host type
	//enum ValueType returns kexpressions::ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | STRING="string";
	public ValueTypeElements getValueTypeAccess() {
		return unknownRuleValueType;
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//ValuedObject returns kexpressions::ValuedObject: //    (annotations+=Annotation)* // Parser does not like this
	//	name=ID ("=" initialValue=Expression)? ("combine" combineOperator=CombineOperator)?;
	public ValuedObjectElements getValuedObjectAccess() {
		return pValuedObject;
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	//Statement:
	//	EmptyStatement | InstructionStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//EmptyStatement:
	//	annotations+=Annotation* (label=ID ":");
	public EmptyStatementElements getEmptyStatementAccess() {
		return pEmptyStatement;
	}
	
	public ParserRule getEmptyStatementRule() {
		return getEmptyStatementAccess().getRule();
	}

	//InstructionStatement:
	//	annotations+=Annotation* instruction=(Assignment | Conditional | Goto | Parallel | Pause | StatementScope);
	public InstructionStatementElements getInstructionStatementAccess() {
		return pInstructionStatement;
	}
	
	public ParserRule getInstructionStatementRule() {
		return getInstructionStatementAccess().getRule();
	}

	//Instruction:
	//	Assignment | Conditional | Goto | Parallel | Pause | StatementScope;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Assignment: //    assignment = kexpressions::Expression
	//	valuedObject=[kexpressions::ValuedObject] "=" expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Conditional:
	//	"if" expression=Expression "then" declarations+=Declaration* ((statements+=InstructionStatement ";" |
	//	statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) ("else"
	//	declarations+=Declaration* ((elseStatements+=InstructionStatement ";" | elseStatements+=EmptyStatement)*
	//	(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?))? "end";
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Goto:
	//	"goto" targetLabel=ID;
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//StatementSequence:
	//	Thread | SCLProgram | Conditional | StatementScope;
	public StatementSequenceElements getStatementSequenceAccess() {
		return pStatementSequence;
	}
	
	public ParserRule getStatementSequenceRule() {
		return getStatementSequenceAccess().getRule();
	}

	//Thread:
	//	{Thread} (annotations+=Annotation* "thread")? ((statements+=InstructionStatement ";" | statements+=EmptyStatement)*
	//	(statements+=InstructionStatement statements+=EmptyStatement*)?);
	public ThreadElements getThreadAccess() {
		return pThread;
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}

	//Parallel:
	//	"fork" (threads+=Thread ("par" threads+=Thread)*) "join";
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Pause:
	//	"pause" {Pause};
	public PauseElements getPauseAccess() {
		return pPause;
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//StatementScope:
	//	{StatementScope} "{" declarations+=Declaration* ((statements+=InstructionStatement ";" | statements+=EmptyStatement)*
	//	(statements+=InstructionStatement statements+=EmptyStatement*)?) "}";
	public StatementScopeElements getStatementScopeAccess() {
		return pStatementScope;
	}
	
	public ParserRule getStatementScopeRule() {
		return getStatementScopeAccess().getRule();
	}

	//Root returns ecore::EObject:
	//	Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//BoolExpression returns Expression:
	//	OrAndExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//OrAndExpression returns Expression:
	//	CompareOperation (({OperatorExpression.subExpressions+=current} operator=(OrOperator | LogicalOrOperator)
	//	subExpressions+=CompareOperation)* | ({OperatorExpression.subExpressions+=current} operator=(AndOperator |
	//	LogicalAndOperator) subExpressions+=CompareOperation)*);
	public KExpressionsGrammarAccess.OrAndExpressionElements getOrAndExpressionAccess() {
		return gaKExpressions.getOrAndExpressionAccess();
	}
	
	public ParserRule getOrAndExpressionRule() {
		return getOrAndExpressionAccess().getRule();
	}

	////OrExpression returns Expression:
	////	CompareOperation ({OperatorExpression.subExpressions+=current} operator=(OrOperator) subExpressions+=CompareOperation)*;
	//////	{OperatorExpression} subExpressions += CompareOperation (/ *{OperatorExpression.subExpressions+=current}* / operator=(AndOperator|OrOperator) subExpressions+=CompareOperation)*;
	////
	////AndExpression returns Expression:
	////	CompareOperation ({OperatorExpression.subExpressions+=current} operator=(AndOperator) subExpressions+=CompareOperation)*;
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression) | NotExpression;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// order IS IMPORTANT
	//NotOrValuedExpression returns Expression:
	//	ValuedExpression | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parents to indicate the right binding
	//NotExpression returns Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression returns Expression:
	//	AddExpression;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2
	//AddExpression returns Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=SubExpression)*;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Example: varA - ?B
	//SubExpression returns Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} operator=SubOperator subExpressions+=MultExpression)*;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	////    ({OperatorExpression} subExpressions+=MultExpression (operator=SubOperator subExpressions+=MultExpression)+)
	////	| ({OperatorExpression} subExpressions+=MultExpression subExpressions+=NIntValue)
	////    | MultExpression;
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=DivExpression)*;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division always has to have parentheses because the '/' sign is also used for trigger/effect delimiter
	//DivExpression returns Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} operator=DivOperator subExpressions+=ModExpression)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Example: varA mod ?B
	//ModExpression returns Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Example: -?A, -(?A + ?B)
	//// at the latter we need the parents to indicate the right binding
	//NegExpression returns Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//AtomicExpression returns Expression:
	//	BoolValue | ValuedObjectTestExpression | "(" BoolExpression ")" | FunctionCall | TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//AtomicValuedExpression returns Expression:
	//	IntValue | FloatValue | StringValue | "(" ValuedExpression ")" | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A), A varX
	//ValuedObjectTestExpression returns Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) "(" subExpressions+=ValuedObjectTestExpression ")" |
	//	ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Example: A, varB
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ("[" indices+=Expression "]")*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//FunctionCall:
	//	"<" functionName=ExtendedID ("(" parameters+=Parameter ("," parameters+=Parameter)* ")" | "()")? ">";
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//Parameter:
	//	callByReference?="&"? expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valuedObjects
	//// used in Kits.xtext 
	//AnyType returns ecore::EString:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum OrOperator returns OperatorType:
	//	OR="|";
	public KExpressionsGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaKExpressions.getOrOperatorAccess();
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//enum AndOperator returns OperatorType:
	//	AND="&";
	public KExpressionsGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaKExpressions.getAndOperatorAccess();
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//// custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	} 

	//// --------------------------
	// //
	// //   ANNOTATIONS
	// //
	// // --------------------------
	// Annotation:
	//	CommentAnnotation | TagAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyBooleanValueAnnotation | KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//ValuedAnnotation returns Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// e.g.: / ** semantic comment * /
	// CommentAnnotation returns StringAnnotation:
	//	value=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaKExpressions.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// e.g.: @HVlayout
	// TagAnnotation returns Annotation:
	//	"@" name=ExtendedID ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaKExpressions.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// e.g.: @layouter dot;   
	// KeyStringValueAnnotation returns StringAnnotation:
	//	"@" name=ExtendedID value=EString ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaKExpressions.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	// TypedKeyStringValueAnnotation returns
	//TypedStringAnnotation:
	//	"@" name=ExtendedID "[" type=ExtendedID "]" value=EString ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaKExpressions.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// e.g.: @visible true;
	// KeyBooleanValueAnnotation returns BooleanAnnotation:
	//	"@" name=ExtendedID value=BOOLEAN ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaKExpressions.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// e.g.: @minSpace 10;    
	// KeyIntValueAnnotation returns IntAnnotation:
	//	"@" name=ExtendedID value=INT ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaKExpressions.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// e.g.: @minSpace 10.0;    
	// KeyFloatValueAnnotation returns FloatAnnotation:
	//	"@" name=ExtendedID value=FLOAT ("(" annotations+=Annotation* ")")?;
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaKExpressions.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// needed for importing other resources
	// ImportAnnotation:
	//	"import" importURI=STRING;
	public AnnotationsGrammarAccess.ImportAnnotationElements getImportAnnotationAccess() {
		return gaKExpressions.getImportAnnotationAccess();
	}
	
	public ParserRule getImportAnnotationRule() {
		return getImportAnnotationAccess().getRule();
	}

	//// allow strings without quotes as they don'c contain spaces
	// EString returns ecore::EString:
	//	STRING | ID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaKExpressions.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//ExtendedID returns ecore::EString:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaKExpressions.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// --------------------------
	// //
	// //  Terminals...
	// //
	// // --------------------------
	// // custom terminals
	//
	//// custom terminal rule introducing semantic comments
	// terminal COMMENT_ANNOTATION:
	//	"/ **"->"* /";
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaKExpressions.getCOMMENT_ANNOTATIONRule();
	} 

	//// modified version of Terminals.ML_COMMENT as
	// // COMMENT_ANNOTATION is not recognized correctly with original one 
	//
	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaKExpressions.getML_COMMENTRule();
	} 

	//// generic terminals
	// terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return gaKExpressions.getNUMBERRule();
	} 

	//// redefine INT terminal to allow negative numbers
	// terminal INT returns ecore::EInt:
	//	"-"? NUMBER+;
	public TerminalRule getINTRule() {
		return gaKExpressions.getINTRule();
	} 

	//// make sure the Float rule does not shadow the INT rule
	// terminal FLOAT returns ecore::EFloatObject:
	//	"-"? NUMBER+ ("." NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? "f"? | "-"? NUMBER+ "f";
	public TerminalRule getFLOATRule() {
		return gaKExpressions.getFLOATRule();
	} 

	//// introduce boolean values
	// terminal BOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaKExpressions.getBOOLEANRule();
	} 

	//// custom terminal rule for strings
	// terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaKExpressions.getSTRINGRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaKExpressions.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaKExpressions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaKExpressions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaKExpressions.getANY_OTHERRule();
	} 
}
