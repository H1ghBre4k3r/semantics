/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SCLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SCLProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.SCLProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPragmasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0 = (RuleCall)cPragmasAssignment_0.eContents().get(0);
		private final Assignment cModulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_1_0 = (RuleCall)cModulesAssignment_1.eContents().get(0);
		
		//SCLProgram:
		//	pragmas+=Pragma*
		//	modules+=Module*;
		@Override public ParserRule getRule() { return rule; }
		
		//pragmas+=Pragma* modules+=Module*
		public Group getGroup() { return cGroup; }
		
		//pragmas+=Pragma*
		public Assignment getPragmasAssignment_0() { return cPragmasAssignment_0; }
		
		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0() { return cPragmasPragmaParserRuleCall_0_0; }
		
		//modules+=Module*
		public Assignment getModulesAssignment_1() { return cModulesAssignment_1; }
		
		//Module
		public RuleCall getModulesModuleParserRuleCall_1_0() { return cModulesModuleParserRuleCall_1_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		
		//Module:
		//	annotations+=Annotation*
		//	'module' name=ID ':'?
		//	declarations+=Declaration*
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'module' name=ID ':'? declarations+=Declaration* statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'module'
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'?
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_0() { return cDeclarationsDeclarationParserRuleCall_4_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSclAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSclPostfixAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSclEffectAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConditionalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLegacyConditionalParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGotoParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cParallelParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPauseParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cModuleCallParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cScopeStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cReturnParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cForLoopParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cWhileLoopParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//Statement:
		//	SclAssignment
		//	| SclPostfixAssignment
		//	| Label
		//	| SclEffectAssignment
		//	| Conditional
		//	| LegacyConditional
		//	| Goto
		//	| Parallel
		//	| Pause
		//	| ModuleCall
		//	| ScopeStatement
		//	| Return
		//	| ForLoop
		//	| WhileLoop;
		@Override public ParserRule getRule() { return rule; }
		
		//SclAssignment | SclPostfixAssignment | Label | SclEffectAssignment | Conditional | LegacyConditional | Goto | Parallel |
		//Pause | ModuleCall | ScopeStatement | Return | ForLoop | WhileLoop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SclAssignment
		public RuleCall getSclAssignmentParserRuleCall_0() { return cSclAssignmentParserRuleCall_0; }
		
		//SclPostfixAssignment
		public RuleCall getSclPostfixAssignmentParserRuleCall_1() { return cSclPostfixAssignmentParserRuleCall_1; }
		
		//Label
		public RuleCall getLabelParserRuleCall_2() { return cLabelParserRuleCall_2; }
		
		//SclEffectAssignment
		public RuleCall getSclEffectAssignmentParserRuleCall_3() { return cSclEffectAssignmentParserRuleCall_3; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_4() { return cConditionalParserRuleCall_4; }
		
		//LegacyConditional
		public RuleCall getLegacyConditionalParserRuleCall_5() { return cLegacyConditionalParserRuleCall_5; }
		
		//Goto
		public RuleCall getGotoParserRuleCall_6() { return cGotoParserRuleCall_6; }
		
		//Parallel
		public RuleCall getParallelParserRuleCall_7() { return cParallelParserRuleCall_7; }
		
		//Pause
		public RuleCall getPauseParserRuleCall_8() { return cPauseParserRuleCall_8; }
		
		//ModuleCall
		public RuleCall getModuleCallParserRuleCall_9() { return cModuleCallParserRuleCall_9; }
		
		//ScopeStatement
		public RuleCall getScopeStatementParserRuleCall_10() { return cScopeStatementParserRuleCall_10; }
		
		//Return
		public RuleCall getReturnParserRuleCall_11() { return cReturnParserRuleCall_11; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_12() { return cForLoopParserRuleCall_12; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_13() { return cWhileLoopParserRuleCall_13; }
	}
	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cPauseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//Pause:
		//	{Pause} annotations+=Annotation*
		//	'pause'
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Pause} annotations+=Annotation* 'pause' semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//{Pause}
		public Action getPauseAction_0() { return cPauseAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//'pause'
		public Keyword getPauseKeyword_2() { return cPauseKeyword_2; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Label:
		//	annotations+=Annotation*
		//	name=ID ':';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* name=ID ':'
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}
	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cGotoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetLabelCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetLabelIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetLabelCrossReference_2_0.eContents().get(1);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//Goto:
		//	annotations+=Annotation*
		//	'goto' target=[Label] semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'goto' target=[Label] semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'goto'
		public Keyword getGotoKeyword_1() { return cGotoKeyword_1; }
		
		//target=[Label]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[Label]
		public CrossReference getTargetLabelCrossReference_2_0() { return cTargetLabelCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetLabelIDTerminalRuleCall_2_0_1() { return cTargetLabelIDTerminalRuleCall_2_0_1; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class SclAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.SclAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceValuedObjectReferenceParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorAssignOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cScheduleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cScheduleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_4_1_0 = (RuleCall)cScheduleAssignment_4_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cSemicolonSemicolonKeyword_5_0 = (Keyword)cSemicolonAssignment_5.eContents().get(0);
		
		//SclAssignment Assignment:
		//	annotations+=Annotation*
		//	reference=ValuedObjectReference
		//	operator=AssignOperator
		//	expression=Expression ('schedule' schedule+=ScheduleObjectReference+)?
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* reference=ValuedObjectReference operator=AssignOperator expression=Expression ('schedule'
		//schedule+=ScheduleObjectReference+)? semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//reference=ValuedObjectReference
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//ValuedObjectReference
		public RuleCall getReferenceValuedObjectReferenceParserRuleCall_1_0() { return cReferenceValuedObjectReferenceParserRuleCall_1_0; }
		
		//operator=AssignOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//AssignOperator
		public RuleCall getOperatorAssignOperatorEnumRuleCall_2_0() { return cOperatorAssignOperatorEnumRuleCall_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'schedule'
		public Keyword getScheduleKeyword_4_0() { return cScheduleKeyword_4_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_4_1() { return cScheduleAssignment_4_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_4_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_4_1_0; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_5() { return cSemicolonAssignment_5; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_5_0() { return cSemicolonSemicolonKeyword_5_0; }
	}
	public class SclPostfixAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.SclPostfixAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceValuedObjectReferenceParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorPostfixOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cScheduleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cScheduleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_3_1_0 = (RuleCall)cScheduleAssignment_3_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cSemicolonSemicolonKeyword_4_0 = (Keyword)cSemicolonAssignment_4.eContents().get(0);
		
		//SclPostfixAssignment Assignment:
		//	annotations+=Annotation*
		//	reference=ValuedObjectReference
		//	operator=PostfixOperator ('schedule' schedule+=ScheduleObjectReference+)?
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* reference=ValuedObjectReference operator=PostfixOperator ('schedule'
		//schedule+=ScheduleObjectReference+)? semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//reference=ValuedObjectReference
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//ValuedObjectReference
		public RuleCall getReferenceValuedObjectReferenceParserRuleCall_1_0() { return cReferenceValuedObjectReferenceParserRuleCall_1_0; }
		
		//operator=PostfixOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//PostfixOperator
		public RuleCall getOperatorPostfixOperatorEnumRuleCall_2_0() { return cOperatorPostfixOperatorEnumRuleCall_2_0; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'schedule'
		public Keyword getScheduleKeyword_3_0() { return cScheduleKeyword_3_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_3_1() { return cScheduleAssignment_3_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_3_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_3_1_0; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_4() { return cSemicolonAssignment_4; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_4_0() { return cSemicolonSemicolonKeyword_4_0; }
	}
	public class SclEffectAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.SclEffectAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cExpressionAlternatives_1_0 = (Alternatives)cExpressionAssignment_1.eContents().get(0);
		private final RuleCall cExpressionReferenceCallParserRuleCall_1_0_0 = (RuleCall)cExpressionAlternatives_1_0.eContents().get(0);
		private final RuleCall cExpressionTextExpressionParserRuleCall_1_0_1 = (RuleCall)cExpressionAlternatives_1_0.eContents().get(1);
		private final RuleCall cExpressionPrintCallParserRuleCall_1_0_2 = (RuleCall)cExpressionAlternatives_1_0.eContents().get(2);
		private final RuleCall cExpressionRandomizeCallParserRuleCall_1_0_3 = (RuleCall)cExpressionAlternatives_1_0.eContents().get(3);
		private final RuleCall cExpressionFunctionCallParserRuleCall_1_0_4 = (RuleCall)cExpressionAlternatives_1_0.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cScheduleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScheduleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_2_1_0 = (RuleCall)cScheduleAssignment_2_1.eContents().get(0);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//SclEffectAssignment Assignment:
		//	annotations+=Annotation*
		//	expression=(ReferenceCall
		//	| TextExpression
		//	| PrintCall
		//	| RandomizeCall
		//	| FunctionCall) ('schedule' schedule+=ScheduleObjectReference+)?
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* expression=(ReferenceCall | TextExpression | PrintCall | RandomizeCall | FunctionCall)
		//('schedule' schedule+=ScheduleObjectReference+)? semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//expression=(ReferenceCall | TextExpression | PrintCall | RandomizeCall | FunctionCall)
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//(ReferenceCall | TextExpression | PrintCall | RandomizeCall | FunctionCall)
		public Alternatives getExpressionAlternatives_1_0() { return cExpressionAlternatives_1_0; }
		
		//ReferenceCall
		public RuleCall getExpressionReferenceCallParserRuleCall_1_0_0() { return cExpressionReferenceCallParserRuleCall_1_0_0; }
		
		//TextExpression
		public RuleCall getExpressionTextExpressionParserRuleCall_1_0_1() { return cExpressionTextExpressionParserRuleCall_1_0_1; }
		
		//PrintCall
		public RuleCall getExpressionPrintCallParserRuleCall_1_0_2() { return cExpressionPrintCallParserRuleCall_1_0_2; }
		
		//RandomizeCall
		public RuleCall getExpressionRandomizeCallParserRuleCall_1_0_3() { return cExpressionRandomizeCallParserRuleCall_1_0_3; }
		
		//FunctionCall
		public RuleCall getExpressionFunctionCallParserRuleCall_1_0_4() { return cExpressionFunctionCallParserRuleCall_1_0_4; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'schedule'
		public Keyword getScheduleKeyword_2_0() { return cScheduleKeyword_2_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_2_1() { return cScheduleAssignment_2_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_2_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_2_1_0; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Return:
		//	annotations+=Annotation*
		//	'return'
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'return' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cExpressionAlternatives_2_0 = (Alternatives)cExpressionAssignment_2.eContents().get(0);
		private final RuleCall cExpressionBoolScheduleExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpressionAtomicExpressionParserRuleCall_2_0_1 = (RuleCall)cExpressionAlternatives_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cElseAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cElseElseScopeParserRuleCall_7_0_0 = (RuleCall)cElseAssignment_7_0.eContents().get(0);
		private final Assignment cSemicolonAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final Keyword cSemicolonSemicolonKeyword_7_1_0 = (Keyword)cSemicolonAssignment_7_1.eContents().get(0);
		
		//Conditional:
		//	annotations+=Annotation*
		//	'if' expression=(BoolScheduleExpression | AtomicExpression)
		//	'{'
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}' (else=ElseScope | semicolon?=';')?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'if' expression=(BoolScheduleExpression | AtomicExpression) '{' declarations+=Declaration*
		//statements+=Statement* '}' (else=ElseScope | semicolon?=';')?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//expression=(BoolScheduleExpression | AtomicExpression)
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//(BoolScheduleExpression | AtomicExpression)
		public Alternatives getExpressionAlternatives_2_0() { return cExpressionAlternatives_2_0; }
		
		//BoolScheduleExpression
		public RuleCall getExpressionBoolScheduleExpressionParserRuleCall_2_0_0() { return cExpressionBoolScheduleExpressionParserRuleCall_2_0_0; }
		
		//AtomicExpression
		public RuleCall getExpressionAtomicExpressionParserRuleCall_2_0_1() { return cExpressionAtomicExpressionParserRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_0() { return cDeclarationsDeclarationParserRuleCall_4_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//(else=ElseScope | semicolon?=';')?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//else=ElseScope
		public Assignment getElseAssignment_7_0() { return cElseAssignment_7_0; }
		
		//ElseScope
		public RuleCall getElseElseScopeParserRuleCall_7_0_0() { return cElseElseScopeParserRuleCall_7_0_0; }
		
		//semicolon?=';'
		public Assignment getSemicolonAssignment_7_1() { return cSemicolonAssignment_7_1; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_7_1_0() { return cSemicolonSemicolonKeyword_7_1_0; }
	}
	public class ElseScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.ElseScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cElseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSemicolonAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cSemicolonSemicolonKeyword_7_0 = (Keyword)cSemicolonAssignment_7.eContents().get(0);
		
		//ElseScope:
		//	{ElseScope} annotations+=Annotation*
		//	'else' '{'
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}'
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseScope} annotations+=Annotation* 'else' '{' declarations+=Declaration* statements+=Statement* '}' semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//{ElseScope}
		public Action getElseScopeAction_0() { return cElseScopeAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//'else'
		public Keyword getElseKeyword_2() { return cElseKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_0() { return cDeclarationsDeclarationParserRuleCall_4_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_7() { return cSemicolonAssignment_7; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_7_0() { return cSemicolonSemicolonKeyword_7_0; }
	}
	public class LegacyConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.LegacyConditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBoolExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseLegacyElseScopeParserRuleCall_5_0 = (RuleCall)cElseAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSemicolonAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cSemicolonSemicolonKeyword_7_0 = (Keyword)cSemicolonAssignment_7.eContents().get(0);
		
		//LegacyConditional Conditional:
		//	annotations+=Annotation*
		//	'if' expression=BoolExpression
		//	'then'
		//	statements+=Statement*
		//	else=LegacyElseScope?
		//	'end'
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'if' expression=BoolExpression 'then' statements+=Statement* else=LegacyElseScope? 'end'
		//semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//expression=BoolExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//BoolExpression
		public RuleCall getExpressionBoolExpressionParserRuleCall_2_0() { return cExpressionBoolExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//else=LegacyElseScope?
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }
		
		//LegacyElseScope
		public RuleCall getElseLegacyElseScopeParserRuleCall_5_0() { return cElseLegacyElseScopeParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_7() { return cSemicolonAssignment_7; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_7_0() { return cSemicolonSemicolonKeyword_7_0; }
	}
	public class LegacyElseScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.LegacyElseScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cElseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//LegacyElseScope ElseScope:
		//	{ElseScope} annotations+=Annotation*
		//	'else'
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseScope} annotations+=Annotation* 'else' statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{ElseScope}
		public Action getElseScopeAction_0() { return cElseScopeAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//'else'
		public Keyword getElseKeyword_2() { return cElseKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}
	public class ThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Thread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThreadAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0_0_0 = (RuleCall)cAnnotationsAssignment_1_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDeclarationsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0_2_0 = (RuleCall)cDeclarationsAssignment_1_0_2.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_1_0_3_0 = (RuleCall)cStatementsAssignment_1_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		//Thread:
		//	{Thread} (annotations+=Annotation*
		//	'{'
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}'
		//	| statements+=Statement*);
		@Override public ParserRule getRule() { return rule; }
		
		//{Thread} (annotations+=Annotation* '{' declarations+=Declaration* statements+=Statement* '}' | statements+=Statement*)
		public Group getGroup() { return cGroup; }
		
		//{Thread}
		public Action getThreadAction_0() { return cThreadAction_0; }
		
		//(annotations+=Annotation* '{' declarations+=Declaration* statements+=Statement* '}' | statements+=Statement*)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//annotations+=Annotation* '{' declarations+=Declaration* statements+=Statement* '}'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_0_0() { return cAnnotationsAssignment_1_0_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0_0_0() { return cAnnotationsAnnotationParserRuleCall_1_0_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0_1() { return cLeftCurlyBracketKeyword_1_0_1; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1_0_2() { return cDeclarationsAssignment_1_0_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0_2_0() { return cDeclarationsDeclarationParserRuleCall_1_0_2_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1_0_3() { return cStatementsAssignment_1_0_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0_3_0() { return cStatementsStatementParserRuleCall_1_0_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_0_4() { return cRightCurlyBracketKeyword_1_0_4; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
	}
	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cThreadsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cThreadsThreadParserRuleCall_1_0_0 = (RuleCall)cThreadsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cParKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cThreadsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cThreadsThreadParserRuleCall_1_1_1_0 = (RuleCall)cThreadsAssignment_1_1_1.eContents().get(0);
		private final Keyword cJoinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSemicolonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSemicolonSemicolonKeyword_3_0 = (Keyword)cSemicolonAssignment_3.eContents().get(0);
		
		//Parallel:
		//	'fork' (threads+=Thread ('par'
		//	threads+=Thread)*)
		//	'join'
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'fork' (threads+=Thread ('par' threads+=Thread)*) 'join' semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//'fork'
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }
		
		//(threads+=Thread ('par' threads+=Thread)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//threads+=Thread
		public Assignment getThreadsAssignment_1_0() { return cThreadsAssignment_1_0; }
		
		//Thread
		public RuleCall getThreadsThreadParserRuleCall_1_0_0() { return cThreadsThreadParserRuleCall_1_0_0; }
		
		//('par' threads+=Thread)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'par'
		public Keyword getParKeyword_1_1_0() { return cParKeyword_1_1_0; }
		
		//threads+=Thread
		public Assignment getThreadsAssignment_1_1_1() { return cThreadsAssignment_1_1_1; }
		
		//Thread
		public RuleCall getThreadsThreadParserRuleCall_1_1_1_0() { return cThreadsThreadParserRuleCall_1_1_1_0; }
		
		//'join'
		public Keyword getJoinKeyword_2() { return cJoinKeyword_2; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_3() { return cSemicolonAssignment_3; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_3_0() { return cSemicolonSemicolonKeyword_3_0; }
	}
	public class ScopeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.ScopeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScopeStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ScopeStatement:
		//	{ScopeStatement} annotations+=Annotation*
		//	'{'
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ScopeStatement} annotations+=Annotation* '{' declarations+=Declaration* statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{ScopeStatement}
		public Action getScopeStatementAction_0() { return cScopeStatementAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cInitializationDeclarationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cInitializationDeclarationLoopDeclarationParserRuleCall_2_0_0 = (RuleCall)cInitializationDeclarationAssignment_2_0.eContents().get(0);
		private final Assignment cInitializationAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInitializationEffectOrAssignmentParserRuleCall_2_1_0 = (RuleCall)cInitializationAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionBoolExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAfterthoughtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAfterthoughtEffectOrAssignmentParserRuleCall_6_0 = (RuleCall)cAfterthoughtAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDeclarationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_9_0 = (RuleCall)cDeclarationsAssignment_9.eContents().get(0);
		private final Assignment cStatementsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatementsStatementParserRuleCall_10_0 = (RuleCall)cStatementsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSemicolonAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final Keyword cSemicolonSemicolonKeyword_12_0 = (Keyword)cSemicolonAssignment_12.eContents().get(0);
		
		//ForLoop Loop:
		//	'for' '(' (initializationDeclaration=LoopDeclaration | initialization=EffectOrAssignment)?
		//	';'
		//	condition=BoolExpression
		//	';'
		//	afterthought=EffectOrAssignment?
		//	')' '{'
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}'
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' (initializationDeclaration=LoopDeclaration | initialization=EffectOrAssignment)? ';' condition=BoolExpression
		//';' afterthought=EffectOrAssignment? ')' '{' declarations+=Declaration* statements+=Statement* '}' semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(initializationDeclaration=LoopDeclaration | initialization=EffectOrAssignment)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//initializationDeclaration=LoopDeclaration
		public Assignment getInitializationDeclarationAssignment_2_0() { return cInitializationDeclarationAssignment_2_0; }
		
		//LoopDeclaration
		public RuleCall getInitializationDeclarationLoopDeclarationParserRuleCall_2_0_0() { return cInitializationDeclarationLoopDeclarationParserRuleCall_2_0_0; }
		
		//initialization=EffectOrAssignment
		public Assignment getInitializationAssignment_2_1() { return cInitializationAssignment_2_1; }
		
		//EffectOrAssignment
		public RuleCall getInitializationEffectOrAssignmentParserRuleCall_2_1_0() { return cInitializationEffectOrAssignmentParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition=BoolExpression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//BoolExpression
		public RuleCall getConditionBoolExpressionParserRuleCall_4_0() { return cConditionBoolExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//afterthought=EffectOrAssignment?
		public Assignment getAfterthoughtAssignment_6() { return cAfterthoughtAssignment_6; }
		
		//EffectOrAssignment
		public RuleCall getAfterthoughtEffectOrAssignmentParserRuleCall_6_0() { return cAfterthoughtEffectOrAssignmentParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_9() { return cDeclarationsAssignment_9; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_9_0() { return cDeclarationsDeclarationParserRuleCall_9_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_10() { return cStatementsAssignment_10; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_10_0() { return cStatementsStatementParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_12() { return cSemicolonAssignment_12; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_12_0() { return cSemicolonSemicolonKeyword_12_0; }
	}
	public class LoopDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.LoopDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeValueTypeEnumRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cTypeHostTypeEnumRuleCall_1_1_0_0 = (RuleCall)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cHostTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cHostTypeSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cHostTypeAssignment_1_1_1.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuedObjectsValuedObjectParserRuleCall_2_0 = (RuleCall)cValuedObjectsAssignment_2.eContents().get(0);
		
		//LoopDeclaration kexpressions::VariableDeclaration:
		//	annotations+=Annotation* (type=ValueType | type=HostType hostType=STRING) valuedObjects+=ValuedObject;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* (type=ValueType | type=HostType hostType=STRING) valuedObjects+=ValuedObject
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//(type=ValueType | type=HostType hostType=STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=ValueType
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//ValueType
		public RuleCall getTypeValueTypeEnumRuleCall_1_0_0() { return cTypeValueTypeEnumRuleCall_1_0_0; }
		
		//type=HostType hostType=STRING
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//type=HostType
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }
		
		//HostType
		public RuleCall getTypeHostTypeEnumRuleCall_1_1_0_0() { return cTypeHostTypeEnumRuleCall_1_1_0_0; }
		
		//hostType=STRING
		public Assignment getHostTypeAssignment_1_1_1() { return cHostTypeAssignment_1_1_1; }
		
		//STRING
		public RuleCall getHostTypeSTRINGTerminalRuleCall_1_1_1_0() { return cHostTypeSTRINGTerminalRuleCall_1_1_1_0; }
		
		//valuedObjects+=ValuedObject
		public Assignment getValuedObjectsAssignment_2() { return cValuedObjectsAssignment_2; }
		
		//ValuedObject
		public RuleCall getValuedObjectsValuedObjectParserRuleCall_2_0() { return cValuedObjectsValuedObjectParserRuleCall_2_0; }
	}
	public class EffectOrAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.EffectOrAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cReferenceAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cReferenceValuedObjectReferenceParserRuleCall_1_0_0_0 = (RuleCall)cReferenceAssignment_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOperatorPostfixOperatorEnumRuleCall_1_0_1_0 = (RuleCall)cOperatorAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cReferenceAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cReferenceValuedObjectReferenceParserRuleCall_1_1_0_0 = (RuleCall)cReferenceAssignment_1_1_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperatorAssignOperatorEnumRuleCall_1_1_1_0 = (RuleCall)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_2_0 = (RuleCall)cExpressionAssignment_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//EffectOrAssignment keffects::Assignment:
		//	annotations+=Annotation* (reference=ValuedObjectReference
		//	operator=PostfixOperator
		//	| reference=ValuedObjectReference
		//	operator=AssignOperator
		//	expression=Expression
		//	| expression=Expression);
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* (reference=ValuedObjectReference operator=PostfixOperator | reference=ValuedObjectReference
		//operator=AssignOperator expression=Expression | expression=Expression)
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//(reference=ValuedObjectReference operator=PostfixOperator | reference=ValuedObjectReference operator=AssignOperator
		//expression=Expression | expression=Expression)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//reference=ValuedObjectReference operator=PostfixOperator
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//reference=ValuedObjectReference
		public Assignment getReferenceAssignment_1_0_0() { return cReferenceAssignment_1_0_0; }
		
		//ValuedObjectReference
		public RuleCall getReferenceValuedObjectReferenceParserRuleCall_1_0_0_0() { return cReferenceValuedObjectReferenceParserRuleCall_1_0_0_0; }
		
		//operator=PostfixOperator
		public Assignment getOperatorAssignment_1_0_1() { return cOperatorAssignment_1_0_1; }
		
		//PostfixOperator
		public RuleCall getOperatorPostfixOperatorEnumRuleCall_1_0_1_0() { return cOperatorPostfixOperatorEnumRuleCall_1_0_1_0; }
		
		//reference=ValuedObjectReference operator=AssignOperator expression=Expression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//reference=ValuedObjectReference
		public Assignment getReferenceAssignment_1_1_0() { return cReferenceAssignment_1_1_0; }
		
		//ValuedObjectReference
		public RuleCall getReferenceValuedObjectReferenceParserRuleCall_1_1_0_0() { return cReferenceValuedObjectReferenceParserRuleCall_1_1_0_0; }
		
		//operator=AssignOperator
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//AssignOperator
		public RuleCall getOperatorAssignOperatorEnumRuleCall_1_1_1_0() { return cOperatorAssignOperatorEnumRuleCall_1_1_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1_2() { return cExpressionAssignment_1_1_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_2_0() { return cExpressionExpressionParserRuleCall_1_1_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionBoolExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_5_0 = (RuleCall)cDeclarationsAssignment_5.eContents().get(0);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSemicolonAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Keyword cSemicolonSemicolonKeyword_8_0 = (Keyword)cSemicolonAssignment_8.eContents().get(0);
		
		//WhileLoop Loop:
		//	'while' '('
		//	condition=BoolExpression
		//	')' '{'
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}'
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' condition=BoolExpression ')' '{' declarations+=Declaration* statements+=Statement* '}' semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=BoolExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//BoolExpression
		public RuleCall getConditionBoolExpressionParserRuleCall_2_0() { return cConditionBoolExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_5() { return cDeclarationsAssignment_5; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_5_0() { return cDeclarationsDeclarationParserRuleCall_5_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_8() { return cSemicolonAssignment_8; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_8_0() { return cSemicolonSemicolonKeyword_8_0; }
	}
	public class ModuleCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.ModuleCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cRunKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModuleModuleCrossReference_2_0 = (CrossReference)cModuleAssignment_2.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_2_0_1 = (RuleCall)cModuleModuleCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cParametersModuleCallParameterParserRuleCall_3_0_1_0 = (RuleCall)cParametersAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cParametersModuleCallParameterParserRuleCall_3_0_2_1_0 = (RuleCall)cParametersAssignment_3_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cSemicolonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cSemicolonSemicolonKeyword_4_0 = (Keyword)cSemicolonAssignment_4.eContents().get(0);
		
		//ModuleCall:
		//	annotations+=Annotation*
		//	'run'
		//	module=[Module] ('(' parameters+=ModuleCallParameter (',' parameters+=ModuleCallParameter)* ')' | '()')?
		//	semicolon?=';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'run' module=[Module] ('(' parameters+=ModuleCallParameter (','
		//parameters+=ModuleCallParameter)* ')' | '()')? semicolon?=';'?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'run'
		public Keyword getRunKeyword_1() { return cRunKeyword_1; }
		
		//module=[Module]
		public Assignment getModuleAssignment_2() { return cModuleAssignment_2; }
		
		//[Module]
		public CrossReference getModuleModuleCrossReference_2_0() { return cModuleModuleCrossReference_2_0; }
		
		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_2_0_1() { return cModuleModuleIDTerminalRuleCall_2_0_1; }
		
		//('(' parameters+=ModuleCallParameter (',' parameters+=ModuleCallParameter)* ')' | '()')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'(' parameters+=ModuleCallParameter (',' parameters+=ModuleCallParameter)* ')'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }
		
		//parameters+=ModuleCallParameter
		public Assignment getParametersAssignment_3_0_1() { return cParametersAssignment_3_0_1; }
		
		//ModuleCallParameter
		public RuleCall getParametersModuleCallParameterParserRuleCall_3_0_1_0() { return cParametersModuleCallParameterParserRuleCall_3_0_1_0; }
		
		//(',' parameters+=ModuleCallParameter)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//parameters+=ModuleCallParameter
		public Assignment getParametersAssignment_3_0_2_1() { return cParametersAssignment_3_0_2_1; }
		
		//ModuleCallParameter
		public RuleCall getParametersModuleCallParameterParserRuleCall_3_0_2_1_0() { return cParametersModuleCallParameterParserRuleCall_3_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_0_3() { return cRightParenthesisKeyword_3_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3_1() { return cLeftParenthesisRightParenthesisKeyword_3_1; }
		
		//semicolon?=';'?
		public Assignment getSemicolonAssignment_4() { return cSemicolonAssignment_4; }
		
		//';'
		public Keyword getSemicolonSemicolonKeyword_4_0() { return cSemicolonSemicolonKeyword_4_0; }
	}
	public class ModuleCallParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.ModuleCallParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cAccessTypeAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cAccessTypeParameterAccessTypeEnumRuleCall_0_0_0_0 = (RuleCall)cAccessTypeAssignment_0_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cExpressionValuedObjectReferenceParserRuleCall_0_0_1_0 = (RuleCall)cExpressionAssignment_0_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExplicitBindingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cExplicitBindingValuedObjectCrossReference_1_1_0 = (CrossReference)cExplicitBindingAssignment_1_1.eContents().get(0);
		private final RuleCall cExplicitBindingValuedObjectIDTerminalRuleCall_1_1_0_1 = (RuleCall)cExplicitBindingValuedObjectCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExplicitBindingIndicesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExplicitBindingIndicesExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExplicitBindingIndicesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//ModuleCallParameter kexpressions::Parameter:
		//	(accessType=ParameterAccessType
		//	expression=ValuedObjectReference | expression=Expression) ('to' explicitBinding=[kexpressions::ValuedObject] ('['
		//	explicitBindingIndices+=Expression ']')*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(accessType=ParameterAccessType expression=ValuedObjectReference | expression=Expression) ('to'
		//explicitBinding=[kexpressions::ValuedObject] ('[' explicitBindingIndices+=Expression ']')*)?
		public Group getGroup() { return cGroup; }
		
		//(accessType=ParameterAccessType expression=ValuedObjectReference | expression=Expression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//accessType=ParameterAccessType expression=ValuedObjectReference
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//accessType=ParameterAccessType
		public Assignment getAccessTypeAssignment_0_0_0() { return cAccessTypeAssignment_0_0_0; }
		
		//ParameterAccessType
		public RuleCall getAccessTypeParameterAccessTypeEnumRuleCall_0_0_0_0() { return cAccessTypeParameterAccessTypeEnumRuleCall_0_0_0_0; }
		
		//expression=ValuedObjectReference
		public Assignment getExpressionAssignment_0_0_1() { return cExpressionAssignment_0_0_1; }
		
		//ValuedObjectReference
		public RuleCall getExpressionValuedObjectReferenceParserRuleCall_0_0_1_0() { return cExpressionValuedObjectReferenceParserRuleCall_0_0_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//('to' explicitBinding=[kexpressions::ValuedObject] ('[' explicitBindingIndices+=Expression ']')*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'to'
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }
		
		//explicitBinding=[kexpressions::ValuedObject]
		public Assignment getExplicitBindingAssignment_1_1() { return cExplicitBindingAssignment_1_1; }
		
		//[kexpressions::ValuedObject]
		public CrossReference getExplicitBindingValuedObjectCrossReference_1_1_0() { return cExplicitBindingValuedObjectCrossReference_1_1_0; }
		
		//ID
		public RuleCall getExplicitBindingValuedObjectIDTerminalRuleCall_1_1_0_1() { return cExplicitBindingValuedObjectIDTerminalRuleCall_1_1_0_1; }
		
		//('[' explicitBindingIndices+=Expression ']')*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//explicitBindingIndices+=Expression
		public Assignment getExplicitBindingIndicesAssignment_1_2_1() { return cExplicitBindingIndicesAssignment_1_2_1; }
		
		//Expression
		public RuleCall getExplicitBindingIndicesExpressionParserRuleCall_1_2_1_0() { return cExplicitBindingIndicesExpressionParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
	}
	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodImplementationDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cReturnTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReturnTypeMethodReturnTypeEnumRuleCall_3_0 = (RuleCall)cReturnTypeAssignment_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_4_0 = (RuleCall)cValuedObjectsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0 = (RuleCall)cParameterDeclarationsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final Keyword cCommaKeyword_5_0_2_0 = (Keyword)cGroup_5_0_2.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0 = (RuleCall)cParameterDeclarationsAssignment_5_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_3 = (Keyword)cGroup_5_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cScheduleKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cScheduleAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_6_1_0 = (RuleCall)cScheduleAssignment_6_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_7_1_1_0 = (RuleCall)cAnnotationsAssignment_7_1_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_7_1_2 = (Assignment)cGroup_7_1.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_7_1_2_0 = (RuleCall)cDeclarationsAssignment_7_1_2.eContents().get(0);
		private final Assignment cStatementsAssignment_7_1_3 = (Assignment)cGroup_7_1.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_7_1_3_0 = (RuleCall)cStatementsAssignment_7_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_1_4 = (Keyword)cGroup_7_1.eContents().get(4);
		private final Assignment cAnnotationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_8_0 = (RuleCall)cAnnotationsAssignment_8.eContents().get(0);
		
		//@Override
		//MethodDeclaration kexpressions::MethodDeclaration:
		//	{MethodImplementationDeclaration} annotations+=Annotation*
		//	access=AccessModifier?
		//	returnType=MethodReturnType?
		//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
		//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
		//	(';'
		//	|
		//	'{'
		//	annotations+=CommentAnnotatonSL?
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}') annotations+=CommentAnnotatonSL?;
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodImplementationDeclaration} annotations+=Annotation* access=AccessModifier? returnType=MethodReturnType?
		//valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
		//parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
		//(';' | '{' annotations+=CommentAnnotatonSL? declarations+=Declaration* statements+=Statement* '}')
		//annotations+=CommentAnnotatonSL?
		public Group getGroup() { return cGroup; }
		
		//{MethodImplementationDeclaration}
		public Action getMethodImplementationDeclarationAction_0() { return cMethodImplementationDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//returnType=MethodReturnType?
		public Assignment getReturnTypeAssignment_3() { return cReturnTypeAssignment_3; }
		
		//MethodReturnType
		public RuleCall getReturnTypeMethodReturnTypeEnumRuleCall_3_0() { return cReturnTypeMethodReturnTypeEnumRuleCall_3_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_4() { return cValuedObjectsAssignment_4; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_4_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_4_0; }
		
		//('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		//')' | '()')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		//')'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_5_0_1() { return cParameterDeclarationsAssignment_5_0_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0; }
		
		//(',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }
		
		//','
		public Keyword getCommaKeyword_5_0_2_0() { return cCommaKeyword_5_0_2_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_5_0_2_1() { return cParameterDeclarationsAssignment_5_0_2_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_3() { return cRightParenthesisKeyword_5_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_5_1() { return cLeftParenthesisRightParenthesisKeyword_5_1; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'schedule'
		public Keyword getScheduleKeyword_6_0() { return cScheduleKeyword_6_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_6_1() { return cScheduleAssignment_6_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_6_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_6_1_0; }
		
		//(';' | '{' annotations+=CommentAnnotatonSL? declarations+=Declaration* statements+=Statement* '}')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//';'
		public Keyword getSemicolonKeyword_7_0() { return cSemicolonKeyword_7_0; }
		
		//'{' annotations+=CommentAnnotatonSL? declarations+=Declaration* statements+=Statement* '}'
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1_0() { return cLeftCurlyBracketKeyword_7_1_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_7_1_1() { return cAnnotationsAssignment_7_1_1; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_7_1_1_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_7_1_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_7_1_2() { return cDeclarationsAssignment_7_1_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_7_1_2_0() { return cDeclarationsDeclarationParserRuleCall_7_1_2_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_7_1_3() { return cStatementsAssignment_7_1_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_7_1_3_0() { return cStatementsStatementParserRuleCall_7_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_1_4() { return cRightCurlyBracketKeyword_7_1_4; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_8() { return cAnnotationsAssignment_8; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_8_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_8_0; }
	}
	public class MethodDeclarationWOSemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.MethodDeclarationWOSemicolon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodImplementationDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessModifierEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cReturnTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReturnTypeMethodReturnTypeEnumRuleCall_3_0 = (RuleCall)cReturnTypeAssignment_3.eContents().get(0);
		private final Assignment cValuedObjectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuedObjectsSimpleValuedObjectParserRuleCall_4_0 = (RuleCall)cValuedObjectsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0 = (RuleCall)cParameterDeclarationsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final Keyword cCommaKeyword_5_0_2_0 = (Keyword)cGroup_5_0_2.eContents().get(0);
		private final Assignment cParameterDeclarationsAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0 = (RuleCall)cParameterDeclarationsAssignment_5_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_0_3 = (Keyword)cGroup_5_0.eContents().get(3);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cScheduleKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cScheduleAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cScheduleScheduleObjectReferenceParserRuleCall_6_1_0 = (RuleCall)cScheduleAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAnnotationsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAnnotationsCommentAnnotatonSLParserRuleCall_7_1_0 = (RuleCall)cAnnotationsAssignment_7_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_7_2_0 = (RuleCall)cDeclarationsAssignment_7_2.eContents().get(0);
		private final Assignment cStatementsAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_7_3_0 = (RuleCall)cStatementsAssignment_7_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//@Override
		//MethodDeclarationWOSemicolon kexpressions::MethodDeclaration:
		//	{MethodImplementationDeclaration} annotations+=Annotation*
		//	access=AccessModifier?
		//	returnType=MethodReturnType?
		//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
		//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
		//	('{'
		//	annotations+=CommentAnnotatonSL?
		//	declarations+=Declaration*
		//	statements+=Statement*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodImplementationDeclaration} annotations+=Annotation* access=AccessModifier? returnType=MethodReturnType?
		//valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
		//parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
		//('{' annotations+=CommentAnnotatonSL? declarations+=Declaration* statements+=Statement* '}')?
		public Group getGroup() { return cGroup; }
		
		//{MethodImplementationDeclaration}
		public Action getMethodImplementationDeclarationAction_0() { return cMethodImplementationDeclarationAction_0; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
		
		//access=AccessModifier?
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_2_0() { return cAccessAccessModifierEnumRuleCall_2_0; }
		
		//returnType=MethodReturnType?
		public Assignment getReturnTypeAssignment_3() { return cReturnTypeAssignment_3; }
		
		//MethodReturnType
		public RuleCall getReturnTypeMethodReturnTypeEnumRuleCall_3_0() { return cReturnTypeMethodReturnTypeEnumRuleCall_3_0; }
		
		//valuedObjects+=SimpleValuedObject
		public Assignment getValuedObjectsAssignment_4() { return cValuedObjectsAssignment_4; }
		
		//SimpleValuedObject
		public RuleCall getValuedObjectsSimpleValuedObjectParserRuleCall_4_0() { return cValuedObjectsSimpleValuedObjectParserRuleCall_4_0; }
		
		//('(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		//')' | '()')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'(' parameterDeclarations+=VariableDeclarationWOSemicolon (',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		//')'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0_0() { return cLeftParenthesisKeyword_5_0_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_5_0_1() { return cParameterDeclarationsAssignment_5_0_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_1_0; }
		
		//(',' parameterDeclarations+=VariableDeclarationWOSemicolon)*
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }
		
		//','
		public Keyword getCommaKeyword_5_0_2_0() { return cCommaKeyword_5_0_2_0; }
		
		//parameterDeclarations+=VariableDeclarationWOSemicolon
		public Assignment getParameterDeclarationsAssignment_5_0_2_1() { return cParameterDeclarationsAssignment_5_0_2_1; }
		
		//VariableDeclarationWOSemicolon
		public RuleCall getParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0() { return cParameterDeclarationsVariableDeclarationWOSemicolonParserRuleCall_5_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_0_3() { return cRightParenthesisKeyword_5_0_3; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_5_1() { return cLeftParenthesisRightParenthesisKeyword_5_1; }
		
		//('schedule' schedule+=ScheduleObjectReference+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'schedule'
		public Keyword getScheduleKeyword_6_0() { return cScheduleKeyword_6_0; }
		
		//schedule+=ScheduleObjectReference+
		public Assignment getScheduleAssignment_6_1() { return cScheduleAssignment_6_1; }
		
		//ScheduleObjectReference
		public RuleCall getScheduleScheduleObjectReferenceParserRuleCall_6_1_0() { return cScheduleScheduleObjectReferenceParserRuleCall_6_1_0; }
		
		//('{' annotations+=CommentAnnotatonSL? declarations+=Declaration* statements+=Statement* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//annotations+=CommentAnnotatonSL?
		public Assignment getAnnotationsAssignment_7_1() { return cAnnotationsAssignment_7_1; }
		
		//CommentAnnotatonSL
		public RuleCall getAnnotationsCommentAnnotatonSLParserRuleCall_7_1_0() { return cAnnotationsCommentAnnotatonSLParserRuleCall_7_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_7_2() { return cDeclarationsAssignment_7_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_7_2_0() { return cDeclarationsDeclarationParserRuleCall_7_2_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_7_3() { return cStatementsAssignment_7_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_7_3_0() { return cStatementsStatementParserRuleCall_7_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
	}
	
	
	private final SCLProgramElements pSCLProgram;
	private final ModuleElements pModule;
	private final StatementElements pStatement;
	private final PauseElements pPause;
	private final LabelElements pLabel;
	private final GotoElements pGoto;
	private final SclAssignmentElements pSclAssignment;
	private final SclPostfixAssignmentElements pSclPostfixAssignment;
	private final SclEffectAssignmentElements pSclEffectAssignment;
	private final ReturnElements pReturn;
	private final ConditionalElements pConditional;
	private final ElseScopeElements pElseScope;
	private final LegacyConditionalElements pLegacyConditional;
	private final LegacyElseScopeElements pLegacyElseScope;
	private final ThreadElements pThread;
	private final ParallelElements pParallel;
	private final ScopeStatementElements pScopeStatement;
	private final ForLoopElements pForLoop;
	private final LoopDeclarationElements pLoopDeclaration;
	private final EffectOrAssignmentElements pEffectOrAssignment;
	private final WhileLoopElements pWhileLoop;
	private final ModuleCallElements pModuleCall;
	private final ModuleCallParameterElements pModuleCallParameter;
	private final MethodDeclarationElements pMethodDeclaration;
	private final MethodDeclarationWOSemicolonElements pMethodDeclarationWOSemicolon;
	
	private final Grammar grammar;
	
	private final KExtGrammarAccess gaKExt;
	
	private final KEffectsGrammarAccess gaKEffects;
	
	private final KExpressionsGrammarAccess gaKExpressions;
	
	private final AnnotationsGrammarAccess gaAnnotations;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCLGrammarAccess(GrammarProvider grammarProvider,
			KExtGrammarAccess gaKExt,
			KEffectsGrammarAccess gaKEffects,
			KExpressionsGrammarAccess gaKExpressions,
			AnnotationsGrammarAccess gaAnnotations,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pSCLProgram = new SCLProgramElements();
		this.pModule = new ModuleElements();
		this.pStatement = new StatementElements();
		this.pPause = new PauseElements();
		this.pLabel = new LabelElements();
		this.pGoto = new GotoElements();
		this.pSclAssignment = new SclAssignmentElements();
		this.pSclPostfixAssignment = new SclPostfixAssignmentElements();
		this.pSclEffectAssignment = new SclEffectAssignmentElements();
		this.pReturn = new ReturnElements();
		this.pConditional = new ConditionalElements();
		this.pElseScope = new ElseScopeElements();
		this.pLegacyConditional = new LegacyConditionalElements();
		this.pLegacyElseScope = new LegacyElseScopeElements();
		this.pThread = new ThreadElements();
		this.pParallel = new ParallelElements();
		this.pScopeStatement = new ScopeStatementElements();
		this.pForLoop = new ForLoopElements();
		this.pLoopDeclaration = new LoopDeclarationElements();
		this.pEffectOrAssignment = new EffectOrAssignmentElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pModuleCall = new ModuleCallElements();
		this.pModuleCallParameter = new ModuleCallParameterElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pMethodDeclarationWOSemicolon = new MethodDeclarationWOSemicolonElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.scl.SCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}
	
	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}
	
	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}
	
	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SCLProgram:
	//	pragmas+=Pragma*
	//	modules+=Module*;
	public SCLProgramElements getSCLProgramAccess() {
		return pSCLProgram;
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}
	
	//Module:
	//	annotations+=Annotation*
	//	'module' name=ID ':'?
	//	declarations+=Declaration*
	//	statements+=Statement*;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Statement:
	//	SclAssignment
	//	| SclPostfixAssignment
	//	| Label
	//	| SclEffectAssignment
	//	| Conditional
	//	| LegacyConditional
	//	| Goto
	//	| Parallel
	//	| Pause
	//	| ModuleCall
	//	| ScopeStatement
	//	| Return
	//	| ForLoop
	//	| WhileLoop;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Pause:
	//	{Pause} annotations+=Annotation*
	//	'pause'
	//	semicolon?=';'?;
	public PauseElements getPauseAccess() {
		return pPause;
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//Label:
	//	annotations+=Annotation*
	//	name=ID ':';
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Goto:
	//	annotations+=Annotation*
	//	'goto' target=[Label] semicolon?=';'?;
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//SclAssignment Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=AssignOperator
	//	expression=Expression ('schedule' schedule+=ScheduleObjectReference+)?
	//	semicolon?=';'?;
	public SclAssignmentElements getSclAssignmentAccess() {
		return pSclAssignment;
	}
	
	public ParserRule getSclAssignmentRule() {
		return getSclAssignmentAccess().getRule();
	}
	
	//SclPostfixAssignment Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=PostfixOperator ('schedule' schedule+=ScheduleObjectReference+)?
	//	semicolon?=';'?;
	public SclPostfixAssignmentElements getSclPostfixAssignmentAccess() {
		return pSclPostfixAssignment;
	}
	
	public ParserRule getSclPostfixAssignmentRule() {
		return getSclPostfixAssignmentAccess().getRule();
	}
	
	//SclEffectAssignment Assignment:
	//	annotations+=Annotation*
	//	expression=(ReferenceCall
	//	| TextExpression
	//	| PrintCall
	//	| RandomizeCall
	//	| FunctionCall) ('schedule' schedule+=ScheduleObjectReference+)?
	//	semicolon?=';'?;
	public SclEffectAssignmentElements getSclEffectAssignmentAccess() {
		return pSclEffectAssignment;
	}
	
	public ParserRule getSclEffectAssignmentRule() {
		return getSclEffectAssignmentAccess().getRule();
	}
	
	//Return:
	//	annotations+=Annotation*
	//	'return'
	//	expression=Expression;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//Conditional:
	//	annotations+=Annotation*
	//	'if' expression=(BoolScheduleExpression | AtomicExpression)
	//	'{'
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}' (else=ElseScope | semicolon?=';')?;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//ElseScope:
	//	{ElseScope} annotations+=Annotation*
	//	'else' '{'
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}'
	//	semicolon?=';'?;
	public ElseScopeElements getElseScopeAccess() {
		return pElseScope;
	}
	
	public ParserRule getElseScopeRule() {
		return getElseScopeAccess().getRule();
	}
	
	//LegacyConditional Conditional:
	//	annotations+=Annotation*
	//	'if' expression=BoolExpression
	//	'then'
	//	statements+=Statement*
	//	else=LegacyElseScope?
	//	'end'
	//	semicolon?=';'?;
	public LegacyConditionalElements getLegacyConditionalAccess() {
		return pLegacyConditional;
	}
	
	public ParserRule getLegacyConditionalRule() {
		return getLegacyConditionalAccess().getRule();
	}
	
	//LegacyElseScope ElseScope:
	//	{ElseScope} annotations+=Annotation*
	//	'else'
	//	statements+=Statement*;
	public LegacyElseScopeElements getLegacyElseScopeAccess() {
		return pLegacyElseScope;
	}
	
	public ParserRule getLegacyElseScopeRule() {
		return getLegacyElseScopeAccess().getRule();
	}
	
	//Thread:
	//	{Thread} (annotations+=Annotation*
	//	'{'
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}'
	//	| statements+=Statement*);
	public ThreadElements getThreadAccess() {
		return pThread;
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}
	
	//Parallel:
	//	'fork' (threads+=Thread ('par'
	//	threads+=Thread)*)
	//	'join'
	//	semicolon?=';'?;
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}
	
	//ScopeStatement:
	//	{ScopeStatement} annotations+=Annotation*
	//	'{'
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}';
	public ScopeStatementElements getScopeStatementAccess() {
		return pScopeStatement;
	}
	
	public ParserRule getScopeStatementRule() {
		return getScopeStatementAccess().getRule();
	}
	
	//ForLoop Loop:
	//	'for' '(' (initializationDeclaration=LoopDeclaration | initialization=EffectOrAssignment)?
	//	';'
	//	condition=BoolExpression
	//	';'
	//	afterthought=EffectOrAssignment?
	//	')' '{'
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}'
	//	semicolon?=';'?;
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//LoopDeclaration kexpressions::VariableDeclaration:
	//	annotations+=Annotation* (type=ValueType | type=HostType hostType=STRING) valuedObjects+=ValuedObject;
	public LoopDeclarationElements getLoopDeclarationAccess() {
		return pLoopDeclaration;
	}
	
	public ParserRule getLoopDeclarationRule() {
		return getLoopDeclarationAccess().getRule();
	}
	
	//EffectOrAssignment keffects::Assignment:
	//	annotations+=Annotation* (reference=ValuedObjectReference
	//	operator=PostfixOperator
	//	| reference=ValuedObjectReference
	//	operator=AssignOperator
	//	expression=Expression
	//	| expression=Expression);
	public EffectOrAssignmentElements getEffectOrAssignmentAccess() {
		return pEffectOrAssignment;
	}
	
	public ParserRule getEffectOrAssignmentRule() {
		return getEffectOrAssignmentAccess().getRule();
	}
	
	//WhileLoop Loop:
	//	'while' '('
	//	condition=BoolExpression
	//	')' '{'
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}'
	//	semicolon?=';'?;
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ModuleCall:
	//	annotations+=Annotation*
	//	'run'
	//	module=[Module] ('(' parameters+=ModuleCallParameter (',' parameters+=ModuleCallParameter)* ')' | '()')?
	//	semicolon?=';'?;
	public ModuleCallElements getModuleCallAccess() {
		return pModuleCall;
	}
	
	public ParserRule getModuleCallRule() {
		return getModuleCallAccess().getRule();
	}
	
	//ModuleCallParameter kexpressions::Parameter:
	//	(accessType=ParameterAccessType
	//	expression=ValuedObjectReference | expression=Expression) ('to' explicitBinding=[kexpressions::ValuedObject] ('['
	//	explicitBindingIndices+=Expression ']')*)?;
	public ModuleCallParameterElements getModuleCallParameterAccess() {
		return pModuleCallParameter;
	}
	
	public ParserRule getModuleCallParameterRule() {
		return getModuleCallParameterAccess().getRule();
	}
	
	//@Override
	//MethodDeclaration kexpressions::MethodDeclaration:
	//	{MethodImplementationDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	returnType=MethodReturnType?
	//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
	//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
	//	(';'
	//	|
	//	'{'
	//	annotations+=CommentAnnotatonSL?
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}') annotations+=CommentAnnotatonSL?;
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}
	
	//@Override
	//MethodDeclarationWOSemicolon kexpressions::MethodDeclaration:
	//	{MethodImplementationDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	returnType=MethodReturnType?
	//	valuedObjects+=SimpleValuedObject ('(' parameterDeclarations+=VariableDeclarationWOSemicolon (','
	//	parameterDeclarations+=VariableDeclarationWOSemicolon)* ')' | '()') ('schedule' schedule+=ScheduleObjectReference+)?
	//	('{'
	//	annotations+=CommentAnnotatonSL?
	//	declarations+=Declaration*
	//	statements+=Statement*
	//	'}')?;
	public MethodDeclarationWOSemicolonElements getMethodDeclarationWOSemicolonAccess() {
		return pMethodDeclarationWOSemicolon;
	}
	
	public ParserRule getMethodDeclarationWOSemicolonRule() {
		return getMethodDeclarationWOSemicolonAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// */ /*
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// */ // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	scopes+=RootScope;
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}
	
	//RootScope kext::KExtScope:
	//	{kext::KExtScope} declarations+=Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)*;
	public KExtGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKExt.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}
	
	//Scope kext::KExtScope:
	//	{kext::KExtScope} name=ID? '{'
	//	declarations+=Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)* '}';
	public KExtGrammarAccess.ScopeElements getScopeAccess() {
		return gaKExt.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=(AnnotatedExpression | AnnotatedJsonExpression) | effect=Effect;
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}
	
	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=Expression;
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}
	
	//AnnotatedJsonExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'json'
	//	expression=JsonObjectValue;
	public KExtGrammarAccess.AnnotatedJsonExpressionElements getAnnotatedJsonExpressionAccess() {
		return gaKExt.getAnnotatedJsonExpressionAccess();
	}
	
	public ParserRule getAnnotatedJsonExpressionRule() {
		return getAnnotatedJsonExpressionAccess().getRule();
	}
	
	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	VariableDeclaration | ReferenceDeclaration | ScheduleDeclaration | ClassDeclaration;
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//DeclarationWOSemicolon kexpressions::Declaration:
	//	VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon | ScheduleDeclarationWOSemicolon |
	//	ClassDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKExt.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}
	
	//VariableDeclaration kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal' | type=HostType hostType=STRING)
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKExt.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationWOSemicolon kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal' | type=HostType hostType=STRING)
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKExt.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}
	
	//ClassDeclaration kext::ClassDeclaration:
	//	{kext::ClassDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'?
	//	host?='host'? (type=ClassType
	//	name=EString?
	//	'{'
	//	declarations+=DeclarationOrMethod*
	//	'}'
	//	| type=StructType
	//	name=EString?
	//	'{'
	//	declarations+=Declaration*
	//	'}') (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//	';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ClassDeclarationElements getClassDeclarationAccess() {
		return gaKExt.getClassDeclarationAccess();
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//DeclarationOrMethod kexpressions::Declaration:
	//	Declaration | super::MethodDeclaration;
	public KExtGrammarAccess.DeclarationOrMethodElements getDeclarationOrMethodAccess() {
		return gaKExt.getDeclarationOrMethodAccess();
	}
	
	public ParserRule getDeclarationOrMethodRule() {
		return getDeclarationOrMethodAccess().getRule();
	}
	
	//ClassDeclarationWOSemicolon kext::ClassDeclaration:
	//	{kext::ClassDeclaration} annotations+=Annotation*
	//	access=AccessModifier?
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	global?='global'?
	//	static?='static'?
	//	host?='host'? (type=ClassType
	//	name=EString?
	//	'{'
	//	declarations+=DeclarationOrMethodWOSemicolon*
	//	'}'
	//	| type=StructType
	//	name=EString?
	//	'{'
	//	declarations+=DeclarationWOSemicolon*
	//	'}') (valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*)?
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ClassDeclarationWOSemicolonElements getClassDeclarationWOSemicolonAccess() {
		return gaKExt.getClassDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getClassDeclarationWOSemicolonRule() {
		return getClassDeclarationWOSemicolonAccess().getRule();
	}
	
	//DeclarationOrMethodWOSemicolon kexpressions::Declaration:
	//	DeclarationWOSemicolon | super::MethodDeclarationWOSemicolon;
	public KExtGrammarAccess.DeclarationOrMethodWOSemicolonElements getDeclarationOrMethodWOSemicolonAccess() {
		return gaKExt.getDeclarationOrMethodWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationOrMethodWOSemicolonRule() {
		return getDeclarationOrMethodWOSemicolonAccess().getRule();
	}
	
	//ReferenceDeclaration kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier? ('ref' reference=[annotations::NamedObject|NamespaceID] ('<'
	//	genericParameters+=GenericParameter (',' genericParameters+=GenericParameter)* '>')?
	//	|
	//	'extern' extern+=ExternString (',' extern+=ExternString)*) valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKExt.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//ReferenceDeclarationWOSemicolon kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier? ('ref' reference=[annotations::NamedObject|NamespaceID] ('<'
	//	genericParameters+=GenericParameter (',' genericParameters+=GenericParameter)* '>')?
	//	|
	//	'extern' extern+=ExternString (',' extern+=ExternString)*) valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKExt.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}
	
	//ExternString kexpressions::ExternString:
	//	annotations+=TagAnnotation*
	//	code=STRING;
	public KExtGrammarAccess.ExternStringElements getExternStringAccess() {
		return gaKExt.getExternStringAccess();
	}
	
	public ParserRule getExternStringRule() {
		return getExternStringAccess().getRule();
	}
	
	//// ---
	////  Generics
	//// ---
	//GenericParameterDeclaration kexpressions::GenericParameterDeclaration:
	//	annotations+=QuotedStringAnnotation*
	//	valuedObjects+=SimpleValuedObject ('is' valueType=ValueType | 'is' reference?='ref'?
	//	type=[annotations::NamedObject|PrimeID])?;
	public KExtGrammarAccess.GenericParameterDeclarationElements getGenericParameterDeclarationAccess() {
		return gaKExt.getGenericParameterDeclarationAccess();
	}
	
	public ParserRule getGenericParameterDeclarationRule() {
		return getGenericParameterDeclarationAccess().getRule();
	}
	
	//GenericParameter kexpressions::Parameter:
	//	expression=(ValueTypeReference
	//	| AnyValue
	//	| GenericParameter_GenericTypeReference_Parameterized
	//	| GenericParameter_ValuedObjectReference_Array
	//	| GenericParameter_ValuedObjectReference_Sub
	//	| GenericTypeReference
	//	| ValuedObjectReference);
	public KExtGrammarAccess.GenericParameterElements getGenericParameterAccess() {
		return gaKExt.getGenericParameterAccess();
	}
	
	public ParserRule getGenericParameterRule() {
		return getGenericParameterAccess().getRule();
	}
	
	//ValueTypeReference kexpressions::ValueTypeReference:
	//	valueType=ValueType;
	public KExtGrammarAccess.ValueTypeReferenceElements getValueTypeReferenceAccess() {
		return gaKExt.getValueTypeReferenceAccess();
	}
	
	public ParserRule getValueTypeReferenceRule() {
		return getValueTypeReferenceAccess().getRule();
	}
	
	//GenericTypeReference kexpressions::GenericTypeReference:
	//	type=[annotations::NamedObject|PrimeID] ('<' genericParameters+=GenericParameter (','
	//	genericParameters+=GenericParameter)* '>')?;
	public KExtGrammarAccess.GenericTypeReferenceElements getGenericTypeReferenceAccess() {
		return gaKExt.getGenericTypeReferenceAccess();
	}
	
	public ParserRule getGenericTypeReferenceRule() {
		return getGenericTypeReferenceAccess().getRule();
	}
	
	//// Special rules for GenericParameter parsing
	//GenericParameter_GenericTypeReference_Parameterized kexpressions::GenericTypeReference:
	//	type=[annotations::NamedObject|PrimeID]
	//	'<' genericParameters+=GenericParameter (',' genericParameters+=GenericParameter)* '>' // mandatory
	//;
	public KExtGrammarAccess.GenericParameter_GenericTypeReference_ParameterizedElements getGenericParameter_GenericTypeReference_ParameterizedAccess() {
		return gaKExt.getGenericParameter_GenericTypeReference_ParameterizedAccess();
	}
	
	public ParserRule getGenericParameter_GenericTypeReference_ParameterizedRule() {
		return getGenericParameter_GenericTypeReference_ParameterizedAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Array kexpressions::ValuedObjectReference:
	//	valuedObject=[kexpressions::ValuedObject|PrimeID] ('[' indices+=Expression ']')+ ('.'
	//	subReference=ValuedObjectReference)?;
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_ArrayElements getGenericParameter_ValuedObjectReference_ArrayAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_ArrayAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_ArrayRule() {
		return getGenericParameter_ValuedObjectReference_ArrayAccess().getRule();
	}
	
	//GenericParameter_ValuedObjectReference_Sub kexpressions::ValuedObjectReference:
	//	valuedObject=[kexpressions::ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.'
	//	subReference=ValuedObjectReference);
	public KExtGrammarAccess.GenericParameter_ValuedObjectReference_SubElements getGenericParameter_ValuedObjectReference_SubAccess() {
		return gaKExt.getGenericParameter_ValuedObjectReference_SubAccess();
	}
	
	public ParserRule getGenericParameter_ValuedObjectReference_SubRule() {
		return getGenericParameter_ValuedObjectReference_SubAccess().getRule();
	}
	
	//// ---
	////  Scheduling Directives 
	//// ---
	//ScheduleDeclaration kexpressions::ScheduleDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	'schedule' name=STRING? ('global' global=PriorityProtocol)? ('{' priorities+=PriorityProtocol (','
	//	priorities+=PriorityProtocol)* '}')?
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationElements getScheduleDeclarationAccess() {
		return gaKExt.getScheduleDeclarationAccess();
	}
	
	public ParserRule getScheduleDeclarationRule() {
		return getScheduleDeclarationAccess().getRule();
	}
	
	//ScheduleDeclarationWOSemicolon kexpressions::ScheduleDeclaration:
	//	annotations+=Annotation*
	//	access=AccessModifier?
	//	'schedule' name=STRING? ('global' global=PriorityProtocol)? ('{' priorities+=PriorityProtocol (','
	//	priorities+=PriorityProtocol)* '}')?
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	//	annotations+=CommentAnnotatonSL?;
	public KExtGrammarAccess.ScheduleDeclarationWOSemicolonElements getScheduleDeclarationWOSemicolonAccess() {
		return gaKExt.getScheduleDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getScheduleDeclarationWOSemicolonRule() {
		return getScheduleDeclarationWOSemicolonAccess().getRule();
	}
	
	//enum PriorityProtocol returns kexpressions::PriorityProtocol:
	//	CONFLICT="conflicting" | CONFLUENT="commuting";
	public KExtGrammarAccess.PriorityProtocolElements getPriorityProtocolAccess() {
		return gaKExt.getPriorityProtocolAccess();
	}
	
	public EnumRule getPriorityProtocolRule() {
		return getPriorityProtocolAccess().getRule();
	}
	
	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	annotations+=QuotedStringAnnotation*
	//	name=PrimeID ('<' genericParameters+=GenericParameter (',' genericParameters+=GenericParameter)* '>')? ('['
	//	cardinalities+=Expression ']')* ('=' initialValue=Expression)? ('combine'
	//	combineOperator=CombineOperator)? ('label' label=STRING)?;
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}
	
	//SimpleValuedObject kexpressions::ValuedObject:
	//	annotations+=QuotedStringAnnotation*
	//	name=PrimeID;
	public KExtGrammarAccess.SimpleValuedObjectElements getSimpleValuedObjectAccess() {
		return gaKExt.getSimpleValuedObjectAccess();
	}
	
	public ParserRule getSimpleValuedObjectRule() {
		return getSimpleValuedObjectAccess().getRule();
	}
	
	//NamespaceID:
	//	ExtendedID (':' PrimeID)*;
	public KExtGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKExt.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// */ /*
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// */ // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//// NOTE: Emission has precedence before ReferenceCallEffect and consumes simple refecerence call grammar using this rule
	//// should to use the KEffectsEmissionReferenceCallConverter to convert these Emissions back to ReferenceCallEffects.
	//// If precedence is changed the converter has to be adapted too.
	//Effect keffects::Effect:
	//	Assignment | PostfixEffect | ValuedEmission | HostcodeEffect | ReferenceCallEffect | FunctionCallEffect |
	//	PrintCallEffect | RandomizeCallEffect | PureEmission;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//PureEmission keffects::Emission:
	//	annotations+=QuotedStringAnnotation*
	//	reference=ValuedObjectReference ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PureEmissionElements getPureEmissionAccess() {
		return gaKEffects.getPureEmissionAccess();
	}
	
	public ParserRule getPureEmissionRule() {
		return getPureEmissionAccess().getRule();
	}
	
	//// Valued emission must be separated from normal emission to allow correct parsing in combination with referece calls
	//// Problematic case f(), here the emission rule must not even partially (optional value part) match to allow parsing as referece call
	//ValuedEmission keffects::Emission:
	//	annotations+=QuotedStringAnnotation*
	//	reference=ValuedObjectReference
	//	"(" newValue=Expression ")" ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ValuedEmissionElements getValuedEmissionAccess() {
		return gaKEffects.getValuedEmissionAccess();
	}
	
	public ParserRule getValuedEmissionRule() {
		return getValuedEmissionAccess().getRule();
	}
	
	//PureOrValuedEmission keffects::Emission:
	//	ValuedEmission | PureEmission;
	public KEffectsGrammarAccess.PureOrValuedEmissionElements getPureOrValuedEmissionAccess() {
		return gaKEffects.getPureOrValuedEmissionAccess();
	}
	
	public ParserRule getPureOrValuedEmissionRule() {
		return getPureOrValuedEmissionAccess().getRule();
	}
	
	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1     
	//Assignment keffects::Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=AssignOperator expression=Expression ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////SubReferenceAssignment returns keffects::Assignment:
	////    (annotations+=Annotation)*    
	////    valuedObject=ValuedObjectReference
	////     operator=AssignOperator expression = Expression
	////     ('schedule' schedule+=ScheduleObjectReference+)?;	 
	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	reference=ValuedObjectReference
	//	operator=PostfixOperator ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}
	
	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}
	
	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect keffects::ReferenceCallEffect:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.'
	//	subReference=ValuedObjectReference)? ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()') ('schedule'
	//	schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}
	
	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation* ('extern' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()'));
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}
	
	//// Print Call Effect Rule
	//// A print functions that enables target-independent prints in the model.    
	//PrintCallEffect keffects::PrintCallEffect:
	//	annotations+=Annotation*
	//	'print' ('(' parameters+=Parameter (',' parameters+=Parameter)* ')') ('schedule' schedule+=ScheduleObjectReference+)?;
	public KEffectsGrammarAccess.PrintCallEffectElements getPrintCallEffectAccess() {
		return gaKEffects.getPrintCallEffectAccess();
	}
	
	public ParserRule getPrintCallEffectRule() {
		return getPrintCallEffectAccess().getRule();
	}
	
	//RandomizeCallEffect keffects::RandomizeCallEffect:
	//	{keffects::RandomizeCallEffect} annotations+=Annotation*
	//	'randomize' ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KEffectsGrammarAccess.RandomizeCallEffectElements getRandomizeCallEffectAccess() {
		return gaKEffects.getRandomizeCallEffectAccess();
	}
	
	public ParserRule getRandomizeCallEffectRule() {
		return getRandomizeCallEffectAccess().getRule();
	}
	
	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//	ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=" |
	//	ASSIGNSHIFTLEFT="<<=" | ASSIGNSHIFTRIGHT=">>=" | ASSIGNSHIFTRIGHTUNSIGNED=">>>=" |
	//	ASSIGNMIN="min=" | ASSIGNMAX="max=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// */ // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	///* Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// */ // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression) ('||' subExpressions+=LogicalAndExpression)*)?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression) ('&&' subExpressions+=BitwiseOrExpression)*)?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseXOrExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseXOrExpression) ('|' subExpressions+=BitwiseXOrExpression)*)?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}
	
	//BitwiseXOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseXOrOperator
	//	subExpressions+=BitwiseAndExpression) ('^' subExpressions+=BitwiseAndExpression)*)?;
	public KExpressionsGrammarAccess.BitwiseXOrExpressionElements getBitwiseXOrExpressionAccess() {
		return gaKExpressions.getBitwiseXOrExpressionAccess();
	}
	
	public ParserRule getBitwiseXOrExpressionRule() {
		return getBitwiseXOrExpressionAccess().getRule();
	}
	
	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation) ('&' subExpressions+=CompareOperation)*)?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}
	
	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression Expression:
	//	ValuedExpression
	//	| NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}
	
	//BitwiseNotExpression Expression:
	//	{OperatorExpression} operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.BitwiseNotExpressionElements getBitwiseNotExpressionAccess() {
		return gaKExpressions.getBitwiseNotExpressionAccess();
	}
	
	public ParserRule getBitwiseNotExpressionRule() {
		return getBitwiseNotExpressionAccess().getRule();
	}
	
	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | BitwiseNotExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression Expression:
	//	ShiftExpressions;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}
	
	//ShiftExpressions Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} operator=ShiftLeftOperator subExpressions+=SumExpression
	//	('<<' subExpressions+=SumExpression)* | {OperatorExpression.subExpressions+=current} operator=ShiftRightOperator
	//	subExpressions+=SumExpression ('>>' subExpressions+=SumExpression)* | {OperatorExpression.subExpressions+=current}
	//	operator=ShiftRightUnsignedOperator subExpressions+=SumExpression ('>>>' subExpressions+=SumExpression)*)*;
	public KExpressionsGrammarAccess.ShiftExpressionsElements getShiftExpressionsAccess() {
		return gaKExpressions.getShiftExpressionsAccess();
	}
	
	public ParserRule getShiftExpressionsRule() {
		return getShiftExpressionsAccess().getRule();
	}
	
	//ShiftLeftExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftLeftOperator
	//	subExpressions+=ShiftRightExpression) ('<<' subExpressions+=ShiftRightExpression)*)?;
	public KExpressionsGrammarAccess.ShiftLeftExpressionElements getShiftLeftExpressionAccess() {
		return gaKExpressions.getShiftLeftExpressionAccess();
	}
	
	public ParserRule getShiftLeftExpressionRule() {
		return getShiftLeftExpressionAccess().getRule();
	}
	
	//ShiftRightExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightOperator
	//	subExpressions+=ShiftRightUnsignedExpression) ('>>' subExpressions+=ShiftRightUnsignedExpression)*)?;
	public KExpressionsGrammarAccess.ShiftRightExpressionElements getShiftRightExpressionAccess() {
		return gaKExpressions.getShiftRightExpressionAccess();
	}
	
	public ParserRule getShiftRightExpressionRule() {
		return getShiftRightExpressionAccess().getRule();
	}
	
	//ShiftRightUnsignedExpression Expression:
	//	SumExpression ({OperatorExpression.subExpressions+=current} (operator=ShiftRightUnsignedOperator
	//	subExpressions+=SumExpression) ('>>>' subExpressions+=SumExpression)*)?;
	public KExpressionsGrammarAccess.ShiftRightUnsignedExpressionElements getShiftRightUnsignedExpressionAccess() {
		return gaKExpressions.getShiftRightUnsignedExpressionAccess();
	}
	
	public ParserRule getShiftRightUnsignedExpressionRule() {
		return getShiftRightUnsignedExpressionAccess().getRule();
	}
	
	//SumExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator subExpressions+=ProductExpression
	//	('+' subExpressions+=ProductExpression)* | {OperatorExpression.subExpressions+=current} operator=SubOperator
	//	subExpressions+=ProductExpression ('-' subExpressions+=ProductExpression)*)*;
	public KExpressionsGrammarAccess.SumExpressionElements getSumExpressionAccess() {
		return gaKExpressions.getSumExpressionAccess();
	}
	
	public ParserRule getSumExpressionRule() {
		return getSumExpressionAccess().getRule();
	}
	
	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=AddOperator
	//	subExpressions+=ProductExpression)*;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression Expression:
	//	ProductExpression ({OperatorExpression.subExpressions+=current} operator=SubOperator
	//	subExpressions+=ProductExpression)*;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}
	
	//ProductExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} operator=MultOperator subExpressions+=NegExpression ('*'
	//	subExpressions+=NegExpression)* | {OperatorExpression.subExpressions+=current} operator=DivOperator
	//	subExpressions+=NegExpression ('/' subExpressions+=NegExpression)* | {OperatorExpression.subExpressions+=current}
	//	operator=ModOperator subExpressions+=NegExpression ('%' subExpressions+=NegExpression)*)*;
	public KExpressionsGrammarAccess.ProductExpressionElements getProductExpressionAccess() {
		return gaKExpressions.getProductExpressionAccess();
	}
	
	public ParserRule getProductExpressionRule() {
		return getProductExpressionAccess().getRule();
	}
	
	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=NegExpression) ('*'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}
	
	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=DivOperator subExpressions+=NegExpression) ('/'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}
	
	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator subExpressions+=NegExpression) ('%'
	//	subExpressions+=NegExpression)*)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}
	
	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | TernaryOperation;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}
	
	//TernaryOperation Expression:
	//	{OperatorExpression} subExpressions+=AtomicValuedExpression operator=ConditionalOperator
	//	subExpressions+=AtomicValuedExpression (':' subExpressions+=AtomicValuedExpression)?
	//	| InitExpression;
	public KExpressionsGrammarAccess.TernaryOperationElements getTernaryOperationAccess() {
		return gaKExpressions.getTernaryOperationAccess();
	}
	
	public ParserRule getTernaryOperationRule() {
		return getTernaryOperationAccess().getRule();
	}
	
	//InitExpression Expression:
	//	FbyExpression ({OperatorExpression.subExpressions+=current} (operator=InitOperator subExpressions+=FbyExpression)
	//	('->' subExpressions+=FbyExpression)*)?;
	public KExpressionsGrammarAccess.InitExpressionElements getInitExpressionAccess() {
		return gaKExpressions.getInitExpressionAccess();
	}
	
	public ParserRule getInitExpressionRule() {
		return getInitExpressionAccess().getRule();
	}
	
	//FbyExpression Expression:
	//	SfbyExpression ({OperatorExpression.subExpressions+=current} (operator=FbyOperator subExpressions+=SfbyExpression)
	//	('fby' subExpressions+=SfbyExpression)*)?;
	public KExpressionsGrammarAccess.FbyExpressionElements getFbyExpressionAccess() {
		return gaKExpressions.getFbyExpressionAccess();
	}
	
	public ParserRule getFbyExpressionRule() {
		return getFbyExpressionAccess().getRule();
	}
	
	//SfbyExpression Expression:
	//	AtomicValuedExpression ({OperatorExpression.subExpressions+=current} (operator=SfbyOperator
	//	subExpressions+=AtomicValuedExpression) ('sfby' subExpressions+=AtomicValuedExpression)*)?;
	public KExpressionsGrammarAccess.SfbyExpressionElements getSfbyExpressionAccess() {
		return gaKExpressions.getSfbyExpressionAccess();
	}
	
	public ParserRule getSfbyExpressionRule() {
		return getSfbyExpressionAccess().getRule();
	}
	
	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicExpression Expression:
	//	BoolValue
	//	| '(' BoolExpression ')'
	//	| ReferenceCall
	//	| FunctionCall
	//	| RandomCall
	//	| RandomizeCall
	//	| ValuedObjectTestExpression // Last to allow detection of calls
	//	| TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression Expression:
	//	IntValue
	//	| FloatValue
	//	| StringValue
	//	| VectorValue
	//	| '(' ValuedExpression ')'
	//	| AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}
	
	//// Boolean expression with scheduling directives.
	//// Is meant to be used in derived grammars. Do not delete this rule.     
	//BoolScheduleExpression Expression:
	//	LogicalOrExpression ('schedule' schedule+=ScheduleObjectReference)?;
	public KExpressionsGrammarAccess.BoolScheduleExpressionElements getBoolScheduleExpressionAccess() {
		return gaKExpressions.getBoolScheduleExpressionAccess();
	}
	
	public ParserRule getBoolScheduleExpressionRule() {
		return getBoolScheduleExpressionAccess().getRule();
	}
	
	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) '(' subExpressions+=ValuedObjectTestExpression (','
	//	subExpressions+=ValuedObjectReference)? ')'
	//	| ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}
	
	//// ID with primes
	//PrimeID:
	//	ID "'"*;
	public KExpressionsGrammarAccess.PrimeIDElements getPrimeIDAccess() {
		return gaKExpressions.getPrimeIDAccess();
	}
	
	public ParserRule getPrimeIDRule() {
		return getPrimeIDAccess().getRule();
	}
	
	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.' subReference=ValuedObjectReference)?;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}
	
	//ScheduleObjectReference:
	//	valuedObject=[ValuedObject|PrimeID] priority=INT;
	public KExpressionsGrammarAccess.ScheduleObjectReferenceElements getScheduleObjectReferenceAccess() {
		return gaKExpressions.getScheduleObjectReferenceAccess();
	}
	
	public ParserRule getScheduleObjectReferenceRule() {
		return getScheduleObjectReferenceAccess().getRule();
	}
	
	//// Reference Call Rule
	//// Calls to references. They may include a parameter list. 
	//ReferenceCall:
	//	valuedObject=[ValuedObject|PrimeID] ('[' indices+=Expression ']')* ('.' subReference=ValuedObjectReference)? ('('
	//	parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function. 
	//RandomCall:
	//	{RandomCall}
	//	'random' '()'?;
	public KExpressionsGrammarAccess.RandomCallElements getRandomCallAccess() {
		return gaKExpressions.getRandomCallAccess();
	}
	
	public ParserRule getRandomCallRule() {
		return getRandomCallAccess().getRule();
	}
	
	//// Random Call Rule
	//// Calls the random function. 
	//RandomizeCall:
	//	{RandomizeCall}
	//	'randomize' '()'?;
	public KExpressionsGrammarAccess.RandomizeCallElements getRandomizeCallAccess() {
		return gaKExpressions.getRandomizeCallAccess();
	}
	
	public ParserRule getRandomizeCallRule() {
		return getRandomizeCallAccess().getRule();
	}
	
	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'extern' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//// Print Call Rule
	//// Calls the print function. They may include a parameter list.
	//// Do not use in expressions directly, use PrintCallEffect instead
	//PrintCall:
	//	{PrintCall}
	//	'print' ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' |
	//	'()');
	public KExpressionsGrammarAccess.PrintCallElements getPrintCallAccess() {
		return gaKExpressions.getPrintCallAccess();
	}
	
	public ParserRule getPrintCallRule() {
		return getPrintCallAccess().getRule();
	}
	
	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	accessType=ParameterAccessType
	//	expression=ValuedObjectReference | expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	annotations+=Annotation*
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}
	
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//VectorValue:
	//	'{' values+=VectorValueMember (',' values+=VectorValueMember)* '}';
	public KExpressionsGrammarAccess.VectorValueElements getVectorValueAccess() {
		return gaKExpressions.getVectorValueAccess();
	}
	
	public ParserRule getVectorValueRule() {
		return getVectorValueAccess().getRule();
	}
	
	//VectorValueMember Expression:
	//	BoolExpression | ValuedExpression | IgnoreValue;
	public KExpressionsGrammarAccess.VectorValueMemberElements getVectorValueMemberAccess() {
		return gaKExpressions.getVectorValueMemberAccess();
	}
	
	public ParserRule getVectorValueMemberRule() {
		return getVectorValueMemberAccess().getRule();
	}
	
	//IgnoreValue:
	//	{IgnoreValue} '_';
	public KExpressionsGrammarAccess.IgnoreValueElements getIgnoreValueAccess() {
		return gaKExpressions.getIgnoreValueAccess();
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}
	
	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}
	
	//AnyValue Value:
	//	IntValue | FloatValue | BoolValue | StringValue;
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}
	
	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}
	
	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}
	
	//enum BitwiseNotOperator returns OperatorType:
	//	BITWISE_NOT="~";
	public KExpressionsGrammarAccess.BitwiseNotOperatorElements getBitwiseNotOperatorAccess() {
		return gaKExpressions.getBitwiseNotOperatorAccess();
	}
	
	public EnumRule getBitwiseNotOperatorRule() {
		return getBitwiseNotOperatorAccess().getRule();
	}
	
	//enum BitwiseXOrOperator returns OperatorType:
	//	BITWISE_XOR="^";
	public KExpressionsGrammarAccess.BitwiseXOrOperatorElements getBitwiseXOrOperatorAccess() {
		return gaKExpressions.getBitwiseXOrOperatorAccess();
	}
	
	public EnumRule getBitwiseXOrOperatorRule() {
		return getBitwiseXOrOperatorAccess().getRule();
	}
	
	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}
	
	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}
	
	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}
	
	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}
	
	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}
	
	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}
	
	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}
	
	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}
	
	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}
	
	//enum ShiftLeftOperator returns OperatorType:
	//	SHIFT_LEFT="<<";
	public KExpressionsGrammarAccess.ShiftLeftOperatorElements getShiftLeftOperatorAccess() {
		return gaKExpressions.getShiftLeftOperatorAccess();
	}
	
	public EnumRule getShiftLeftOperatorRule() {
		return getShiftLeftOperatorAccess().getRule();
	}
	
	//enum ShiftRightOperator returns OperatorType:
	//	SHIFT_RIGHT=">>";
	public KExpressionsGrammarAccess.ShiftRightOperatorElements getShiftRightOperatorAccess() {
		return gaKExpressions.getShiftRightOperatorAccess();
	}
	
	public EnumRule getShiftRightOperatorRule() {
		return getShiftRightOperatorAccess().getRule();
	}
	
	//enum ShiftRightUnsignedOperator returns OperatorType:
	//	SHIFT_RIGHT_UNSIGNED=">>>";
	public KExpressionsGrammarAccess.ShiftRightUnsignedOperatorElements getShiftRightUnsignedOperatorAccess() {
		return gaKExpressions.getShiftRightUnsignedOperatorAccess();
	}
	
	public EnumRule getShiftRightUnsignedOperatorRule() {
		return getShiftRightUnsignedOperatorAccess().getRule();
	}
	
	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}
	
	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}
	
	//enum ConditionalOperator returns OperatorType:
	//	CONDITIONAL="?";
	public KExpressionsGrammarAccess.ConditionalOperatorElements getConditionalOperatorAccess() {
		return gaKExpressions.getConditionalOperatorAccess();
	}
	
	public EnumRule getConditionalOperatorRule() {
		return getConditionalOperatorAccess().getRule();
	}
	
	//enum InitOperator returns OperatorType:
	//	INIT="->";
	public KExpressionsGrammarAccess.InitOperatorElements getInitOperatorAccess() {
		return gaKExpressions.getInitOperatorAccess();
	}
	
	public EnumRule getInitOperatorRule() {
		return getInitOperatorAccess().getRule();
	}
	
	//enum FbyOperator returns OperatorType:
	//	FBY="fby";
	public KExpressionsGrammarAccess.FbyOperatorElements getFbyOperatorAccess() {
		return gaKExpressions.getFbyOperatorAccess();
	}
	
	public EnumRule getFbyOperatorRule() {
		return getFbyOperatorAccess().getRule();
	}
	
	//enum SfbyOperator returns OperatorType:
	//	SFBY="sfby";
	public KExpressionsGrammarAccess.SfbyOperatorElements getSfbyOperatorAccess() {
		return gaKExpressions.getSfbyOperatorAccess();
	}
	
	public EnumRule getSfbyOperatorRule() {
		return getSfbyOperatorAccess().getRule();
	}
	
	//enum ValueType:
	//	PURE="pure" | BOOL="bool" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}
	
	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}
	
	//enum StructType returns ValueType:
	//	STRUCT="struct";
	public KExpressionsGrammarAccess.StructTypeElements getStructTypeAccess() {
		return gaKExpressions.getStructTypeAccess();
	}
	
	public EnumRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//enum ClassType returns ValueType:
	//	CLASS="class";
	public KExpressionsGrammarAccess.ClassTypeElements getClassTypeAccess() {
		return gaKExpressions.getClassTypeAccess();
	}
	
	public EnumRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}
	
	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}
	
	//enum AccessModifier:
	//	PUBLIC='public' | PROTECTED='protected' | PRIVATE='private';
	public KExpressionsGrammarAccess.AccessModifierElements getAccessModifierAccess() {
		return gaKExpressions.getAccessModifierAccess();
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//enum MethodReturnType returns ValueType:
	//	VOID="void" |
	//	BOOL="bool" | INT="int" | FLOAT="float" |
	//	STRING="string";
	public KExpressionsGrammarAccess.MethodReturnTypeElements getMethodReturnTypeAccess() {
		return gaKExpressions.getMethodReturnTypeAccess();
	}
	
	public EnumRule getMethodReturnTypeRule() {
		return getMethodReturnTypeAccess().getRule();
	}
	
	//enum ParameterAccessType:
	//	CALL_BY_REFERENCE="&" | PURE_OUTPUT="!&";
	public KExpressionsGrammarAccess.ParameterAccessTypeElements getParameterAccessTypeAccess() {
		return gaKExpressions.getParameterAccessTypeAccess();
	}
	
	public EnumRule getParameterAccessTypeRule() {
		return getParameterAccessTypeAccess().getRule();
	}
	
	//// -------------------- //
	////  JSON                // 
	//// -------------------- //
	//JsonObjectValue:
	//	{JsonObjectValue}
	//	'{' (members+=JsonObjectMember (',' members+=JsonObjectMember)*)?
	//	'}';
	public KExpressionsGrammarAccess.JsonObjectValueElements getJsonObjectValueAccess() {
		return gaKExpressions.getJsonObjectValueAccess();
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}
	
	//JsonObjectMember:
	//	key=STRING ':' value=JsonValue;
	public KExpressionsGrammarAccess.JsonObjectMemberElements getJsonObjectMemberAccess() {
		return gaKExpressions.getJsonObjectMemberAccess();
	}
	
	public ParserRule getJsonObjectMemberRule() {
		return getJsonObjectMemberAccess().getRule();
	}
	
	//JsonArrayValue:
	//	{JsonArrayValue}
	//	'[' (elements+=JsonValue (',' elements+=JsonValue)*)?
	//	']';
	public KExpressionsGrammarAccess.JsonArrayValueElements getJsonArrayValueAccess() {
		return gaKExpressions.getJsonArrayValueAccess();
	}
	
	public ParserRule getJsonArrayValueRule() {
		return getJsonArrayValueAccess().getRule();
	}
	
	//JsonValue Value:
	//	JsonObjectValue | JsonArrayValue | NullValue | AnyValue;
	public KExpressionsGrammarAccess.JsonValueElements getJsonValueAccess() {
		return gaKExpressions.getJsonValueAccess();
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}
	
	//NullValue:
	//	{NullValue}
	//	'null';
	public KExpressionsGrammarAccess.NullValueElements getNullValueAccess() {
		return gaKExpressions.getNullValueAccess();
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	//// New Json Annotations
	//JsonPragma:
	//	'#' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonPragmaElements getJsonPragmaAccess() {
		return gaKExpressions.getJsonPragmaAccess();
	}
	
	public ParserRule getJsonPragmaRule() {
		return getJsonPragmaAccess().getRule();
	}
	
	//JsonAnnotation:
	//	'@' name=ExtendedID value=JsonObjectValue;
	public KExpressionsGrammarAccess.JsonAnnotationElements getJsonAnnotationAccess() {
		return gaKExpressions.getJsonAnnotationAccess();
	}
	
	public ParserRule getJsonAnnotationRule() {
		return getJsonAnnotationAccess().getRule();
	}
	
	//@Override
	//Pragma annotations::Pragma:
	//	super | JsonPragma;
	public KExpressionsGrammarAccess.PragmaElements getPragmaAccess() {
		return gaKExpressions.getPragmaAccess();
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//@Override
	//Annotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKExpressions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//@Override
	//ValuedAnnotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaKExpressions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}
	
	//@Override
	//QuotedStringAnnotation annotations::Annotation:
	//	super | JsonAnnotation;
	public KExpressionsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaKExpressions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}
	
	//terminal HOSTCODE:
	//	"`" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "`"))* "`";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	}
	
	///**
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// */ // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationsAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationsAnnotationRule() {
		return getAnnotationsAnnotationAccess().getRule();
	}
	
	//// General rule for pragmas
	//// We only have string and tag pragmas.    
	//Pragma:
	//	StringPragma | PragmaTag;
	public AnnotationsGrammarAccess.PragmaElements getAnnotationsPragmaAccess() {
		return gaAnnotations.getPragmaAccess();
	}
	
	public ParserRule getAnnotationsPragmaRule() {
		return getAnnotationsPragmaAccess().getRule();
	}
	
	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getAnnotationsValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getAnnotationsValuedAnnotationRule() {
		return getAnnotationsValuedAnnotationAccess().getRule();
	}
	
	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations. 
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	//RestrictedTypeAnnotation Annotation:
	//	CommentAnnotation | RestrictedKeyStringValueAnnotation | RestrictedTypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}
	
	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//QuotedStringAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getAnnotationsQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getAnnotationsQuotedStringAnnotationRule() {
		return getAnnotationsQuotedStringAnnotationAccess().getRule();
	}
	
	//// CommentAnnotation
	//// e.g.: /** semantic comment */
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}
	
	//CommentAnnotatonSL CommentAnnotation:
	//	values+=SL_COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotatonSLElements getCommentAnnotatonSLAccess() {
		return gaAnnotations.getCommentAnnotatonSLAccess();
	}
	
	public ParserRule getCommentAnnotatonSLRule() {
		return getCommentAnnotatonSLAccess().getRule();
	}
	
	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation:
	//	'@' name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}
	
	//PragmaTag Pragma:
	//	'#' name=ExtendedID;
	public AnnotationsGrammarAccess.PragmaTagElements getPragmaTagAccess() {
		return gaAnnotations.getPragmaTagAccess();
	}
	
	public ParserRule getPragmaTagRule() {
		return getPragmaTagAccess().getRule();
	}
	
	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringBoolean (',' values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}
	
	//StringPragma:
	//	'#' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.StringPragmaElements getStringPragmaAccess() {
		return gaAnnotations.getStringPragmaAccess();
	}
	
	public ParserRule getStringPragmaRule() {
		return getStringPragmaAccess().getRule();
	}
	
	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringAllTypes (',' values+=EStringAllTypes)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//RestrictedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}
	
	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EStringBoolean:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}
	
	//EStringAllTypes:
	//	STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}
	
	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID (('.' | '-') ID)* ('#' INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}
	
	//QualifiedID:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EDouble:
	//	'-'? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}
	
	//terminal COMMENT_ANNOTATION:
	//	'/**'->'*/';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal ML_COMMENT:
	//	'/*' !'*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT_ANNOTATION:
	//	'//*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENT_ANNOTATIONRule() {
		return gaAnnotations.getSL_COMMENT_ANNOTATIONRule();
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'//' !'*' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAnnotations.getSL_COMMENTRule();
	}
	
	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	}
	
	//terminal FLOAT returns ecore::EDouble:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	}
	
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? (('_'? 'a'..'z' | '_'? 'A'..'Z') | '_' '0'..'9' | '__') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaAnnotations.getIDRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
