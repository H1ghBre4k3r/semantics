/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SCLProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.SCLProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_5_0_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_5_0_1_0 = (RuleCall)cStatementsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_5_1_0_0 = (RuleCall)cStatementsAssignment_5_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_5_1_1_0 = (RuleCall)cStatementsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////generate scl "http://kieler.cs.cau.de/scl/scl"
		//SCLProgram scl::SCLProgram:
		//	annotations+=Annotation*
		//	'module' name=ID
		//	declarations+=Declaration*
		//	'{' ((statements+=InstructionStatement ';' | statements+=EmptyStatement)* (statements+=InstructionStatement
		//	statements+=EmptyStatement*)?)
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'module' name=ID declarations+=Declaration* '{' ((statements+=InstructionStatement ';' |
		//statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) '}'
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'module'
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//((statements+=InstructionStatement ';' | statements+=EmptyStatement)* (statements+=InstructionStatement
		//statements+=EmptyStatement*)?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=InstructionStatement ';' | statements+=EmptyStatement)*
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//statements+=InstructionStatement ';'
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_5_0_0_0() { return cStatementsAssignment_5_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_5_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_5_0_0_0_0; }

		//';'
		public Keyword getSemicolonKeyword_5_0_0_1() { return cSemicolonKeyword_5_0_0_1; }

		//statements+=EmptyStatement
		public Assignment getStatementsAssignment_5_0_1() { return cStatementsAssignment_5_0_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_5_0_1_0() { return cStatementsEmptyStatementParserRuleCall_5_0_1_0; }

		//(statements+=InstructionStatement statements+=EmptyStatement*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_5_1_0() { return cStatementsAssignment_5_1_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_5_1_0_0() { return cStatementsInstructionStatementParserRuleCall_5_1_0_0; }

		//statements+=EmptyStatement*
		public Assignment getStatementsAssignment_5_1_1() { return cStatementsAssignment_5_1_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_5_1_1_0() { return cStatementsEmptyStatementParserRuleCall_5_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EmptyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.EmptyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_1_0_0 = (RuleCall)cLabelAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//EmptyStatement scl::EmptyStatement:
		//	annotations+=Annotation* (label=ID ':')
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (label=ID ':')
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//(label=ID ':')
		public Group getGroup_1() { return cGroup_1; }

		//label=ID
		public Assignment getLabelAssignment_1_0() { return cLabelAssignment_1_0; }

		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0_0() { return cLabelIDTerminalRuleCall_1_0_0; }

		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGotoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParallelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPauseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStatementScopeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Instruction scl::Instruction:
		//	Assignment | Conditional | Goto | Parallel | Pause | StatementScope
		@Override public ParserRule getRule() { return rule; }

		//Assignment | Conditional | Goto | Parallel | Pause | StatementScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }

		//Goto
		public RuleCall getGotoParserRuleCall_2() { return cGotoParserRuleCall_2; }

		//Parallel
		public RuleCall getParallelParserRuleCall_3() { return cParallelParserRuleCall_3; }

		//Pause
		public RuleCall getPauseParserRuleCall_4() { return cPauseParserRuleCall_4; }

		//StatementScope
		public RuleCall getStatementScopeParserRuleCall_5() { return cStatementScopeParserRuleCall_5; }
	}

	public class InstructionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.InstructionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_1_0 = (RuleCall)cInstructionAssignment_1.eContents().get(0);
		
		//InstructionStatement scl::InstructionStatement:
		//	annotations+=Annotation*
		//	instruction=Instruction
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* instruction=Instruction
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//instruction=Instruction
		public Assignment getInstructionAssignment_1() { return cInstructionAssignment_1; }

		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_1_0() { return cInstructionInstructionParserRuleCall_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuedObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_0_0 = (CrossReference)cValuedObjectAssignment_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectIDTerminalRuleCall_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndicesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_1_1_0 = (RuleCall)cIndicesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Assignment scl::Assignment:
		//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
		//	"=" expression=Expression
		@Override public ParserRule getRule() { return rule; }

		//valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')* "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//valuedObject=[kexpressions::ValuedObject]
		public Assignment getValuedObjectAssignment_0() { return cValuedObjectAssignment_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getValuedObjectValuedObjectCrossReference_0_0() { return cValuedObjectValuedObjectCrossReference_0_0; }

		//ID
		public RuleCall getValuedObjectValuedObjectIDTerminalRuleCall_0_0_1() { return cValuedObjectValuedObjectIDTerminalRuleCall_0_0_1; }

		//('[' indices+=Expression ']')*
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indices+=Expression
		public Assignment getIndicesAssignment_1_1() { return cIndicesAssignment_1_1; }

		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_1_1_0() { return cIndicesExpressionParserRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Assignment cStatementsAssignment_4_0_0_0 = (Assignment)cGroup_4_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_4_0_0_0_0 = (RuleCall)cStatementsAssignment_4_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_0_1 = (Keyword)cGroup_4_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_4_0_1_0 = (RuleCall)cStatementsAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cStatementsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_4_1_0_0 = (RuleCall)cStatementsAssignment_4_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_4_1_1_0 = (RuleCall)cStatementsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDeclarationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_5_1_0 = (RuleCall)cDeclarationsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Alternatives cAlternatives_5_2_0 = (Alternatives)cGroup_5_2.eContents().get(0);
		private final Group cGroup_5_2_0_0 = (Group)cAlternatives_5_2_0.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_2_0_0_0 = (Assignment)cGroup_5_2_0_0.eContents().get(0);
		private final RuleCall cElseStatementsInstructionStatementParserRuleCall_5_2_0_0_0_0 = (RuleCall)cElseStatementsAssignment_5_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2_0_0_1 = (Keyword)cGroup_5_2_0_0.eContents().get(1);
		private final Assignment cElseStatementsAssignment_5_2_0_1 = (Assignment)cAlternatives_5_2_0.eContents().get(1);
		private final RuleCall cElseStatementsEmptyStatementParserRuleCall_5_2_0_1_0 = (RuleCall)cElseStatementsAssignment_5_2_0_1.eContents().get(0);
		private final Group cGroup_5_2_1 = (Group)cGroup_5_2.eContents().get(1);
		private final Assignment cElseStatementsAssignment_5_2_1_0 = (Assignment)cGroup_5_2_1.eContents().get(0);
		private final RuleCall cElseStatementsInstructionStatementParserRuleCall_5_2_1_0_0 = (RuleCall)cElseStatementsAssignment_5_2_1_0.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_2_1_1 = (Assignment)cGroup_5_2_1.eContents().get(1);
		private final RuleCall cElseStatementsEmptyStatementParserRuleCall_5_2_1_1_0 = (RuleCall)cElseStatementsAssignment_5_2_1_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Conditional scl::Conditional:
		//	'if' expression=Expression 'then'
		//	declarations+=Declaration* ((statements+=InstructionStatement ';' | statements+=EmptyStatement)*
		//	(statements+=InstructionStatement statements+=EmptyStatement*)?) ('else'
		//	declarations+=Declaration* ((elseStatements+=InstructionStatement ';' | elseStatements+=EmptyStatement)*
		//	(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?))?
		//	'end'
		@Override public ParserRule getRule() { return rule; }

		//'if' expression=Expression 'then' declarations+=Declaration* ((statements+=InstructionStatement ';' |
		//statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) ('else'
		//declarations+=Declaration* ((elseStatements+=InstructionStatement ';' | elseStatements+=EmptyStatement)*
		//(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?))? 'end'
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }

		//((statements+=InstructionStatement ';' | statements+=EmptyStatement)* (statements+=InstructionStatement
		//statements+=EmptyStatement*)?)
		public Group getGroup_4() { return cGroup_4; }

		//(statements+=InstructionStatement ';' | statements+=EmptyStatement)*
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//statements+=InstructionStatement ';'
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_4_0_0_0() { return cStatementsAssignment_4_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_4_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_4_0_0_0_0; }

		//';'
		public Keyword getSemicolonKeyword_4_0_0_1() { return cSemicolonKeyword_4_0_0_1; }

		//statements+=EmptyStatement
		public Assignment getStatementsAssignment_4_0_1() { return cStatementsAssignment_4_0_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_4_0_1_0() { return cStatementsEmptyStatementParserRuleCall_4_0_1_0; }

		//(statements+=InstructionStatement statements+=EmptyStatement*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_4_1_0() { return cStatementsAssignment_4_1_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_4_1_0_0() { return cStatementsInstructionStatementParserRuleCall_4_1_0_0; }

		//statements+=EmptyStatement*
		public Assignment getStatementsAssignment_4_1_1() { return cStatementsAssignment_4_1_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_4_1_1_0() { return cStatementsEmptyStatementParserRuleCall_4_1_1_0; }

		//('else' declarations+=Declaration* ((elseStatements+=InstructionStatement ';' | elseStatements+=EmptyStatement)*
		//(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?))?
		public Group getGroup_5() { return cGroup_5; }

		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_5_1() { return cDeclarationsAssignment_5_1; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_5_1_0() { return cDeclarationsDeclarationParserRuleCall_5_1_0; }

		//((elseStatements+=InstructionStatement ';' | elseStatements+=EmptyStatement)* (elseStatements+=InstructionStatement
		//elseStatements+=EmptyStatement*)?)
		public Group getGroup_5_2() { return cGroup_5_2; }

		//(elseStatements+=InstructionStatement ';' | elseStatements+=EmptyStatement)*
		public Alternatives getAlternatives_5_2_0() { return cAlternatives_5_2_0; }

		//elseStatements+=InstructionStatement ';'
		public Group getGroup_5_2_0_0() { return cGroup_5_2_0_0; }

		//elseStatements+=InstructionStatement
		public Assignment getElseStatementsAssignment_5_2_0_0_0() { return cElseStatementsAssignment_5_2_0_0_0; }

		//InstructionStatement
		public RuleCall getElseStatementsInstructionStatementParserRuleCall_5_2_0_0_0_0() { return cElseStatementsInstructionStatementParserRuleCall_5_2_0_0_0_0; }

		//';'
		public Keyword getSemicolonKeyword_5_2_0_0_1() { return cSemicolonKeyword_5_2_0_0_1; }

		//elseStatements+=EmptyStatement
		public Assignment getElseStatementsAssignment_5_2_0_1() { return cElseStatementsAssignment_5_2_0_1; }

		//EmptyStatement
		public RuleCall getElseStatementsEmptyStatementParserRuleCall_5_2_0_1_0() { return cElseStatementsEmptyStatementParserRuleCall_5_2_0_1_0; }

		//(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?
		public Group getGroup_5_2_1() { return cGroup_5_2_1; }

		//elseStatements+=InstructionStatement
		public Assignment getElseStatementsAssignment_5_2_1_0() { return cElseStatementsAssignment_5_2_1_0; }

		//InstructionStatement
		public RuleCall getElseStatementsInstructionStatementParserRuleCall_5_2_1_0_0() { return cElseStatementsInstructionStatementParserRuleCall_5_2_1_0_0; }

		//elseStatements+=EmptyStatement*
		public Assignment getElseStatementsAssignment_5_2_1_1() { return cElseStatementsAssignment_5_2_1_1; }

		//EmptyStatement
		public RuleCall getElseStatementsEmptyStatementParserRuleCall_5_2_1_1_0() { return cElseStatementsEmptyStatementParserRuleCall_5_2_1_1_0; }

		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetLabelIDTerminalRuleCall_1_0 = (RuleCall)cTargetLabelAssignment_1.eContents().get(0);
		
		//Goto scl::Goto:
		//	'goto' targetLabel=ID
		@Override public ParserRule getRule() { return rule; }

		//'goto' targetLabel=ID
		public Group getGroup() { return cGroup; }

		//'goto'
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }

		//targetLabel=ID
		public Assignment getTargetLabelAssignment_1() { return cTargetLabelAssignment_1; }

		//ID
		public RuleCall getTargetLabelIDTerminalRuleCall_1_0() { return cTargetLabelIDTerminalRuleCall_1_0; }
	}

	public class ThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Thread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThreadAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0_0 = (RuleCall)cAnnotationsAssignment_1_0.eContents().get(0);
		private final Keyword cThreadKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_2_0_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_2_0_1_0 = (RuleCall)cStatementsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cStatementsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_2_1_0_0 = (RuleCall)cStatementsAssignment_2_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_2_1_1_0 = (RuleCall)cStatementsAssignment_2_1_1.eContents().get(0);
		
		//Thread scl::Thread:
		//	{scl::Thread} (annotations+=Annotation* 'thread')? ((statements+=InstructionStatement ';' |
		//	statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?)
		@Override public ParserRule getRule() { return rule; }

		//{scl::Thread} (annotations+=Annotation* 'thread')? ((statements+=InstructionStatement ';' | statements+=EmptyStatement)*
		//(statements+=InstructionStatement statements+=EmptyStatement*)?)
		public Group getGroup() { return cGroup; }

		//{scl::Thread}
		public Action getThreadAction_0() { return cThreadAction_0; }

		//(annotations+=Annotation* 'thread')?
		public Group getGroup_1() { return cGroup_1; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_0() { return cAnnotationsAssignment_1_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0_0() { return cAnnotationsAnnotationParserRuleCall_1_0_0; }

		//'thread'
		public Keyword getThreadKeyword_1_1() { return cThreadKeyword_1_1; }

		//((statements+=InstructionStatement ';' | statements+=EmptyStatement)* (statements+=InstructionStatement
		//statements+=EmptyStatement*)?)
		public Group getGroup_2() { return cGroup_2; }

		//(statements+=InstructionStatement ';' | statements+=EmptyStatement)*
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//statements+=InstructionStatement ';'
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_2_0_0_0() { return cStatementsAssignment_2_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_2_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_2_0_0_0_0; }

		//';'
		public Keyword getSemicolonKeyword_2_0_0_1() { return cSemicolonKeyword_2_0_0_1; }

		//statements+=EmptyStatement
		public Assignment getStatementsAssignment_2_0_1() { return cStatementsAssignment_2_0_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_2_0_1_0() { return cStatementsEmptyStatementParserRuleCall_2_0_1_0; }

		//(statements+=InstructionStatement statements+=EmptyStatement*)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_2_1_0() { return cStatementsAssignment_2_1_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_2_1_0_0() { return cStatementsInstructionStatementParserRuleCall_2_1_0_0; }

		//statements+=EmptyStatement*
		public Assignment getStatementsAssignment_2_1_1() { return cStatementsAssignment_2_1_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_2_1_1_0() { return cStatementsEmptyStatementParserRuleCall_2_1_1_0; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cThreadsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cThreadsThreadParserRuleCall_1_0_0 = (RuleCall)cThreadsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cParKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cThreadsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cThreadsThreadParserRuleCall_1_1_1_0 = (RuleCall)cThreadsAssignment_1_1_1.eContents().get(0);
		private final Keyword cJoinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parallel scl::Parallel:
		//	'fork' (threads+=Thread ('par'
		//	threads+=Thread)*)
		//	'join'
		@Override public ParserRule getRule() { return rule; }

		//'fork' (threads+=Thread ('par' threads+=Thread)*) 'join'
		public Group getGroup() { return cGroup; }

		//'fork'
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }

		//(threads+=Thread ('par' threads+=Thread)*)
		public Group getGroup_1() { return cGroup_1; }

		//threads+=Thread
		public Assignment getThreadsAssignment_1_0() { return cThreadsAssignment_1_0; }

		//Thread
		public RuleCall getThreadsThreadParserRuleCall_1_0_0() { return cThreadsThreadParserRuleCall_1_0_0; }

		//('par' threads+=Thread)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'par'
		public Keyword getParKeyword_1_1_0() { return cParKeyword_1_1_0; }

		//threads+=Thread
		public Assignment getThreadsAssignment_1_1_1() { return cThreadsAssignment_1_1_1; }

		//Thread
		public RuleCall getThreadsThreadParserRuleCall_1_1_1_0() { return cThreadsThreadParserRuleCall_1_1_1_0; }

		//'join'
		public Keyword getJoinKeyword_2() { return cJoinKeyword_2; }
	}

	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPauseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPauseAction_1 = (Action)cGroup.eContents().get(1);
		
		//Pause scl::Pause:
		//	'pause' {scl::Pause}
		@Override public ParserRule getRule() { return rule; }

		//'pause' {scl::Pause}
		public Group getGroup() { return cGroup; }

		//'pause'
		public Keyword getPauseKeyword_0() { return cPauseKeyword_0; }

		//{scl::Pause}
		public Action getPauseAction_1() { return cPauseAction_1; }
	}

	public class StatementScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.scl.SCL.StatementScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cAlternatives_3_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_0_0_0 = (Assignment)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_3_0_0_0_0 = (RuleCall)cStatementsAssignment_3_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_3_0_1_0 = (RuleCall)cStatementsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cStatementsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cStatementsInstructionStatementParserRuleCall_3_1_0_0 = (RuleCall)cStatementsAssignment_3_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStatementsEmptyStatementParserRuleCall_3_1_1_0 = (RuleCall)cStatementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StatementScope scl::StatementScope:
		//	{scl::StatementScope}
		//	'{'
		//	declarations+=Declaration* ((statements+=InstructionStatement ';' | statements+=EmptyStatement)*
		//	(statements+=InstructionStatement statements+=EmptyStatement*)?)
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{scl::StatementScope} '{' declarations+=Declaration* ((statements+=InstructionStatement ';' |
		//statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?) '}'
		public Group getGroup() { return cGroup; }

		//{scl::StatementScope}
		public Action getStatementScopeAction_0() { return cStatementScopeAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }

		//((statements+=InstructionStatement ';' | statements+=EmptyStatement)* (statements+=InstructionStatement
		//statements+=EmptyStatement*)?)
		public Group getGroup_3() { return cGroup_3; }

		//(statements+=InstructionStatement ';' | statements+=EmptyStatement)*
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//statements+=InstructionStatement ';'
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_3_0_0_0() { return cStatementsAssignment_3_0_0_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_3_0_0_0_0() { return cStatementsInstructionStatementParserRuleCall_3_0_0_0_0; }

		//';'
		public Keyword getSemicolonKeyword_3_0_0_1() { return cSemicolonKeyword_3_0_0_1; }

		//statements+=EmptyStatement
		public Assignment getStatementsAssignment_3_0_1() { return cStatementsAssignment_3_0_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_3_0_1_0() { return cStatementsEmptyStatementParserRuleCall_3_0_1_0; }

		//(statements+=InstructionStatement statements+=EmptyStatement*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//statements+=InstructionStatement
		public Assignment getStatementsAssignment_3_1_0() { return cStatementsAssignment_3_1_0; }

		//InstructionStatement
		public RuleCall getStatementsInstructionStatementParserRuleCall_3_1_0_0() { return cStatementsInstructionStatementParserRuleCall_3_1_0_0; }

		//statements+=EmptyStatement*
		public Assignment getStatementsAssignment_3_1_1() { return cStatementsAssignment_3_1_1; }

		//EmptyStatement
		public RuleCall getStatementsEmptyStatementParserRuleCall_3_1_1_0() { return cStatementsEmptyStatementParserRuleCall_3_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final SCLProgramElements pSCLProgram;
	private final EmptyStatementElements pEmptyStatement;
	private final InstructionElements pInstruction;
	private final InstructionStatementElements pInstructionStatement;
	private final AssignmentElements pAssignment;
	private final ConditionalElements pConditional;
	private final GotoElements pGoto;
	private final ThreadElements pThread;
	private final ParallelElements pParallel;
	private final PauseElements pPause;
	private final StatementScopeElements pStatementScope;
	
	private final Grammar grammar;

	private final KExtGrammarAccess gaKExt;

	private final KEffectsGrammarAccess gaKEffects;

	private final KExpressionsGrammarAccess gaKExpressions;

	private final AnnotationsGrammarAccess gaAnnotations;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCLGrammarAccess(GrammarProvider grammarProvider,
		KExtGrammarAccess gaKExt,
		KEffectsGrammarAccess gaKEffects,
		KExpressionsGrammarAccess gaKExpressions,
		AnnotationsGrammarAccess gaAnnotations,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pSCLProgram = new SCLProgramElements();
		this.pEmptyStatement = new EmptyStatementElements();
		this.pInstruction = new InstructionElements();
		this.pInstructionStatement = new InstructionStatementElements();
		this.pAssignment = new AssignmentElements();
		this.pConditional = new ConditionalElements();
		this.pGoto = new GotoElements();
		this.pThread = new ThreadElements();
		this.pParallel = new ParallelElements();
		this.pPause = new PauseElements();
		this.pStatementScope = new StatementScopeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.scl.SCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}

	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////generate scl "http://kieler.cs.cau.de/scl/scl"
	//SCLProgram scl::SCLProgram:
	//	annotations+=Annotation*
	//	'module' name=ID
	//	declarations+=Declaration*
	//	'{' ((statements+=InstructionStatement ';' | statements+=EmptyStatement)* (statements+=InstructionStatement
	//	statements+=EmptyStatement*)?)
	//	'}'
	public SCLProgramElements getSCLProgramAccess() {
		return pSCLProgram;
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}

	//EmptyStatement scl::EmptyStatement:
	//	annotations+=Annotation* (label=ID ':')
	public EmptyStatementElements getEmptyStatementAccess() {
		return pEmptyStatement;
	}
	
	public ParserRule getEmptyStatementRule() {
		return getEmptyStatementAccess().getRule();
	}

	//Instruction scl::Instruction:
	//	Assignment | Conditional | Goto | Parallel | Pause | StatementScope
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//InstructionStatement scl::InstructionStatement:
	//	annotations+=Annotation*
	//	instruction=Instruction
	public InstructionStatementElements getInstructionStatementAccess() {
		return pInstructionStatement;
	}
	
	public ParserRule getInstructionStatementRule() {
		return getInstructionStatementAccess().getRule();
	}

	//Assignment scl::Assignment:
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	"=" expression=Expression
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Conditional scl::Conditional:
	//	'if' expression=Expression 'then'
	//	declarations+=Declaration* ((statements+=InstructionStatement ';' | statements+=EmptyStatement)*
	//	(statements+=InstructionStatement statements+=EmptyStatement*)?) ('else'
	//	declarations+=Declaration* ((elseStatements+=InstructionStatement ';' | elseStatements+=EmptyStatement)*
	//	(elseStatements+=InstructionStatement elseStatements+=EmptyStatement*)?))?
	//	'end'
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Goto scl::Goto:
	//	'goto' targetLabel=ID
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Thread scl::Thread:
	//	{scl::Thread} (annotations+=Annotation* 'thread')? ((statements+=InstructionStatement ';' |
	//	statements+=EmptyStatement)* (statements+=InstructionStatement statements+=EmptyStatement*)?)
	public ThreadElements getThreadAccess() {
		return pThread;
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}

	//Parallel scl::Parallel:
	//	'fork' (threads+=Thread ('par'
	//	threads+=Thread)*)
	//	'join'
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Pause scl::Pause:
	//	'pause' {scl::Pause}
	public PauseElements getPauseAccess() {
		return pPause;
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//StatementScope scl::StatementScope:
	//	{scl::StatementScope}
	//	'{'
	//	declarations+=Declaration* ((statements+=InstructionStatement ';' | statements+=EmptyStatement)*
	//	(statements+=InstructionStatement statements+=EmptyStatement*)?)
	//	'}'
	public StatementScopeElements getStatementScopeAccess() {
		return pStatementScope;
	}
	
	public ParserRule getStatementScopeRule() {
		return getStatementScopeAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	declarations+=Declaration*
	//	entities+=TestEntity*
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=Expression
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	extern?='extern'?
	//	volatile?='volatile'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	name=ID ('[' cardinalities+=Expression ']')* ('=' initialValue=Expression)? ('combine'
	//	combineOperator=CombineOperator)?
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect keffects::Effect:
	//	super::Assignment | PostfixEffect | Emission | HostcodeEffect | FunctionCallEffect
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission keffects::Emission:
	//	annotations+=RestrictedAnnotation*
	//	valuedObject=[kexpressions::ValuedObject] ("(" newValue=Expression ")")?
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaKEffects.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	operator=PostfixOperator
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=HOSTCODE
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation*
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>'
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	/// * Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// * / // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	Expression
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression
	//	| ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression)+)?
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression)+)?
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseAndExpression)+)?
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation)+)?
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression Expression:
	//	ValuedExpression
	//	| NotExpression
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression Expression:
	//	AddExpression
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} (operator=AddOperator subExpressions+=SubExpression)+)?
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} (operator=SubOperator subExpressions+=MultExpression)+)?
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=DivExpression)+)?
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} (operator=DivOperator subExpressions+=ModExpression)+)?
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)+)?
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicExpression Expression:
	//	BoolValue
	//	| ValuedObjectTestExpression
	//	| '(' BoolExpression ')'
	//	| FunctionCall
	//	| TextExpression
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaKExpressions.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression Expression:
	//	IntValue
	//	| FloatValue
	//	| StringValue
	//	| '(' ValuedExpression ')'
	//	| AtomicExpression
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) '(' subExpressions+=ValuedObjectTestExpression ')'
	//	| ValuedObjectReference
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ('[' indices+=Expression ']')*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>';
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//// Int Value Rule
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//// Float Value Rule
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//// Bool Value Rule
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//// String Value Rule	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//terminal HOSTCODE:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	} 

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyBooleanValueAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restiricted Annotation Rule
	//// The restricted annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//RestrictedAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | KeyBooleanValueAnnotation
	//	| KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.RestrictedAnnotationElements getRestrictedAnnotationAccess() {
		return gaAnnotations.getRestrictedAnnotationAccess();
	}
	
	public ParserRule getRestrictedAnnotationRule() {
		return getRestrictedAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	//// e.g.: / ** semantic comment * /
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation Annotation:
	//	'@' name=ExtendedID
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EString (',' values+=EString)*
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// KeyBooleanValueAnnotation    
	//// e.g.: @visible true;
	//KeyBooleanValueAnnotation BooleanAnnotation:
	//	'@' name=ExtendedID value=BOOLEAN
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaAnnotations.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// KeyIntValueAnnotation
	//// e.g.: @minSpace 10;    
	//KeyIntValueAnnotation IntAnnotation:
	//	'@' name=ExtendedID value=Integer
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaAnnotations.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// KeyFloatValueAnnotation
	//// e.g.: @minSpace 10.0;    
	//KeyFloatValueAnnotation FloatAnnotation:
	//	'@' name=ExtendedID value=Floateger
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaAnnotations.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID ("." ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//terminal COMMENT_ANNOTATION:
	//	'/ **'->'* /';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *' !'*'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
