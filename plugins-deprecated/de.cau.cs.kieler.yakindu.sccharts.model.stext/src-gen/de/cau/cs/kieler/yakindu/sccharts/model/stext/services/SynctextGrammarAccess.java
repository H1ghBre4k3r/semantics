/*
* generated by Xtext
*/

package de.cau.cs.kieler.yakindu.sccharts.model.stext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.yakindu.sct.model.stext.services.STextGrammarAccess;

@Singleton
public class SynctextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		
		/// *********************************** INTERFACE DECLARATION **************************************** * / ////defines the possible scopes for a state
		//
		//StateScope:
		//
		//	{SimpleScope} declarations+=Declaration*;
		public ParserRule getRule() { return rule; }

		//{SimpleScope} declarations+=Declaration*
		public Group getGroup() { return cGroup; }

		//{SimpleScope}
		public Action getSimpleScopeAction_0() { return cSimpleScopeAction_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0() { return cDeclarationsDeclarationParserRuleCall_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalEntryReactionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocalDuringReactionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalExitReactionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocalSuspendReactionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSignalDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOperationDeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		/// * ---- declarations ----
		//
		//a definition is a top level element of a definition scope. * / Declaration returns sgraph::Declaration:
		//
		//	LocalEntryReaction | LocalDuringReaction | LocalExitReaction | LocalSuspendReaction | VariableDeclaration |
		//
		//	SignalDeclaration | OperationDeclaration;
		public ParserRule getRule() { return rule; }

		//LocalEntryReaction | LocalDuringReaction | LocalExitReaction | LocalSuspendReaction | VariableDeclaration |
		//
		//SignalDeclaration | OperationDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalEntryReaction
		public RuleCall getLocalEntryReactionParserRuleCall_0() { return cLocalEntryReactionParserRuleCall_0; }

		//LocalDuringReaction
		public RuleCall getLocalDuringReactionParserRuleCall_1() { return cLocalDuringReactionParserRuleCall_1; }

		//LocalExitReaction
		public RuleCall getLocalExitReactionParserRuleCall_2() { return cLocalExitReactionParserRuleCall_2; }

		//LocalSuspendReaction
		public RuleCall getLocalSuspendReactionParserRuleCall_3() { return cLocalSuspendReactionParserRuleCall_3; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_4() { return cVariableDeclarationParserRuleCall_4; }

		//SignalDeclaration
		public RuleCall getSignalDeclarationParserRuleCall_5() { return cSignalDeclarationParserRuleCall_5; }

		//OperationDeclaration
		public RuleCall getOperationDeclarationParserRuleCall_6() { return cOperationDeclarationParserRuleCall_6; }
	}

	public class SignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDeclaration");
		private final RuleCall cSignalDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ************************************************ / / *			 Signal Definition				* /
		//
		/// ************************************************ / SignalDeclaration returns sgraph::Event:
		//
		//	SignalDefinition;
		public ParserRule getRule() { return rule; }

		//SignalDefinition
		public RuleCall getSignalDefinitionParserRuleCall() { return cSignalDefinitionParserRuleCall; }
	}

	public class SignalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsInputInputKeyword_1_0 = (Keyword)cIsInputAssignment_1.eContents().get(0);
		private final Assignment cIsOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsOutputOutputKeyword_2_0 = (Keyword)cIsOutputAssignment_2.eContents().get(0);
		private final Keyword cSignalKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_5_1_0 = (CrossReference)cTypeAssignment_5_1.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_5_1_0_1 = (RuleCall)cTypeTypeCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cEqualsSignKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cVarInitialValueAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cVarInitialValueExpressionParserRuleCall_5_2_1_0 = (RuleCall)cVarInitialValueAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cWithKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cVarCombineOperatorAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cVarCombineOperatorCombineOperatorEnumRuleCall_5_3_1_0 = (RuleCall)cVarCombineOperatorAssignment_5_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SignalDefinition:
		//
		//	{EventDefinition} isInput?="input"? isOutput?="output"? "signal" name=ID (":" type=[types::Type|FQN] ("="
		//
		//	varInitialValue=Expression)? ("with" varCombineOperator=CombineOperator)?)? ";";
		public ParserRule getRule() { return rule; }

		//{EventDefinition} isInput?="input"? isOutput?="output"? "signal" name=ID (":" type=[types::Type|FQN] ("="
		//
		//varInitialValue=Expression)? ("with" varCombineOperator=CombineOperator)?)? ";"
		public Group getGroup() { return cGroup; }

		//{EventDefinition}
		public Action getEventDefinitionAction_0() { return cEventDefinitionAction_0; }

		//isInput?="input"?
		public Assignment getIsInputAssignment_1() { return cIsInputAssignment_1; }

		//"input"
		public Keyword getIsInputInputKeyword_1_0() { return cIsInputInputKeyword_1_0; }

		//isOutput?="output"?
		public Assignment getIsOutputAssignment_2() { return cIsOutputAssignment_2; }

		//"output"
		public Keyword getIsOutputOutputKeyword_2_0() { return cIsOutputOutputKeyword_2_0; }

		//"signal"
		public Keyword getSignalKeyword_3() { return cSignalKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//(":" type=[types::Type|FQN] ("=" varInitialValue=Expression)? ("with" varCombineOperator=CombineOperator)?)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_5_1_0() { return cTypeTypeCrossReference_5_1_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_5_1_0_1() { return cTypeTypeFQNParserRuleCall_5_1_0_1; }

		//("=" varInitialValue=Expression)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"="
		public Keyword getEqualsSignKeyword_5_2_0() { return cEqualsSignKeyword_5_2_0; }

		//varInitialValue=Expression
		public Assignment getVarInitialValueAssignment_5_2_1() { return cVarInitialValueAssignment_5_2_1; }

		//Expression
		public RuleCall getVarInitialValueExpressionParserRuleCall_5_2_1_0() { return cVarInitialValueExpressionParserRuleCall_5_2_1_0; }

		//("with" varCombineOperator=CombineOperator)?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//"with"
		public Keyword getWithKeyword_5_3_0() { return cWithKeyword_5_3_0; }

		//varCombineOperator=CombineOperator
		public Assignment getVarCombineOperatorAssignment_5_3_1() { return cVarCombineOperatorAssignment_5_3_1; }

		//CombineOperator
		public RuleCall getVarCombineOperatorCombineOperatorEnumRuleCall_5_3_1_0() { return cVarCombineOperatorCombineOperatorEnumRuleCall_5_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final RuleCall cVariableDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ************************************************ / / *			 Variable Definition				* /
		//
		/// ************************************************ / // A dummy VariableDefinition declaration, which will be override by an other grammar 
		//
		////VariableDefinition:
		//
		////	{VariableDefinition} 'variable' name=ID ';';
		//
		//// CMOT changes, want to use VariableDefinitions from SyncText
		//
		//VariableDeclaration returns sgraph::Variable:
		//
		//	VariableDefinition;
		public ParserRule getRule() { return rule; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall() { return cVariableDefinitionParserRuleCall; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsInputInputKeyword_1_0 = (Keyword)cIsInputAssignment_1.eContents().get(0);
		private final Assignment cIsOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsOutputOutputKeyword_2_0 = (Keyword)cIsOutputAssignment_2.eContents().get(0);
		private final Assignment cIsStaticAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsStaticStaticKeyword_3_0 = (Keyword)cIsStaticAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_4_0_1 = (RuleCall)cTypeTypeCrossReference_4_0.eContents().get(1);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitialValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_6_1_0 = (RuleCall)cInitialValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVarCombineOperatorAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVarCombineOperatorCombineOperatorEnumRuleCall_7_1_0 = (RuleCall)cVarCombineOperatorAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//VariableDefinition:
		//
		//	{VariableDefinition} isInput?="input"? isOutput?="output"? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
		//
		//	initialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";";
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} isInput?="input"? isOutput?="output"? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
		//
		//initialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";"
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//isInput?="input"?
		public Assignment getIsInputAssignment_1() { return cIsInputAssignment_1; }

		//"input"
		public Keyword getIsInputInputKeyword_1_0() { return cIsInputInputKeyword_1_0; }

		//isOutput?="output"?
		public Assignment getIsOutputAssignment_2() { return cIsOutputAssignment_2; }

		//"output"
		public Keyword getIsOutputOutputKeyword_2_0() { return cIsOutputOutputKeyword_2_0; }

		//isStatic?="static"?
		public Assignment getIsStaticAssignment_3() { return cIsStaticAssignment_3; }

		//"static"
		public Keyword getIsStaticStaticKeyword_3_0() { return cIsStaticStaticKeyword_3_0; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_4_0() { return cTypeTypeCrossReference_4_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_4_0_1() { return cTypeTypeFQNParserRuleCall_4_0_1; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//("=" initialValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//initialValue=Expression
		public Assignment getInitialValueAssignment_6_1() { return cInitialValueAssignment_6_1; }

		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_6_1_0() { return cInitialValueExpressionParserRuleCall_6_1_0; }

		//("with" varCombineOperator=CombineOperator)?
		public Group getGroup_7() { return cGroup_7; }

		//"with"
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }

		//varCombineOperator=CombineOperator
		public Assignment getVarCombineOperatorAssignment_7_1() { return cVarCombineOperatorAssignment_7_1; }

		//CombineOperator
		public RuleCall getVarCombineOperatorCombineOperatorEnumRuleCall_7_1_0() { return cVarCombineOperatorCombineOperatorEnumRuleCall_7_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class OperationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExternKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFunctionTypeTypeCrossReference_2_0 = (CrossReference)cFunctionTypeAssignment_2.eContents().get(0);
		private final RuleCall cFunctionTypeTypeFQNParserRuleCall_2_0_1 = (RuleCall)cFunctionTypeTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameXIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParamTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cParamTypeTypeCrossReference_5_0 = (CrossReference)cParamTypeAssignment_5.eContents().get(0);
		private final RuleCall cParamTypeTypeFQNParserRuleCall_5_0_1 = (RuleCall)cParamTypeTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		/// ************************************************ / / *			   	LocalReactions  		        * /
		//
		/// ************************************************ / OperationDefinition:
		//
		//	{OperationDefinition} "extern" functionType=[types::Type|FQN] name=XID "(" paramType=[types::Type|FQN] ")" ";";
		public ParserRule getRule() { return rule; }

		//{OperationDefinition} "extern" functionType=[types::Type|FQN] name=XID "(" paramType=[types::Type|FQN] ")" ";"
		public Group getGroup() { return cGroup; }

		//{OperationDefinition}
		public Action getOperationDefinitionAction_0() { return cOperationDefinitionAction_0; }

		//"extern"
		public Keyword getExternKeyword_1() { return cExternKeyword_1; }

		//functionType=[types::Type|FQN]
		public Assignment getFunctionTypeAssignment_2() { return cFunctionTypeAssignment_2; }

		//[types::Type|FQN]
		public CrossReference getFunctionTypeTypeCrossReference_2_0() { return cFunctionTypeTypeCrossReference_2_0; }

		//FQN
		public RuleCall getFunctionTypeTypeFQNParserRuleCall_2_0_1() { return cFunctionTypeTypeFQNParserRuleCall_2_0_1; }

		//name=XID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//XID
		public RuleCall getNameXIDParserRuleCall_3_0() { return cNameXIDParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//paramType=[types::Type|FQN]
		public Assignment getParamTypeAssignment_5() { return cParamTypeAssignment_5; }

		//[types::Type|FQN]
		public CrossReference getParamTypeTypeCrossReference_5_0() { return cParamTypeTypeCrossReference_5_0; }

		//FQN
		public RuleCall getParamTypeTypeFQNParserRuleCall_5_0_1() { return cParamTypeTypeFQNParserRuleCall_5_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class LocalEntryReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalEntryReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalEntryReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerReactionTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectReactionEffectParserRuleCall_4_1_0 = (RuleCall)cEffectAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LocalEntryReaction:
		//
		//	{LocalEntryReaction} "entry" ":" trigger=ReactionTrigger? ("/" effect=ReactionEffect) ";";
		public ParserRule getRule() { return rule; }

		//{LocalEntryReaction} "entry" ":" trigger=ReactionTrigger? ("/" effect=ReactionEffect) ";"
		public Group getGroup() { return cGroup; }

		//{LocalEntryReaction}
		public Action getLocalEntryReactionAction_0() { return cLocalEntryReactionAction_0; }

		//"entry"
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//trigger=ReactionTrigger?
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }

		//ReactionTrigger
		public RuleCall getTriggerReactionTriggerParserRuleCall_3_0() { return cTriggerReactionTriggerParserRuleCall_3_0; }

		//"/" effect=ReactionEffect
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//effect=ReactionEffect
		public Assignment getEffectAssignment_4_1() { return cEffectAssignment_4_1; }

		//ReactionEffect
		public RuleCall getEffectReactionEffectParserRuleCall_4_1_0() { return cEffectReactionEffectParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class LocalDuringReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalDuringReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalDuringReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsImmediateImmediateKeyword_1_0 = (Keyword)cIsImmediateAssignment_1.eContents().get(0);
		private final Keyword cDuringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerReactionTriggerParserRuleCall_4_0 = (RuleCall)cTriggerAssignment_4.eContents().get(0);
		private final Keyword cSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEffectAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEffectReactionEffectParserRuleCall_6_0 = (RuleCall)cEffectAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LocalDuringReaction:
		//
		//	{LocalDuringReaction} isImmediate?="immediate"? "during" ":" trigger=ReactionTrigger? "/" effect=ReactionEffect ";";
		public ParserRule getRule() { return rule; }

		//{LocalDuringReaction} isImmediate?="immediate"? "during" ":" trigger=ReactionTrigger? "/" effect=ReactionEffect ";"
		public Group getGroup() { return cGroup; }

		//{LocalDuringReaction}
		public Action getLocalDuringReactionAction_0() { return cLocalDuringReactionAction_0; }

		//isImmediate?="immediate"?
		public Assignment getIsImmediateAssignment_1() { return cIsImmediateAssignment_1; }

		//"immediate"
		public Keyword getIsImmediateImmediateKeyword_1_0() { return cIsImmediateImmediateKeyword_1_0; }

		//"during"
		public Keyword getDuringKeyword_2() { return cDuringKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//trigger=ReactionTrigger?
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }

		//ReactionTrigger
		public RuleCall getTriggerReactionTriggerParserRuleCall_4_0() { return cTriggerReactionTriggerParserRuleCall_4_0; }

		//"/"
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }

		//effect=ReactionEffect
		public Assignment getEffectAssignment_6() { return cEffectAssignment_6; }

		//ReactionEffect
		public RuleCall getEffectReactionEffectParserRuleCall_6_0() { return cEffectReactionEffectParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class LocalExitReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalExitReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalExitReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerReactionTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectReactionEffectParserRuleCall_4_1_0 = (RuleCall)cEffectAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LocalExitReaction:
		//
		//	{LocalExitReaction} "exit" ":" trigger=ReactionTrigger? ("/" effect=ReactionEffect) ";";
		public ParserRule getRule() { return rule; }

		//{LocalExitReaction} "exit" ":" trigger=ReactionTrigger? ("/" effect=ReactionEffect) ";"
		public Group getGroup() { return cGroup; }

		//{LocalExitReaction}
		public Action getLocalExitReactionAction_0() { return cLocalExitReactionAction_0; }

		//"exit"
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//trigger=ReactionTrigger?
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }

		//ReactionTrigger
		public RuleCall getTriggerReactionTriggerParserRuleCall_3_0() { return cTriggerReactionTriggerParserRuleCall_3_0; }

		//"/" effect=ReactionEffect
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//effect=ReactionEffect
		public Assignment getEffectAssignment_4_1() { return cEffectAssignment_4_1; }

		//ReactionEffect
		public RuleCall getEffectReactionEffectParserRuleCall_4_1_0() { return cEffectReactionEffectParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class LocalSuspendReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalSuspendReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalSuspendReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsImmediateImmediateKeyword_1_0 = (Keyword)cIsImmediateAssignment_1.eContents().get(0);
		private final Keyword cSuspendKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerReactionTriggerParserRuleCall_4_0 = (RuleCall)cTriggerAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LocalSuspendReaction:
		//
		//	{LocalSuspendReaction} isImmediate?="immediate"? "suspend" ":" trigger=ReactionTrigger? ";";
		public ParserRule getRule() { return rule; }

		//{LocalSuspendReaction} isImmediate?="immediate"? "suspend" ":" trigger=ReactionTrigger? ";"
		public Group getGroup() { return cGroup; }

		//{LocalSuspendReaction}
		public Action getLocalSuspendReactionAction_0() { return cLocalSuspendReactionAction_0; }

		//isImmediate?="immediate"?
		public Assignment getIsImmediateAssignment_1() { return cIsImmediateAssignment_1; }

		//"immediate"
		public Keyword getIsImmediateImmediateKeyword_1_0() { return cIsImmediateImmediateKeyword_1_0; }

		//"suspend"
		public Keyword getSuspendKeyword_2() { return cSuspendKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//trigger=ReactionTrigger?
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }

		//ReactionTrigger
		public RuleCall getTriggerReactionTriggerParserRuleCall_4_0() { return cTriggerReactionTriggerParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class LocalReactionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalReactionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelayINTTerminalRuleCall_1_0 = (RuleCall)cDelayAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		////{Declaration}    
		//
		/// ******************************************** TRANSITION ***************************************** * / // The ReactionTrigger is a Trigger and has an Expression, 
		//
		//// an optional delay and isImmediate option represented with a '#'
		//
		//// cmot change: Get rid of extra brackets
		//
		//LocalReactionTrigger returns sgraph::Trigger:
		//
		//	{ReactionTrigger} delay=INT? expression=Expression?;
		public ParserRule getRule() { return rule; }

		//{ReactionTrigger} delay=INT? expression=Expression?
		public Group getGroup() { return cGroup; }

		//{ReactionTrigger}
		public Action getReactionTriggerAction_0() { return cReactionTriggerAction_0; }

		//delay=INT?
		public Assignment getDelayAssignment_1() { return cDelayAssignment_1; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_1_0() { return cDelayINTTerminalRuleCall_1_0; }

		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class ReactionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLabelPriorityAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLabelPriorityINTTerminalRuleCall_1_0_0 = (RuleCall)cLabelPriorityAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayINTTerminalRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//ReactionTrigger returns sgraph::Trigger:
		//
		//	{ReactionTrigger} (labelPriority=INT ":")? delay=INT? expression=Expression?;
		public ParserRule getRule() { return rule; }

		//{ReactionTrigger} (labelPriority=INT ":")? delay=INT? expression=Expression?
		public Group getGroup() { return cGroup; }

		//{ReactionTrigger}
		public Action getReactionTriggerAction_0() { return cReactionTriggerAction_0; }

		//(labelPriority=INT ":")?
		public Group getGroup_1() { return cGroup_1; }

		//labelPriority=INT
		public Assignment getLabelPriorityAssignment_1_0() { return cLabelPriorityAssignment_1_0; }

		//INT
		public RuleCall getLabelPriorityINTTerminalRuleCall_1_0_0() { return cLabelPriorityINTTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//delay=INT?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_2_0() { return cDelayINTTerminalRuleCall_2_0; }

		//expression=Expression?
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class ReactionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionEffectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsExpressionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionsExpressionParserRuleCall_2_1_0 = (RuleCall)cActionsAssignment_2_1.eContents().get(0);
		
		//// Original code by wah
		//
		////{ReactionTrigger} (labelPriority=INT':')? (delay=INT)? ((trigger=RegularEventSpec);
		//
		////| ('(' guardExpression=Expression ')'))?;
		//
		//// The ReactionEffect is an Effect. 
		//
		//// (';')?;
		//
		//ReactionEffect returns sgraph::Effect:
		//
		//	{ReactionEffect} actions+=Expression (";" actions+=Expression)*;
		public ParserRule getRule() { return rule; }

		//{ReactionEffect} actions+=Expression (";" actions+=Expression)*
		public Group getGroup() { return cGroup; }

		//{ReactionEffect}
		public Action getReactionEffectAction_0() { return cReactionEffectAction_0; }

		//actions+=Expression
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//Expression
		public RuleCall getActionsExpressionParserRuleCall_1_0() { return cActionsExpressionParserRuleCall_1_0; }

		//(=> ";" actions+=Expression)*
		public Group getGroup_2() { return cGroup_2; }

		//=> ";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//actions+=Expression
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }

		//Expression
		public RuleCall getActionsExpressionParserRuleCall_2_1_0() { return cActionsExpressionParserRuleCall_2_1_0; }
	}

	public class NumericalMultiplyDivideExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericalMultiplyDivideExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumericalUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNumericalMultiplyDivideExpressionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicativeOperator2EnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		/// ***************************************** Expressions ******************************************* * / // Override the stext::NumericalMultiplyDivideExpression
		//
		//// cmot addition: goal is to have some other divisor ":" instead of "/", because "/" is used to separate
		//
		//// trigger / effect.
		//
		//NumericalMultiplyDivideExpression returns stext::Expression:
		//
		//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator2
		//
		//	rightOperand=NumericalUnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator2
		//
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup() { return cGroup; }

		//NumericalUnaryExpression
		public RuleCall getNumericalUnaryExpressionParserRuleCall_0() { return cNumericalUnaryExpressionParserRuleCall_0; }

		//({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator2
		//
		//rightOperand=NumericalUnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{NumericalMultiplyDivideExpression.leftOperand=current}
		public Action getNumericalMultiplyDivideExpressionLeftOperandAction_1_0() { return cNumericalMultiplyDivideExpressionLeftOperandAction_1_0; }

		//operator=MultiplicativeOperator2
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//MultiplicativeOperator2
		public RuleCall getOperatorMultiplicativeOperator2EnumRuleCall_1_1_0() { return cOperatorMultiplicativeOperator2EnumRuleCall_1_1_0; }

		//rightOperand=NumericalUnaryExpression
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//NumericalUnaryExpression
		public RuleCall getRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0() { return cRightOperandNumericalUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class ValReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cExpressionAlternatives_3_0 = (Alternatives)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cExpressionFeatureCallParserRuleCall_3_0_0 = (RuleCall)cExpressionAlternatives_3_0.eContents().get(0);
		private final RuleCall cExpressionPreReferenceExpressionParserRuleCall_3_0_1 = (RuleCall)cExpressionAlternatives_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// ***************************************** Expressions ******************************************* * / // Override the stext::EventValueReferenceExpression
		//
		//// override 'valueof()' with 'val()', allow val(pre())    
		//
		//// cmot change
		//
		//ValReferenceExpression returns stext::Expression:
		//
		//	{ValReferenceExpression} "val" "(" expression=(FeatureCall | PreReferenceExpression) ")";
		public ParserRule getRule() { return rule; }

		//{ValReferenceExpression} "val" "(" expression=(FeatureCall | PreReferenceExpression) ")"
		public Group getGroup() { return cGroup; }

		//{ValReferenceExpression}
		public Action getValReferenceExpressionAction_0() { return cValReferenceExpressionAction_0; }

		//"val"
		public Keyword getValKeyword_1() { return cValKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=(FeatureCall | PreReferenceExpression)
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//FeatureCall | PreReferenceExpression
		public Alternatives getExpressionAlternatives_3_0() { return cExpressionAlternatives_3_0; }

		//FeatureCall
		public RuleCall getExpressionFeatureCallParserRuleCall_3_0_0() { return cExpressionFeatureCallParserRuleCall_3_0_0; }

		//PreReferenceExpression
		public RuleCall getExpressionPreReferenceExpressionParserRuleCall_3_0_1() { return cExpressionPreReferenceExpressionParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class PreReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreReferenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cExpressionAlternatives_3_0 = (Alternatives)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cExpressionFeatureCallParserRuleCall_3_0_0 = (RuleCall)cExpressionAlternatives_3_0.eContents().get(0);
		private final RuleCall cExpressionValReferenceExpressionParserRuleCall_3_0_1 = (RuleCall)cExpressionAlternatives_3_0.eContents().get(1);
		private final RuleCall cExpressionPreReferenceExpressionParserRuleCall_3_0_2 = (RuleCall)cExpressionAlternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Additional pre(), like val(), allow pre(val()) and allow pre(pre())    
		//
		//// cmot addition
		//
		//PreReferenceExpression returns stext::Expression:
		//
		//	{PreReferenceExpression} "pre" "(" expression=(FeatureCall | ValReferenceExpression | PreReferenceExpression) ")";
		public ParserRule getRule() { return rule; }

		//{PreReferenceExpression} "pre" "(" expression=(FeatureCall | ValReferenceExpression | PreReferenceExpression) ")"
		public Group getGroup() { return cGroup; }

		//{PreReferenceExpression}
		public Action getPreReferenceExpressionAction_0() { return cPreReferenceExpressionAction_0; }

		//"pre"
		public Keyword getPreKeyword_1() { return cPreKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=(FeatureCall | ValReferenceExpression | PreReferenceExpression)
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//FeatureCall | ValReferenceExpression | PreReferenceExpression
		public Alternatives getExpressionAlternatives_3_0() { return cExpressionAlternatives_3_0; }

		//FeatureCall
		public RuleCall getExpressionFeatureCallParserRuleCall_3_0_0() { return cExpressionFeatureCallParserRuleCall_3_0_0; }

		//ValReferenceExpression
		public RuleCall getExpressionValReferenceExpressionParserRuleCall_3_0_1() { return cExpressionValReferenceExpressionParserRuleCall_3_0_1; }

		//PreReferenceExpression
		public RuleCall getExpressionPreReferenceExpressionParserRuleCall_3_0_2() { return cExpressionPreReferenceExpressionParserRuleCall_3_0_2; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActiveStateReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValReferenceExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPreReferenceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParenthesizedExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		/// ***************************************** Expressions ******************************************* * / // Override the stext::PrimaryExpression
		//
		//// remove the ActiveStateReferenceExpression and the EventValueReferenceExpression
		//
		//// and add PreReferenceExpression that returns the previous tick instance of a variable. 
		//
		//PrimaryExpression returns stext::Expression:
		//
		//	PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | ValReferenceExpression |
		//
		//	PreReferenceExpression | ParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | ValReferenceExpression |
		//
		//PreReferenceExpression | ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveValueExpression
		public RuleCall getPrimitiveValueExpressionParserRuleCall_0() { return cPrimitiveValueExpressionParserRuleCall_0; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_1() { return cFeatureCallParserRuleCall_1; }

		//ActiveStateReferenceExpression
		public RuleCall getActiveStateReferenceExpressionParserRuleCall_2() { return cActiveStateReferenceExpressionParserRuleCall_2; }

		//ValReferenceExpression
		public RuleCall getValReferenceExpressionParserRuleCall_3() { return cValReferenceExpressionParserRuleCall_3; }

		//PreReferenceExpression
		public RuleCall getPreReferenceExpressionParserRuleCall_4() { return cPreReferenceExpressionParserRuleCall_4; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_5() { return cParenthesizedExpressionParserRuleCall_5; }
	}
	
	
	public class MultiplicativeOperator2Elements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMulAsteriskKeyword_0_0 = (Keyword)cMulEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivColonKeyword_1_0 = (Keyword)cDivEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModPercentSignKeyword_2_0 = (Keyword)cModEnumLiteralDeclaration_2.eContents().get(0);
		
		//// New MultiplicativeOperator2 (replacing MultiplicativeOperator with ":" instead of "/")    
		//
		//// cmot addition
		//
		//enum MultiplicativeOperator2:
		//
		//	mul="*" | div=":" | mod="%";
		public EnumRule getRule() { return rule; }

		//mul="*" | div=":" | mod="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//mul="*"
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_0() { return cMulEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMulAsteriskKeyword_0_0() { return cMulAsteriskKeyword_0_0; }

		//div=":"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_1() { return cDivEnumLiteralDeclaration_1; }

		//":"
		public Keyword getDivColonKeyword_1_0() { return cDivColonKeyword_1_0; }

		//mod="%"
		public EnumLiteralDeclaration getModEnumLiteralDeclaration_2() { return cModEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getModPercentSignKeyword_2_0() { return cModPercentSignKeyword_2_0; }
	}

	public class CombineOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CombineOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENoneKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDApostrophePlusSignApostropheKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTApostropheAsteriskApostropheKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMAXMaxKeyword_3_0 = (Keyword)cMAXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINMinKeyword_4_0 = (Keyword)cMINEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOROrKeyword_5_0 = (Keyword)cOREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAndKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHOSTHostKeyword_7_0 = (Keyword)cHOSTEnumLiteralDeclaration_7.eContents().get(0);
		
		////todo: pre(x) should return the same type of x
		//
		////PreValueExpression returns stext::Expression:
		//
		////	{PreValueExpression} 'pre' '(' value=FeatureCall ')';
		//
		/// ***************************************** COMBINE OPERATORS ************************************* * / enum
		//
		//CombineOperator:
		//
		//	NONE="\'none\'" | ADD="\'+\'" | MULT="\'*\'" | MAX="\'max\'" | MIN="\'min\'" | OR="\'or\'" | AND="\'and\'" |
		//
		//	HOST="\'host\'";
		public EnumRule getRule() { return rule; }

		//NONE="\'none\'" | ADD="\'+\'" | MULT="\'*\'" | MAX="\'max\'" | MIN="\'min\'" | OR="\'or\'" | AND="\'and\'" |
		//
		//HOST="\'host\'"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE="\'none\'"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"\'none\'"
		public Keyword getNONENoneKeyword_0_0() { return cNONENoneKeyword_0_0; }

		//ADD="\'+\'"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }

		//"\'+\'"
		public Keyword getADDApostrophePlusSignApostropheKeyword_1_0() { return cADDApostrophePlusSignApostropheKeyword_1_0; }

		//MULT="\'*\'"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }

		//"\'*\'"
		public Keyword getMULTApostropheAsteriskApostropheKeyword_2_0() { return cMULTApostropheAsteriskApostropheKeyword_2_0; }

		//MAX="\'max\'"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_3() { return cMAXEnumLiteralDeclaration_3; }

		//"\'max\'"
		public Keyword getMAXMaxKeyword_3_0() { return cMAXMaxKeyword_3_0; }

		//MIN="\'min\'"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_4() { return cMINEnumLiteralDeclaration_4; }

		//"\'min\'"
		public Keyword getMINMinKeyword_4_0() { return cMINMinKeyword_4_0; }

		//OR="\'or\'"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_5() { return cOREnumLiteralDeclaration_5; }

		//"\'or\'"
		public Keyword getOROrKeyword_5_0() { return cOROrKeyword_5_0; }

		//AND="\'and\'"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }

		//"\'and\'"
		public Keyword getANDAndKeyword_6_0() { return cANDAndKeyword_6_0; }

		//HOST="\'host\'"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_7() { return cHOSTEnumLiteralDeclaration_7; }

		//"\'host\'"
		public Keyword getHOSTHostKeyword_7_0() { return cHOSTHostKeyword_7_0; }
	}
	
	private StateScopeElements pStateScope;
	private DeclarationElements pDeclaration;
	private SignalDeclarationElements pSignalDeclaration;
	private SignalDefinitionElements pSignalDefinition;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableDefinitionElements pVariableDefinition;
	private OperationDefinitionElements pOperationDefinition;
	private LocalEntryReactionElements pLocalEntryReaction;
	private LocalDuringReactionElements pLocalDuringReaction;
	private LocalExitReactionElements pLocalExitReaction;
	private LocalSuspendReactionElements pLocalSuspendReaction;
	private LocalReactionTriggerElements pLocalReactionTrigger;
	private ReactionTriggerElements pReactionTrigger;
	private ReactionEffectElements pReactionEffect;
	private NumericalMultiplyDivideExpressionElements pNumericalMultiplyDivideExpression;
	private MultiplicativeOperator2Elements unknownRuleMultiplicativeOperator2;
	private ValReferenceExpressionElements pValReferenceExpression;
	private PreReferenceExpressionElements pPreReferenceExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private CombineOperatorElements unknownRuleCombineOperator;
	
	private final Grammar grammar;

	private STextGrammarAccess gaSText;

	@Inject
	public SynctextGrammarAccess(GrammarProvider grammarProvider,
		STextGrammarAccess gaSText) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSText = gaSText;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.yakindu.sccharts.model.stext.Synctext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public STextGrammarAccess getSTextGrammarAccess() {
		return gaSText;
	}

	
	/// *********************************** INTERFACE DECLARATION **************************************** * / ////defines the possible scopes for a state
	//
	//StateScope:
	//
	//	{SimpleScope} declarations+=Declaration*;
	public StateScopeElements getStateScopeAccess() {
		return (pStateScope != null) ? pStateScope : (pStateScope = new StateScopeElements());
	}
	
	public ParserRule getStateScopeRule() {
		return getStateScopeAccess().getRule();
	}

	/// * ---- declarations ----
	//
	//a definition is a top level element of a definition scope. * / Declaration returns sgraph::Declaration:
	//
	//	LocalEntryReaction | LocalDuringReaction | LocalExitReaction | LocalSuspendReaction | VariableDeclaration |
	//
	//	SignalDeclaration | OperationDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// ************************************************ / / *			 Signal Definition				* /
	//
	/// ************************************************ / SignalDeclaration returns sgraph::Event:
	//
	//	SignalDefinition;
	public SignalDeclarationElements getSignalDeclarationAccess() {
		return (pSignalDeclaration != null) ? pSignalDeclaration : (pSignalDeclaration = new SignalDeclarationElements());
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//SignalDefinition:
	//
	//	{EventDefinition} isInput?="input"? isOutput?="output"? "signal" name=ID (":" type=[types::Type|FQN] ("="
	//
	//	varInitialValue=Expression)? ("with" varCombineOperator=CombineOperator)?)? ";";
	public SignalDefinitionElements getSignalDefinitionAccess() {
		return (pSignalDefinition != null) ? pSignalDefinition : (pSignalDefinition = new SignalDefinitionElements());
	}
	
	public ParserRule getSignalDefinitionRule() {
		return getSignalDefinitionAccess().getRule();
	}

	/// ************************************************ / / *			 Variable Definition				* /
	//
	/// ************************************************ / // A dummy VariableDefinition declaration, which will be override by an other grammar 
	//
	////VariableDefinition:
	//
	////	{VariableDefinition} 'variable' name=ID ';';
	//
	//// CMOT changes, want to use VariableDefinitions from SyncText
	//
	//VariableDeclaration returns sgraph::Variable:
	//
	//	VariableDefinition;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableDefinition:
	//
	//	{VariableDefinition} isInput?="input"? isOutput?="output"? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
	//
	//	initialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";";
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	/// ************************************************ / / *			   	LocalReactions  		        * /
	//
	/// ************************************************ / OperationDefinition:
	//
	//	{OperationDefinition} "extern" functionType=[types::Type|FQN] name=XID "(" paramType=[types::Type|FQN] ")" ";";
	public OperationDefinitionElements getOperationDefinitionAccess() {
		return (pOperationDefinition != null) ? pOperationDefinition : (pOperationDefinition = new OperationDefinitionElements());
	}
	
	public ParserRule getOperationDefinitionRule() {
		return getOperationDefinitionAccess().getRule();
	}

	//LocalEntryReaction:
	//
	//	{LocalEntryReaction} "entry" ":" trigger=ReactionTrigger? ("/" effect=ReactionEffect) ";";
	public LocalEntryReactionElements getLocalEntryReactionAccess() {
		return (pLocalEntryReaction != null) ? pLocalEntryReaction : (pLocalEntryReaction = new LocalEntryReactionElements());
	}
	
	public ParserRule getLocalEntryReactionRule() {
		return getLocalEntryReactionAccess().getRule();
	}

	//LocalDuringReaction:
	//
	//	{LocalDuringReaction} isImmediate?="immediate"? "during" ":" trigger=ReactionTrigger? "/" effect=ReactionEffect ";";
	public LocalDuringReactionElements getLocalDuringReactionAccess() {
		return (pLocalDuringReaction != null) ? pLocalDuringReaction : (pLocalDuringReaction = new LocalDuringReactionElements());
	}
	
	public ParserRule getLocalDuringReactionRule() {
		return getLocalDuringReactionAccess().getRule();
	}

	//LocalExitReaction:
	//
	//	{LocalExitReaction} "exit" ":" trigger=ReactionTrigger? ("/" effect=ReactionEffect) ";";
	public LocalExitReactionElements getLocalExitReactionAccess() {
		return (pLocalExitReaction != null) ? pLocalExitReaction : (pLocalExitReaction = new LocalExitReactionElements());
	}
	
	public ParserRule getLocalExitReactionRule() {
		return getLocalExitReactionAccess().getRule();
	}

	//LocalSuspendReaction:
	//
	//	{LocalSuspendReaction} isImmediate?="immediate"? "suspend" ":" trigger=ReactionTrigger? ";";
	public LocalSuspendReactionElements getLocalSuspendReactionAccess() {
		return (pLocalSuspendReaction != null) ? pLocalSuspendReaction : (pLocalSuspendReaction = new LocalSuspendReactionElements());
	}
	
	public ParserRule getLocalSuspendReactionRule() {
		return getLocalSuspendReactionAccess().getRule();
	}

	////{Declaration}    
	//
	/// ******************************************** TRANSITION ***************************************** * / // The ReactionTrigger is a Trigger and has an Expression, 
	//
	//// an optional delay and isImmediate option represented with a '#'
	//
	//// cmot change: Get rid of extra brackets
	//
	//LocalReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} delay=INT? expression=Expression?;
	public LocalReactionTriggerElements getLocalReactionTriggerAccess() {
		return (pLocalReactionTrigger != null) ? pLocalReactionTrigger : (pLocalReactionTrigger = new LocalReactionTriggerElements());
	}
	
	public ParserRule getLocalReactionTriggerRule() {
		return getLocalReactionTriggerAccess().getRule();
	}

	//ReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} (labelPriority=INT ":")? delay=INT? expression=Expression?;
	public ReactionTriggerElements getReactionTriggerAccess() {
		return (pReactionTrigger != null) ? pReactionTrigger : (pReactionTrigger = new ReactionTriggerElements());
	}
	
	public ParserRule getReactionTriggerRule() {
		return getReactionTriggerAccess().getRule();
	}

	//// Original code by wah
	//
	////{ReactionTrigger} (labelPriority=INT':')? (delay=INT)? ((trigger=RegularEventSpec);
	//
	////| ('(' guardExpression=Expression ')'))?;
	//
	//// The ReactionEffect is an Effect. 
	//
	//// (';')?;
	//
	//ReactionEffect returns sgraph::Effect:
	//
	//	{ReactionEffect} actions+=Expression (";" actions+=Expression)*;
	public ReactionEffectElements getReactionEffectAccess() {
		return (pReactionEffect != null) ? pReactionEffect : (pReactionEffect = new ReactionEffectElements());
	}
	
	public ParserRule getReactionEffectRule() {
		return getReactionEffectAccess().getRule();
	}

	/// ***************************************** Expressions ******************************************* * / // Override the stext::NumericalMultiplyDivideExpression
	//
	//// cmot addition: goal is to have some other divisor ":" instead of "/", because "/" is used to separate
	//
	//// trigger / effect.
	//
	//NumericalMultiplyDivideExpression returns stext::Expression:
	//
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator2
	//
	//	rightOperand=NumericalUnaryExpression)*;
	public NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return (pNumericalMultiplyDivideExpression != null) ? pNumericalMultiplyDivideExpression : (pNumericalMultiplyDivideExpression = new NumericalMultiplyDivideExpressionElements());
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//// New MultiplicativeOperator2 (replacing MultiplicativeOperator with ":" instead of "/")    
	//
	//// cmot addition
	//
	//enum MultiplicativeOperator2:
	//
	//	mul="*" | div=":" | mod="%";
	public MultiplicativeOperator2Elements getMultiplicativeOperator2Access() {
		return (unknownRuleMultiplicativeOperator2 != null) ? unknownRuleMultiplicativeOperator2 : (unknownRuleMultiplicativeOperator2 = new MultiplicativeOperator2Elements());
	}
	
	public EnumRule getMultiplicativeOperator2Rule() {
		return getMultiplicativeOperator2Access().getRule();
	}

	/// ***************************************** Expressions ******************************************* * / // Override the stext::EventValueReferenceExpression
	//
	//// override 'valueof()' with 'val()', allow val(pre())    
	//
	//// cmot change
	//
	//ValReferenceExpression returns stext::Expression:
	//
	//	{ValReferenceExpression} "val" "(" expression=(FeatureCall | PreReferenceExpression) ")";
	public ValReferenceExpressionElements getValReferenceExpressionAccess() {
		return (pValReferenceExpression != null) ? pValReferenceExpression : (pValReferenceExpression = new ValReferenceExpressionElements());
	}
	
	public ParserRule getValReferenceExpressionRule() {
		return getValReferenceExpressionAccess().getRule();
	}

	//// Additional pre(), like val(), allow pre(val()) and allow pre(pre())    
	//
	//// cmot addition
	//
	//PreReferenceExpression returns stext::Expression:
	//
	//	{PreReferenceExpression} "pre" "(" expression=(FeatureCall | ValReferenceExpression | PreReferenceExpression) ")";
	public PreReferenceExpressionElements getPreReferenceExpressionAccess() {
		return (pPreReferenceExpression != null) ? pPreReferenceExpression : (pPreReferenceExpression = new PreReferenceExpressionElements());
	}
	
	public ParserRule getPreReferenceExpressionRule() {
		return getPreReferenceExpressionAccess().getRule();
	}

	/// ***************************************** Expressions ******************************************* * / // Override the stext::PrimaryExpression
	//
	//// remove the ActiveStateReferenceExpression and the EventValueReferenceExpression
	//
	//// and add PreReferenceExpression that returns the previous tick instance of a variable. 
	//
	//PrimaryExpression returns stext::Expression:
	//
	//	PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | ValReferenceExpression |
	//
	//	PreReferenceExpression | ParenthesizedExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	////todo: pre(x) should return the same type of x
	//
	////PreValueExpression returns stext::Expression:
	//
	////	{PreValueExpression} 'pre' '(' value=FeatureCall ')';
	//
	/// ***************************************** COMBINE OPERATORS ************************************* * / enum
	//
	//CombineOperator:
	//
	//	NONE="\'none\'" | ADD="\'+\'" | MULT="\'*\'" | MAX="\'max\'" | MIN="\'min\'" | OR="\'or\'" | AND="\'and\'" |
	//
	//	HOST="\'host\'";
	public CombineOperatorElements getCombineOperatorAccess() {
		return (unknownRuleCombineOperator != null) ? unknownRuleCombineOperator : (unknownRuleCombineOperator = new CombineOperatorElements());
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	/// * ---- root rules ----
	//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
	//into a single grammar. 
	// * /
	//
	//Root:
	//
	//	roots+=DefRoot*;
	public STextGrammarAccess.RootElements getRootAccess() {
		return gaSText.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//DefRoot:
	//
	//	StatechartRoot | StateRoot | TransitionRoot;
	public STextGrammarAccess.DefRootElements getDefRootAccess() {
		return gaSText.getDefRootAccess();
	}
	
	public ParserRule getDefRootRule() {
		return getDefRootAccess().getRule();
	}

	//StatechartRoot:
	//
	//	"@@statechart@@" def=StatechartSpecification;
	public STextGrammarAccess.StatechartRootElements getStatechartRootAccess() {
		return gaSText.getStatechartRootAccess();
	}
	
	public ParserRule getStatechartRootRule() {
		return getStatechartRootAccess().getRule();
	}

	//StateRoot:
	//
	//	"@@state@@" def=StateSpecification;
	public STextGrammarAccess.StateRootElements getStateRootAccess() {
		return gaSText.getStateRootAccess();
	}
	
	public ParserRule getStateRootRule() {
		return getStateRootAccess().getRule();
	}

	//TransitionRoot:
	//
	//	"@@transition@@" def=TransitionSpecification;
	public STextGrammarAccess.TransitionRootElements getTransitionRootAccess() {
		return gaSText.getTransitionRootAccess();
	}
	
	public ParserRule getTransitionRootRule() {
		return getTransitionRootAccess().getRule();
	}

	/// * ---- start rules ----
	//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
	// * /
	//
	//ScopedElement returns sgraph::ScopedElement:
	//
	//	StatechartSpecification;
	public STextGrammarAccess.ScopedElementElements getScopedElementAccess() {
		return gaSText.getScopedElementAccess();
	}
	
	public ParserRule getScopedElementRule() {
		return getScopedElementAccess().getRule();
	}

	//StatechartSpecification:
	//
	//	{StatechartSpecification} ("namespace" namespace=FQN)? scopes+=StatechartScope*;
	public STextGrammarAccess.StatechartSpecificationElements getStatechartSpecificationAccess() {
		return gaSText.getStatechartSpecificationAccess();
	}
	
	public ParserRule getStatechartSpecificationRule() {
		return getStatechartSpecificationAccess().getRule();
	}

	//StateSpecification:
	//
	//	scope=StateScope;
	public STextGrammarAccess.StateSpecificationElements getStateSpecificationAccess() {
		return gaSText.getStateSpecificationAccess();
	}
	
	public ParserRule getStateSpecificationRule() {
		return getStateSpecificationAccess().getRule();
	}

	//TransitionSpecification:
	//
	//	reaction=TransitionReaction;
	public STextGrammarAccess.TransitionSpecificationElements getTransitionSpecificationAccess() {
		return gaSText.getTransitionSpecificationAccess();
	}
	
	public ParserRule getTransitionSpecificationRule() {
		return getTransitionSpecificationAccess().getRule();
	}

	/// * ---- scope rules ----
	//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
	// * /
	//
	//Scope returns sgraph::Scope:
	//
	//	StateScope | StatechartScope;
	public STextGrammarAccess.ScopeElements getScopeAccess() {
		return gaSText.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// defines the poosible scopes for statecharts
	// StatechartScope:
	//
	//	InterfaceScope | InternalScope;
	public STextGrammarAccess.StatechartScopeElements getStatechartScopeAccess() {
		return gaSText.getStatechartScopeAccess();
	}
	
	public ParserRule getStatechartScopeRule() {
		return getStatechartScopeAccess().getRule();
	}

	//NamedInterfaceScope returns base::NamedElement:
	//
	//	InterfaceScope;
	public STextGrammarAccess.NamedInterfaceScopeElements getNamedInterfaceScopeAccess() {
		return gaSText.getNamedInterfaceScopeAccess();
	}
	
	public ParserRule getNamedInterfaceScopeRule() {
		return getNamedInterfaceScopeAccess().getRule();
	}

	//InterfaceScope:
	//
	//	{InterfaceScope} "interface" name=XID? ":" declarations+=(EventDeclarartion //		| Entrypoint 
	// //		| Exitpoint
	// |
	//
	//	VariableDeclaration | OperationDeclaration)*;
	public STextGrammarAccess.InterfaceScopeElements getInterfaceScopeAccess() {
		return gaSText.getInterfaceScopeAccess();
	}
	
	public ParserRule getInterfaceScopeRule() {
		return getInterfaceScopeAccess().getRule();
	}

	//InternalScope:
	//
	//	{InternalScope} "internal" ":" declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration |
	//
	//	LocalReaction)*;
	public STextGrammarAccess.InternalScopeElements getInternalScopeAccess() {
		return gaSText.getInternalScopeAccess();
	}
	
	public ParserRule getInternalScopeRule() {
		return getInternalScopeAccess().getRule();
	}

	/// * ---- event definition ---- * / EventDeclarartion returns sgraph::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventDeclarartionElements getEventDeclarartionAccess() {
		return gaSText.getEventDeclarartionAccess();
	}
	
	public ParserRule getEventDeclarartionRule() {
		return getEventDeclarartionAccess().getRule();
	}

	//EventFeature returns types::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventFeatureElements getEventFeatureAccess() {
		return gaSText.getEventFeatureAccess();
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//// (derivation=EventDerivation)?;
	// EventDefinition:
	//
	//	direction=Direction? "event" name=XID (":" type=[types::Type|FQN])?;
	public STextGrammarAccess.EventDefinitionElements getEventDefinitionAccess() {
		return gaSText.getEventDefinitionAccess();
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	////EventDerivation:
	// //	 (':' value=Expression)?;
	// enum Direction:
	//
	//	LOCAL="local" | IN="in" | OUT="out";
	public STextGrammarAccess.DirectionElements getDirectionAccess() {
		return gaSText.getDirectionAccess();
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	//VariableFeature returns types::Property:
	//
	//	VariableDefinition;
	public STextGrammarAccess.VariableFeatureElements getVariableFeatureAccess() {
		return gaSText.getVariableFeatureAccess();
	}
	
	public ParserRule getVariableFeatureRule() {
		return getVariableFeatureAccess().getRule();
	}

	/// * ---- operation definition ---- * / OperationDeclaration returns sgraph::Declaration:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationDeclarationElements getOperationDeclarationAccess() {
		return gaSText.getOperationDeclarationAccess();
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}

	//OperationFeature returns types::Operation:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationFeatureElements getOperationFeatureAccess() {
		return gaSText.getOperationFeatureAccess();
	}
	
	public ParserRule getOperationFeatureRule() {
		return getOperationFeatureAccess().getRule();
	}

	//Parameter returns types::Parameter:
	//
	//	name=XID ":" type=[types::Type|FQN];
	public STextGrammarAccess.ParameterElements getParameterAccess() {
		return gaSText.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// * ---- entrypoint definition ---- * / //Entrypoint returns sgraph::Declaration:
	// //	{Entrypoint} 'entrypoint' name=XID;
	//
	//
	/// * ---- exitpoint definition ---- * / //Exitpoint returns sgraph::Declaration:
	// //	{Exitpoint} 'exitpoint' name=XID;
	//
	//
	/// * ---- Datatype rules ---- * / XID:
	//
	//	ID | "namespace" | "interface" | "internal" | "event" | "local" | "in" | "out" | "var" | "readonly" | "external" |
	//
	//	"operation" | "default" | "else" | "entry" | "exit" | "always" | "oncycle" | "raise" | "valueof" | "active";
	public STextGrammarAccess.XIDElements getXIDAccess() {
		return gaSText.getXIDAccess();
	}
	
	public ParserRule getXIDRule() {
		return getXIDAccess().getRule();
	}

	//FQN:
	//
	//	XID ("." XID)*;
	public STextGrammarAccess.FQNElements getFQNAccess() {
		return gaSText.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	/// * ---- reaction rules ----
	//Define the structure of reactions that are central for describing the statecharts behavior. 
	// * /
	//
	//Reaction returns sgraph::Reaction:
	//
	//	LocalReaction | TransitionReaction;
	public STextGrammarAccess.ReactionElements getReactionAccess() {
		return gaSText.getReactionAccess();
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//LocalReaction:
	//
	//	trigger=ReactionTrigger => ("/" effect=ReactionEffect);
	public STextGrammarAccess.LocalReactionElements getLocalReactionAccess() {
		return gaSText.getLocalReactionAccess();
	}
	
	public ParserRule getLocalReactionRule() {
		return getLocalReactionAccess().getRule();
	}

	//TransitionReaction:
	//
	//	{TransitionReaction} trigger=StextTrigger? ("/" effect=ReactionEffect)? ("#" properties+=TransitionProperty*)?;
	public STextGrammarAccess.TransitionReactionElements getTransitionReactionAccess() {
		return gaSText.getTransitionReactionAccess();
	}
	
	public ParserRule getTransitionReactionRule() {
		return getTransitionReactionAccess().getRule();
	}

	//StextTrigger returns sgraph::Trigger:
	//
	//	ReactionTrigger | DefaultTrigger;
	public STextGrammarAccess.StextTriggerElements getStextTriggerAccess() {
		return gaSText.getStextTriggerAccess();
	}
	
	public ParserRule getStextTriggerRule() {
		return getStextTriggerAccess().getRule();
	}

	//DefaultTrigger returns sgraph::Trigger:
	//
	//	{DefaultTrigger} ("default" | "else");
	public STextGrammarAccess.DefaultTriggerElements getDefaultTriggerAccess() {
		return gaSText.getDefaultTriggerAccess();
	}
	
	public ParserRule getDefaultTriggerRule() {
		return getDefaultTriggerAccess().getRule();
	}

	//TransitionProperty returns sgraph::ReactionProperty:
	//
	//	EntryPointSpec | ExitPointSpec;
	public STextGrammarAccess.TransitionPropertyElements getTransitionPropertyAccess() {
		return gaSText.getTransitionPropertyAccess();
	}
	
	public ParserRule getTransitionPropertyRule() {
		return getTransitionPropertyAccess().getRule();
	}

	//EntryPointSpec:
	//
	//	">" entrypoint=ID;
	public STextGrammarAccess.EntryPointSpecElements getEntryPointSpecAccess() {
		return gaSText.getEntryPointSpecAccess();
	}
	
	public ParserRule getEntryPointSpecRule() {
		return getEntryPointSpecAccess().getRule();
	}

	//ExitPointSpec:
	//
	//	exitpoint=ID ">";
	public STextGrammarAccess.ExitPointSpecElements getExitPointSpecAccess() {
		return gaSText.getExitPointSpecAccess();
	}
	
	public ParserRule getExitPointSpecRule() {
		return getExitPointSpecAccess().getRule();
	}

	//EventSpec:
	//
	//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
	public STextGrammarAccess.EventSpecElements getEventSpecAccess() {
		return gaSText.getEventSpecAccess();
	}
	
	public ParserRule getEventSpecRule() {
		return getEventSpecAccess().getRule();
	}

	//RegularEventSpec:
	//
	//	event=FeatureCall;
	public STextGrammarAccess.RegularEventSpecElements getRegularEventSpecAccess() {
		return gaSText.getRegularEventSpecAccess();
	}
	
	public ParserRule getRegularEventSpecRule() {
		return getRegularEventSpecAccess().getRule();
	}

	//// TODO: redefine after trigger - we need to use it with clocks
	// TimeEventSpec:
	//
	//	type=TimeEventType value=ConditionalExpression unit=TimeUnit;
	public STextGrammarAccess.TimeEventSpecElements getTimeEventSpecAccess() {
		return gaSText.getTimeEventSpecAccess();
	}
	
	public ParserRule getTimeEventSpecRule() {
		return getTimeEventSpecAccess().getRule();
	}

	//enum TimeEventType:
	//
	//	after | every;
	public STextGrammarAccess.TimeEventTypeElements getTimeEventTypeAccess() {
		return gaSText.getTimeEventTypeAccess();
	}
	
	public EnumRule getTimeEventTypeRule() {
		return getTimeEventTypeAccess().getRule();
	}

	//BuiltinEventSpec:
	//
	//	EntryEvent | ExitEvent | AlwaysEvent;
	public STextGrammarAccess.BuiltinEventSpecElements getBuiltinEventSpecAccess() {
		return gaSText.getBuiltinEventSpecAccess();
	}
	
	public ParserRule getBuiltinEventSpecRule() {
		return getBuiltinEventSpecAccess().getRule();
	}

	//EntryEvent:
	//
	//	{EntryEvent} "entry";
	public STextGrammarAccess.EntryEventElements getEntryEventAccess() {
		return gaSText.getEntryEventAccess();
	}
	
	public ParserRule getEntryEventRule() {
		return getEntryEventAccess().getRule();
	}

	//ExitEvent:
	//
	//	{ExitEvent} "exit";
	public STextGrammarAccess.ExitEventElements getExitEventAccess() {
		return gaSText.getExitEventAccess();
	}
	
	public ParserRule getExitEventRule() {
		return getExitEventAccess().getRule();
	}

	//AlwaysEvent:
	//
	//	{AlwaysEvent} ("always" | "oncycle");
	public STextGrammarAccess.AlwaysEventElements getAlwaysEventAccess() {
		return gaSText.getAlwaysEventAccess();
	}
	
	public ParserRule getAlwaysEventRule() {
		return getAlwaysEventAccess().getRule();
	}

	//// ****************
	// // Expression Grammar
	// // ****************
	// EventRaisingExpression returns Expression:
	//
	//	{EventRaisingExpression} "raise" event=FeatureCall (":" value=Expression)?;
	public STextGrammarAccess.EventRaisingExpressionElements getEventRaisingExpressionAccess() {
		return gaSText.getEventRaisingExpressionAccess();
	}
	
	public ParserRule getEventRaisingExpressionRule() {
		return getEventRaisingExpressionAccess().getRule();
	}

	//StatementExpression returns sgraph::Statement:
	//
	//	Expression;
	public STextGrammarAccess.StatementExpressionElements getStatementExpressionAccess() {
		return gaSText.getStatementExpressionAccess();
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}

	//Expression:
	//
	//	AssignmentExpression;
	public STextGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaSText.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentExpression returns Expression:
	//
	//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
	//
	//	expression=ConditionalExpression)*;
	public STextGrammarAccess.AssignmentExpressionElements getAssignmentExpressionAccess() {
		return gaSText.getAssignmentExpressionAccess();
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//ConditionalExpression returns Expression:
	//
	//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
	//
	//	falseCase=LogicalOrExpression)?;
	public STextGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaSText.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public STextGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaSText.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public STextGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaSText.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//
	//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
	public STextGrammarAccess.LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return gaSText.getLogicalNotExpressionAccess();
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//BitwiseXorExpression returns Expression:
	//
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
	public STextGrammarAccess.BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return gaSText.getBitwiseXorExpressionAccess();
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseOrExpression returns Expression:
	//
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
	public STextGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaSText.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseAndExpression returns Expression:
	//
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
	public STextGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaSText.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//
	//	rightOperand=ShiftExpression)*;
	public STextGrammarAccess.LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return gaSText.getLogicalRelationExpressionAccess();
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//ShiftExpression returns Expression:
	//
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//
	//	rightOperand=NumericalAddSubtractExpression)*;
	public STextGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaSText.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public STextGrammarAccess.NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return gaSText.getNumericalAddSubtractExpressionAccess();
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public STextGrammarAccess.NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return gaSText.getNumericalUnaryExpressionAccess();
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//
	//	{PrimitiveValueExpression} value=Literal;
	public STextGrammarAccess.PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return gaSText.getPrimitiveValueExpressionAccess();
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//
	//	ElementReferenceExpression ({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="("
	//
	//	(args+=Expression ("," args+=Expression)*)? ")")?)*;
	public STextGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaSText.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//ElementReferenceExpression returns Expression:
	//
	//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
	//
	//	args+=Expression)*)? ")")?;
	public STextGrammarAccess.ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return gaSText.getElementReferenceExpressionAccess();
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}

	//EventValueReferenceExpression returns Expression:
	//
	//	{EventValueReferenceExpression} "valueof" "(" value=FeatureCall ")";
	public STextGrammarAccess.EventValueReferenceExpressionElements getEventValueReferenceExpressionAccess() {
		return gaSText.getEventValueReferenceExpressionAccess();
	}
	
	public ParserRule getEventValueReferenceExpressionRule() {
		return getEventValueReferenceExpressionAccess().getRule();
	}

	//ActiveStateReferenceExpression returns Expression:
	//
	//	{ActiveStateReferenceExpression} "active" "(" value=[sgraph::State|FQN] ")";
	public STextGrammarAccess.ActiveStateReferenceExpressionElements getActiveStateReferenceExpressionAccess() {
		return gaSText.getActiveStateReferenceExpressionAccess();
	}
	
	public ParserRule getActiveStateReferenceExpressionRule() {
		return getActiveStateReferenceExpressionAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//
	//	{ParenthesizedExpression} "(" expression=Expression ")";
	public STextGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaSText.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal:
	//
	//	BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral;
	public STextGrammarAccess.LiteralElements getLiteralAccess() {
		return gaSText.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BoolLiteral:
	//
	//	{BoolLiteral} value=BOOL;
	public STextGrammarAccess.BoolLiteralElements getBoolLiteralAccess() {
		return gaSText.getBoolLiteralAccess();
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//IntLiteral:
	//
	//	{IntLiteral} value=INT;
	public STextGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaSText.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//RealLiteral:
	//
	//	{RealLiteral} value=FLOAT;
	public STextGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaSText.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//HexLiteral:
	//
	//	{HexLiteral} value=HEX;
	public STextGrammarAccess.HexLiteralElements getHexLiteralAccess() {
		return gaSText.getHexLiteralAccess();
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}

	//StringLiteral:
	//
	//	{StringLiteral} value=STRING;
	public STextGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaSText.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//enum AssignmentOperator:
	//
	//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
	//
	//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
	public STextGrammarAccess.AssignmentOperatorElements getAssignmentOperatorAccess() {
		return gaSText.getAssignmentOperatorAccess();
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//enum ShiftOperator:
	//
	//	left="<<" | right=">>";
	public STextGrammarAccess.ShiftOperatorElements getShiftOperatorAccess() {
		return gaSText.getShiftOperatorAccess();
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//enum AdditiveOperator:
	//
	//	plus="+" | minus="-";
	public STextGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaSText.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//
	//	mul="*" | div="/" | mod="%";
	public STextGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaSText.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//
	//	positive="+" | negative="-" | complement="~";
	public STextGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaSText.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public STextGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaSText.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum TimeUnit:
	//
	//	second="s" | millisecond="ms" | microsecond="us" | nanosecond="ns";
	public STextGrammarAccess.TimeUnitElements getTimeUnitAccess() {
		return gaSText.getTimeUnitAccess();
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//terminal BOOL returns ecore::EBoolean:
	//
	//	"true" | "false" | "yes" | "no";
	public TerminalRule getBOOLRule() {
		return gaSText.getBOOLRule();
	} 

	//terminal HEX returns ecore::EInt:
	//
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return gaSText.getHEXRule();
	} 

	//terminal FLOAT returns ecore::EFloat:
	//
	//	(INT "." INT) ("e" ("-" | "+") INT)? ("f" | "F" | "d" | "D")?;
	public TerminalRule getFLOATRule() {
		return gaSText.getFLOATRule();
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSText.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSText.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSText.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSText.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSText.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSText.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSText.getANY_OTHERRule();
	} 
}
